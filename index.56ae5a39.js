// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"2rAXy":[function(require,module,exports) {
var Refresh = require('react-refresh/runtime');
Refresh.injectIntoGlobalHook(window);
window.$RefreshReg$ = function() {
};
window.$RefreshSig$ = function() {
    return function(type) {
        return type;
    };
};

},{"react-refresh/runtime":"fNmB3"}],"fNmB3":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-refresh-runtime.development.js');

},{"./cjs/react-refresh-runtime.development.js":"1CJiQ"}],"1CJiQ":[function(require,module,exports) {
/** @license React v0.9.0
 * react-refresh-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // We never remove these associations.
    // It's OK to reference families, but use WeakMap/Set for types.
    var allFamiliesByID = new Map();
    var allFamiliesByType = new PossiblyWeakMap();
    var allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families
    // that have actually been edited here. This keeps checks fast.
    // $FlowIssue
    var updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.
    // It is an array of [Family, NextType] tuples.
    var pendingUpdates = []; // This is injected by the renderer via DevTools global hook.
    var helpersByRendererID = new Map();
    var helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.
    var mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.
    var failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.
    // It needs to be weak because we do this even for roots that failed to mount.
    // If there is no WeakMap, we won't attempt to do retrying.
    // $FlowIssue
    var rootElements = typeof WeakMap === 'function' ? new WeakMap() : null;
    var isPerformingRefresh = false;
    function computeFullKey(signature) {
        if (signature.fullKey !== null) return signature.fullKey;
        var fullKey = signature.ownKey;
        var hooks;
        try {
            hooks = signature.getCustomHooks();
        } catch (err) {
            // This can happen in an edge case, e.g. if expression like Foo.useSomething
            // depends on Foo which is lazily initialized during rendering.
            // In that case just assume we'll have to remount.
            signature.forceReset = true;
            signature.fullKey = fullKey;
            return fullKey;
        }
        for(var i = 0; i < hooks.length; i++){
            var hook = hooks[i];
            if (typeof hook !== 'function') {
                // Something's wrong. Assume we need to remount.
                signature.forceReset = true;
                signature.fullKey = fullKey;
                return fullKey;
            }
            var nestedHookSignature = allSignaturesByType.get(hook);
            if (nestedHookSignature === undefined) continue;
            var nestedHookKey = computeFullKey(nestedHookSignature);
            if (nestedHookSignature.forceReset) signature.forceReset = true;
            fullKey += '\n---\n' + nestedHookKey;
        }
        signature.fullKey = fullKey;
        return fullKey;
    }
    function haveEqualSignatures(prevType, nextType) {
        var prevSignature = allSignaturesByType.get(prevType);
        var nextSignature = allSignaturesByType.get(nextType);
        if (prevSignature === undefined && nextSignature === undefined) return true;
        if (prevSignature === undefined || nextSignature === undefined) return false;
        if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) return false;
        if (nextSignature.forceReset) return false;
        return true;
    }
    function isReactClass(type) {
        return type.prototype && type.prototype.isReactComponent;
    }
    function canPreserveStateBetween(prevType, nextType) {
        if (isReactClass(prevType) || isReactClass(nextType)) return false;
        if (haveEqualSignatures(prevType, nextType)) return true;
        return false;
    }
    function resolveFamily(type) {
        // Only check updated types to keep lookups fast.
        return updatedFamiliesByType.get(type);
    } // If we didn't care about IE11, we could use new Map/Set(iterable).
    function cloneMap(map) {
        var clone = new Map();
        map.forEach(function(value, key) {
            clone.set(key, value);
        });
        return clone;
    }
    function cloneSet(set) {
        var clone = new Set();
        set.forEach(function(value) {
            clone.add(value);
        });
        return clone;
    }
    function performReactRefresh() {
        if (pendingUpdates.length === 0) return null;
        if (isPerformingRefresh) return null;
        isPerformingRefresh = true;
        try {
            var staleFamilies = new Set();
            var updatedFamilies = new Set();
            var updates = pendingUpdates;
            pendingUpdates = [];
            updates.forEach(function(_ref) {
                var family = _ref[0], nextType = _ref[1];
                // Now that we got a real edit, we can create associations
                // that will be read by the React reconciler.
                var prevType = family.current;
                updatedFamiliesByType.set(prevType, family);
                updatedFamiliesByType.set(nextType, family);
                family.current = nextType; // Determine whether this should be a re-render or a re-mount.
                if (canPreserveStateBetween(prevType, nextType)) updatedFamilies.add(family);
                else staleFamilies.add(family);
            }); // TODO: rename these fields to something more meaningful.
            var update = {
                updatedFamilies: updatedFamilies,
                // Families that will re-render preserving state
                staleFamilies: staleFamilies // Families that will be remounted
            };
            helpersByRendererID.forEach(function(helpers) {
                // Even if there are no roots, set the handler on first update.
                // This ensures that if *new* roots are mounted, they'll use the resolve handler.
                helpers.setRefreshHandler(resolveFamily);
            });
            var didError = false;
            var firstError = null; // We snapshot maps and sets that are mutated during commits.
            // If we don't do this, there is a risk they will be mutated while
            // we iterate over them. For example, trying to recover a failed root
            // may cause another root to be added to the failed list -- an infinite loop.
            var failedRootsSnapshot = cloneSet(failedRoots);
            var mountedRootsSnapshot = cloneSet(mountedRoots);
            var helpersByRootSnapshot = cloneMap(helpersByRoot);
            failedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                failedRoots.has(root);
                if (rootElements === null) return;
                if (!rootElements.has(root)) return;
                var element = rootElements.get(root);
                try {
                    helpers.scheduleRoot(root, element);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            mountedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                mountedRoots.has(root);
                try {
                    helpers.scheduleRefresh(root, update);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            if (didError) throw firstError;
            return update;
        } finally{
            isPerformingRefresh = false;
        }
    }
    function register(type, id) {
        if (type === null) return;
        if (typeof type !== 'function' && typeof type !== 'object') return;
         // This can happen in an edge case, e.g. if we register
        // return value of a HOC but it returns a cached component.
        // Ignore anything but the first registration for each type.
        if (allFamiliesByType.has(type)) return;
         // Create family or remember to update it.
        // None of this bookkeeping affects reconciliation
        // until the first performReactRefresh() call above.
        var family = allFamiliesByID.get(id);
        if (family === undefined) {
            family = {
                current: type
            };
            allFamiliesByID.set(id, family);
        } else pendingUpdates.push([
            family,
            type
        ]);
        allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.
        if (typeof type === 'object' && type !== null) switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                register(type.render, id + '$render');
                break;
            case REACT_MEMO_TYPE:
                register(type.type, id + '$type');
                break;
        }
    }
    function setSignature(type, key) {
        var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
        allSignaturesByType.set(type, {
            forceReset: forceReset,
            ownKey: key,
            fullKey: null,
            getCustomHooks: getCustomHooks || function() {
                return [];
            }
        });
    } // This is lazily called during first render for a type.
    // It captures Hook list at that time so inline requires don't break comparisons.
    function collectCustomHooksForSignature(type) {
        var signature = allSignaturesByType.get(type);
        if (signature !== undefined) computeFullKey(signature);
    }
    function getFamilyByID(id) {
        return allFamiliesByID.get(id);
    }
    function getFamilyByType(type) {
        return allFamiliesByType.get(type);
    }
    function findAffectedHostInstances(families) {
        var affectedInstances = new Set();
        mountedRoots.forEach(function(root) {
            var helpers = helpersByRoot.get(root);
            if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
            var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
            instancesForRoot.forEach(function(inst) {
                affectedInstances.add(inst);
            });
        });
        return affectedInstances;
    }
    function injectIntoGlobalHook(globalObject) {
        // For React Native, the global hook will be set up by require('react-devtools-core').
        // That code will run before us. So we need to monkeypatch functions on existing hook.
        // For React Web, the global hook will be set up by the extension.
        // This will also run before us.
        var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook === undefined) {
            // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
            // Note that in this case it's important that renderer code runs *after* this method call.
            // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
            var nextID = 0;
            globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
                renderers: new Map(),
                supportsFiber: true,
                inject: function(injected) {
                    return nextID++;
                },
                onScheduleFiberRoot: function(id, root, children) {
                },
                onCommitFiberRoot: function(id, root, maybePriorityLevel, didError) {
                },
                onCommitFiberUnmount: function() {
                }
            };
        } // Here, we just want to get a reference to scheduleRefresh.
        var oldInject = hook.inject;
        hook.inject = function(injected) {
            var id = oldInject.apply(this, arguments);
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
            return id;
        }; // Do the same for any already injected roots.
        // This is useful if ReactDOM has already been initialized.
        // https://github.com/facebook/react/issues/17626
        hook.renderers.forEach(function(injected, id) {
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
        }); // We also want to track currently mounted roots.
        var oldOnCommitFiberRoot = hook.onCommitFiberRoot;
        var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function() {
        };
        hook.onScheduleFiberRoot = function(id, root, children) {
            if (!isPerformingRefresh) {
                // If it was intentionally scheduled, don't attempt to restore.
                // This includes intentionally scheduled unmounts.
                failedRoots.delete(root);
                if (rootElements !== null) rootElements.set(root, children);
            }
            return oldOnScheduleFiberRoot.apply(this, arguments);
        };
        hook.onCommitFiberRoot = function(id, root, maybePriorityLevel, didError) {
            var helpers = helpersByRendererID.get(id);
            if (helpers === undefined) return;
            helpersByRoot.set(root, helpers);
            var current = root.current;
            var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.
            // This logic is copy-pasted from similar logic in the DevTools backend.
            // If this breaks with some refactoring, you'll want to update DevTools too.
            if (alternate !== null) {
                var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
                var isMounted = current.memoizedState != null && current.memoizedState.element != null;
                if (!wasMounted && isMounted) {
                    // Mount a new root.
                    mountedRoots.add(root);
                    failedRoots.delete(root);
                } else if (wasMounted && isMounted) ;
                else if (wasMounted && !isMounted) {
                    // Unmount an existing root.
                    mountedRoots.delete(root);
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                    else helpersByRoot.delete(root);
                } else if (!wasMounted && !isMounted) {
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                }
            } else // Mount a new root.
            mountedRoots.add(root);
            return oldOnCommitFiberRoot.apply(this, arguments);
        };
    }
    function hasUnrecoverableErrors() {
        // TODO: delete this after removing dependency in RN.
        return false;
    } // Exposed for testing.
    function _getMountedRootCount() {
        return mountedRoots.size;
    } // This is a wrapper over more primitive functions for setting signature.
    // Signatures let us decide whether the Hook order has changed on refresh.
    //
    // This function is intended to be used as a transform target, e.g.:
    // var _s = createSignatureFunctionForTransform()
    //
    // function Hello() {
    //   const [foo, setFoo] = useState(0);
    //   const value = useCustomHook();
    //   _s(); /* Second call triggers collecting the custom Hook list.
    //          * This doesn't happen during the module evaluation because we
    //          * don't want to change the module order with inline requires.
    //          * Next calls are noops. */
    //   return <h1>Hi</h1>;
    // }
    //
    // /* First call specifies the signature: */
    // _s(
    //   Hello,
    //   'useState{[foo, setFoo]}(0)',
    //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
    // );
    function createSignatureFunctionForTransform() {
        // We'll fill in the signature in two steps.
        // First, we'll know the signature itself. This happens outside the component.
        // Then, we'll know the references to custom Hooks. This happens inside the component.
        // After that, the returned function will be a fast path no-op.
        var status = 'needsSignature';
        var savedType;
        var hasCustomHooks;
        return function(type, key, forceReset, getCustomHooks) {
            switch(status){
                case 'needsSignature':
                    if (type !== undefined) {
                        // If we received an argument, this is the initial registration call.
                        savedType = type;
                        hasCustomHooks = typeof getCustomHooks === 'function';
                        setSignature(type, key, forceReset, getCustomHooks); // The next call we expect is from inside a function, to fill in the custom Hooks.
                        status = 'needsCustomHooks';
                    }
                    break;
                case 'needsCustomHooks':
                    if (hasCustomHooks) collectCustomHooksForSignature(savedType);
                    status = 'resolved';
                    break;
            }
            return type;
        };
    }
    function isLikelyComponentType(type) {
        switch(typeof type){
            case 'function':
                // First, deal with classes.
                if (type.prototype != null) {
                    if (type.prototype.isReactComponent) // React class.
                    return true;
                    var ownNames = Object.getOwnPropertyNames(type.prototype);
                    if (ownNames.length > 1 || ownNames[0] !== 'constructor') // This looks like a class.
                    return false;
                     // eslint-disable-next-line no-proto
                    if (type.prototype.__proto__ !== Object.prototype) // It has a superclass.
                    return false;
                     // Pass through.
                // This looks like a regular function with empty prototype.
                } // For plain functions and arrows, use name as a heuristic.
                var name = type.name || type.displayName;
                return typeof name === 'string' && /^[A-Z]/.test(name);
            case 'object':
                if (type != null) switch(type.$$typeof){
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_MEMO_TYPE:
                        // Definitely React components.
                        return true;
                    default:
                        return false;
                }
                return false;
            default:
                return false;
        }
    }
    exports._getMountedRootCount = _getMountedRootCount;
    exports.collectCustomHooksForSignature = collectCustomHooksForSignature;
    exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;
    exports.findAffectedHostInstances = findAffectedHostInstances;
    exports.getFamilyByID = getFamilyByID;
    exports.getFamilyByType = getFamilyByType;
    exports.hasUnrecoverableErrors = hasUnrecoverableErrors;
    exports.injectIntoGlobalHook = injectIntoGlobalHook;
    exports.isLikelyComponentType = isLikelyComponentType;
    exports.performReactRefresh = performReactRefresh;
    exports.register = register;
    exports.setSignature = setSignature;
})();

},{}],"9M0gR":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "69f74e7f31319ffd";
module.bundle.HMR_BUNDLE_ID = "2f3a70ba56ae5a39";
"use strict";
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F1() {
            };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = o[Symbol.iterator]();
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                } // Render the fancy html overlay
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            removeErrorOverlay();
            var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
            document.body.appendChild(overlay);
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>\n          ").concat(stack, "\n        </pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>' + hint + '</div>';
            }).join(''), "\n        </div>\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') {
        reloadCSS();
        return;
    }
    var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
    if (deps) {
        var fn = new Function('require', 'module', 'exports', asset.output);
        modules[asset.id] = [
            fn,
            deps
        ];
    } else if (bundle.parent) hmrApply(bundle.parent, asset);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) return true;
    return getParents(module.bundle.root, id).some(function(v) {
        return hmrAcceptCheck(v[0], v[1], null);
    });
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"fzhID":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$71bd = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$71bd.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _appBar = require("@mui/material/AppBar");
var _appBarDefault = parcelHelpers.interopDefault(_appBar);
var _container = require("@mui/material/Container");
var _containerDefault = parcelHelpers.interopDefault(_container);
var _toolbar = require("@mui/material/Toolbar");
var _toolbarDefault = parcelHelpers.interopDefault(_toolbar);
var _typography = require("@mui/material/Typography");
var _typographyDefault = parcelHelpers.interopDefault(_typography);
var _button = require("@mui/material/Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _create = require("@mui/icons-material/Create");
var _createDefault = parcelHelpers.interopDefault(_create);
var _share = require("@mui/icons-material/Share");
var _shareDefault = parcelHelpers.interopDefault(_share);
var _link = require("@mui/material/Link");
var _linkDefault = parcelHelpers.interopDefault(_link);
var _iconButton = require("@mui/material/IconButton");
var _iconButtonDefault = parcelHelpers.interopDefault(_iconButton);
var _gitHub = require("@mui/icons-material/GitHub");
var _gitHubDefault = parcelHelpers.interopDefault(_gitHub);
var _styles = require("@mui/material/styles");
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
var _editor = require("./editor");
var _editorDefault = parcelHelpers.interopDefault(_editor);
var _s = $RefreshSig$();
const theme = _styles.createTheme({
    palette: {
        mode: 'dark',
        primary: {
            main: "#c5c8c6",
            light: "#fff",
            dark: "#fff",
            contrastText: "#1D1F21"
        },
        text: {
            primary: "#c5c8c6"
        }
    }
});
const MainAppBar = (props)=>/*#__PURE__*/ _reactDefault.default.createElement(_appBarDefault.default, {
        position: "static",
        __source: {
            fileName: "dev/index.jsx",
            lineNumber: 33
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement(_containerDefault.default, {
        maxWidth: "md",
        __source: {
            fileName: "dev/index.jsx",
            lineNumber: 34
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement(_toolbarDefault.default, {
        disableGutters: true,
        __source: {
            fileName: "dev/index.jsx",
            lineNumber: 35
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement(_buttonDefault.default, {
        variant: "contained",
        startIcon: /*#__PURE__*/ _reactDefault.default.createElement(_createDefault.default, null),
        onClick: props.onClear,
        sx: {
            marginRight: "1em"
        },
        __source: {
            fileName: "dev/index.jsx",
            lineNumber: 36
        },
        __self: undefined
    }, "Clear"), /*#__PURE__*/ _reactDefault.default.createElement("div", {
        style: {
            flexGrow: 1
        },
        __source: {
            fileName: "dev/index.jsx",
            lineNumber: 42
        },
        __self: undefined
    }), /*#__PURE__*/ _reactDefault.default.createElement(_typographyDefault.default, {
        variant: "h6",
        sx: {
            marginRight: "1em"
        },
        __source: {
            fileName: "dev/index.jsx",
            lineNumber: 43
        },
        __self: undefined
    }, "calq"), /*#__PURE__*/ _reactDefault.default.createElement(_linkDefault.default, {
        href: "https://github.com/advait/calq",
        target: "_blank",
        __source: {
            fileName: "dev/index.jsx",
            lineNumber: 44
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement(_iconButtonDefault.default, {
        "aria-label": "github",
        __source: {
            fileName: "dev/index.jsx",
            lineNumber: 45
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement(_gitHubDefault.default, {
        color: "primary",
        __source: {
            fileName: "dev/index.jsx",
            lineNumber: 45
        },
        __self: undefined
    }))))))
;
_c = MainAppBar;
const MainApp = ()=>{
    _s();
    const initialValue = localStorage.getItem("value") || "1 m/s * 3 years\n2 * 2";
    const [value, setValue_] = _react.useState(initialValue);
    const onClear = ()=>setValue_("")
    ;
    const setValue = (v)=>{
        localStorage.setItem("value", v);
        setValue_(v);
    };
    return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "primary",
        __source: {
            fileName: "dev/index.jsx",
            lineNumber: 62
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement(_styles.ThemeProvider, {
        theme: theme,
        __source: {
            fileName: "dev/index.jsx",
            lineNumber: 63
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement(MainAppBar, {
        onClear: onClear,
        __source: {
            fileName: "dev/index.jsx",
            lineNumber: 64
        },
        __self: undefined
    }), /*#__PURE__*/ _reactDefault.default.createElement(_containerDefault.default, {
        maxWidth: "md",
        className: "main-container",
        __source: {
            fileName: "dev/index.jsx",
            lineNumber: 65
        },
        __self: undefined
    }, /*#__PURE__*/ _reactDefault.default.createElement(_editorDefault.default, {
        value: value,
        setValue: setValue,
        __source: {
            fileName: "dev/index.jsx",
            lineNumber: 66
        },
        __self: undefined
    })))));
};
_s(MainApp, "e2Joe4MSQ5/489NAlHd/UkDZR94=");
_c1 = MainApp;
function main() {
    _reactDomDefault.default.render(/*#__PURE__*/ _reactDefault.default.createElement(MainApp, {
        __source: {
            fileName: "dev/index.jsx",
            lineNumber: 74
        },
        __self: this
    }), document.getElementById('react-container'));
}
// HMR stuff
// For more info see: https://parceljs.org/hmr.html
if (module.hot) module.hot.accept(function() {
    console.log('Reloaded, running main again');
    main();
});
console.log('Starting app');
main();
var _c, _c1;
$RefreshReg$(_c, "MainAppBar");
$RefreshReg$(_c1, "MainApp");

  $parcel$ReactRefreshHelpers$71bd.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"6TuXu","@mui/material/AppBar":"d5mtY","@mui/material/Container":"5mtHf","@mui/material/Toolbar":"cZQ6o","@mui/material/Typography":"ewG8k","@mui/material/Button":"l0WhW","@mui/icons-material/Create":"4bDNl","@mui/icons-material/Share":"jSdkD","@mui/material/Link":"kDDfm","@mui/material/IconButton":"g0c8r","@mui/icons-material/GitHub":"7qkDb","@mui/material/styles":"cNyaB","react-dom":"gkWJK","./editor":"e3CjC","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J"}],"6TuXu":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react.development.js');

},{"./cjs/react.development.js":"9WG5J"}],"9WG5J":[function(require,module,exports) {
/** @license React v17.0.1
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var _assign = require('object-assign');
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.1';
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    exports.Fragment = 60107;
    exports.StrictMode = 60108;
    exports.Profiler = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    exports.Suspense = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        exports.Fragment = symbolFor('react.fragment');
        exports.StrictMode = symbolFor('react.strict_mode');
        exports.Profiler = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        exports.Suspense = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    /**
 * Keeps track of the current dispatcher.
 */ var ReactCurrentDispatcher = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    /**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */ var ReactCurrentBatchConfig = {
        transition: 0
    };
    /**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */ var ReactCurrentOwner = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    var ReactDebugCurrentFrame = {
    };
    var currentExtraStackFrame = null;
    function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
    }
    ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
    }; // Stack implementation injected by the current renderer.
    ReactDebugCurrentFrame.getCurrentStack = null;
    ReactDebugCurrentFrame.getStackAddendum = function() {
        var stack = ''; // Add an extra top frame while an element is being validated
        if (currentExtraStackFrame) stack += currentExtraStackFrame;
         // Delegate to the injected renderer-specific implementation
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        if (impl) stack += impl() || '';
        return stack;
    };
    /**
 * Used by act() to track whether you're inside an act() scope.
 */ var IsSomeRendererActing = {
        current: false
    };
    var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentBatchConfig: ReactCurrentBatchConfig,
        ReactCurrentOwner: ReactCurrentOwner,
        IsSomeRendererActing: IsSomeRendererActing,
        // Used by renderers to avoid bundling object-assign twice in UMD bundles:
        assign: _assign
    };
    ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame1.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var didWarnStateUpdateForUnmountedComponent = {
    };
    function warnNoop(publicInstance, callerName) {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + "." + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) return;
        error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
    }
    /**
 * This is the abstract API for an update queue.
 */ var ReactNoopUpdateQueue = {
        /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */ isMounted: function(publicInstance) {
            return false;
        },
        /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, 'forceUpdate');
        },
        /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, 'replaceState');
        },
        /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */ enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, 'setState');
        }
    };
    var emptyObject = {
    };
    Object.freeze(emptyObject);
    /**
 * Base class helpers for the updating state of a component.
 */ function Component(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
        // renderer.
        this.updater = updater || ReactNoopUpdateQueue;
    }
    Component.prototype.isReactComponent = {
    };
    /**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */ Component.prototype.setState = function(partialState, callback) {
        if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */ Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    var deprecatedAPIs = {
        isMounted: [
            'isMounted',
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
            'replaceState',
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
    };
    var defineDeprecationWarning = function(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
            get: function() {
                warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
                return undefined;
            }
        });
    };
    for(var fnName in deprecatedAPIs)if (deprecatedAPIs.hasOwnProperty(fnName)) defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    function ComponentDummy() {
    }
    ComponentDummy.prototype = Component.prototype;
    /**
 * Convenience component with default shallow equality check for sCU.
 */ function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.
    _assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    // an immutable object with a single mutable value
    function createRef() {
        var refObject = {
            current: null
        };
        Object.seal(refObject);
        return refObject;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case exports.Fragment:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case exports.Profiler:
                return 'Profiler';
            case exports.StrictMode:
                return 'StrictMode';
            case exports.Suspense:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    didWarnAboutStringRefs = {
    };
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    function warnIfStringRefCannotBeAutoConverted(config) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error("Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {
        }; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */ function createElement(type, config, children) {
        var propName; // Reserved names are extracted
        var props = {
        };
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
            if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config);
            }
            if (hasValidKey(config)) key = '' + config.key;
            self = config.__self === undefined ? null : config.__self;
            source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            if (Object.freeze) Object.freeze(childArray);
            props.children = childArray;
        } // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
    }
    /**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */ function cloneElement(element, config, children) {
        if (!!(element === null || element === undefined)) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName; // Original props are copied
        var props = _assign({
        }, element.props); // Reserved names are extracted
        var key = element.key;
        var ref = element.ref; // Self is preserved since the owner is preserved.
        var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
        // transpiler, and the original source is probably a better indicator of the
        // true owner.
        var source = element._source; // Owner will be preserved, unless ref is overridden
        var owner = element._owner;
        if (config != null) {
            if (hasValidRef(config)) {
                // Silently steal the ref from the parent.
                ref = config.ref;
                owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) key = '' + config.key;
             // Remaining properties override existing props
            var defaultProps;
            if (element.type && element.type.defaultProps) defaultProps = element.type.defaultProps;
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === undefined && defaultProps !== undefined) // Resolve default props
                props[propName] = defaultProps[propName];
                else props[propName] = config[propName];
            }
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */ function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
            '=': '=0',
            ':': '=2'
        };
        var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
        });
        return '$' + escapedString;
    }
    /**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */ var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, '$&/');
    }
    /**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */ function getElementKey(element, index) {
        // Do some typechecking here since we call this blindly. We want to ensure
        // that we don't block potential future ES APIs.
        if (typeof element === 'object' && element !== null && element.key != null) // Explicit key
        return escape('' + element.key);
         // Implicit key determined by the index in the set
        return index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === 'undefined' || type === 'boolean') // All of the above are perceived as null.
        children = null;
        var invokeCallback = false;
        if (children === null) invokeCallback = true;
        else switch(type){
            case 'string':
            case 'number':
                invokeCallback = true;
                break;
            case 'object':
                switch(children.$$typeof){
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                        invokeCallback = true;
                }
        }
        if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
            // so that it's consistent if the number of children grows:
            var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (Array.isArray(mappedChild)) {
                var escapedChildKey = '';
                if (childKey != null) escapedChildKey = escapeUserProvidedKey(childKey) + '/';
                mapIntoArray(mappedChild, array, escapedChildKey, '', function(c) {
                    return c;
                });
            } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) mappedChild = cloneAndReplaceKey(mappedChild, // traverseAllChildren used to do for objects as children
                escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
                array.push(mappedChild);
            }
            return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0; // Count of children found in the current subtree.
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        }
        else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === 'function') {
                var iterableChildren = children;
                // Warn about using Maps as children
                if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    didWarnAboutMaps = true;
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while(!(step = iterator.next()).done){
                    child = step.value;
                    nextName = nextNamePrefix + getElementKey(child, ii++);
                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
            } else if (type === 'object') {
                var childrenString = '' + children;
                throw Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
        }
        return subtreeCount;
    }
    /**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */ function mapChildren(children, func, context) {
        if (children == null) return children;
        var result = [];
        var count = 0;
        mapIntoArray(children, result, '', '', function(child) {
            return func.call(context, child, count++);
        });
        return result;
    }
    /**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */ function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
            n++; // Don't return anything
        });
        return n;
    }
    /**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */ function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
            forEachFunc.apply(this, arguments); // Don't return anything.
        }, forEachContext);
    }
    /**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */ function toArray(children) {
        return mapChildren(children, function(child) {
            return child;
        }) || [];
    }
    /**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */ function onlyChild(children) {
        if (!isValidElement(children)) throw Error("React.Children.only expected to receive a single React element child.");
        return children;
    }
    function createContext(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === undefined) calculateChangedBits = null;
        else if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
        var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null
        };
        context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context,
            _calculateChangedBits: context._calculateChangedBits
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here
        Object.defineProperties(Consumer, {
            Provider: {
                get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                        hasWarnedAboutUsingConsumerProvider = true;
                        error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                },
                set: function(_Provider) {
                    context.Provider = _Provider;
                }
            },
            _currentValue: {
                get: function() {
                    return context._currentValue;
                },
                set: function(_currentValue) {
                    context._currentValue = _currentValue;
                }
            },
            _currentValue2: {
                get: function() {
                    return context._currentValue2;
                },
                set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                }
            },
            _threadCount: {
                get: function() {
                    return context._threadCount;
                },
                set: function(_threadCount) {
                    context._threadCount = _threadCount;
                }
            },
            Consumer: {
                get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                        hasWarnedAboutUsingNestedContextConsumers = true;
                        error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                }
            },
            displayName: {
                get: function() {
                    return context.displayName;
                },
                set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                        warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                        hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                }
            }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
        context.Consumer = Consumer;
        context._currentRenderer = null;
        context._currentRenderer2 = null;
        return context;
    }
    var Uninitialized = -1;
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor(); // Transition to the next state.
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
            thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                    var defaultExport = moduleObject.default;
                    if (defaultExport === undefined) error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    var resolved = payload;
                    resolved._status = Resolved;
                    resolved._result = defaultExport;
                }
            }, function(error1) {
                if (payload._status === Pending) {
                    // Transition to the next state.
                    var rejected = payload;
                    rejected._status = Rejected;
                    rejected._result = error1;
                }
            });
        }
        if (payload._status === Resolved) return payload._result;
        else throw payload._result;
    }
    function lazy(ctor) {
        var payload = {
            // We use these fields to store the result.
            _status: -1,
            _result: ctor
        };
        var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
        };
        // In production, this would just set it on the object.
        var defaultProps;
        var propTypes; // $FlowFixMe
        Object.defineProperties(lazyType, {
            defaultProps: {
                configurable: true,
                get: function() {
                    return defaultProps;
                },
                set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'defaultProps', {
                        enumerable: true
                    });
                }
            },
            propTypes: {
                configurable: true,
                get: function() {
                    return propTypes;
                },
                set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'propTypes', {
                        enumerable: true
                    });
                }
            }
        });
        return lazyType;
    }
    function forwardRef(render) {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
        else if (typeof render !== 'function') error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        else if (render.length !== 0 && render.length !== 2) error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
        if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        }
        var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                if (render.displayName == null) render.displayName = name;
            }
        });
        return elementType;
    }
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) return true;
        }
        return false;
    }
    function memo(type, compare) {
        if (!isValidElementType(type)) error("memo: The first argument must be a component. Instead received: %s", type === null ? 'null' : typeof type);
        var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: compare === undefined ? null : compare
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                if (type.displayName == null) type.displayName = name;
            }
        });
        return elementType;
    }
    function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        if (!(dispatcher !== null)) throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        return dispatcher;
    }
    function useContext(Context, unstable_observedBits) {
        var dispatcher = resolveDispatcher();
        if (unstable_observedBits !== undefined) error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : '');
         // TODO: add a more generic warning for invalid values.
        if (Context._context !== undefined) {
            var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
            // and nobody should be using this in existing code.
            if (realContext.Consumer === Context) error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            else if (realContext.Provider === Context) error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context, unstable_observedBits);
    }
    function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher$1.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component1) {
        var prototype = Component1.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case exports.Suspense:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
        } else setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) return getSourceInfoErrorAddendum(elementProps.__source);
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {
    };
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error("Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (Array.isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentName(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentName(type);
            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (Array.isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], type);
        if (type === exports.Fragment) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    }
    var didWarnAboutDeprecatedCreateFactory = false;
    function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
        } // Legacy hook: remove it
        Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, 'type', {
                    value: type
                });
                return type;
            }
        });
        return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], newElement.type);
        validatePropTypes(newElement);
        return newElement;
    }
    try {
        var frozenObject = Object.freeze({
        });
        /* eslint-disable no-new */ new Map([
            [
                frozenObject,
                null
            ]
        ]);
        new Set([
            frozenObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
    }
    var createElement$1 = createElementWithValidation;
    var cloneElement$1 = cloneElementWithValidation;
    var createFactory = createFactoryWithValidation;
    var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
    };
    exports.Children = Children;
    exports.Component = Component;
    exports.PureComponent = PureComponent;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.cloneElement = cloneElement$1;
    exports.createContext = createContext;
    exports.createElement = createElement$1;
    exports.createFactory = createFactory;
    exports.createRef = createRef;
    exports.forwardRef = forwardRef;
    exports.isValidElement = isValidElement;
    exports.lazy = lazy;
    exports.memo = memo;
    exports.useCallback = useCallback;
    exports.useContext = useContext;
    exports.useDebugValue = useDebugValue;
    exports.useEffect = useEffect;
    exports.useImperativeHandle = useImperativeHandle;
    exports.useLayoutEffect = useLayoutEffect;
    exports.useMemo = useMemo;
    exports.useReducer = useReducer;
    exports.useRef = useRef;
    exports.useState = useState;
    exports.version = ReactVersion;
})();

},{"object-assign":"jzTFF"}],"jzTFF":[function(require,module,exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/ 'use strict';
/* eslint-disable no-unused-vars */ var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
    if (val === null || val === undefined) throw new TypeError('Object.assign cannot be called with null or undefined');
    return Object(val);
}
function shouldUseNative() {
    try {
        if (!Object.assign) return false;
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = "abc"; // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {
        };
        for(var i = 0; i < 10; i++)test2['_' + String.fromCharCode(i)] = i;
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
        });
        if (order2.join('') !== '0123456789') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {
        };
        'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({
        }, test3)).join('') !== 'abcdefghijklmnopqrst') return false;
        return true;
    } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}
module.exports = shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for(var s = 1; s < arguments.length; s++){
        from = Object(arguments[s]);
        for(var key in from)if (hasOwnProperty.call(from, key)) to[key] = from[key];
        if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for(var i = 0; i < symbols.length; i++)if (propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];
        }
    }
    return to;
};

},{}],"d5mtY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_appBarDefault.default
);
parcelHelpers.export(exports, "appBarClasses", ()=>_appBarClassesDefault.default
);
var _appBar = require("./AppBar");
var _appBarDefault = parcelHelpers.interopDefault(_appBar);
var _appBarClasses = require("./appBarClasses");
var _appBarClassesDefault = parcelHelpers.interopDefault(_appBarClasses);
parcelHelpers.exportAll(_appBarClasses, exports);

},{"./AppBar":"jRYms","./appBarClasses":"3Bs8o","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jRYms":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _core = require("@mui/core");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _paper = require("../Paper");
var _paperDefault = parcelHelpers.interopDefault(_paper);
var _appBarClasses = require("./appBarClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "color",
    "enableColorOnDark",
    "position"
];
const useUtilityClasses = (ownerState)=>{
    const { color , position , classes  } = ownerState;
    const slots = {
        root: [
            'root',
            `color${_capitalizeDefault.default(color)}`,
            `position${_capitalizeDefault.default(position)}`
        ]
    };
    return _core.unstable_composeClasses(slots, _appBarClasses.getAppBarUtilityClass, classes);
};
const AppBarRoot = _styledDefault.default(_paperDefault.default, {
    name: 'MuiAppBar',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            styles[`position${_capitalizeDefault.default(ownerState.position)}`],
            styles[`color${_capitalizeDefault.default(ownerState.color)}`]
        ];
    }
})(({ theme , ownerState  })=>{
    const backgroundColorDefault = theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[900];
    return _extendsDefault.default({
        display: 'flex',
        flexDirection: 'column',
        width: '100%',
        boxSizing: 'border-box',
        // Prevent padding issue with the Modal and fixed positioned AppBar.
        flexShrink: 0
    }, ownerState.position === 'fixed' && {
        position: 'fixed',
        zIndex: theme.zIndex.appBar,
        top: 0,
        left: 'auto',
        right: 0,
        '@media print': {
            // Prevent the app bar to be visible on each printed page.
            position: 'absolute'
        }
    }, ownerState.position === 'absolute' && {
        position: 'absolute',
        zIndex: theme.zIndex.appBar,
        top: 0,
        left: 'auto',
        right: 0
    }, ownerState.position === 'sticky' && {
        // ⚠️ sticky is not supported by IE11.
        position: 'sticky',
        zIndex: theme.zIndex.appBar,
        top: 0,
        left: 'auto',
        right: 0
    }, ownerState.position === 'static' && {
        position: 'static'
    }, ownerState.position === 'relative' && {
        position: 'relative'
    }, ownerState.color === 'default' && {
        backgroundColor: backgroundColorDefault,
        color: theme.palette.getContrastText(backgroundColorDefault)
    }, ownerState.color && ownerState.color !== 'default' && ownerState.color !== 'inherit' && ownerState.color !== 'transparent' && {
        backgroundColor: theme.palette[ownerState.color].main,
        color: theme.palette[ownerState.color].contrastText
    }, ownerState.color === 'inherit' && {
        color: 'inherit'
    }, theme.palette.mode === 'dark' && !ownerState.enableColorOnDark && {
        backgroundColor: null,
        color: null
    }, ownerState.color === 'transparent' && _extendsDefault.default({
        backgroundColor: 'transparent',
        color: 'inherit'
    }, theme.palette.mode === 'dark' && {
        backgroundImage: 'none'
    }));
});
const AppBar = /*#__PURE__*/ _react.forwardRef(function AppBar1(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiAppBar'
    });
    const { className , color ='primary' , enableColorOnDark =false , position ='fixed'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({
    }, props, {
        color,
        position,
        enableColorOnDark
    });
    const classes = useUtilityClasses(ownerState);
    return(/*#__PURE__*/ _jsxRuntime.jsx(AppBarRoot, _extendsDefault.default({
        square: true,
        component: "header",
        ownerState: ownerState,
        elevation: 4,
        className: _clsxDefault.default(classes.root, className, position === 'fixed' && 'mui-fixed'),
        ref: ref
    }, other)));
});
AppBar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'default',
            'inherit',
            'primary',
            'secondary',
            'transparent'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * If true, the `color` prop is applied in dark mode.
   * @default false
   */ enableColorOnDark: _propTypesDefault.default.bool,
    /**
   * The positioning type. The behavior of the different options is described
   * [in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).
   * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.
   * @default 'fixed'
   */ position: _propTypesDefault.default.oneOf([
        'absolute',
        'fixed',
        'relative',
        'static',
        'sticky'
    ]),
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
exports.default = AppBar;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@babel/runtime/helpers/esm/extends":"bKAu6","react":"6TuXu","prop-types":"1tgq3","clsx":"eg1He","@mui/core":"9b2I1","../styles/styled":"gqLeX","../styles/useThemeProps":"1cdc1","../utils/capitalize":"3YJ7J","../Paper":"63BCT","./appBarClasses":"3Bs8o","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3Rubg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
exports.default = _objectWithoutPropertiesLoose;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"JacNc":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule') return;
        // Skip duplicate re-exports when they have the same value.
        if (key in dest && dest[key] === source[key]) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"bKAu6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
exports.default = _extends;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1tgq3":[function(require,module,exports) {
var ReactIs = require('react-is');
// By explicitly using `prop-types` you are opting into new development behavior.
// http://fb.me/prop-types-in-prod
var throwOnDirectAccess = true;
module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);

},{"react-is":"28l8L","./factoryWithTypeCheckers":"gMSjX"}],"28l8L":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-is.development.js');

},{"./cjs/react-is.development.js":"7bhig"}],"7bhig":[function(require,module,exports) {
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 60103;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 60106;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 60107;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 60108;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 60114;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 60109;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 60110; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 60111;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 60111;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 60112;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 60113;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 60120;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 60115;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 60116;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 60121;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 60117;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 60118;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 60119;
    function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }
    function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
            var $$typeof = object.$$typeof;
            switch($$typeof){
                case REACT_ELEMENT_TYPE:
                    var type = object.type;
                    switch(type){
                        case REACT_ASYNC_MODE_TYPE:
                        case REACT_CONCURRENT_MODE_TYPE:
                        case REACT_FRAGMENT_TYPE:
                        case REACT_PROFILER_TYPE:
                        case REACT_STRICT_MODE_TYPE:
                        case REACT_SUSPENSE_TYPE:
                            return type;
                        default:
                            var $$typeofType = type && type.$$typeof;
                            switch($$typeofType){
                                case REACT_CONTEXT_TYPE:
                                case REACT_FORWARD_REF_TYPE:
                                case REACT_LAZY_TYPE:
                                case REACT_MEMO_TYPE:
                                case REACT_PROVIDER_TYPE:
                                    return $$typeofType;
                                default:
                                    return $$typeof;
                            }
                    }
                case REACT_PORTAL_TYPE:
                    return $$typeof;
            }
        }
        return undefined;
    } // AsyncMode is deprecated along with isAsyncMode
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element1 = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated
    function isAsyncMode(object) {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
            console['warn']("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element1;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
})();

},{}],"gMSjX":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var ReactIs = require('react-is');
var assign = require('object-assign');
var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var checkPropTypes = require('./checkPropTypes');
var has = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning = function() {
};
printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') console.error(message);
    try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
    } catch (x) {
    }
};
function emptyFunctionThatReturnsNull() {
    return null;
}
module.exports = function(isValidElement, throwOnDirectAccess) {
    /* global Symbol */ var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
    /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */ function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === 'function') return iteratorFn;
    }
    /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */ var ANONYMOUS = '<<anonymous>>';
    // Important!
    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    var ReactPropTypes = {
        array: createPrimitiveTypeChecker('array'),
        bool: createPrimitiveTypeChecker('boolean'),
        func: createPrimitiveTypeChecker('function'),
        number: createPrimitiveTypeChecker('number'),
        object: createPrimitiveTypeChecker('object'),
        string: createPrimitiveTypeChecker('string'),
        symbol: createPrimitiveTypeChecker('symbol'),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
    };
    /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */ /*eslint-disable no-self-compare*/ function is(x, y) {
        // SameValue algorithm
        if (x === y) // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return x !== 0 || 1 / x === 1 / y;
        else // Step 6.a: NaN == NaN
        return x !== x && y !== y;
    }
    /*eslint-enable no-self-compare*/ /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */ function PropTypeError(message) {
        this.message = message;
        this.stack = '';
    }
    // Make `instanceof Error` still work for returned errors.
    PropTypeError.prototype = Error.prototype;
    function createChainableTypeChecker(validate) {
        var manualPropTypeCallCache = {
        };
        var manualPropTypeWarningCount = 0;
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
                if (throwOnDirectAccess) {
                    // New behavior only for users of `prop-types` package
                    var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                    err.name = 'Invariant Violation';
                    throw err;
                } else if (typeof console !== 'undefined') {
                    // Old behavior for people using React.PropTypes
                    var cacheKey = componentName + ':' + propName;
                    if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                    manualPropTypeWarningCount < 3) {
                        printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
                        manualPropTypeCallCache[cacheKey] = true;
                        manualPropTypeWarningCount++;
                    }
                }
            }
            if (props[propName] == null) {
                if (isRequired) {
                    if (props[propName] === null) return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
                    return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
                }
                return null;
            } else return validate(props, propName, componentName, location, propFullName);
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
    }
    function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
                // `propValue` being instance of, say, date/regexp, pass the 'object'
                // check, but we can offer a more precise error message here rather than
                // 'of type `object`'.
                var preciseType = getPreciseType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }
    function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
            }
            for(var i = 0; i < propValue.length; i++){
                var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
                if (error instanceof Error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
                var expectedClassName = expectedClass.name || ANONYMOUS;
                var actualClassName = getClassName(props[propName]);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
            {
                if (arguments.length > 1) printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
                else printWarning('Invalid argument supplied to oneOf, expected an array.');
            }
            return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for(var i = 0; i < expectedValues.length; i++){
                if (is(propValue, expectedValues[i])) return null;
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
                var type = getPreciseType(value);
                if (type === 'symbol') return String(value);
                return value;
            });
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
            for(var key in propValue)if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error instanceof Error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
            printWarning('Invalid argument supplied to oneOfType, expected an instance of array.');
            return emptyFunctionThatReturnsNull;
        }
        for(var i = 0; i < arrayOfTypeCheckers.length; i++){
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== 'function') {
                printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
                return emptyFunctionThatReturnsNull;
            }
        }
        function validate(props, propName, componentName, location, propFullName) {
            for(var i1 = 0; i1 < arrayOfTypeCheckers.length; i1++){
                var checker = arrayOfTypeCheckers[i1];
                if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) return null;
            }
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            for(var key in shapeTypes){
                var checker = shapeTypes[key];
                if (!checker) continue;
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            // We need to check all keys in case some are required but missing from
            // props.
            var allKeys = assign({
            }, props[propName], shapeTypes);
            for(var key in allKeys){
                var checker = shapeTypes[key];
                if (!checker) return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function isNode(propValue) {
        switch(typeof propValue){
            case 'number':
            case 'string':
            case 'undefined':
                return true;
            case 'boolean':
                return !propValue;
            case 'object':
                if (Array.isArray(propValue)) return propValue.every(isNode);
                if (propValue === null || isValidElement(propValue)) return true;
                var iteratorFn = getIteratorFn(propValue);
                if (iteratorFn) {
                    var iterator = iteratorFn.call(propValue);
                    var step;
                    if (iteratorFn !== propValue.entries) while(!(step = iterator.next()).done){
                        if (!isNode(step.value)) return false;
                    }
                    else // Iterator will provide entry [k,v] tuples rather than values.
                    while(!(step = iterator.next()).done){
                        var entry = step.value;
                        if (entry) {
                            if (!isNode(entry[1])) return false;
                        }
                    }
                } else return false;
                return true;
            default:
                return false;
        }
    }
    function isSymbol(propType, propValue) {
        // Native Symbol.
        if (propType === 'symbol') return true;
        // falsy value can't be a Symbol
        if (!propValue) return false;
        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
        if (propValue['@@toStringTag'] === 'Symbol') return true;
        // Fallback for non-spec compliant Symbols which are polyfilled.
        if (typeof Symbol === 'function' && propValue instanceof Symbol) return true;
        return false;
    }
    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) return 'array';
        if (propValue instanceof RegExp) // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return 'object';
        if (isSymbol(propType, propValue)) return 'symbol';
        return propType;
    }
    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
        if (typeof propValue === 'undefined' || propValue === null) return '' + propValue;
        var propType = getPropType(propValue);
        if (propType === 'object') {
            if (propValue instanceof Date) return 'date';
            else if (propValue instanceof RegExp) return 'regexp';
        }
        return propType;
    }
    // Returns a string that is postfixed to a warning about an invalid type.
    // For example, "undefined" or "of type array"
    function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch(type){
            case 'array':
            case 'object':
                return 'an ' + type;
            case 'boolean':
            case 'date':
            case 'regexp':
                return 'a ' + type;
            default:
                return type;
        }
    }
    // Returns class name of the object, if any.
    function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) return ANONYMOUS;
        return propValue.constructor.name;
    }
    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
};

},{"react-is":"28l8L","object-assign":"jzTFF","./lib/ReactPropTypesSecret":"lYuBM","./checkPropTypes":"3evPV"}],"lYuBM":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
module.exports = ReactPropTypesSecret;

},{}],"3evPV":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var printWarning = function() {
};
var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var loggedTypeFailures = {
};
var has = Function.call.bind(Object.prototype.hasOwnProperty);
printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') console.error(message);
    try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
    } catch (x) {
    }
};
/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */ function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');
                err.name = 'Invariant Violation';
                throw err;
            }
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
            error = ex;
        }
        if (error && !(error instanceof Error)) printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : '';
            printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
    }
}
/**
 * Resets warning cache when testing.
 *
 * @private
 */ checkPropTypes.resetWarningCache = function() {
    loggedTypeFailures = {
    };
};
module.exports = checkPropTypes;

},{"./lib/ReactPropTypesSecret":"lYuBM"}],"eg1He":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function toVal(mix) {
    var k, y, str = '';
    if (typeof mix === 'string' || typeof mix === 'number') str += mix;
    else if (typeof mix === 'object') {
        if (Array.isArray(mix)) for(k = 0; k < mix.length; k++){
            if (mix[k]) {
                if (y = toVal(mix[k])) {
                    str && (str += ' ');
                    str += y;
                }
            }
        }
        else {
            for(k in mix)if (mix[k]) {
                str && (str += ' ');
                str += k;
            }
        }
    }
    return str;
}
exports.default = function() {
    var i = 0, tmp, x, str = '';
    while(i < arguments.length){
        if (tmp = arguments[i++]) {
            if (x = toVal(tmp)) {
                str && (str += ' ');
                str += x;
            }
        }
    }
    return str;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9b2I1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BackdropUnstyled", ()=>_backdropUnstyledDefault.default
);
parcelHelpers.export(exports, "BadgeUnstyled", ()=>_badgeUnstyledDefault.default
);
parcelHelpers.export(exports, "ButtonUnstyled", ()=>_buttonUnstyledDefault.default
);
parcelHelpers.export(exports, "unstable_composeClasses", ()=>_composeClassesDefault.default
);
parcelHelpers.export(exports, "generateUtilityClass", ()=>_generateUtilityClassDefault.default
);
parcelHelpers.export(exports, "unstable_ClassNameGenerator", ()=>_classNameGeneratorDefault.default
);
parcelHelpers.export(exports, "generateUtilityClasses", ()=>_generateUtilityClassesDefault.default
);
parcelHelpers.export(exports, "FormControlUnstyled", ()=>_formControlUnstyledDefault.default
);
parcelHelpers.export(exports, "InputUnstyled", ()=>_inputUnstyledDefault.default
);
parcelHelpers.export(exports, "ModalUnstyled", ()=>_modalUnstyledDefault.default
);
parcelHelpers.export(exports, "NoSsr", ()=>_noSsrDefault.default
);
parcelHelpers.export(exports, "Popper", ()=>_popperDefault.default
);
parcelHelpers.export(exports, "Portal", ()=>_portalDefault.default
);
parcelHelpers.export(exports, "SliderUnstyled", ()=>_sliderUnstyledDefault.default
);
parcelHelpers.export(exports, "SwitchUnstyled", ()=>_switchUnstyledDefault.default
);
parcelHelpers.export(exports, "TextareaAutosize", ()=>_textareaAutosizeDefault.default
);
parcelHelpers.export(exports, "Unstable_TrapFocus", ()=>_unstableTrapFocusDefault.default
);
/** @license MUI v5.0.0-alpha.52
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var _autocompleteUnstyled = require("./AutocompleteUnstyled");
parcelHelpers.exportAll(_autocompleteUnstyled, exports);
var _backdropUnstyled = require("./BackdropUnstyled");
var _backdropUnstyledDefault = parcelHelpers.interopDefault(_backdropUnstyled);
parcelHelpers.exportAll(_backdropUnstyled, exports);
var _badgeUnstyled = require("./BadgeUnstyled");
var _badgeUnstyledDefault = parcelHelpers.interopDefault(_badgeUnstyled);
parcelHelpers.exportAll(_badgeUnstyled, exports);
var _buttonUnstyled = require("./ButtonUnstyled");
var _buttonUnstyledDefault = parcelHelpers.interopDefault(_buttonUnstyled);
parcelHelpers.exportAll(_buttonUnstyled, exports);
var _composeClasses = require("./composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _generateUtilityClass = require("./generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
var _classNameGenerator = require("./generateUtilityClass/ClassNameGenerator");
var _classNameGeneratorDefault = parcelHelpers.interopDefault(_classNameGenerator);
var _generateUtilityClasses = require("./generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
var _formControlUnstyled = require("./FormControlUnstyled");
var _formControlUnstyledDefault = parcelHelpers.interopDefault(_formControlUnstyled);
parcelHelpers.exportAll(_formControlUnstyled, exports);
var _inputUnstyled = require("./InputUnstyled");
var _inputUnstyledDefault = parcelHelpers.interopDefault(_inputUnstyled);
parcelHelpers.exportAll(_inputUnstyled, exports);
var _modalUnstyled = require("./ModalUnstyled");
var _modalUnstyledDefault = parcelHelpers.interopDefault(_modalUnstyled);
parcelHelpers.exportAll(_modalUnstyled, exports);
var _noSsr = require("./NoSsr");
var _noSsrDefault = parcelHelpers.interopDefault(_noSsr);
var _popper = require("./Popper");
var _popperDefault = parcelHelpers.interopDefault(_popper);
var _portal = require("./Portal");
var _portalDefault = parcelHelpers.interopDefault(_portal);
var _sliderUnstyled = require("./SliderUnstyled");
var _sliderUnstyledDefault = parcelHelpers.interopDefault(_sliderUnstyled);
parcelHelpers.exportAll(_sliderUnstyled, exports);
var _switchUnstyled = require("./SwitchUnstyled");
var _switchUnstyledDefault = parcelHelpers.interopDefault(_switchUnstyled);
parcelHelpers.exportAll(_switchUnstyled, exports);
var _textareaAutosize = require("./TextareaAutosize");
var _textareaAutosizeDefault = parcelHelpers.interopDefault(_textareaAutosize);
var _unstableTrapFocus = require("./Unstable_TrapFocus");
var _unstableTrapFocusDefault = parcelHelpers.interopDefault(_unstableTrapFocus);
var _utils = require("./utils");
parcelHelpers.exportAll(_utils, exports);

},{"./AutocompleteUnstyled":"ck0sk","./BackdropUnstyled":"1Utbw","./BadgeUnstyled":"frwan","./ButtonUnstyled":"kFTAV","./composeClasses":"e4OCP","./generateUtilityClass":"ruAWr","./generateUtilityClass/ClassNameGenerator":"iOfzL","./generateUtilityClasses":"gmgZV","./FormControlUnstyled":"aLwAD","./InputUnstyled":"70KkF","./ModalUnstyled":"2MVYi","./NoSsr":"5DAdh","./Popper":"bpH5j","./Portal":"kuhHh","./SliderUnstyled":"bfWtF","./SwitchUnstyled":"2pWBb","./TextareaAutosize":"5Fmol","./Unstable_TrapFocus":"kVMd0","./utils":"5qo13","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ck0sk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useAutocomplete", ()=>_useAutocompleteDefault.default
);
parcelHelpers.export(exports, "createFilterOptions", ()=>_useAutocomplete.createFilterOptions
);
var _useAutocomplete = require("./useAutocomplete");
var _useAutocompleteDefault = parcelHelpers.interopDefault(_useAutocomplete);

},{"./useAutocomplete":"2Diy2","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2Diy2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createFilterOptions", ()=>createFilterOptions
) // To replace with .findIndex() once we stop IE11 support.
;
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
/* eslint-disable no-constant-condition */ var _react = require("react");
var _utils = require("@mui/utils"); // https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript
// Give up on IE11 support for this feature
function stripDiacritics(string) {
    return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\u0300-\u036f]/g, '') : string;
}
function createFilterOptions(config = {
}) {
    const { ignoreAccents =true , ignoreCase =true , limit , matchFrom ='any' , stringify , trim =false  } = config;
    return (options, { inputValue , getOptionLabel  })=>{
        let input = trim ? inputValue.trim() : inputValue;
        if (ignoreCase) input = input.toLowerCase();
        if (ignoreAccents) input = stripDiacritics(input);
        const filteredOptions = options.filter((option)=>{
            let candidate = (stringify || getOptionLabel)(option);
            if (ignoreCase) candidate = candidate.toLowerCase();
            if (ignoreAccents) candidate = stripDiacritics(candidate);
            return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
        });
        return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;
    };
}
function findIndex(array, comp) {
    for(let i = 0; i < array.length; i += 1){
        if (comp(array[i])) return i;
    }
    return -1;
}
const defaultFilterOptions = createFilterOptions(); // Number of options to jump in list box when pageup and pagedown keys are used.
const pageSize = 5;
function useAutocomplete(props) {
    const { autoComplete =false , autoHighlight =false , autoSelect =false , blurOnSelect =false , disabled: disabledProp , clearOnBlur =!props.freeSolo , clearOnEscape =false , componentName ='useAutocomplete' , defaultValue =props.multiple ? [] : null , disableClearable =false , disableCloseOnSelect =false , disabledItemsFocusable =false , disableListWrap =false , filterOptions =defaultFilterOptions , filterSelectedOptions =false , freeSolo =false , getOptionDisabled , getOptionLabel: getOptionLabelProp = (option)=>{
        var _option$label;
        return (_option$label = option.label) != null ? _option$label : option;
    } , isOptionEqualToValue =(option, value)=>option === value
     , groupBy , handleHomeEndKeys =!props.freeSolo , id: idProp , includeInputInList =false , inputValue: inputValueProp , multiple =false , onChange , onClose , onHighlightChange , onInputChange , onOpen , open: openProp , openOnFocus =false , options , selectOnFocus =!props.freeSolo , value: valueProp  } = props;
    const id = _utils.unstable_useId(idProp);
    let getOptionLabel = getOptionLabelProp;
    getOptionLabel = (option)=>{
        const optionLabel = getOptionLabelProp(option);
        if (typeof optionLabel !== 'string') {
            {
                const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;
                console.error(`MUI: The \`getOptionLabel\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);
            }
            return String(optionLabel);
        }
        return optionLabel;
    };
    const ignoreFocus = _react.useRef(false);
    const firstFocus = _react.useRef(true);
    const inputRef = _react.useRef(null);
    const listboxRef = _react.useRef(null);
    const [anchorEl, setAnchorEl] = _react.useState(null);
    const [focusedTag, setFocusedTag] = _react.useState(-1);
    const defaultHighlighted = autoHighlight ? 0 : -1;
    const highlightedIndexRef = _react.useRef(defaultHighlighted);
    const [value, setValueState] = _utils.unstable_useControlled({
        controlled: valueProp,
        default: defaultValue,
        name: componentName
    });
    const [inputValue, setInputValueState] = _utils.unstable_useControlled({
        controlled: inputValueProp,
        default: '',
        name: componentName,
        state: 'inputValue'
    });
    const [focused, setFocused] = _react.useState(false);
    const resetInputValue = _react.useCallback((event, newValue)=>{
        let newInputValue;
        if (multiple) newInputValue = '';
        else if (newValue == null) newInputValue = '';
        else {
            const optionLabel = getOptionLabel(newValue);
            newInputValue = typeof optionLabel === 'string' ? optionLabel : '';
        }
        if (inputValue === newInputValue) return;
        setInputValueState(newInputValue);
        if (onInputChange) onInputChange(event, newInputValue, 'reset');
    }, [
        getOptionLabel,
        inputValue,
        multiple,
        onInputChange,
        setInputValueState
    ]);
    const prevValue = _react.useRef();
    _react.useEffect(()=>{
        const valueChange = value !== prevValue.current;
        prevValue.current = value;
        if (focused && !valueChange) return;
         // Only reset the input's value when freeSolo if the component's value changes.
        if (freeSolo && !valueChange) return;
        resetInputValue(null, value);
    }, [
        value,
        resetInputValue,
        focused,
        prevValue,
        freeSolo
    ]);
    const [open, setOpenState] = _utils.unstable_useControlled({
        controlled: openProp,
        default: false,
        name: componentName,
        state: 'open'
    });
    const [inputPristine, setInputPristine] = _react.useState(true);
    const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);
    const popupOpen = open;
    const filteredOptions = popupOpen ? filterOptions(options.filter((option)=>{
        if (filterSelectedOptions && (multiple ? value : [
            value
        ]).some((value2)=>value2 !== null && isOptionEqualToValue(option, value2)
        )) return false;
        return true;
    }), // i.e. the filter predicate always returns true
    {
        inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,
        getOptionLabel
    }) : [];
    const listboxAvailable = open && filteredOptions.length > 0;
    if (value !== null && !freeSolo && options.length > 0) {
        const missingValue = (multiple ? value : [
            value
        ]).filter((value2)=>!options.some((option)=>isOptionEqualToValue(option, value2)
            )
        );
        if (missingValue.length > 0) console.warn([
            `MUI: The value provided to ${componentName} is invalid.`,
            `None of the options match with \`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\`.`,
            'You can use the `isOptionEqualToValue` prop to customize the equality test.'
        ].join('\n'));
    }
    const focusTag = _utils.unstable_useEventCallback((tagToFocus)=>{
        if (tagToFocus === -1) inputRef.current.focus();
        else anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
    }); // Ensure the focusedTag is never inconsistent
    _react.useEffect(()=>{
        if (multiple && focusedTag > value.length - 1) {
            setFocusedTag(-1);
            focusTag(-1);
        }
    }, [
        value,
        multiple,
        focusedTag,
        focusTag
    ]);
    function validOptionIndex(index, direction) {
        if (!listboxRef.current || index === -1) return -1;
        let nextFocus = index;
        while(true){
            // Out of range
            if (direction === 'next' && nextFocus === filteredOptions.length || direction === 'previous' && nextFocus === -1) return -1;
            const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`); // Same logic as MenuList.js
            const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';
            if (option && !option.hasAttribute('tabindex') || nextFocusDisabled) // Move to the next element.
            nextFocus += direction === 'next' ? 1 : -1;
            else return nextFocus;
        }
    }
    const setHighlightedIndex = _utils.unstable_useEventCallback(({ event , index , reason ='auto'  })=>{
        highlightedIndexRef.current = index; // does the index exist?
        if (index === -1) inputRef.current.removeAttribute('aria-activedescendant');
        else inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);
        if (onHighlightChange) onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);
        if (!listboxRef.current) return;
        const prev = listboxRef.current.querySelector('[role="option"].Mui-focused');
        if (prev) {
            prev.classList.remove('Mui-focused');
            prev.classList.remove('Mui-focusVisible');
        }
        const listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]'); // "No results"
        if (!listboxNode) return;
        if (index === -1) {
            listboxNode.scrollTop = 0;
            return;
        }
        const option = listboxRef.current.querySelector(`[data-option-index="${index}"]`);
        if (!option) return;
        option.classList.add('Mui-focused');
        if (reason === 'keyboard') option.classList.add('Mui-focusVisible');
         // Scroll active descendant into view.
        // Logic copied from https://www.w3.org/TR/wai-aria-practices/examples/listbox/js/listbox.js
        //
        // Consider this API instead once it has a better browser support:
        // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });
        if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse') {
            const element = option;
            const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
            const elementBottom = element.offsetTop + element.offsetHeight;
            if (elementBottom > scrollBottom) listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
            else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
        }
    });
    const changeHighlightedIndex = _utils.unstable_useEventCallback(({ event , diff , direction ='next' , reason ='auto'  })=>{
        if (!popupOpen) return;
        const getNextIndex = ()=>{
            const maxIndex = filteredOptions.length - 1;
            if (diff === 'reset') return defaultHighlighted;
            if (diff === 'start') return 0;
            if (diff === 'end') return maxIndex;
            const newIndex = highlightedIndexRef.current + diff;
            if (newIndex < 0) {
                if (newIndex === -1 && includeInputInList) return -1;
                if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) return 0;
                return maxIndex;
            }
            if (newIndex > maxIndex) {
                if (newIndex === maxIndex + 1 && includeInputInList) return -1;
                if (disableListWrap || Math.abs(diff) > 1) return maxIndex;
                return 0;
            }
            return newIndex;
        };
        const nextIndex = validOptionIndex(getNextIndex(), direction);
        setHighlightedIndex({
            index: nextIndex,
            reason,
            event
        }); // Sync the content of the input with the highlighted option.
        if (autoComplete && diff !== 'reset') {
            if (nextIndex === -1) inputRef.current.value = inputValue;
            else {
                const option = getOptionLabel(filteredOptions[nextIndex]);
                inputRef.current.value = option; // The portion of the selected suggestion that has not been typed by the user,
                // a completion string, appears inline after the input cursor in the textbox.
                const index = option.toLowerCase().indexOf(inputValue.toLowerCase());
                if (index === 0 && inputValue.length > 0) inputRef.current.setSelectionRange(inputValue.length, option.length);
            }
        }
    });
    const syncHighlightedIndex = _react.useCallback(()=>{
        if (!popupOpen) return;
        const valueItem = multiple ? value[0] : value; // The popup is empty, reset
        if (filteredOptions.length === 0 || valueItem == null) {
            changeHighlightedIndex({
                diff: 'reset'
            });
            return;
        }
        if (!listboxRef.current) return;
         // Synchronize the value with the highlighted index
        if (valueItem != null) {
            const currentOption = filteredOptions[highlightedIndexRef.current]; // Keep the current highlighted index if possible
            if (multiple && currentOption && findIndex(value, (val)=>isOptionEqualToValue(currentOption, val)
            ) !== -1) return;
            const itemIndex = findIndex(filteredOptions, (optionItem)=>isOptionEqualToValue(optionItem, valueItem)
            );
            if (itemIndex === -1) changeHighlightedIndex({
                diff: 'reset'
            });
            else setHighlightedIndex({
                index: itemIndex
            });
            return;
        } // Prevent the highlighted index to leak outside the boundaries.
        if (highlightedIndexRef.current >= filteredOptions.length - 1) {
            setHighlightedIndex({
                index: filteredOptions.length - 1
            });
            return;
        } // Restore the focus to the previous index.
        setHighlightedIndex({
            index: highlightedIndexRef.current
        }); // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        filteredOptions.length,
        // eslint-disable-next-line react-hooks/exhaustive-deps
        multiple ? false : value,
        filterSelectedOptions,
        changeHighlightedIndex,
        setHighlightedIndex,
        popupOpen,
        inputValue,
        multiple
    ]);
    const handleListboxRef = _utils.unstable_useEventCallback((node)=>{
        _utils.unstable_setRef(listboxRef, node);
        if (!node) return;
        syncHighlightedIndex();
    });
    // eslint-disable-next-line react-hooks/rules-of-hooks
    _react.useEffect(()=>{
        if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') console.error([
            `MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`,
            `Instead, ${componentName} expects an input element.`,
            '',
            componentName === 'useAutocomplete' ? 'Make sure you have binded getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'
        ].join('\n'));
    }, [
        componentName
    ]);
    _react.useEffect(()=>{
        syncHighlightedIndex();
    }, [
        syncHighlightedIndex
    ]);
    const handleOpen = (event)=>{
        if (open) return;
        setOpenState(true);
        setInputPristine(true);
        if (onOpen) onOpen(event);
    };
    const handleClose = (event, reason)=>{
        if (!open) return;
        setOpenState(false);
        if (onClose) onClose(event, reason);
    };
    const handleValue = (event, newValue, reason, details)=>{
        if (value === newValue) return;
        if (onChange) onChange(event, newValue, reason, details);
        setValueState(newValue);
    };
    const isTouch = _react.useRef(false);
    const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options')=>{
        let reason = reasonProp;
        let newValue = option;
        if (multiple) {
            newValue = Array.isArray(value) ? value.slice() : [];
            {
                const matches = newValue.filter((val)=>isOptionEqualToValue(option, val)
                );
                if (matches.length > 1) console.error([
                    `MUI: The \`isOptionEqualToValue\` method of ${componentName} do not handle the arguments correctly.`,
                    `The component expects a single value to match a given option but found ${matches.length} matches.`
                ].join('\n'));
            }
            const itemIndex = findIndex(newValue, (valueItem)=>isOptionEqualToValue(option, valueItem)
            );
            if (itemIndex === -1) newValue.push(option);
            else if (origin !== 'freeSolo') {
                newValue.splice(itemIndex, 1);
                reason = 'removeOption';
            }
        }
        resetInputValue(event, newValue);
        handleValue(event, newValue, reason, {
            option
        });
        if (!disableCloseOnSelect && !event.ctrlKey && !event.metaKey) handleClose(event, reason);
        if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) inputRef.current.blur();
    };
    function validTagIndex(index, direction) {
        if (index === -1) return -1;
        let nextFocus = index;
        while(true){
            // Out of range
            if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) return -1;
            const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`); // Same logic as MenuList.js
            if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') nextFocus += direction === 'next' ? 1 : -1;
            else return nextFocus;
        }
    }
    const handleFocusTag = (event, direction)=>{
        if (!multiple) return;
        handleClose(event, 'toggleInput');
        let nextTag = focusedTag;
        if (focusedTag === -1) {
            if (inputValue === '' && direction === 'previous') nextTag = value.length - 1;
        } else {
            nextTag += direction === 'next' ? 1 : -1;
            if (nextTag < 0) nextTag = 0;
            if (nextTag === value.length) nextTag = -1;
        }
        nextTag = validTagIndex(nextTag, direction);
        setFocusedTag(nextTag);
        focusTag(nextTag);
    };
    const handleClear = (event)=>{
        ignoreFocus.current = true;
        setInputValueState('');
        if (onInputChange) onInputChange(event, '', 'clear');
        handleValue(event, multiple ? [] : null, 'clear');
    };
    const handleKeyDown = (other)=>(event)=>{
            if (other.onKeyDown) other.onKeyDown(event);
            if (event.defaultMuiPrevented) return;
            if (focusedTag !== -1 && [
                'ArrowLeft',
                'ArrowRight'
            ].indexOf(event.key) === -1) {
                setFocusedTag(-1);
                focusTag(-1);
            } // Wait until IME is settled.
            if (event.which !== 229) switch(event.key){
                case 'Home':
                    if (popupOpen && handleHomeEndKeys) {
                        // Prevent scroll of the page
                        event.preventDefault();
                        changeHighlightedIndex({
                            diff: 'start',
                            direction: 'next',
                            reason: 'keyboard',
                            event
                        });
                    }
                    break;
                case 'End':
                    if (popupOpen && handleHomeEndKeys) {
                        // Prevent scroll of the page
                        event.preventDefault();
                        changeHighlightedIndex({
                            diff: 'end',
                            direction: 'previous',
                            reason: 'keyboard',
                            event
                        });
                    }
                    break;
                case 'PageUp':
                    // Prevent scroll of the page
                    event.preventDefault();
                    changeHighlightedIndex({
                        diff: -pageSize,
                        direction: 'previous',
                        reason: 'keyboard',
                        event
                    });
                    handleOpen(event);
                    break;
                case 'PageDown':
                    // Prevent scroll of the page
                    event.preventDefault();
                    changeHighlightedIndex({
                        diff: pageSize,
                        direction: 'next',
                        reason: 'keyboard',
                        event
                    });
                    handleOpen(event);
                    break;
                case 'ArrowDown':
                    // Prevent cursor move
                    event.preventDefault();
                    changeHighlightedIndex({
                        diff: 1,
                        direction: 'next',
                        reason: 'keyboard',
                        event
                    });
                    handleOpen(event);
                    break;
                case 'ArrowUp':
                    // Prevent cursor move
                    event.preventDefault();
                    changeHighlightedIndex({
                        diff: -1,
                        direction: 'previous',
                        reason: 'keyboard',
                        event
                    });
                    handleOpen(event);
                    break;
                case 'ArrowLeft':
                    handleFocusTag(event, 'previous');
                    break;
                case 'ArrowRight':
                    handleFocusTag(event, 'next');
                    break;
                case 'Enter':
                    if (highlightedIndexRef.current !== -1 && popupOpen) {
                        const option = filteredOptions[highlightedIndexRef.current];
                        const disabled = getOptionDisabled ? getOptionDisabled(option) : false; // Avoid early form validation, let the end-users continue filling the form.
                        event.preventDefault();
                        if (disabled) return;
                        selectNewValue(event, option, 'selectOption'); // Move the selection to the end.
                        if (autoComplete) inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
                    } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {
                        if (multiple) // Allow people to add new values before they submit the form.
                        event.preventDefault();
                        selectNewValue(event, inputValue, 'createOption', 'freeSolo');
                    }
                    break;
                case 'Escape':
                    if (popupOpen) {
                        // Avoid Opera to exit fullscreen mode.
                        event.preventDefault(); // Avoid the Modal to handle the event.
                        event.stopPropagation();
                        handleClose(event, 'escape');
                    } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {
                        // Avoid Opera to exit fullscreen mode.
                        event.preventDefault(); // Avoid the Modal to handle the event.
                        event.stopPropagation();
                        handleClear(event);
                    }
                    break;
                case 'Backspace':
                    if (multiple && inputValue === '' && value.length > 0) {
                        const index = focusedTag === -1 ? value.length - 1 : focusedTag;
                        const newValue = value.slice();
                        newValue.splice(index, 1);
                        handleValue(event, newValue, 'removeOption', {
                            option: value[index]
                        });
                    }
                    break;
                default:
            }
        }
    ;
    const handleFocus = (event)=>{
        setFocused(true);
        if (openOnFocus && !ignoreFocus.current) handleOpen(event);
    };
    const handleBlur = (event)=>{
        // Ignore the event when using the scrollbar with IE11
        if (listboxRef.current !== null && listboxRef.current.parentElement.contains(document.activeElement)) {
            inputRef.current.focus();
            return;
        }
        setFocused(false);
        firstFocus.current = true;
        ignoreFocus.current = false;
        if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');
        else if (autoSelect && freeSolo && inputValue !== '') selectNewValue(event, inputValue, 'blur', 'freeSolo');
        else if (clearOnBlur) resetInputValue(event, value);
        handleClose(event, 'blur');
    };
    const handleInputChange = (event)=>{
        const newValue = event.target.value;
        if (inputValue !== newValue) {
            setInputValueState(newValue);
            setInputPristine(false);
            if (onInputChange) onInputChange(event, newValue, 'input');
        }
        if (newValue === '') {
            if (!disableClearable && !multiple) handleValue(event, null, 'clear');
        } else handleOpen(event);
    };
    const handleOptionMouseOver = (event)=>{
        setHighlightedIndex({
            event,
            index: Number(event.currentTarget.getAttribute('data-option-index')),
            reason: 'mouse'
        });
    };
    const handleOptionTouchStart = ()=>{
        isTouch.current = true;
    };
    const handleOptionClick = (event)=>{
        const index = Number(event.currentTarget.getAttribute('data-option-index'));
        selectNewValue(event, filteredOptions[index], 'selectOption');
        isTouch.current = false;
    };
    const handleTagDelete = (index)=>(event)=>{
            const newValue = value.slice();
            newValue.splice(index, 1);
            handleValue(event, newValue, 'removeOption', {
                option: value[index]
            });
        }
    ;
    const handlePopupIndicator = (event)=>{
        if (open) handleClose(event, 'toggleInput');
        else handleOpen(event);
    }; // Prevent input blur when interacting with the combobox
    const handleMouseDown = (event)=>{
        if (event.target.getAttribute('id') !== id) event.preventDefault();
    }; // Focus the input when interacting with the combobox
    const handleClick = ()=>{
        inputRef.current.focus();
        if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) inputRef.current.select();
        firstFocus.current = false;
    };
    const handleInputMouseDown = (event)=>{
        if (inputValue === '' || !open) handlePopupIndicator(event);
    };
    let dirty = freeSolo && inputValue.length > 0;
    dirty = dirty || (multiple ? value.length > 0 : value !== null);
    let groupedOptions = filteredOptions;
    if (groupBy) {
        // used to keep track of key and indexes in the result array
        const indexBy = new Map();
        let warn = false;
        groupedOptions = filteredOptions.reduce((acc, option, index)=>{
            const group = groupBy(option);
            if (acc.length > 0 && acc[acc.length - 1].group === group) acc[acc.length - 1].options.push(option);
            else {
                if (indexBy.get(group) && !warn) {
                    console.warn(`MUI: The options provided combined with the \`groupBy\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');
                    warn = true;
                }
                indexBy.set(group, true);
                acc.push({
                    key: index,
                    index,
                    group,
                    options: [
                        option
                    ]
                });
            }
            return acc;
        }, []);
    }
    if (disabledProp && focused) handleBlur();
    return {
        getRootProps: (other = {
        })=>_extendsDefault.default({
                'aria-owns': listboxAvailable ? `${id}-listbox` : null,
                role: 'combobox',
                'aria-expanded': listboxAvailable
            }, other, {
                onKeyDown: handleKeyDown(other),
                onMouseDown: handleMouseDown,
                onClick: handleClick
            })
        ,
        getInputLabelProps: ()=>({
                id: `${id}-label`,
                htmlFor: id
            })
        ,
        getInputProps: ()=>({
                id,
                value: inputValue,
                onBlur: handleBlur,
                onFocus: handleFocus,
                onChange: handleInputChange,
                onMouseDown: handleInputMouseDown,
                // if open then this is handled imperativeley so don't let react override
                // only have an opinion about this when closed
                'aria-activedescendant': popupOpen ? '' : null,
                'aria-autocomplete': autoComplete ? 'both' : 'list',
                'aria-controls': listboxAvailable ? `${id}-listbox` : null,
                // Disable browser's suggestion that might overlap with the popup.
                // Handle autocomplete but not autofill.
                autoComplete: 'off',
                ref: inputRef,
                autoCapitalize: 'none',
                spellCheck: 'false'
            })
        ,
        getClearProps: ()=>({
                tabIndex: -1,
                onClick: handleClear
            })
        ,
        getPopupIndicatorProps: ()=>({
                tabIndex: -1,
                onClick: handlePopupIndicator
            })
        ,
        getTagProps: ({ index  })=>({
                key: index,
                'data-tag-index': index,
                tabIndex: -1,
                onDelete: handleTagDelete(index)
            })
        ,
        getListboxProps: ()=>({
                role: 'listbox',
                id: `${id}-listbox`,
                'aria-labelledby': `${id}-label`,
                ref: handleListboxRef,
                onMouseDown: (event)=>{
                    // Prevent blur
                    event.preventDefault();
                }
            })
        ,
        getOptionProps: ({ index , option  })=>{
            const selected = (multiple ? value : [
                value
            ]).some((value2)=>value2 != null && isOptionEqualToValue(option, value2)
            );
            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
            return {
                key: getOptionLabel(option),
                tabIndex: -1,
                role: 'option',
                id: `${id}-option-${index}`,
                onMouseOver: handleOptionMouseOver,
                onClick: handleOptionClick,
                onTouchStart: handleOptionTouchStart,
                'data-option-index': index,
                'aria-disabled': disabled,
                'aria-selected': selected
            };
        },
        id,
        inputValue,
        value,
        dirty,
        popupOpen,
        focused: focused || focusedTag !== -1,
        anchorEl,
        setAnchorEl,
        focusedTag,
        groupedOptions
    };
}
exports.default = useAutocomplete;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","react":"6TuXu","@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9YmNw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "chainPropTypes", ()=>_chainPropTypesDefault.default
);
parcelHelpers.export(exports, "deepmerge", ()=>_deepmergeDefault.default
);
parcelHelpers.export(exports, "elementAcceptingRef", ()=>_elementAcceptingRefDefault.default
);
parcelHelpers.export(exports, "elementTypeAcceptingRef", ()=>_elementTypeAcceptingRefDefault.default
);
parcelHelpers.export(exports, "exactProp", ()=>_exactPropDefault.default
);
parcelHelpers.export(exports, "formatMuiErrorMessage", ()=>_formatMuiErrorMessageDefault.default
);
parcelHelpers.export(exports, "getDisplayName", ()=>_getDisplayNameDefault.default
);
parcelHelpers.export(exports, "HTMLElementType", ()=>_htmlelementTypeDefault.default
);
parcelHelpers.export(exports, "ponyfillGlobal", ()=>_ponyfillGlobalDefault.default
);
parcelHelpers.export(exports, "refType", ()=>_refTypeDefault.default
);
parcelHelpers.export(exports, "unstable_capitalize", ()=>_capitalizeDefault.default
);
parcelHelpers.export(exports, "unstable_createChainedFunction", ()=>_createChainedFunctionDefault.default
);
parcelHelpers.export(exports, "unstable_debounce", ()=>_debounceDefault.default
);
parcelHelpers.export(exports, "unstable_deprecatedPropType", ()=>_deprecatedPropTypeDefault.default
);
parcelHelpers.export(exports, "unstable_isMuiElement", ()=>_isMuiElementDefault.default
);
parcelHelpers.export(exports, "unstable_ownerDocument", ()=>_ownerDocumentDefault.default
);
parcelHelpers.export(exports, "unstable_ownerWindow", ()=>_ownerWindowDefault.default
);
parcelHelpers.export(exports, "unstable_requirePropFactory", ()=>_requirePropFactoryDefault.default
);
parcelHelpers.export(exports, "unstable_setRef", ()=>_setRefDefault.default
);
parcelHelpers.export(exports, "unstable_useEnhancedEffect", ()=>_useEnhancedEffectDefault.default
);
parcelHelpers.export(exports, "unstable_useId", ()=>_useIdDefault.default
);
parcelHelpers.export(exports, "unstable_unsupportedProp", ()=>_unsupportedPropDefault.default
);
parcelHelpers.export(exports, "unstable_useControlled", ()=>_useControlledDefault.default
);
parcelHelpers.export(exports, "unstable_useEventCallback", ()=>_useEventCallbackDefault.default
);
parcelHelpers.export(exports, "unstable_useForkRef", ()=>_useForkRefDefault.default
);
parcelHelpers.export(exports, "unstable_useIsFocusVisible", ()=>_useIsFocusVisibleDefault.default
);
parcelHelpers.export(exports, "unstable_getScrollbarSize", ()=>_getScrollbarSizeDefault.default
);
parcelHelpers.export(exports, "unstable_detectScrollType", ()=>_scrollLeft.detectScrollType
);
parcelHelpers.export(exports, "unstable_getNormalizedScrollLeft", ()=>_scrollLeft.getNormalizedScrollLeft
);
parcelHelpers.export(exports, "usePreviousProps", ()=>_usePreviousPropsDefault.default
);
parcelHelpers.export(exports, "visuallyHidden", ()=>_visuallyHiddenDefault.default
);
parcelHelpers.export(exports, "integerPropType", ()=>_integerPropTypeDefault.default
);
var _chainPropTypes = require("./chainPropTypes");
var _chainPropTypesDefault = parcelHelpers.interopDefault(_chainPropTypes);
var _deepmerge = require("./deepmerge");
var _deepmergeDefault = parcelHelpers.interopDefault(_deepmerge);
var _elementAcceptingRef = require("./elementAcceptingRef");
var _elementAcceptingRefDefault = parcelHelpers.interopDefault(_elementAcceptingRef);
var _elementTypeAcceptingRef = require("./elementTypeAcceptingRef");
var _elementTypeAcceptingRefDefault = parcelHelpers.interopDefault(_elementTypeAcceptingRef);
var _exactProp = require("./exactProp");
var _exactPropDefault = parcelHelpers.interopDefault(_exactProp);
var _formatMuiErrorMessage = require("./formatMuiErrorMessage");
var _formatMuiErrorMessageDefault = parcelHelpers.interopDefault(_formatMuiErrorMessage);
var _getDisplayName = require("./getDisplayName");
var _getDisplayNameDefault = parcelHelpers.interopDefault(_getDisplayName);
var _htmlelementType = require("./HTMLElementType");
var _htmlelementTypeDefault = parcelHelpers.interopDefault(_htmlelementType);
var _ponyfillGlobal = require("./ponyfillGlobal");
var _ponyfillGlobalDefault = parcelHelpers.interopDefault(_ponyfillGlobal);
var _refType = require("./refType");
var _refTypeDefault = parcelHelpers.interopDefault(_refType);
var _capitalize = require("./capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _createChainedFunction = require("./createChainedFunction");
var _createChainedFunctionDefault = parcelHelpers.interopDefault(_createChainedFunction);
var _debounce = require("./debounce");
var _debounceDefault = parcelHelpers.interopDefault(_debounce);
var _deprecatedPropType = require("./deprecatedPropType");
var _deprecatedPropTypeDefault = parcelHelpers.interopDefault(_deprecatedPropType);
var _isMuiElement = require("./isMuiElement");
var _isMuiElementDefault = parcelHelpers.interopDefault(_isMuiElement);
var _ownerDocument = require("./ownerDocument");
var _ownerDocumentDefault = parcelHelpers.interopDefault(_ownerDocument);
var _ownerWindow = require("./ownerWindow");
var _ownerWindowDefault = parcelHelpers.interopDefault(_ownerWindow);
var _requirePropFactory = require("./requirePropFactory");
var _requirePropFactoryDefault = parcelHelpers.interopDefault(_requirePropFactory);
var _setRef = require("./setRef");
var _setRefDefault = parcelHelpers.interopDefault(_setRef);
var _useEnhancedEffect = require("./useEnhancedEffect");
var _useEnhancedEffectDefault = parcelHelpers.interopDefault(_useEnhancedEffect);
var _useId = require("./useId");
var _useIdDefault = parcelHelpers.interopDefault(_useId);
var _unsupportedProp = require("./unsupportedProp");
var _unsupportedPropDefault = parcelHelpers.interopDefault(_unsupportedProp);
var _useControlled = require("./useControlled");
var _useControlledDefault = parcelHelpers.interopDefault(_useControlled);
var _useEventCallback = require("./useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _useForkRef = require("./useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _useIsFocusVisible = require("./useIsFocusVisible");
var _useIsFocusVisibleDefault = parcelHelpers.interopDefault(_useIsFocusVisible);
var _getScrollbarSize = require("./getScrollbarSize");
var _getScrollbarSizeDefault = parcelHelpers.interopDefault(_getScrollbarSize);
var _scrollLeft = require("./scrollLeft");
var _usePreviousProps = require("./usePreviousProps");
var _usePreviousPropsDefault = parcelHelpers.interopDefault(_usePreviousProps);
var _visuallyHidden = require("./visuallyHidden");
var _visuallyHiddenDefault = parcelHelpers.interopDefault(_visuallyHidden);
var _integerPropType = require("./integerPropType");
var _integerPropTypeDefault = parcelHelpers.interopDefault(_integerPropType);

},{"./chainPropTypes":"lrfIO","./deepmerge":"9SkL4","./elementAcceptingRef":"jS7F2","./elementTypeAcceptingRef":"1GgXb","./exactProp":"0EXh9","./formatMuiErrorMessage":"bjtKO","./getDisplayName":"70eX0","./HTMLElementType":"3srV1","./ponyfillGlobal":"8HmGp","./refType":"eVobu","./capitalize":"8CgiP","./createChainedFunction":"gSy30","./debounce":"9Cw0B","./deprecatedPropType":"7WnOQ","./isMuiElement":"11ASb","./ownerDocument":"4a6NC","./ownerWindow":"7XUt0","./requirePropFactory":"gdw56","./setRef":"esXVR","./useEnhancedEffect":"3drA0","./useId":"liRjl","./unsupportedProp":"hncwD","./useControlled":"ddaKr","./useEventCallback":"4GqXu","./useForkRef":"cw9CI","./useIsFocusVisible":"hzE05","./getScrollbarSize":"1Nut4","./scrollLeft":"9DiES","./usePreviousProps":"6t496","./visuallyHidden":"9q0gE","./integerPropType":"1S9ZJ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lrfIO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function chainPropTypes(propType1, propType2) {
    return function validate(...args) {
        return propType1(...args) || propType2(...args);
    };
}
exports.default = chainPropTypes;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9SkL4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isPlainObject", ()=>isPlainObject
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
function isPlainObject(item) {
    return item !== null && typeof item === 'object' && // @ts-expect-error
    item.constructor === Object;
}
function deepmerge(target, source, options = {
    clone: true
}) {
    const output = options.clone ? _extendsDefault.default({
    }, target) : target;
    if (isPlainObject(target) && isPlainObject(source)) Object.keys(source).forEach((key)=>{
        // Avoid prototype pollution
        if (key === '__proto__') return;
        if (isPlainObject(source[key]) && key in target && isPlainObject(target[key])) // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.
        output[key] = deepmerge(target[key], source[key], options);
        else output[key] = source[key];
    });
    return output;
}
exports.default = deepmerge;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jS7F2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _chainPropTypes = require("./chainPropTypes");
var _chainPropTypesDefault = parcelHelpers.interopDefault(_chainPropTypes);
function isClassComponent(elementType) {
    // elementType.prototype?.isReactComponent
    const { prototype ={
    }  } = elementType;
    return Boolean(prototype.isReactComponent);
}
function acceptingRef(props, propName, componentName, location, propFullName) {
    const element = props[propName];
    const safePropName = propFullName || propName;
    if (element == null || // This is not an accurate check for SSR.
    // This is only in place for emotion compat.
    // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
    typeof window === 'undefined') return null;
    let warningHint;
    const elementType = element.type;
    /**
   * Blacklisting instead of whitelisting
   *
   * Blacklisting will miss some components, such as React.Fragment. Those will at least
   * trigger a warning in React.
   * We can't whitelist because there is no safe way to detect React.forwardRef
   * or class components. "Safe" means there's no public API.
   *
   */ if (typeof elementType === 'function' && !isClassComponent(elementType)) warningHint = 'Did you accidentally use a plain function component for an element instead?';
    if (warningHint !== undefined) return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an element that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');
    return null;
}
const elementAcceptingRef = _chainPropTypesDefault.default(_propTypesDefault.default.element, acceptingRef);
elementAcceptingRef.isRequired = _chainPropTypesDefault.default(_propTypesDefault.default.element.isRequired, acceptingRef);
exports.default = elementAcceptingRef;

},{"prop-types":"1tgq3","./chainPropTypes":"lrfIO","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1GgXb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _chainPropTypes = require("./chainPropTypes");
var _chainPropTypesDefault = parcelHelpers.interopDefault(_chainPropTypes);
function isClassComponent(elementType) {
    // elementType.prototype?.isReactComponent
    const { prototype ={
    }  } = elementType;
    return Boolean(prototype.isReactComponent);
}
function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null || // This is not an accurate check for SSR.
    // This is only in place for emotion compat.
    // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
    typeof window === 'undefined') return null;
    let warningHint;
    /**
   * Blacklisting instead of whitelisting
   *
   * Blacklisting will miss some components, such as React.Fragment. Those will at least
   * trigger a warning in React.
   * We can't whitelist because there is no safe way to detect React.forwardRef
   * or class components. "Safe" means there's no public API.
   *
   */ if (typeof propValue === 'function' && !isClassComponent(propValue)) warningHint = 'Did you accidentally provide a plain function component instead?';
    if (warningHint !== undefined) return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an element type that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');
    return null;
}
exports.default = _chainPropTypesDefault.default(_propTypesDefault.default.elementType, elementTypeAcceptingRef);

},{"prop-types":"1tgq3","./chainPropTypes":"lrfIO","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"0EXh9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
// This module is based on https://github.com/airbnb/prop-types-exact repository.
// However, in order to reduce the number of dependencies and to remove some extra safe checks
// the module was forked.
const specialProperty = 'exact-prop: \u200b';
function exactProp(propTypes) {
    return _extendsDefault.default({
    }, propTypes, {
        [specialProperty]: (props)=>{
            const unsupportedProps = Object.keys(props).filter((prop)=>!propTypes.hasOwnProperty(prop)
            );
            if (unsupportedProps.length > 0) return new Error(`The following props are not supported: ${unsupportedProps.map((prop)=>`\`${prop}\``
            ).join(', ')}. Please remove them.`);
            return null;
        }
    });
}
exports.default = exactProp;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bjtKO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function formatMuiErrorMessage(code) {
    // Apply babel-plugin-transform-template-literals in loose mode
    // loose mode is safe iff we're concatenating primitives
    // see https://babeljs.io/docs/en/babel-plugin-transform-template-literals#loose
    /* eslint-disable prefer-template */ let url = 'https://mui.com/production-error/?code=' + code;
    for(let i = 1; i < arguments.length; i += 1)// rest params over-transpile for this case
    // eslint-disable-next-line prefer-rest-params
    url += '&args[]=' + encodeURIComponent(arguments[i]);
    return 'Minified MUI error #' + code + '; visit ' + url + ' for the full message.';
/* eslint-enable prefer-template */ }
exports.default = formatMuiErrorMessage;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"70eX0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getFunctionName", ()=>getFunctionName
);
var _reactIs = require("react-is"); // Simplified polyfill for IE11 support
// https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3
const fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
function getFunctionName(fn) {
    const match = `${fn}`.match(fnNameMatchRegex);
    const name = match && match[1];
    return name || '';
}
function getFunctionComponentName(Component, fallback = '') {
    return Component.displayName || Component.name || getFunctionName(Component) || fallback;
}
function getWrappedName(outerType, innerType, wrapperName) {
    const functionName = getFunctionComponentName(innerType);
    return outerType.displayName || (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName);
}
function getDisplayName(Component) {
    if (Component == null) return undefined;
    if (typeof Component === 'string') return Component;
    if (typeof Component === 'function') return getFunctionComponentName(Component, 'Component');
     // TypeScript can't have components as objects but they exist in the form of `memo` or `Suspense`
    if (typeof Component === 'object') switch(Component.$$typeof){
        case _reactIs.ForwardRef:
            return getWrappedName(Component, Component.render, 'ForwardRef');
        case _reactIs.Memo:
            return getWrappedName(Component, Component.type, 'memo');
        default:
            return undefined;
    }
    return undefined;
}
exports.default = getDisplayName;

},{"react-is":"5wFcP","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5wFcP":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-is.development.js');

},{"./cjs/react-is.development.js":"dxS2U"}],"dxS2U":[function(require,module,exports) {
/** @license React v17.0.2
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) return true;
        }
        return false;
    }
    function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
            var $$typeof = object.$$typeof;
            switch($$typeof){
                case REACT_ELEMENT_TYPE:
                    var type = object.type;
                    switch(type){
                        case REACT_FRAGMENT_TYPE:
                        case REACT_PROFILER_TYPE:
                        case REACT_STRICT_MODE_TYPE:
                        case REACT_SUSPENSE_TYPE:
                        case REACT_SUSPENSE_LIST_TYPE:
                            return type;
                        default:
                            var $$typeofType = type && type.$$typeof;
                            switch($$typeofType){
                                case REACT_CONTEXT_TYPE:
                                case REACT_FORWARD_REF_TYPE:
                                case REACT_LAZY_TYPE:
                                case REACT_MEMO_TYPE:
                                case REACT_PROVIDER_TYPE:
                                    return $$typeofType;
                                default:
                                    return $$typeof;
                            }
                    }
                case REACT_PORTAL_TYPE:
                    return $$typeof;
            }
        }
        return undefined;
    }
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element1 = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false;
    var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated
    function isAsyncMode(object) {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
            console['warn']("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
        }
        return false;
    }
    function isConcurrentMode(object) {
        if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
            hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint
            console['warn']("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
        }
        return false;
    }
    function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element1;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
})();

},{}],"3srV1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function HTMLElementType(props, propName, componentName, location, propFullName) {
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null) return null;
    if (propValue && propValue.nodeType !== 1) return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an HTMLElement.`);
    return null;
}
exports.default = HTMLElementType;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8HmGp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eVobu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
const refType = _propTypesDefault.default.oneOfType([
    _propTypesDefault.default.func,
    _propTypesDefault.default.object
]);
exports.default = refType;

},{"prop-types":"1tgq3","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8CgiP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _formatMuiErrorMessage = require("./formatMuiErrorMessage");
var _formatMuiErrorMessageDefault = parcelHelpers.interopDefault(_formatMuiErrorMessage);
function capitalize(string) {
    if (typeof string !== 'string') throw new Error(`MUI: \`capitalize(string)\` expects a string argument.`);
    return string.charAt(0).toUpperCase() + string.slice(1);
}
exports.default = capitalize;

},{"./formatMuiErrorMessage":"bjtKO","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gSy30":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function createChainedFunction(...funcs) {
    return funcs.reduce((acc, func)=>{
        if (func == null) return acc;
        return function chainedFunction(...args) {
            acc.apply(this, args);
            func.apply(this, args);
        };
    }, ()=>{
    });
}
exports.default = createChainedFunction;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9Cw0B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function debounce(func, wait = 166) {
    let timeout;
    function debounced(...args) {
        const later = ()=>{
            func.apply(this, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    }
    debounced.clear = ()=>{
        clearTimeout(timeout);
    };
    return debounced;
}
exports.default = debounce;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7WnOQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function deprecatedPropType(validator, reason) {
    return (props, propName, componentName, location, propFullName)=>{
        const componentNameSafe = componentName || '<<anonymous>>';
        const propFullNameSafe = propFullName || propName;
        if (typeof props[propName] !== 'undefined') return new Error(`The ${location} \`${propFullNameSafe}\` of ` + `\`${componentNameSafe}\` is deprecated. ${reason}`);
        return null;
    };
}
exports.default = deprecatedPropType;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"11ASb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function isMuiElement(element, muiNames) {
    return(/*#__PURE__*/ _react.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1);
}
exports.default = isMuiElement;

},{"react":"6TuXu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4a6NC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function ownerDocument(node) {
    return node && node.ownerDocument || document;
}
exports.default = ownerDocument;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7XUt0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ownerDocument = require("./ownerDocument");
var _ownerDocumentDefault = parcelHelpers.interopDefault(_ownerDocument);
function ownerWindow(node) {
    const doc = _ownerDocumentDefault.default(node);
    return doc.defaultView || window;
}
exports.default = ownerWindow;

},{"./ownerDocument":"4a6NC","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gdw56":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
function requirePropFactory(componentNameInError, Component) {
    const prevPropTypes = Component ? _extendsDefault.default({
    }, Component.propTypes) : null;
    const requireProp = (requiredProp)=>(props, propName, componentName, location, propFullName, ...args)=>{
            const propFullNameSafe = propFullName || propName;
            const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];
            if (defaultTypeChecker) {
                const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);
                if (typeCheckerResult) return typeCheckerResult;
            }
            if (typeof props[propName] !== 'undefined' && !props[requiredProp]) return new Error(`The prop \`${propFullNameSafe}\` of ` + `\`${componentNameInError}\` can only be used together with the \`${requiredProp}\` prop.`);
            return null;
        }
    ;
    return requireProp;
}
exports.default = requirePropFactory;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"esXVR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function setRef(ref, value) {
    if (typeof ref === 'function') ref(value);
    else if (ref) ref.current = value;
}
exports.default = setRef;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3drA0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
const useEnhancedEffect = typeof window !== 'undefined' ? _react.useLayoutEffect : _react.useEffect;
exports.default = useEnhancedEffect;

},{"react":"6TuXu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"liRjl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function useId(idOverride) {
    const [defaultId, setDefaultId] = _react.useState(idOverride);
    const id = idOverride || defaultId;
    _react.useEffect(()=>{
        if (defaultId == null) // Fallback to this default id when possible.
        // Use the random value for client-side rendering only.
        // We can't use it server-side.
        setDefaultId(`mui-${Math.round(Math.random() * 1000000000)}`);
    }, [
        defaultId
    ]);
    return id;
}
exports.default = useId;

},{"react":"6TuXu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hncwD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function unsupportedProp(props, propName, componentName, location, propFullName) {
    const propFullNameSafe = propFullName || propName;
    if (typeof props[propName] !== 'undefined') return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
    return null;
}
exports.default = unsupportedProp;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ddaKr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */ var _react = require("react");
function useControlled({ controlled , default: defaultProp , name , state ='value'  }) {
    // isControlled is ignored in the hook dependency lists as it should never change.
    const { current: isControlled  } = _react.useRef(controlled !== undefined);
    const [valueState, setValue] = _react.useState(defaultProp);
    const value = isControlled ? controlled : valueState;
    {
        _react.useEffect(()=>{
            if (isControlled !== (controlled !== undefined)) console.error([
                `MUI: A component is changing the ${isControlled ? '' : 'un'}controlled ${state} state of ${name} to be ${isControlled ? 'un' : ''}controlled.`,
                'Elements should not switch from uncontrolled to controlled (or vice versa).',
                `Decide between using a controlled or uncontrolled ${name} ` + 'element for the lifetime of the component.',
                "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.",
                'More info: https://fb.me/react-controlled-components'
            ].join('\n'));
        }, [
            state,
            name,
            controlled
        ]);
        const { current: defaultValue  } = _react.useRef(defaultProp);
        _react.useEffect(()=>{
            if (!isControlled && defaultValue !== defaultProp) console.error([
                `MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. ` + `To suppress this warning opt to use a controlled ${name}.`
            ].join('\n'));
        }, [
            JSON.stringify(defaultProp)
        ]);
    }
    const setValueIfUncontrolled = _react.useCallback((newValue)=>{
        if (!isControlled) setValue(newValue);
    }, []);
    return [
        value,
        setValueIfUncontrolled
    ];
}
exports.default = useControlled;

},{"react":"6TuXu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4GqXu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _useEnhancedEffect = require("./useEnhancedEffect");
var _useEnhancedEffectDefault = parcelHelpers.interopDefault(_useEnhancedEffect);
function useEventCallback(fn) {
    const ref = _react.useRef(fn);
    _useEnhancedEffectDefault.default(()=>{
        ref.current = fn;
    });
    return _react.useCallback((...args)=>// tslint:disable-next-line:ban-comma-operator
        ref.current(...args)
    , []);
}
exports.default = useEventCallback;

},{"react":"6TuXu","./useEnhancedEffect":"3drA0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cw9CI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _setRef = require("./setRef");
var _setRefDefault = parcelHelpers.interopDefault(_setRef);
function useForkRef(refA, refB) {
    /**
   * This will create a new function if the ref props change and are defined.
   * This means react will call the old forkRef with `null` and the new forkRef
   * with the ref. Cleanup naturally emerges from this behavior.
   */ return _react.useMemo(()=>{
        if (refA == null && refB == null) return null;
        return (refValue)=>{
            _setRefDefault.default(refA, refValue);
            _setRefDefault.default(refB, refValue);
        };
    }, [
        refA,
        refB
    ]);
}
exports.default = useForkRef;

},{"react":"6TuXu","./setRef":"esXVR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hzE05":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "teardown", ()=>teardown
);
// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js
var _react = require("react");
let hadKeyboardEvent = true;
let hadFocusVisibleRecently = false;
let hadFocusVisibleRecentlyTimeout = null;
const inputTypesWhitelist = {
    text: true,
    search: true,
    url: true,
    tel: true,
    email: true,
    password: true,
    number: true,
    date: true,
    month: true,
    week: true,
    time: true,
    datetime: true,
    'datetime-local': true
};
/**
 * Computes whether the given element should automatically trigger the
 * `focus-visible` class being added, i.e. whether it should always match
 * `:focus-visible` when focused.
 * @param {Element} node
 * @returns {boolean}
 */ function focusTriggersKeyboardModality(node) {
    const { type , tagName  } = node;
    if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) return true;
    if (tagName === 'TEXTAREA' && !node.readOnly) return true;
    if (node.isContentEditable) return true;
    return false;
}
/**
 * Keep track of our keyboard modality state with `hadKeyboardEvent`.
 * If the most recent user interaction was via the keyboard;
 * and the key press did not include a meta, alt/option, or control key;
 * then the modality is keyboard. Otherwise, the modality is not keyboard.
 * @param {KeyboardEvent} event
 */ function handleKeyDown(event) {
    if (event.metaKey || event.altKey || event.ctrlKey) return;
    hadKeyboardEvent = true;
}
/**
 * If at any point a user clicks with a pointing device, ensure that we change
 * the modality away from keyboard.
 * This avoids the situation where a user presses a key on an already focused
 * element, and then clicks on a different element, focusing it with a
 * pointing device, while we still think we're in keyboard modality.
 */ function handlePointerDown() {
    hadKeyboardEvent = false;
}
function handleVisibilityChange() {
    if (this.visibilityState === 'hidden') // If the tab becomes active again, the browser will handle calling focus
    // on the element (Safari actually calls it twice).
    // If this tab change caused a blur on an element with focus-visible,
    // re-apply the class when the user switches back to the tab.
    {
        if (hadFocusVisibleRecently) hadKeyboardEvent = true;
    }
}
function prepare(doc) {
    doc.addEventListener('keydown', handleKeyDown, true);
    doc.addEventListener('mousedown', handlePointerDown, true);
    doc.addEventListener('pointerdown', handlePointerDown, true);
    doc.addEventListener('touchstart', handlePointerDown, true);
    doc.addEventListener('visibilitychange', handleVisibilityChange, true);
}
function teardown(doc) {
    doc.removeEventListener('keydown', handleKeyDown, true);
    doc.removeEventListener('mousedown', handlePointerDown, true);
    doc.removeEventListener('pointerdown', handlePointerDown, true);
    doc.removeEventListener('touchstart', handlePointerDown, true);
    doc.removeEventListener('visibilitychange', handleVisibilityChange, true);
}
function isFocusVisible(event) {
    const { target  } = event;
    try {
        return target.matches(':focus-visible');
    } catch (error) {
    // We use our own heuristic for those browsers.
    // Rethrow might be better if it's not the expected error but do we really
    // want to crash if focus-visible malfunctioned?
    } // No need for validFocusTarget check. The user does that by attaching it to
    // focusable events only.
    return hadKeyboardEvent || focusTriggersKeyboardModality(target);
}
function useIsFocusVisible() {
    const ref = _react.useCallback((node)=>{
        if (node != null) prepare(node.ownerDocument);
    }, []);
    const isFocusVisibleRef = _react.useRef(false);
    /**
   * Should be called if a blur event is fired
   */ function handleBlurVisible() {
        // checking against potential state variable does not suffice if we focus and blur synchronously.
        // React wouldn't have time to trigger a re-render so `focusVisible` would be stale.
        // Ideally we would adjust `isFocusVisible(event)` to look at `relatedTarget` for blur events.
        // This doesn't work in IE11 due to https://github.com/facebook/react/issues/3751
        // TODO: check again if React releases their internal changes to focus event handling (https://github.com/facebook/react/pull/19186).
        if (isFocusVisibleRef.current) {
            // To detect a tab/window switch, we look for a blur event followed
            // rapidly by a visibility change.
            // If we don't see a visibility change within 100ms, it's probably a
            // regular focus change.
            hadFocusVisibleRecently = true;
            window.clearTimeout(hadFocusVisibleRecentlyTimeout);
            hadFocusVisibleRecentlyTimeout = window.setTimeout(()=>{
                hadFocusVisibleRecently = false;
            }, 100);
            isFocusVisibleRef.current = false;
            return true;
        }
        return false;
    }
    /**
   * Should be called if a blur event is fired
   */ function handleFocusVisible(event) {
        if (isFocusVisible(event)) {
            isFocusVisibleRef.current = true;
            return true;
        }
        return false;
    }
    return {
        isFocusVisibleRef,
        onFocus: handleFocusVisible,
        onBlur: handleBlurVisible,
        ref
    };
}
exports.default = useIsFocusVisible;

},{"react":"6TuXu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1Nut4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getScrollbarSize(doc) {
    // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
    const documentWidth = doc.documentElement.clientWidth;
    return Math.abs(window.innerWidth - documentWidth);
}
exports.default = getScrollbarSize;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9DiES":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Based on the jquery plugin https://github.com/othree/jquery.rtl-scroll-type
 *
 * Types of scrollLeft, assuming scrollWidth=100 and direction is rtl.
 *
 * Type             | <- Most Left | Most Right -> | Initial
 * ---------------- | ------------ | ------------- | -------
 * default          | 0            | 100           | 100
 * negative (spec*) | -100         | 0             | 0
 * reverse          | 100          | 0             | 0
 *
 * Edge 85: default
 * Safari 14: negative
 * Chrome 85: negative
 * Firefox 81: negative
 * IE11: reverse
 *
 * spec* https://drafts.csswg.org/cssom-view/#dom-window-scroll
 */ parcelHelpers.export(exports, "detectScrollType", ()=>detectScrollType
) // Based on https://stackoverflow.com/a/24394376
;
parcelHelpers.export(exports, "getNormalizedScrollLeft", ()=>getNormalizedScrollLeft
);
// Source from https://github.com/alitaheri/normalize-scroll-left
let cachedType;
function detectScrollType() {
    if (cachedType) return cachedType;
    const dummy = document.createElement('div');
    const container = document.createElement('div');
    container.style.width = '10px';
    container.style.height = '1px';
    dummy.appendChild(container);
    dummy.dir = 'rtl';
    dummy.style.fontSize = '14px';
    dummy.style.width = '4px';
    dummy.style.height = '1px';
    dummy.style.position = 'absolute';
    dummy.style.top = '-1000px';
    dummy.style.overflow = 'scroll';
    document.body.appendChild(dummy);
    cachedType = 'reverse';
    if (dummy.scrollLeft > 0) cachedType = 'default';
    else {
        dummy.scrollLeft = 1;
        if (dummy.scrollLeft === 0) cachedType = 'negative';
    }
    document.body.removeChild(dummy);
    return cachedType;
}
function getNormalizedScrollLeft(element, direction) {
    const scrollLeft = element.scrollLeft; // Perform the calculations only when direction is rtl to avoid messing up the ltr behavior
    if (direction !== 'rtl') return scrollLeft;
    const type = detectScrollType();
    switch(type){
        case 'negative':
            return element.scrollWidth - element.clientWidth + scrollLeft;
        case 'reverse':
            return element.scrollWidth - element.clientWidth - scrollLeft;
        default:
            return scrollLeft;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6t496":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
const usePreviousProps = (value)=>{
    const ref = _react.useRef({
    });
    _react.useEffect(()=>{
        ref.current = value;
    });
    return ref.current;
};
exports.default = usePreviousProps;

},{"react":"6TuXu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9q0gE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const visuallyHidden = {
    border: 0,
    clip: 'rect(0 0 0 0)',
    height: '1px',
    margin: -1,
    overflow: 'hidden',
    padding: 0,
    position: 'absolute',
    whiteSpace: 'nowrap',
    width: '1px'
};
exports.default = visuallyHidden;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1S9ZJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTypeByValue", ()=>getTypeByValue
) // IE 11 support
;
function getTypeByValue(value) {
    const valueType = typeof value;
    switch(valueType){
        case 'number':
            if (Number.isNaN(value)) return 'NaN';
            if (!Number.isFinite(value)) return 'Infinity';
            if (value !== Math.floor(value)) return 'float';
            return 'number';
        case 'object':
            if (value === null) return 'null';
            return value.constructor.name;
        default:
            return valueType;
    }
}
function ponyfillIsInteger(x) {
    // eslint-disable-next-line no-restricted-globals
    return typeof x === 'number' && isFinite(x) && Math.floor(x) === x;
}
const isInteger = Number.isInteger || ponyfillIsInteger;
function requiredInteger(props, propName, componentName, location) {
    const propValue = props[propName];
    if (propValue == null || !isInteger(propValue)) {
        const propType = getTypeByValue(propValue);
        return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
    }
    return null;
}
function validator(props, propName, ...other) {
    const propValue = props[propName];
    if (propValue === undefined) return null;
    return requiredInteger(props, propName, ...other);
}
function validatorNoop() {
    return null;
}
validator.isRequired = requiredInteger;
validatorNoop.isRequired = validatorNoop;
exports.default = validator;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1Utbw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_backdropUnstyledDefault.default
);
parcelHelpers.export(exports, "backdropUnstyledClasses", ()=>_backdropUnstyledClassesDefault.default
);
parcelHelpers.export(exports, "getBackdropUtilityClass", ()=>_backdropUnstyledClasses.getBackdropUtilityClass
);
var _backdropUnstyled = require("./BackdropUnstyled");
var _backdropUnstyledDefault = parcelHelpers.interopDefault(_backdropUnstyled);
var _backdropUnstyledClasses = require("./backdropUnstyledClasses");
var _backdropUnstyledClassesDefault = parcelHelpers.interopDefault(_backdropUnstyledClasses);

},{"./BackdropUnstyled":"iwWTu","./backdropUnstyledClasses":"35v5Z","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iwWTu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _composeClasses = require("../composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _isHostComponent = require("../utils/isHostComponent");
var _isHostComponentDefault = parcelHelpers.interopDefault(_isHostComponent);
var _backdropUnstyledClasses = require("./backdropUnstyledClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "classes",
    "className",
    "invisible",
    "component",
    "components",
    "componentsProps",
    "theme"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , invisible  } = ownerState;
    const slots = {
        root: [
            'root',
            invisible && 'invisible'
        ]
    };
    return _composeClassesDefault.default(slots, _backdropUnstyledClasses.getBackdropUtilityClass, classes);
};
const BackdropUnstyled = /*#__PURE__*/ _react.forwardRef(function BackdropUnstyled1(props, ref) {
    const { classes: classesProp , className , invisible =false , component ='div' , components ={
    } , componentsProps ={
    } , /* eslint-disable react/prop-types */ theme  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({
    }, props, {
        classes: classesProp,
        invisible
    });
    const classes = useUtilityClasses(ownerState);
    const Root = components.Root || component;
    const rootProps = componentsProps.root || {
    };
    return(/*#__PURE__*/ _jsxRuntime.jsx(Root, _extendsDefault.default({
        "aria-hidden": true
    }, rootProps, !_isHostComponentDefault.default(Root) && {
        as: component,
        ownerState: _extendsDefault.default({
        }, ownerState, rootProps.ownerState),
        theme
    }, {
        ref: ref
    }, other, {
        className: _clsxDefault.default(classes.root, rootProps.className, className)
    })));
});
BackdropUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the Backdrop.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Backdrop.
   * @default {}
   */ componentsProps: _propTypesDefault.default.object,
    /**
   * If `true`, the backdrop is invisible.
   * It can be used when rendering a popover or a custom select component.
   * @default false
   */ invisible: _propTypesDefault.default.bool
};
exports.default = BackdropUnstyled;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","react":"6TuXu","prop-types":"1tgq3","clsx":"eg1He","../composeClasses":"e4OCP","../utils/isHostComponent":"dEz9n","./backdropUnstyledClasses":"35v5Z","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"e4OCP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_composeClassesDefault.default
);
var _composeClasses = require("./composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);

},{"./composeClasses":"3wLeI","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3wLeI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function composeClasses(slots, getUtilityClass, classes) {
    const output = {
    };
    Object.keys(slots).forEach(// @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
    (slot)=>{
        output[slot] = slots[slot].reduce((acc, key)=>{
            if (key) {
                if (classes && classes[key]) acc.push(classes[key]);
                acc.push(getUtilityClass(key));
            }
            return acc;
        }, []).join(' ');
    });
    return output;
}
exports.default = composeClasses;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dEz9n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Determines if a given element is a DOM element name (i.e. not a React component).
 */ function isHostComponent(element) {
    return typeof element === 'string';
}
exports.default = isHostComponent;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"35v5Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getBackdropUtilityClass", ()=>getBackdropUtilityClass
);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
function getBackdropUtilityClass(slot) {
    return _generateUtilityClassDefault.default('MuiBackdrop', slot);
}
const backdropUnstyledClasses = _generateUtilityClassesDefault.default('MuiBackdrop', [
    'root',
    'invisible'
]);
exports.default = backdropUnstyledClasses;

},{"../generateUtilityClasses":"gmgZV","../generateUtilityClass":"ruAWr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gmgZV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_generateUtilityClassesDefault.default
);
var _generateUtilityClasses = require("./generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);

},{"./generateUtilityClasses":"dRyzy","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dRyzy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
function generateUtilityClasses(componentName, slots) {
    const result = {
    };
    slots.forEach((slot)=>{
        result[slot] = _generateUtilityClassDefault.default(componentName, slot);
    });
    return result;
}
exports.default = generateUtilityClasses;

},{"../generateUtilityClass":"ruAWr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ruAWr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_generateUtilityClassDefault.default
);
var _generateUtilityClass = require("./generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);

},{"./generateUtilityClass":"fuSFL","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fuSFL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classNameGenerator = require("./ClassNameGenerator");
var _classNameGeneratorDefault = parcelHelpers.interopDefault(_classNameGenerator);
const globalStateClassesMapping = {
    active: 'Mui-active',
    checked: 'Mui-checked',
    completed: 'Mui-completed',
    disabled: 'Mui-disabled',
    error: 'Mui-error',
    expanded: 'Mui-expanded',
    focused: 'Mui-focused',
    focusVisible: 'Mui-focusVisible',
    required: 'Mui-required',
    selected: 'Mui-selected'
};
function generateUtilityClass(componentName, slot) {
    const globalStateClass = globalStateClassesMapping[slot];
    return globalStateClass || `${_classNameGeneratorDefault.default.generate(componentName)}-${slot}`;
}
exports.default = generateUtilityClass;

},{"./ClassNameGenerator":"iOfzL","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iOfzL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const defaultGenerator = (componentName)=>componentName
;
const createClassNameGenerator = ()=>{
    let generate = defaultGenerator;
    return {
        configure (generator) {
            generate = generator;
        },
        generate (componentName) {
            return generate(componentName);
        },
        reset () {
            generate = defaultGenerator;
        }
    };
};
const ClassNameGenerator = createClassNameGenerator();
exports.default = ClassNameGenerator;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8xIwr":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-jsx-runtime.development.js');

},{"./cjs/react-jsx-runtime.development.js":"hw7vv"}],"hw7vv":[function(require,module,exports) {
/** @license React v17.0.1
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var React = require('react');
    var _assign = require('object-assign');
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    exports.Fragment = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        exports.Fragment = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) return true;
        }
        return false;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case exports.Fragment:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    didWarnAboutStringRefs = {
    };
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function warnIfStringRefCannotBeAutoConverted(config, self) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error("Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", getComponentName(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {
        }; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */ function jsxDEV(type, config, maybeKey, source, self) {
        var propName; // Reserved names are extracted
        var props = {
        };
        var key = null;
        var ref = null; // Currently, key can be spread in as a prop. This causes a potential
        // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
        // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
        // but as an intermediary step, we will use jsxDEV for everything except
        // <div {...props} key="Hi" />, because we aren't currently able to tell if
        // key is explicitly declared to be undefined or not.
        if (maybeKey !== undefined) key = '' + maybeKey;
        if (hasValidKey(config)) key = '' + config.key;
        if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self);
        } // Remaining properties are added to a new props object
        for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
         // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner$1.current) {
            var name = getComponentName(ReactCurrentOwner$1.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {
    };
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error("Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (Array.isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentName(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentName(type);
            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (Array.isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) {
            var children = props.children;
            if (children !== undefined) {
                if (isStaticChildren) {
                    if (Array.isArray(children)) {
                        for(var i = 0; i < children.length; i++)validateChildKeys(children[i], type);
                        if (Object.freeze) Object.freeze(children);
                    } else error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                } else validateChildKeys(children, type);
            }
        }
        if (type === exports.Fragment) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    } // These two functions exist to still get child warnings in dev
    // even with the prod transform. This means that jsxDEV is purely
    // opt-in behavior for better messages but that we won't stop
    // giving you warnings if you use production apis.
    function jsxWithValidationStatic(type, props, key) {
        return jsxWithValidation(type, props, key, true);
    }
    function jsxWithValidationDynamic(type, props, key) {
        return jsxWithValidation(type, props, key, false);
    }
    var jsx = jsxWithValidationDynamic; // we may want to special case jsxs internally to take advantage of static children.
    // for now we can ship identical prod functions
    var jsxs = jsxWithValidationStatic;
    exports.jsx = jsx;
    exports.jsxs = jsxs;
})();

},{"react":"6TuXu","object-assign":"jzTFF"}],"frwan":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_badgeUnstyledDefault.default
);
parcelHelpers.export(exports, "badgeUnstyledClasses", ()=>_badgeUnstyledClassesDefault.default
);
parcelHelpers.export(exports, "getBadgeUtilityClass", ()=>_badgeUnstyledClasses.getBadgeUtilityClass
);
var _badgeUnstyled = require("./BadgeUnstyled");
var _badgeUnstyledDefault = parcelHelpers.interopDefault(_badgeUnstyled);
var _badgeUnstyledClasses = require("./badgeUnstyledClasses");
var _badgeUnstyledClassesDefault = parcelHelpers.interopDefault(_badgeUnstyledClasses);

},{"./BadgeUnstyled":"ioxFl","./badgeUnstyledClasses":"g9ILI","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ioxFl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _isHostComponent = require("../utils/isHostComponent");
var _isHostComponentDefault = parcelHelpers.interopDefault(_isHostComponent);
var _composeClasses = require("../composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _badgeUnstyledClasses = require("./badgeUnstyledClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "anchorOrigin",
    "classes",
    "badgeContent",
    "component",
    "children",
    "className",
    "components",
    "componentsProps",
    "invisible",
    "max",
    "overlap",
    "showZero",
    "variant",
    "theme"
];
const useUtilityClasses = (ownerState)=>{
    const { variant , anchorOrigin , overlap , invisible , classes  } = ownerState;
    const slots = {
        root: [
            'root'
        ],
        badge: [
            'badge',
            variant,
            `anchorOrigin${_utils.unstable_capitalize(anchorOrigin.vertical)}${_utils.unstable_capitalize(anchorOrigin.horizontal)}${_utils.unstable_capitalize(overlap)}`,
            invisible && 'invisible'
        ]
    };
    return _composeClassesDefault.default(slots, _badgeUnstyledClasses.getBadgeUtilityClass, classes);
};
const BadgeUnstyled = /*#__PURE__*/ _react.forwardRef(function BadgeUnstyled1(props, ref) {
    const { anchorOrigin: anchorOriginProp = {
        vertical: 'top',
        horizontal: 'right'
    } , classes: classesProp , badgeContent: badgeContentProp , component ='span' , children , className , components ={
    } , componentsProps ={
    } , invisible: invisibleProp , max: maxProp = 99 , overlap: overlapProp = 'rectangular' , showZero =false , variant: variantProp = 'standard' , /* eslint-disable react/prop-types */ theme  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const prevProps = _utils.usePreviousProps({
        anchorOrigin: anchorOriginProp,
        badgeContent: badgeContentProp,
        max: maxProp,
        overlap: overlapProp,
        variant: variantProp
    });
    let invisible = invisibleProp;
    if (invisibleProp == null && (badgeContentProp === 0 && !showZero || badgeContentProp == null && variantProp !== 'dot')) invisible = true;
    const { anchorOrigin =anchorOriginProp , badgeContent , max =maxProp , overlap =overlapProp , variant =variantProp  } = invisible ? prevProps : props;
    const ownerState = _extendsDefault.default({
    }, props, {
        anchorOrigin,
        badgeContent,
        classes: classesProp,
        invisible,
        max,
        overlap,
        variant
    });
    let displayValue = '';
    if (variant !== 'dot') displayValue = badgeContent > max ? `${max}+` : badgeContent;
    const classes = useUtilityClasses(ownerState);
    const Root = components.Root || component;
    const rootProps = componentsProps.root || {
    };
    const Badge = components.Badge || 'span';
    const badgeProps = componentsProps.badge || {
    };
    return(/*#__PURE__*/ _jsxRuntime.jsxs(Root, _extendsDefault.default({
    }, rootProps, !_isHostComponentDefault.default(Root) && {
        as: component,
        ownerState: _extendsDefault.default({
        }, ownerState, rootProps.ownerState),
        theme
    }, {
        ref: ref
    }, other, {
        className: _clsxDefault.default(classes.root, rootProps.className, className),
        children: [
            children,
            /*#__PURE__*/ _jsxRuntime.jsx(Badge, _extendsDefault.default({
            }, badgeProps, !_isHostComponentDefault.default(Badge) && {
                ownerState: _extendsDefault.default({
                }, ownerState, badgeProps.ownerState),
                theme
            }, {
                className: _clsxDefault.default(classes.badge, badgeProps.className),
                children: displayValue
            }))
        ]
    })));
});
BadgeUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The anchor of the badge.
   * @default {
   *   vertical: 'top',
   *   horizontal: 'right',
   * }
   */ anchorOrigin: _propTypesDefault.default.shape({
        horizontal: _propTypesDefault.default.oneOf([
            'left',
            'right'
        ]).isRequired,
        vertical: _propTypesDefault.default.oneOf([
            'bottom',
            'top'
        ]).isRequired
    }),
    /**
   * The content rendered within the badge.
   */ badgeContent: _propTypesDefault.default.node,
    /**
   * The badge will be added relative to this node.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the Badge.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Badge: _propTypesDefault.default.elementType,
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Badge.
   * @default {}
   */ componentsProps: _propTypesDefault.default.object,
    /**
   * If `true`, the badge is invisible.
   */ invisible: _propTypesDefault.default.bool,
    /**
   * Max count to show.
   * @default 99
   */ max: _propTypesDefault.default.number,
    /**
   * Wrapped shape the badge should overlap.
   * @default 'rectangular'
   */ overlap: _propTypesDefault.default.oneOf([
        'circular',
        'rectangular'
    ]),
    /**
   * Controls whether the badge is hidden when `badgeContent` is zero.
   * @default false
   */ showZero: _propTypesDefault.default.bool,
    /**
   * The variant to use.
   * @default 'standard'
   */ variant: _propTypesDefault.default.string
};
exports.default = BadgeUnstyled;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","react":"6TuXu","prop-types":"1tgq3","clsx":"eg1He","@mui/utils":"9YmNw","../utils/isHostComponent":"dEz9n","../composeClasses":"e4OCP","./badgeUnstyledClasses":"g9ILI","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"g9ILI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getBadgeUtilityClass", ()=>getBadgeUtilityClass
);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
function getBadgeUtilityClass(slot) {
    return _generateUtilityClassDefault.default('MuiBadge', slot);
}
const badgeUnstyledClasses = _generateUtilityClassesDefault.default('MuiBadge', [
    'root',
    'badge',
    'dot',
    'standard',
    'anchorOriginTopLeftCircular',
    'anchorOriginTopLeftRectangular',
    'anchorOriginTopRightCircular',
    'anchorOriginTopRightRectangular',
    'anchorOriginBottomLeftCircular',
    'anchorOriginBottomLeftRectangular',
    'anchorOriginBottomRightCircular',
    'anchorOriginBottomRightRectangular',
    'invisible'
]);
exports.default = badgeUnstyledClasses;

},{"../generateUtilityClasses":"gmgZV","../generateUtilityClass":"ruAWr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kFTAV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_buttonUnstyledDefault.default
);
parcelHelpers.export(exports, "buttonUnstyledClasses", ()=>_buttonUnstyledClassesDefault.default
);
parcelHelpers.export(exports, "getButtonUnstyledUtilityClass", ()=>_buttonUnstyledClasses.getButtonUnstyledUtilityClass
);
parcelHelpers.export(exports, "useButton", ()=>_useButtonDefault.default
);
var _buttonUnstyled = require("./ButtonUnstyled");
var _buttonUnstyledDefault = parcelHelpers.interopDefault(_buttonUnstyled);
var _buttonUnstyledClasses = require("./buttonUnstyledClasses");
var _buttonUnstyledClassesDefault = parcelHelpers.interopDefault(_buttonUnstyledClasses);
var _buttonUnstyledProps = require("./ButtonUnstyledProps");
parcelHelpers.exportAll(_buttonUnstyledProps, exports);
var _useButton = require("./useButton");
var _useButtonDefault = parcelHelpers.interopDefault(_useButton);

},{"./ButtonUnstyled":"9qmNc","./buttonUnstyledClasses":"ix4PQ","./ButtonUnstyledProps":"7niDv","./useButton":"b2Awq","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9qmNc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _composeClasses = require("../composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _buttonUnstyledClasses = require("./buttonUnstyledClasses");
var _useButton = require("./useButton");
var _useButtonDefault = parcelHelpers.interopDefault(_useButton);
var _appendOwnerState = require("../utils/appendOwnerState");
var _appendOwnerStateDefault = parcelHelpers.interopDefault(_appendOwnerState);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "component",
    "components",
    "componentsProps",
    "children",
    "disabled",
    "action",
    "onBlur",
    "onClick",
    "onFocus",
    "onFocusVisible",
    "onKeyDown",
    "onKeyUp",
    "onMouseLeave"
];
const useUtilityClasses = (ownerState)=>{
    const { active , disabled , focusVisible  } = ownerState;
    const slots = {
        root: [
            'root',
            disabled && 'disabled',
            focusVisible && 'focusVisible',
            active && 'active'
        ]
    };
    return _composeClassesDefault.default(slots, _buttonUnstyledClasses.getButtonUnstyledUtilityClass, {
    });
};
/**
 * The foundation for building custom-styled buttons.
 *
 * Demos:
 *
 * - [Buttons](https://mui.com/components/buttons/)
 *
 * API:
 *
 * - [ButtonUnstyled API](https://mui.com/api/button-unstyled/)
 */ const ButtonUnstyled = /*#__PURE__*/ _react.forwardRef(function ButtonUnstyled1(props, ref) {
    var _ref;
    const { className , component , components ={
    } , componentsProps ={
    } , children , action  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const buttonRef = _react.useRef();
    const handleRef = _utils.unstable_useForkRef(buttonRef, ref);
    const { active , focusVisible , setFocusVisible , getRootProps  } = _useButtonDefault.default(_extendsDefault.default({
    }, props, {
        ref: handleRef
    }));
    _react.useImperativeHandle(action, ()=>({
            focusVisible: ()=>{
                setFocusVisible(true);
                buttonRef.current.focus();
            }
        })
    , [
        setFocusVisible
    ]);
    const ownerState = _extendsDefault.default({
    }, props, {
        active,
        focusVisible
    });
    const ButtonRoot = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';
    const buttonRootProps = _appendOwnerStateDefault.default(ButtonRoot, _extendsDefault.default({
    }, other, componentsProps.root), ownerState);
    const classes = useUtilityClasses(ownerState);
    return(/*#__PURE__*/ _jsxRuntime.jsx(ButtonRoot, _extendsDefault.default({
    }, getRootProps(), buttonRootProps, {
        className: _clsxDefault.default(classes.root, className, buttonRootProps.className),
        children: children
    })));
});
ButtonUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
   * A ref for imperative actions. It currently only supports `focusVisible()` action.
   */ action: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func,
        _propTypesDefault.default.shape({
            current: _propTypesDefault.default.shape({
                focusVisible: _propTypesDefault.default.func.isRequired
            })
        })
    ]),
    /**
   * @ignore
   */ children: _propTypesDefault.default.node,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the Root slot.
   * Either a string to use a HTML element or a component.
   * This is equivalent to `components.Root`. If both are provided, the `component` is used.
   * @default 'button'
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the Button.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * @ignore
   */ componentsProps: _propTypesDefault.default.object,
    /**
   * If `true`, the component is disabled.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ onClick: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onFocusVisible: _propTypesDefault.default.func
};
exports.default = ButtonUnstyled;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","react":"6TuXu","prop-types":"1tgq3","clsx":"eg1He","@mui/utils":"9YmNw","../composeClasses":"e4OCP","./buttonUnstyledClasses":"ix4PQ","./useButton":"b2Awq","../utils/appendOwnerState":"cXRHn","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ix4PQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getButtonUnstyledUtilityClass", ()=>getButtonUnstyledUtilityClass
);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
function getButtonUnstyledUtilityClass(slot) {
    return _generateUtilityClassDefault.default('ButtonUnstyled', slot);
}
const buttonUnstyledClasses = _generateUtilityClassesDefault.default('ButtonUnstyled', [
    'root',
    'active',
    'disabled',
    'focusVisible'
]);
exports.default = buttonUnstyledClasses;

},{"../generateUtilityClass":"ruAWr","../generateUtilityClasses":"gmgZV","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"b2Awq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _utils = require("@mui/utils");
var _extractEventHandlers = require("../utils/extractEventHandlers");
var _extractEventHandlersDefault = parcelHelpers.interopDefault(_extractEventHandlers);
function useButton(props) {
    var _ref;
    const { component , components ={
    } , disabled =false , href , ref , tabIndex =0 , to , type  } = props;
    const buttonRef = _react.useRef();
    const [active, setActive] = _react.useState(false);
    const { isFocusVisibleRef , onFocus: handleFocusVisible , onBlur: handleBlurVisible , ref: focusVisibleRef  } = _utils.unstable_useIsFocusVisible();
    const [focusVisible, setFocusVisible] = _react.useState(false);
    if (disabled && focusVisible) setFocusVisible(false);
    _react.useEffect(()=>{
        isFocusVisibleRef.current = focusVisible;
    }, [
        focusVisible,
        isFocusVisibleRef
    ]);
    const createHandleMouseLeave = (otherHandlers)=>(event)=>{
            var _otherHandlers$onMous;
            if (focusVisible) event.preventDefault();
            (_otherHandlers$onMous = otherHandlers.onMouseLeave) == null || _otherHandlers$onMous.call(otherHandlers, event);
        }
    ;
    const createHandleBlur = (otherHandlers)=>(event)=>{
            var _otherHandlers$onBlur;
            handleBlurVisible(event);
            if (isFocusVisibleRef.current === false) setFocusVisible(false);
            (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
        }
    ;
    const createHandleFocus = (otherHandlers)=>(event)=>{
            var _otherHandlers$onFocu2;
            // Fix for https://github.com/facebook/react/issues/7769
            if (!buttonRef.current) buttonRef.current = event.currentTarget;
            handleFocusVisible(event);
            if (isFocusVisibleRef.current === true) {
                var _otherHandlers$onFocu;
                setFocusVisible(true);
                (_otherHandlers$onFocu = otherHandlers.onFocusVisible) == null || _otherHandlers$onFocu.call(otherHandlers, event);
            }
            (_otherHandlers$onFocu2 = otherHandlers.onFocus) == null || _otherHandlers$onFocu2.call(otherHandlers, event);
        }
    ;
    const elementType = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';
    const isNonNativeButton = ()=>{
        const button = buttonRef.current;
        return elementType !== 'button' && !((button == null ? void 0 : button.tagName) === 'A' && button != null && button.href);
    };
    const createHandleMouseDown = (otherHandlers)=>(event)=>{
            var _otherHandlers$onMous2;
            if (event.target === event.currentTarget && !disabled) setActive(true);
            (_otherHandlers$onMous2 = otherHandlers.onMouseDown) == null || _otherHandlers$onMous2.call(otherHandlers, event);
        }
    ;
    const createHandleMouseUp = (otherHandlers)=>(event)=>{
            var _otherHandlers$onMous3;
            if (event.target === event.currentTarget) setActive(false);
            (_otherHandlers$onMous3 = otherHandlers.onMouseUp) == null || _otherHandlers$onMous3.call(otherHandlers, event);
        }
    ;
    const createHandleKeyDown = (otherHandlers)=>(event)=>{
            var _otherHandlers$onKeyD;
            if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') event.preventDefault();
            if (event.target === event.currentTarget && event.key === ' ' && !disabled) setActive(true);
            (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event); // Keyboard accessibility for non interactive elements
            if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
                var _otherHandlers$onClic;
                event.preventDefault();
                (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
            }
        }
    ;
    const createHandleKeyUp = (otherHandlers)=>(event)=>{
            var _otherHandlers$onKeyU;
            // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
            // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
            if (event.target === event.currentTarget) setActive(false);
            (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null || _otherHandlers$onKeyU.call(otherHandlers, event); // Keyboard accessibility for non interactive elements
            if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {
                var _otherHandlers$onClic2;
                (_otherHandlers$onClic2 = otherHandlers.onClick) == null || _otherHandlers$onClic2.call(otherHandlers, event);
            }
        }
    ;
    const handleOwnRef = _utils.unstable_useForkRef(focusVisibleRef, buttonRef);
    const handleRef = _utils.unstable_useForkRef(ref, handleOwnRef);
    const [hostElementName, setHostElementName] = _react.useState('');
    const updateRef = (instance)=>{
        var _instance$tagName;
        setHostElementName((_instance$tagName = instance == null ? void 0 : instance.tagName) != null ? _instance$tagName : '');
        _utils.unstable_setRef(handleRef, instance);
    };
    const buttonProps = {
    };
    if (hostElementName === 'BUTTON') {
        buttonProps.type = type != null ? type : 'button';
        buttonProps.disabled = disabled;
    } else if (hostElementName !== '') {
        if (!href && !to) buttonProps.role = 'button';
        if (disabled) buttonProps['aria-disabled'] = disabled;
    }
    const getRootProps = (otherHandlers)=>{
        const propsEventHandlers = _extractEventHandlersDefault.default(props);
        const externalEventHandlers = _extendsDefault.default({
        }, propsEventHandlers, otherHandlers);
        const ownEventHandlers = {
            onBlur: createHandleBlur(externalEventHandlers),
            onFocus: createHandleFocus(externalEventHandlers),
            onKeyDown: createHandleKeyDown(externalEventHandlers),
            onKeyUp: createHandleKeyUp(externalEventHandlers),
            onMouseDown: createHandleMouseDown(externalEventHandlers),
            onMouseLeave: createHandleMouseLeave(externalEventHandlers),
            onMouseUp: createHandleMouseUp(externalEventHandlers)
        };
        const mergedEventHandlers = _extendsDefault.default({
        }, externalEventHandlers, ownEventHandlers); // onFocusVisible can be present on the props, but since it's not a valid React event handler,
        // it must not be forwarded to the inner component.
        delete mergedEventHandlers.onFocusVisible;
        return _extendsDefault.default({
            tabIndex: disabled ? -1 : tabIndex,
            type,
            ref: updateRef
        }, buttonProps, mergedEventHandlers);
    };
    return {
        getRootProps,
        focusVisible,
        setFocusVisible,
        disabled,
        active
    };
}
exports.default = useButton;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","react":"6TuXu","@mui/utils":"9YmNw","../utils/extractEventHandlers":"4J6Ye","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4J6Ye":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function extractEventHandlers(object, excludeKeys = []) {
    if (object === undefined) return {
    };
    const result = {
    };
    Object.keys(object).filter((prop)=>prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop)
    ).forEach((prop)=>{
        result[prop] = object[prop];
    });
    return result;
}
exports.default = extractEventHandlers;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cXRHn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _isHostComponent = require("./isHostComponent");
var _isHostComponentDefault = parcelHelpers.interopDefault(_isHostComponent);
function appendOwnerState(elementType, existingProps, ownerState) {
    if (_isHostComponentDefault.default(elementType)) return existingProps;
    return _extendsDefault.default({
    }, existingProps, {
        ownerState: _extendsDefault.default({
        }, existingProps.ownerState, ownerState)
    });
}
exports.default = appendOwnerState;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","./isHostComponent":"dEz9n","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7niDv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aLwAD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_formControlUnstyledDefault.default
);
parcelHelpers.export(exports, "FormControlUnstyledContext", ()=>_formControlContextDefault.default
);
parcelHelpers.export(exports, "formControlUnstyledClasses", ()=>_formControlUnstyledClassesDefault.default
);
parcelHelpers.export(exports, "useFormControlUnstyled", ()=>_useFormControlDefault.default
);
var _formControlUnstyled = require("./FormControlUnstyled");
var _formControlUnstyledDefault = parcelHelpers.interopDefault(_formControlUnstyled);
var _formControlContext = require("./FormControlContext");
var _formControlContextDefault = parcelHelpers.interopDefault(_formControlContext);
var _formControlUnstyledClasses = require("./formControlUnstyledClasses");
var _formControlUnstyledClassesDefault = parcelHelpers.interopDefault(_formControlUnstyledClasses);
parcelHelpers.exportAll(_formControlUnstyledClasses, exports);
var _useFormControl = require("./useFormControl");
var _useFormControlDefault = parcelHelpers.interopDefault(_useFormControl);

},{"./FormControlUnstyled":"lo1PO","./FormControlContext":"epWmv","./formControlUnstyledClasses":"dg4CN","./useFormControl":"by8x4","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lo1PO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _formControlContext = require("./FormControlContext");
var _formControlContextDefault = parcelHelpers.interopDefault(_formControlContext);
var _appendOwnerState = require("../utils/appendOwnerState");
var _appendOwnerStateDefault = parcelHelpers.interopDefault(_appendOwnerState);
var _formControlUnstyledClasses = require("./formControlUnstyledClasses");
var _formControlUnstyledClassesDefault = parcelHelpers.interopDefault(_formControlUnstyledClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "defaultValue",
    "children",
    "className",
    "component",
    "components",
    "componentsProps",
    "disabled",
    "error",
    "focused",
    "onChange",
    "required",
    "value"
];
function hasValue(value) {
    return value != null && !(Array.isArray(value) && value.length === 0) && value !== '';
}
/**
 * Provides context such as filled/focused/error/required for form inputs.
 * Relying on the context provides high flexibility and ensures that the state always stays
 * consistent across the children of the `FormControl`.
 * This context is used by the following components:
 *
 * *   FormLabel
 * *   FormHelperText
 * *   Input
 * *   InputLabel
 *
 * You can find one composition example below and more going to [the demos](https://mui.com/components/text-fields/#components).
 *
 * ```jsx
 * <FormControl>
 *   <InputLabel htmlFor="my-input">Email address</InputLabel>
 *   <Input id="my-input" aria-describedby="my-helper-text" />
 *   <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
 * </FormControl>
 * ```
 *
 * ⚠️ Only one `Input` can be used within a FormControl because it create visual inconsistencies.
 * For instance, only one input can be focused at the same time, the state shouldn't be shared.
 *
 * Demos:
 *
 * - [Text Fields](https://mui.com/components/text-fields/)
 *
 * API:
 *
 * - [FormControlUnstyled API](https://mui.com/api/form-control-unstyled/)
 */ const FormControlUnstyled = /*#__PURE__*/ _react.forwardRef(function FormControlUnstyled1(props, ref) {
    var _ref;
    const { defaultValue , children , className , component , components ={
    } , componentsProps ={
    } , disabled =false , error =false , focused: visuallyFocused = false , onChange , required =false , value: incomingValue  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const [value, setValue] = _utils.unstable_useControlled({
        controlled: incomingValue,
        default: defaultValue,
        name: 'FormControl',
        state: 'value'
    });
    const filled = hasValue(value);
    const [focusedState, setFocused] = _react.useState(false);
    if (disabled && focusedState) setFocused(false);
    const focused = visuallyFocused !== undefined && !disabled ? visuallyFocused : focusedState;
    const ownerState = _extendsDefault.default({
    }, props, {
        disabled,
        error,
        filled,
        focused,
        required
    });
    let registerEffect = ()=>{
    };
    {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        const registeredInput = _react.useRef(false);
        registerEffect = ()=>{
            if (registeredInput.current) console.error([
                'MUI: There are multiple `Input` components inside a FormControl.',
                'This creates visual inconsistencies, only use one `Input`.'
            ].join('\n'));
            registeredInput.current = true;
            return ()=>{
                registeredInput.current = false;
            };
        };
    }
    const handleChange = (event)=>{
        setValue(event.target.value);
        onChange == null || onChange(event);
    };
    const childContext = {
        disabled,
        error,
        filled,
        focused,
        onBlur: ()=>{
            setFocused(false);
        },
        onChange: handleChange,
        onFocus: ()=>{
            setFocused(true);
        },
        registerEffect,
        required,
        value: value != null ? value : ''
    };
    const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';
    const rootProps = _appendOwnerStateDefault.default(Root, _extendsDefault.default({
    }, other, componentsProps.root), ownerState);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_formControlContextDefault.default.Provider, {
        value: childContext,
        children: /*#__PURE__*/ _jsxRuntime.jsx(Root, _extendsDefault.default({
            ref: ref
        }, rootProps, {
            className: _clsxDefault.default(_formControlUnstyledClassesDefault.default.root, className, rootProps == null ? void 0 : rootProps.className, disabled && _formControlUnstyledClassesDefault.default.disabled),
            children: children
        }))
    }));
});
FormControlUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Class name applied to the root element.
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the FormControl.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * @ignore
   */ componentsProps: _propTypesDefault.default.object,
    /**
   * @ignore
   */ defaultValue: _propTypesDefault.default.any,
    /**
   * If `true`, the label, input and helper text should be displayed in a disabled state.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the label is displayed in an error state.
   * @default false
   */ error: _propTypesDefault.default.bool,
    /**
   * If `true`, the component is displayed in focused state.
   * @default false
   */ focused: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ onChange: _propTypesDefault.default.func,
    /**
   * If `true`, the label will indicate that the `input` is required.
   * @default false
   */ required: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ value: _propTypesDefault.default.any
};
exports.default = FormControlUnstyled;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","react":"6TuXu","prop-types":"1tgq3","clsx":"eg1He","@mui/utils":"9YmNw","./FormControlContext":"epWmv","../utils/appendOwnerState":"cXRHn","./formControlUnstyledClasses":"dg4CN","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"epWmv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
/**
 * @ignore - internal component.
 */ const FormControlUnstyledContext = /*#__PURE__*/ _react.createContext(undefined);
FormControlUnstyledContext.displayName = 'FormControlUnstyledContext';
exports.default = FormControlUnstyledContext;

},{"react":"6TuXu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dg4CN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getFormControlUnstyledUtilityClasses", ()=>getFormControlUnstyledUtilityClasses
);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
function getFormControlUnstyledUtilityClasses(slot) {
    return _generateUtilityClassDefault.default('MuiFormControl', slot);
}
const formControlUnstyledClasses = _generateUtilityClassesDefault.default('MuiFormControl', [
    'root',
    'disabled'
]);
exports.default = formControlUnstyledClasses;

},{"../generateUtilityClass":"ruAWr","../generateUtilityClasses":"gmgZV","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"by8x4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _formControlContext = require("./FormControlContext");
var _formControlContextDefault = parcelHelpers.interopDefault(_formControlContext);
function useFormControlUnstyled() {
    return _react.useContext(_formControlContextDefault.default);
}
exports.default = useFormControlUnstyled;

},{"react":"6TuXu","./FormControlContext":"epWmv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"70KkF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_inputUnstyledDefault.default
);
parcelHelpers.export(exports, "useInput", ()=>_useInputDefault.default
);
parcelHelpers.export(exports, "inputUnstyledClasses", ()=>_inputUnstyledClassesDefault.default
);
var _inputUnstyled = require("./InputUnstyled");
var _inputUnstyledDefault = parcelHelpers.interopDefault(_inputUnstyled);
var _inputUnstyledProps = require("./InputUnstyledProps");
parcelHelpers.exportAll(_inputUnstyledProps, exports);
var _useInput = require("./useInput");
var _useInputDefault = parcelHelpers.interopDefault(_useInput);
var _inputUnstyledClasses = require("./inputUnstyledClasses");
var _inputUnstyledClassesDefault = parcelHelpers.interopDefault(_inputUnstyledClasses);
parcelHelpers.exportAll(_inputUnstyledClasses, exports);

},{"./InputUnstyled":"3gHoX","./InputUnstyledProps":"5BQYN","./useInput":"02LXn","./inputUnstyledClasses":"ceCuX","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3gHoX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _appendOwnerState = require("../utils/appendOwnerState");
var _appendOwnerStateDefault = parcelHelpers.interopDefault(_appendOwnerState);
var _isHostComponent = require("../utils/isHostComponent");
var _isHostComponentDefault = parcelHelpers.interopDefault(_isHostComponent);
var _inputUnstyledClasses = require("./inputUnstyledClasses");
var _inputUnstyledClassesDefault = parcelHelpers.interopDefault(_inputUnstyledClasses);
var _useInput = require("./useInput");
var _useInputDefault = parcelHelpers.interopDefault(_useInput);
/**
 *
 * Demos:
 *
 * - [Text Fields](https://mui.com/components/text-fields/)
 *
 * API:
 *
 * - [InputUnstyled API](https://mui.com/api/input-unstyled/)
 */ var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "aria-describedby",
    "aria-label",
    "aria-labelledby",
    "autoComplete",
    "autoFocus",
    "className",
    "component",
    "components",
    "componentsProps",
    "defaultValue",
    "disabled",
    "endAdornment",
    "error",
    "id",
    "maxRows",
    "minRows",
    "multiline",
    "name",
    "onClick",
    "onChange",
    "onKeyDown",
    "onKeyUp",
    "onFocus",
    "onBlur",
    "placeholder",
    "readOnly",
    "required",
    "rows",
    "type",
    "startAdornment",
    "value"
];
const InputUnstyled = /*#__PURE__*/ _react.forwardRef(function InputUnstyled1(props, ref) {
    var _componentsProps$inpu, _ref, _componentsProps$root, _components$Input, _componentsProps$inpu2;
    const { 'aria-describedby': ariaDescribedby , 'aria-label': ariaLabel , 'aria-labelledby': ariaLabelledby , autoComplete , autoFocus , className , component , components ={
    } , componentsProps ={
    } , defaultValue , disabled , endAdornment , error , id , maxRows , minRows , multiline =false , name , onClick , onChange , onKeyDown , onKeyUp , onFocus , onBlur , placeholder , readOnly , required , rows , type ='text' , startAdornment , value  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const { getRootProps , getInputProps , focused , formControlContext , error: errorState , disabled: disabledState  } = _useInputDefault.default({
        disabled,
        defaultValue,
        error,
        onBlur,
        onClick,
        onChange,
        onFocus,
        required,
        value
    }, (_componentsProps$inpu = componentsProps.input) == null ? void 0 : _componentsProps$inpu.ref);
    const ownerState = _extendsDefault.default({
    }, props, {
        disabled: disabledState,
        error: errorState,
        focused,
        formControlContext,
        multiline,
        type
    });
    const rootStateClasses = _clsxDefault.default(disabledState && _inputUnstyledClassesDefault.default.disabled, errorState && _inputUnstyledClassesDefault.default.error, focused && _inputUnstyledClassesDefault.default.focused, Boolean(formControlContext) && _inputUnstyledClassesDefault.default.formControl, multiline && _inputUnstyledClassesDefault.default.multiline, Boolean(startAdornment) && _inputUnstyledClassesDefault.default.adornedStart, Boolean(endAdornment) && _inputUnstyledClassesDefault.default.adornedEnd);
    const inputStateClasses = _clsxDefault.default(disabledState && _inputUnstyledClassesDefault.default.disabled, multiline && _inputUnstyledClassesDefault.default.multiline);
    const propsToForward = {
        'aria-describedby': ariaDescribedby,
        'aria-label': ariaLabel,
        'aria-labelledby': ariaLabelledby,
        autoComplete,
        autoFocus,
        id,
        onKeyDown,
        onKeyUp,
        name,
        placeholder,
        readOnly,
        type
    };
    const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';
    const rootProps = _appendOwnerStateDefault.default(Root, _extendsDefault.default({
    }, getRootProps(_extendsDefault.default({
    }, other, componentsProps.root)), {
        className: _clsxDefault.default(_inputUnstyledClassesDefault.default.root, rootStateClasses, className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className)
    }), ownerState);
    let Input = (_components$Input = components.Input) != null ? _components$Input : 'input';
    let inputProps = _appendOwnerStateDefault.default(Input, _extendsDefault.default({
    }, getInputProps(_extendsDefault.default({
    }, componentsProps.input, propsToForward)), {
        className: _clsxDefault.default(_inputUnstyledClassesDefault.default.input, inputStateClasses, (_componentsProps$inpu2 = componentsProps.input) == null ? void 0 : _componentsProps$inpu2.className)
    }), ownerState);
    if (multiline) {
        var _components$Textarea, _components$Textarea2;
        const hasHostTexarea = _isHostComponentDefault.default((_components$Textarea = components.Textarea) != null ? _components$Textarea : 'textarea');
        if (rows) {
            if (minRows || maxRows) console.warn('Material-UI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.');
            inputProps = _extendsDefault.default({
                type: undefined,
                minRows: hasHostTexarea ? undefined : rows,
                maxRows: hasHostTexarea ? undefined : rows
            }, inputProps);
        } else inputProps = _extendsDefault.default({
            type: undefined,
            maxRows: hasHostTexarea ? undefined : maxRows,
            minRows: hasHostTexarea ? undefined : minRows
        }, inputProps);
        Input = (_components$Textarea2 = components.Textarea) != null ? _components$Textarea2 : 'textarea';
    }
    return(/*#__PURE__*/ _jsxRuntime.jsxs(Root, _extendsDefault.default({
    }, rootProps, {
        ref: ref,
        children: [
            startAdornment,
            /*#__PURE__*/ _jsxRuntime.jsx(Input, _extendsDefault.default({
            }, inputProps)),
            endAdornment
        ]
    })));
});
InputUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
   * @ignore
   */ 'aria-describedby': _propTypesDefault.default.string,
    /**
   * @ignore
   */ 'aria-label': _propTypesDefault.default.string,
    /**
   * @ignore
   */ 'aria-labelledby': _propTypesDefault.default.string,
    /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */ autoComplete: _propTypesDefault.default.string,
    /**
   * If `true`, the `input` element is focused during the first mount.
   */ autoFocus: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ children: _propTypesDefault.default.node,
    /**
   * Class name applied to the root element.
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the InputBase.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Input: _propTypesDefault.default.elementType,
        Root: _propTypesDefault.default.elementType,
        Textarea: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Input.
   * @default {}
   */ componentsProps: _propTypesDefault.default.object,
    /**
   * The default value. Use when the component is not controlled.
   */ defaultValue: _propTypesDefault.default.any,
    /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */ disabled: _propTypesDefault.default.bool,
    /**
   * Trailing adornment for this input.
   */ endAdornment: _propTypesDefault.default.node,
    /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */ error: _propTypesDefault.default.bool,
    /**
   * The id of the `input` element.
   */ id: _propTypesDefault.default.string,
    /**
   * Maximum number of rows to display when multiline option is set to true.
   */ maxRows: _propTypesDefault.default.number,
    /**
   * Minimum number of rows to display when multiline option is set to true.
   */ minRows: _propTypesDefault.default.number,
    /**
   * If `true`, a `textarea` element is rendered.
   * @default false
   */ multiline: _propTypesDefault.default.bool,
    /**
   * Name attribute of the `input` element.
   */ name: _propTypesDefault.default.string,
    /**
   * @ignore
   */ onBlur: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onChange: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onClick: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onFocus: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onKeyDown: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onKeyUp: _propTypesDefault.default.func,
    /**
   * The short hint displayed in the `input` before the user enters a value.
   */ placeholder: _propTypesDefault.default.string,
    /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */ readOnly: _propTypesDefault.default.bool,
    /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */ required: _propTypesDefault.default.bool,
    /**
   * Number of rows to display when multiline option is set to true.
   */ rows: _propTypesDefault.default.number,
    /**
   * Leading adornment for this input.
   */ startAdornment: _propTypesDefault.default.node,
    /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   * @default 'text'
   */ type: _propTypesDefault.default.string,
    /**
   * The value of the `input` element, required for a controlled component.
   */ value: _propTypesDefault.default.any
};
exports.default = InputUnstyled;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","react":"6TuXu","clsx":"eg1He","prop-types":"1tgq3","../utils/appendOwnerState":"cXRHn","../utils/isHostComponent":"dEz9n","./inputUnstyledClasses":"ceCuX","./useInput":"02LXn","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ceCuX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getInputUnstyledUtilityClass", ()=>getInputUnstyledUtilityClass
);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
function getInputUnstyledUtilityClass(slot) {
    return _generateUtilityClassDefault.default('MuiInput', slot);
}
const inputBaseClasses = _generateUtilityClassesDefault.default('MuiInput', [
    'root',
    'formControl',
    'focused',
    'disabled',
    'error',
    'multiline',
    'input',
    'inputMultiline',
    'inputTypeSearch',
    'adornedStart',
    'adornedEnd'
]);
exports.default = inputBaseClasses;

},{"../generateUtilityClass":"ruAWr","../generateUtilityClasses":"gmgZV","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"02LXn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _utils = require("@mui/utils");
var _react = require("react");
var _useFormControl = require("../FormControlUnstyled/useFormControl");
var _useFormControlDefault = parcelHelpers.interopDefault(_useFormControl);
var _extractEventHandlers = require("../utils/extractEventHandlers");
var _extractEventHandlersDefault = parcelHelpers.interopDefault(_extractEventHandlers);
function useInput(props, inputRef) {
    const { defaultValue , disabled: disabledProp = false , error: errorProp = false , onBlur , onChange , onFocus , required: requiredProp = false , value: valueProp  } = props;
    const formControlContext = _useFormControlDefault.default();
    let value;
    let required;
    let disabled;
    let error;
    if (formControlContext) {
        var _formControlContext$d, _formControlContext$r, _formControlContext$e;
        value = formControlContext.value;
        disabled = (_formControlContext$d = formControlContext.disabled) != null ? _formControlContext$d : false;
        required = (_formControlContext$r = formControlContext.required) != null ? _formControlContext$r : false;
        error = (_formControlContext$e = formControlContext.error) != null ? _formControlContext$e : false;
    } else {
        value = valueProp;
        disabled = disabledProp;
        required = requiredProp;
        error = errorProp;
    }
    const { current: isControlled  } = _react.useRef(value != null);
    const handleInputRefWarning = _react.useCallback((instance)=>{
        if (instance && instance.nodeName !== 'INPUT' && !instance.focus) console.error([
            'MUI: You have provided a `components.Input` to the input component',
            'that does not correctly handle the `ref` prop.',
            'Make sure the `ref` prop is called with a HTMLInputElement.'
        ].join('\n'));
    }, []);
    const internalInputRef = _react.useRef(null);
    const handleIncomingRef = _utils.unstable_useForkRef(inputRef, handleInputRefWarning);
    const handleInputRef = _utils.unstable_useForkRef(internalInputRef, handleIncomingRef);
    const [focused, setFocused] = _react.useState(false); // The blur won't fire when the disabled state is set on a focused input.
    // We need to book keep the focused state manually.
    _react.useEffect(()=>{
        if (!formControlContext && disabled && focused) {
            setFocused(false); // @ts-ignore
            onBlur == null || onBlur();
        }
    }, [
        formControlContext,
        disabled,
        focused,
        onBlur
    ]);
    const handleFocus = (otherHandlers)=>(event)=>{
            var _otherHandlers$onFocu;
            // Fix a bug with IE11 where the focus/blur events are triggered
            // while the component is disabled.
            if (formControlContext != null && formControlContext.disabled) {
                event.stopPropagation();
                return;
            }
            (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);
            if (formControlContext && formControlContext.onFocus) {
                var _formControlContext$o;
                formControlContext == null || (_formControlContext$o = formControlContext.onFocus) == null || _formControlContext$o.call(formControlContext);
            } else setFocused(true);
        }
    ;
    const handleBlur = (otherHandlers)=>(event)=>{
            var _otherHandlers$onBlur;
            (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
            if (formControlContext && formControlContext.onBlur) formControlContext.onBlur();
            else setFocused(false);
        }
    ;
    const handleChange = (otherHandlers)=>(event, ...args)=>{
            var _formControlContext$o2, _otherHandlers$onChan;
            if (!isControlled) {
                const element = event.target || internalInputRef.current;
                if (element == null) throw new Error(`MUI: Expected valid input target. Did you use a custom \`components.Input\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.`);
            }
            formControlContext == null || (_formControlContext$o2 = formControlContext.onChange) == null || _formControlContext$o2.call(formControlContext, event); // @ts-ignore
            (_otherHandlers$onChan = otherHandlers.onChange) == null || _otherHandlers$onChan.call(otherHandlers, event, ...args);
        }
    ;
    const handleClick = (otherHandlers)=>(event)=>{
            var _otherHandlers$onClic;
            if (internalInputRef.current && event.currentTarget === event.target) internalInputRef.current.focus();
            (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
        }
    ;
    const getRootProps = (externalProps)=>{
        // onBlur, onChange and onFocus are forwarded to the input slot.
        const propsEventHandlers = _extractEventHandlersDefault.default(props, [
            'onBlur',
            'onChange',
            'onFocus'
        ]);
        const externalEventHandlers = _extendsDefault.default({
        }, propsEventHandlers, _extractEventHandlersDefault.default(externalProps));
        return _extendsDefault.default({
        }, externalProps, externalEventHandlers, {
            onClick: handleClick(externalEventHandlers)
        });
    };
    const getInputProps = (externalProps)=>{
        const propsEventHandlers = {
            onBlur,
            onChange,
            onFocus
        };
        const externalEventHandlers = _extendsDefault.default({
        }, propsEventHandlers, _extractEventHandlersDefault.default(externalProps));
        const mergedEventHandlers = _extendsDefault.default({
        }, externalProps, externalEventHandlers, {
            onBlur: handleBlur(externalEventHandlers),
            onChange: handleChange(externalEventHandlers),
            onFocus: handleFocus(externalEventHandlers)
        });
        return _extendsDefault.default({
        }, mergedEventHandlers, {
            'aria-invalid': error || undefined,
            defaultValue: defaultValue,
            ref: handleInputRef,
            value: value,
            required,
            disabled
        });
    };
    return {
        disabled,
        error,
        focused,
        formControlContext,
        getInputProps,
        getRootProps,
        required,
        value
    };
}
exports.default = useInput;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@mui/utils":"9YmNw","react":"6TuXu","../FormControlUnstyled/useFormControl":"by8x4","../utils/extractEventHandlers":"4J6Ye","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5BQYN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2MVYi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_modalUnstyledDefault.default
);
parcelHelpers.export(exports, "ModalManager", ()=>_modalManagerDefault.default
);
parcelHelpers.export(exports, "modalUnstyledClasses", ()=>_modalUnstyledClassesDefault.default
);
parcelHelpers.export(exports, "getModalUtilityClass", ()=>_modalUnstyledClasses.getModalUtilityClass
);
var _modalUnstyled = require("./ModalUnstyled");
var _modalUnstyledDefault = parcelHelpers.interopDefault(_modalUnstyled);
var _modalManager = require("./ModalManager");
var _modalManagerDefault = parcelHelpers.interopDefault(_modalManager);
var _modalUnstyledClasses = require("./modalUnstyledClasses");
var _modalUnstyledClassesDefault = parcelHelpers.interopDefault(_modalUnstyledClasses);

},{"./ModalUnstyled":"50VXB","./ModalManager":"emxSw","./modalUnstyledClasses":"5ghy0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"50VXB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _composeClasses = require("../composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _isHostComponent = require("../utils/isHostComponent");
var _isHostComponentDefault = parcelHelpers.interopDefault(_isHostComponent);
var _portal = require("../Portal");
var _portalDefault = parcelHelpers.interopDefault(_portal);
var _modalManager = require("./ModalManager");
var _modalManagerDefault = parcelHelpers.interopDefault(_modalManager);
var _unstableTrapFocus = require("../Unstable_TrapFocus");
var _unstableTrapFocusDefault = parcelHelpers.interopDefault(_unstableTrapFocus);
var _modalUnstyledClasses = require("./modalUnstyledClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "BackdropComponent",
    "BackdropProps",
    "children",
    "classes",
    "className",
    "closeAfterTransition",
    "component",
    "components",
    "componentsProps",
    "container",
    "disableAutoFocus",
    "disableEnforceFocus",
    "disableEscapeKeyDown",
    "disablePortal",
    "disableRestoreFocus",
    "disableScrollLock",
    "hideBackdrop",
    "keepMounted",
    "manager",
    "onBackdropClick",
    "onClose",
    "onKeyDown",
    "open",
    "theme",
    "onTransitionEnter",
    "onTransitionExited"
];
const useUtilityClasses = (ownerState)=>{
    const { open , exited , classes  } = ownerState;
    const slots = {
        root: [
            'root',
            !open && exited && 'hidden'
        ]
    };
    return _composeClassesDefault.default(slots, _modalUnstyledClasses.getModalUtilityClass, classes);
};
function getContainer(container) {
    return typeof container === 'function' ? container() : container;
}
function getHasTransition(props) {
    return props.children ? props.children.props.hasOwnProperty('in') : false;
} // A modal manager used to track and manage the state of open Modals.
// Modals don't open on the server so this won't conflict with concurrent requests.
const defaultManager = new _modalManagerDefault.default();
/**
 * Modal is a lower-level construct that is leveraged by the following components:
 *
 * - [Dialog](/api/dialog/)
 * - [Drawer](/api/drawer/)
 * - [Menu](/api/menu/)
 * - [Popover](/api/popover/)
 *
 * If you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component
 * rather than directly using Modal.
 *
 * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
 */ const ModalUnstyled = /*#__PURE__*/ _react.forwardRef(function ModalUnstyled1(props, ref) {
    const { BackdropComponent , BackdropProps , children , classes: classesProp , className , closeAfterTransition =false , component ='div' , components ={
    } , componentsProps ={
    } , container , disableAutoFocus =false , disableEnforceFocus =false , disableEscapeKeyDown =false , disablePortal =false , disableRestoreFocus =false , disableScrollLock =false , hideBackdrop =false , keepMounted =false , // private
    // eslint-disable-next-line react/prop-types
    manager =defaultManager , onBackdropClick , onClose , onKeyDown , open , /* eslint-disable react/prop-types */ theme , onTransitionEnter , onTransitionExited  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const [exited, setExited] = _react.useState(true);
    const modal = _react.useRef({
    });
    const mountNodeRef = _react.useRef(null);
    const modalRef = _react.useRef(null);
    const handleRef = _utils.unstable_useForkRef(modalRef, ref);
    const hasTransition = getHasTransition(props);
    const getDoc = ()=>_utils.unstable_ownerDocument(mountNodeRef.current)
    ;
    const getModal = ()=>{
        modal.current.modalRef = modalRef.current;
        modal.current.mountNode = mountNodeRef.current;
        return modal.current;
    };
    const handleMounted = ()=>{
        manager.mount(getModal(), {
            disableScrollLock
        }); // Fix a bug on Chrome where the scroll isn't initially 0.
        modalRef.current.scrollTop = 0;
    };
    const handleOpen = _utils.unstable_useEventCallback(()=>{
        const resolvedContainer = getContainer(container) || getDoc().body;
        manager.add(getModal(), resolvedContainer); // The element was already mounted.
        if (modalRef.current) handleMounted();
    });
    const isTopModal = _react.useCallback(()=>manager.isTopModal(getModal())
    , [
        manager
    ]);
    const handlePortalRef = _utils.unstable_useEventCallback((node)=>{
        mountNodeRef.current = node;
        if (!node) return;
        if (open && isTopModal()) handleMounted();
        else _modalManager.ariaHidden(modalRef.current, true);
    });
    const handleClose = _react.useCallback(()=>{
        manager.remove(getModal());
    }, [
        manager
    ]);
    _react.useEffect(()=>{
        return ()=>{
            handleClose();
        };
    }, [
        handleClose
    ]);
    _react.useEffect(()=>{
        if (open) handleOpen();
        else if (!hasTransition || !closeAfterTransition) handleClose();
    }, [
        open,
        handleClose,
        hasTransition,
        closeAfterTransition,
        handleOpen
    ]);
    const ownerState = _extendsDefault.default({
    }, props, {
        classes: classesProp,
        closeAfterTransition,
        disableAutoFocus,
        disableEnforceFocus,
        disableEscapeKeyDown,
        disablePortal,
        disableRestoreFocus,
        disableScrollLock,
        exited,
        hideBackdrop,
        keepMounted
    });
    const classes = useUtilityClasses(ownerState);
    if (!keepMounted && !open && (!hasTransition || exited)) return null;
    const handleEnter = ()=>{
        setExited(false);
        if (onTransitionEnter) onTransitionEnter();
    };
    const handleExited = ()=>{
        setExited(true);
        if (onTransitionExited) onTransitionExited();
        if (closeAfterTransition) handleClose();
    };
    const handleBackdropClick = (event)=>{
        if (event.target !== event.currentTarget) return;
        if (onBackdropClick) onBackdropClick(event);
        if (onClose) onClose(event, 'backdropClick');
    };
    const handleKeyDown = (event)=>{
        if (onKeyDown) onKeyDown(event);
         // The handler doesn't take event.defaultPrevented into account:
        //
        // event.preventDefault() is meant to stop default behaviors like
        // clicking a checkbox to check it, hitting a button to submit a form,
        // and hitting left arrow to move the cursor in a text input etc.
        // Only special HTML elements have these default behaviors.
        if (event.key !== 'Escape' || !isTopModal()) return;
        if (!disableEscapeKeyDown) {
            // Swallow the event, in case someone is listening for the escape key on the body.
            event.stopPropagation();
            if (onClose) onClose(event, 'escapeKeyDown');
        }
    };
    const childProps = {
    };
    if (children.props.tabIndex === undefined) childProps.tabIndex = '-1';
     // It's a Transition like component
    if (hasTransition) {
        childProps.onEnter = _utils.unstable_createChainedFunction(handleEnter, children.props.onEnter);
        childProps.onExited = _utils.unstable_createChainedFunction(handleExited, children.props.onExited);
    }
    const Root = components.Root || component;
    const rootProps = componentsProps.root || {
    };
    return(/*#__PURE__*/ _jsxRuntime.jsx(_portalDefault.default, {
        ref: handlePortalRef,
        container: container,
        disablePortal: disablePortal,
        children: /*#__PURE__*/ _jsxRuntime.jsxs(Root, _extendsDefault.default({
            role: "presentation"
        }, rootProps, !_isHostComponentDefault.default(Root) && {
            as: component,
            ownerState: _extendsDefault.default({
            }, ownerState, rootProps.ownerState),
            theme
        }, other, {
            ref: handleRef,
            onKeyDown: handleKeyDown,
            className: _clsxDefault.default(classes.root, rootProps.className, className),
            children: [
                !hideBackdrop && BackdropComponent ? /*#__PURE__*/ _jsxRuntime.jsx(BackdropComponent, _extendsDefault.default({
                    open: open,
                    onClick: handleBackdropClick
                }, BackdropProps)) : null,
                /*#__PURE__*/ _jsxRuntime.jsx(_unstableTrapFocusDefault.default, {
                    disableEnforceFocus: disableEnforceFocus,
                    disableAutoFocus: disableAutoFocus,
                    disableRestoreFocus: disableRestoreFocus,
                    isEnabled: isTopModal,
                    open: open,
                    children: /*#__PURE__*/ _react.cloneElement(children, childProps)
                })
            ]
        }))
    }));
});
ModalUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * A backdrop component. This prop enables custom backdrop rendering.
   */ BackdropComponent: _propTypesDefault.default.elementType,
    /**
   * Props applied to the [`BackdropUnstyled`](/api/backdrop-unstyled/) element.
   */ BackdropProps: _propTypesDefault.default.object,
    /**
   * A single child content element.
   */ children: _utils.elementAcceptingRef.isRequired,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * When set to true the Modal waits until a nested Transition is completed before closing.
   * @default false
   */ closeAfterTransition: _propTypesDefault.default.bool,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the Modal.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Root: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Modal.
   * @default {}
   */ componentsProps: _propTypesDefault.default.object,
    /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */ container: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([_utils.HTMLElementType, _propTypesDefault.default.func
    ]),
    /**
   * If `true`, the modal will not automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes.
   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */ disableAutoFocus: _propTypesDefault.default.bool,
    /**
   * If `true`, the modal will not prevent focus from leaving the modal while open.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */ disableEnforceFocus: _propTypesDefault.default.bool,
    /**
   * If `true`, hitting escape will not fire the `onClose` callback.
   * @default false
   */ disableEscapeKeyDown: _propTypesDefault.default.bool,
    /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */ disablePortal: _propTypesDefault.default.bool,
    /**
   * If `true`, the modal will not restore focus to previously focused element once
   * modal is hidden.
   * @default false
   */ disableRestoreFocus: _propTypesDefault.default.bool,
    /**
   * Disable the scroll lock behavior.
   * @default false
   */ disableScrollLock: _propTypesDefault.default.bool,
    /**
   * If `true`, the backdrop is not rendered.
   * @default false
   */ hideBackdrop: _propTypesDefault.default.bool,
    /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Modal.
   * @default false
   */ keepMounted: _propTypesDefault.default.bool,
    /**
   * Callback fired when the backdrop is clicked.
   */ onBackdropClick: _propTypesDefault.default.func,
    /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
   */ onClose: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onKeyDown: _propTypesDefault.default.func,
    /**
   * If `true`, the component is shown.
   */ open: _propTypesDefault.default.bool.isRequired
};
exports.default = ModalUnstyled;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","react":"6TuXu","prop-types":"1tgq3","clsx":"eg1He","@mui/utils":"9YmNw","../composeClasses":"e4OCP","../utils/isHostComponent":"dEz9n","../Portal":"kuhHh","./ModalManager":"emxSw","../Unstable_TrapFocus":"kVMd0","./modalUnstyledClasses":"5ghy0","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kuhHh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_portalDefault.default
);
var _portal = require("./Portal");
var _portalDefault = parcelHelpers.interopDefault(_portal);

},{"./Portal":"iWjy4","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iWjy4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDom = require("react-dom");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _utils = require("@mui/utils");
function getContainer(container) {
    return typeof container === 'function' ? container() : container;
}
/**
 * Portals provide a first-class way to render children into a DOM node
 * that exists outside the DOM hierarchy of the parent component.
 */ const Portal = /*#__PURE__*/ _react.forwardRef(function Portal1(props, ref) {
    const { children , container , disablePortal =false  } = props;
    const [mountNode, setMountNode] = _react.useState(null);
    const handleRef = _utils.unstable_useForkRef(/*#__PURE__*/ _react.isValidElement(children) ? children.ref : null, ref);
    _utils.unstable_useEnhancedEffect(()=>{
        if (!disablePortal) setMountNode(getContainer(container) || document.body);
    }, [
        container,
        disablePortal
    ]);
    _utils.unstable_useEnhancedEffect(()=>{
        if (mountNode && !disablePortal) {
            _utils.unstable_setRef(ref, mountNode);
            return ()=>{
                _utils.unstable_setRef(ref, null);
            };
        }
        return undefined;
    }, [
        ref,
        mountNode,
        disablePortal
    ]);
    if (disablePortal) {
        if (/*#__PURE__*/ _react.isValidElement(children)) return(/*#__PURE__*/ _react.cloneElement(children, {
            ref: handleRef
        }));
        return children;
    }
    return mountNode ? /*#__PURE__*/ _reactDom.createPortal(children, mountNode) : mountNode;
});
Portal.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The children to render into the `container`.
   */ children: _propTypesDefault.default.node,
    /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */ container: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([_utils.HTMLElementType, _propTypesDefault.default.func
    ]),
    /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */ disablePortal: _propTypesDefault.default.bool
};
// eslint-disable-next-line
Portal['propTypes' + ''] = _utils.exactProp(Portal.propTypes);
exports.default = Portal;

},{"react":"6TuXu","react-dom":"gkWJK","prop-types":"1tgq3","@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gkWJK":[function(require,module,exports) {
'use strict';
function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') return;
    var err;
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
}
module.exports = require('./cjs/react-dom.development.js');

},{"./cjs/react-dom.development.js":"uMwNA"}],"uMwNA":[function(require,module,exports) {
/** @license React v17.0.1
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var React = require('react');
    var _assign = require('object-assign');
    var Scheduler = require('scheduler');
    var tracing = require('scheduler/tracing');
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    if (!React) throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2; // Before we know whether it is function or class
    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var FundamentalComponent = 20;
    var ScopeComponent = 21;
    var Block = 22;
    var OffscreenComponent = 23;
    var LegacyHiddenComponent = 24;
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableProfilerTimer = true; // Record durations for commit and passive effects phases.
    var enableFundamentalAPI = false; // Experimental Scope support.
    var enableNewReconciler = false; // Errors that are thrown while unmounting (or after in the case of passive effects)
    var warnAboutStringRefs = false;
    var allNativeEvents = new Set();
    /**
 * Mapping from registration name to event name
 */ var registrationNameDependencies = {
    };
    /**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */ var possibleRegistrationNames = {
    }; // Trust the developer to only use possibleRegistrationNames in true
    function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + 'Capture', dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
        if (registrationNameDependencies[registrationName]) error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
        registrationNameDependencies[registrationName] = dependencies;
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        if (registrationName === 'onDoubleClick') possibleRegistrationNames.ondblclick = registrationName;
        for(var i = 0; i < dependencies.length; i++)allNativeEvents.add(dependencies[i]);
    }
    var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');
    // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.
    var RESERVED = 0; // A simple string attribute.
    // Attributes that aren't in the filter are presumed to have this type.
    var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.
    var BOOLEANISH_STRING = 2; // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.
    var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.
    var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.
    var POSITIVE_NUMERIC = 6;
    /* eslint-disable max-len */ var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    /* eslint-enable max-len */ var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var illegalAttributeNameCache = {
    };
    var validatedAttributeNameCache = {
    };
    function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) return true;
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        error('Invalid attribute name: `%s`', attributeName);
        return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) return propertyInfo.type === RESERVED;
        if (isCustomComponentTag) return false;
        if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) return true;
        return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) return false;
        switch(typeof value){
            case 'function':
            case 'symbol':
                // eslint-disable-line
                return true;
            case 'boolean':
                if (isCustomComponentTag) return false;
                if (propertyInfo !== null) return !propertyInfo.acceptsBooleans;
                else {
                    var prefix = name.toLowerCase().slice(0, 5);
                    return prefix !== 'data-' && prefix !== 'aria-';
                }
            default:
                return false;
        }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === 'undefined') return true;
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) return true;
        if (isCustomComponentTag) return false;
        if (propertyInfo !== null) switch(propertyInfo.type){
            case BOOLEAN:
                return !value;
            case OVERLOADED_BOOLEAN:
                return value === false;
            case NUMERIC:
                return isNaN(value);
            case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
        }
        return false;
    }
    function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL;
        this.removeEmptyString = removeEmptyString;
    } // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.
    var properties = {
    }; // These props are reserved by React. They shouldn't be written to the DOM.
    var reservedProps = [
        'children',
        'dangerouslySetInnerHTML',
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        'defaultValue',
        'defaultChecked',
        'innerHTML',
        'suppressContentEditableWarning',
        'suppressHydrationWarning',
        'style'
    ];
    reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
    }); // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.
    [
        [
            'acceptCharset',
            'accept-charset'
        ],
        [
            'className',
            'class'
        ],
        [
            'htmlFor',
            'for'
        ],
        [
            'httpEquiv',
            'http-equiv'
        ]
    ].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    [
        'contentEditable',
        'draggable',
        'spellCheck',
        'value'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
    }); // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.
    [
        'autoReverse',
        'externalResourcesRequired',
        'focusable',
        'preserveAlpha'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
    }); // These are HTML boolean attributes.
    [
        'allowFullScreen',
        'async',
        // on the client side because the browsers are inconsistent. Instead we call focus().
        'autoFocus',
        'autoPlay',
        'controls',
        'default',
        'defer',
        'disabled',
        'disablePictureInPicture',
        'disableRemotePlayback',
        'formNoValidate',
        'hidden',
        'loop',
        'noModule',
        'noValidate',
        'open',
        'playsInline',
        'readOnly',
        'required',
        'reversed',
        'scoped',
        'seamless',
        'itemScope'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
    }); // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.
    [
        'checked',
        // disabled with `removeAttribute`. We have special logic for handling this.
        'multiple',
        'muted',
        'selected' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
    }); // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.
    [
        'capture',
        'download' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
    }); // These are HTML attributes that must be positive numbers.
    [
        'cols',
        'rows',
        'size',
        'span' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
    }); // These are HTML attributes that must be numbers.
    [
        'rowSpan',
        'start'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function(token) {
        return token[1].toUpperCase();
    }; // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML attribute filter.
    // Some of these attributes can be hard to find. This list was created by
    // scraping the MDN documentation.
    [
        'accent-height',
        'alignment-baseline',
        'arabic-form',
        'baseline-shift',
        'cap-height',
        'clip-path',
        'clip-rule',
        'color-interpolation',
        'color-interpolation-filters',
        'color-profile',
        'color-rendering',
        'dominant-baseline',
        'enable-background',
        'fill-opacity',
        'fill-rule',
        'flood-color',
        'flood-opacity',
        'font-family',
        'font-size',
        'font-size-adjust',
        'font-stretch',
        'font-style',
        'font-variant',
        'font-weight',
        'glyph-name',
        'glyph-orientation-horizontal',
        'glyph-orientation-vertical',
        'horiz-adv-x',
        'horiz-origin-x',
        'image-rendering',
        'letter-spacing',
        'lighting-color',
        'marker-end',
        'marker-mid',
        'marker-start',
        'overline-position',
        'overline-thickness',
        'paint-order',
        'panose-1',
        'pointer-events',
        'rendering-intent',
        'shape-rendering',
        'stop-color',
        'stop-opacity',
        'strikethrough-position',
        'strikethrough-thickness',
        'stroke-dasharray',
        'stroke-dashoffset',
        'stroke-linecap',
        'stroke-linejoin',
        'stroke-miterlimit',
        'stroke-opacity',
        'stroke-width',
        'text-anchor',
        'text-decoration',
        'text-rendering',
        'underline-position',
        'underline-thickness',
        'unicode-bidi',
        'unicode-range',
        'units-per-em',
        'v-alphabetic',
        'v-hanging',
        'v-ideographic',
        'v-mathematical',
        'vector-effect',
        'vert-adv-y',
        'vert-origin-x',
        'vert-origin-y',
        'word-spacing',
        'writing-mode',
        'xmlns:xlink',
        'x-height' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // String SVG attributes with the xlink namespace.
    [
        'xlink:actuate',
        'xlink:arcrole',
        'xlink:role',
        'xlink:show',
        'xlink:title',
        'xlink:type' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/1999/xlink', false, false);
    }); // String SVG attributes with the xml namespace.
    [
        'xml:base',
        'xml:lang',
        'xml:space' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/XML/1998/namespace', false, false);
    }); // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.
    [
        'tabIndex',
        'crossOrigin'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
    }); // These attributes accept URLs. These must not allow javascript: URLS.
    // These will also need to accept Trusted Types object in the future.
    var xlinkHref = 'xlinkHref';
    properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, 'xlink:href', 'http://www.w3.org/1999/xlink', true, false);
    [
        'src',
        'href',
        'action',
        'formAction'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
    });
    // and any newline or tab are filtered out as if they're not part of the URL.
    // https://url.spec.whatwg.org/#url-parsing
    // Tab or newline are defined as \r\n\t:
    // https://infra.spec.whatwg.org/#ascii-tab-or-newline
    // A C0 control is a code point in the range \u0000 NULL to \u001F
    // INFORMATION SEPARATOR ONE, inclusive:
    // https://infra.spec.whatwg.org/#c0-control-or-space
    /* eslint-disable max-len */ var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL(url) {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
        }
    }
    /**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */ function getValueForProperty(node, name, expected, propertyInfo) {
        if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
        } else {
            if (propertyInfo.sanitizeURL) // If we haven't fully disabled javascript: URLs, and if
            // the hydration is successful of a javascript: URL, we
            // still want to warn on the client.
            sanitizeURL('' + expected);
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === '') return true;
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return value;
                    if (value === '' + expected) return expected;
                    return value;
                }
            } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) // We had an attribute but shouldn't have had one, so read it
                // for the error message.
                return node.getAttribute(attributeName);
                if (propertyInfo.type === BOOLEAN) // If this was a boolean, it doesn't matter what the value is
                // the fact that we have it is the same as the expected.
                return expected;
                 // Even if this property uses a namespace we use getAttribute
                // because we assume its namespaced name is the same as our config.
                // To use getAttributeNS we need the local name which we don't have
                // in our config atm.
                stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return stringValue === null ? expected : stringValue;
            else if (stringValue === '' + expected) return expected;
            else return stringValue;
        }
    }
    /**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */ function getValueForAttribute(node, name, expected) {
        if (!isAttributeNameSafe(name)) return;
         // If the object is an opaque reference ID, it's expected that
        // the next prop is different than the server value, so just return
        // expected
        if (isOpaqueHydratingObject(expected)) return expected;
        if (!node.hasAttribute(name)) return expected === undefined ? undefined : null;
        var value = node.getAttribute(name);
        if (value === '' + expected) return expected;
        return value;
    }
    /**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */ function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) return;
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) value = null;
         // If the prop isn't in the special list, treat it as a simple attribute.
        if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) node.removeAttribute(_attributeName);
                else node.setAttribute(_attributeName, '' + value);
            }
            return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : '';
            } else // Contrary to `setAttribute`, object properties are properly
            // `toString`ed by IE8/9.
            node[propertyName] = value;
            return;
        } // The rest are treated as attributes with special cases.
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) node.removeAttribute(attributeName);
        else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) // If attribute type is boolean, we know for sure it won't be an execution sink
            // and we won't require Trusted Type here.
            attributeValue = '';
            else {
                attributeValue = '' + value;
                if (propertyInfo.sanitizeURL) sanitizeURL(attributeValue.toString());
            }
            if (attributeNamespace) node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            else node.setAttribute(attributeName, attributeValue);
        }
    }
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, true);
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;
        switch(fiber.tag){
            case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
                return describeBuiltInComponentFrame('Lazy');
            case SuspenseComponent:
                return describeBuiltInComponentFrame('Suspense');
            case SuspenseListComponent:
                return describeBuiltInComponentFrame('SuspenseList');
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
            case Block:
                return describeFunctionComponentFrame(fiber.type._render);
            case ClassComponent:
                return describeClassComponentFrame(fiber.type);
            default:
                return '';
        }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
        try {
            var info = '';
            var node = workInProgress;
            do {
                info += describeFiber(node);
                node = node.return;
            }while (node)
            return info;
        } catch (x) {
            return '\nError generating stack: ' + x.message + '\n' + x.stack;
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var current = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
        if (current === null) return null;
        var owner = current._debugOwner;
        if (owner !== null && typeof owner !== 'undefined') return getComponentName(owner.type);
        return null;
    }
    function getCurrentFiberStackInDev() {
        if (current === null) return '';
         // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.
        return getStackByFiberInDevAndProd(current);
    }
    function resetCurrentFiber() {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        isRendering = false;
    }
    function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
        current = fiber;
        isRendering = false;
    }
    function setIsRendering(rendering) {
        isRendering = rendering;
    }
    function getIsRendering() {
        return isRendering;
    }
    // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.
    function toString(value) {
        return '' + value;
    }
    function getToStringValue(value) {
        switch(typeof value){
            case 'boolean':
            case 'number':
            case 'object':
            case 'string':
            case 'undefined':
                return value;
            default:
                // function, symbol are assigned as empty strings
                return '';
        }
    }
    var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
    };
    function checkControlledValueProps(tagName, props) {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }
    function getTracker(node) {
        return node._valueTracker;
    }
    function detachTracker(node) {
        node._valueTracker = null;
    }
    function getValueFromNode(node) {
        var value = '';
        if (!node) return value;
        if (isCheckable(node)) value = node.checked ? 'true' : 'false';
        else value = node.value;
        return value;
    }
    function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? 'checked' : 'value';
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
        // and don't track value will cause over reporting of changes,
        // but it's better then a hard failure
        // (needed for certain tests that spyOn input values and Safari)
        if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') return;
        var get = descriptor.get, set = descriptor.set;
        Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
                return get.call(this);
            },
            set: function(value) {
                currentValue = '' + value;
                set.call(this, value);
            }
        }); // We could've passed this the first time
        // but it triggers a bug in IE11 and Edge 14/15.
        // Calling defineProperty() again should be equivalent.
        // https://github.com/facebook/react/issues/11768
        Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
        });
        var tracker = {
            getValue: function() {
                return currentValue;
            },
            setValue: function(value) {
                currentValue = '' + value;
            },
            stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
            }
        };
        return tracker;
    }
    function track(node) {
        if (getTracker(node)) return;
         // TODO: Once it's just Fiber we can move this to node._wrapperState
        node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
        if (!node) return false;
        var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
        // that trying again will succeed
        if (!tracker) return true;
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
        }
        return false;
    }
    function getActiveElement(doc) {
        doc = doc || (typeof document !== 'undefined' ? document : undefined);
        if (typeof doc === 'undefined') return null;
        try {
            return doc.activeElement || doc.body;
        } catch (e) {
            return doc.body;
        }
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
        var usesChecked = props.type === 'checkbox' || props.type === 'radio';
        return usesChecked ? props.checked != null : props.value != null;
    }
    /**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */ function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = _assign({
        }, props, {
            defaultChecked: undefined,
            defaultValue: undefined,
            value: undefined,
            checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
    }
    function initWrapperState(element, props) {
        checkControlledValueProps('input', props);
        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnValueDefaultValue = true;
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
        node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
        };
    }
    function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) setValueForProperty(node, 'checked', checked, false);
    }
    function updateWrapper(element, props) {
        var node = element;
        var controlled = isControlled(props);
        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
            if (type === 'number') {
                if (value === 0 && node.value === '' || // eslint-disable-next-line
                node.value != value) node.value = toString(value);
            } else if (node.value !== toString(value)) node.value = toString(value);
        } else if (type === 'submit' || type === 'reset') {
            // Submit/reset inputs need the attribute removed completely to avoid
            // blank-text buttons.
            node.removeAttribute('value');
            return;
        }
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        //  1. The value React property
        //  2. The defaultValue React property
        //  3. Otherwise there should be no change
        if (props.hasOwnProperty('value')) setDefaultValue(node, props.type, value);
        else if (props.hasOwnProperty('defaultValue')) setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) node.defaultChecked = !!props.defaultChecked;
    }
    function postMountWrapper(element, props, isHydrating) {
        var node = element; // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.
        if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
            var type = props.type;
            var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
            // default value provided by the browser. See: #12872
            if (isButton && (props.value === undefined || props.value === null)) return;
            var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
            // from being lost during SSR hydration.
            if (!isHydrating) // When syncing the value attribute, the value property should use
            // the wrapperState._initialValue property. This uses:
            //
            //   1. The value React property when present
            //   2. The defaultValue React property when present
            //   3. An empty string
            {
                if (initialValue !== node.value) node.value = initialValue;
            }
            // Otherwise, the value attribute is synchronized to the property,
            // so we assign defaultValue to the same thing as the value property
            // assignment step above.
            node.defaultValue = initialValue;
        } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
        // this is needed to work around a chrome bug where setting defaultChecked
        // will sometimes influence the value of checked (even after detachment).
        // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
        // We need to temporarily unset name to avoid disrupting radio button groups.
        var name = node.name;
        if (name !== '') node.name = '';
        // When syncing the checked attribute, both the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        //
        //   1. The checked React property when present
        //   2. The defaultChecked React property when present
        //   3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
        if (name !== '') node.name = name;
    }
    function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === 'radio' && name != null) {
            var queryRoot = rootNode;
            while(queryRoot.parentNode)queryRoot = queryRoot.parentNode;
             // If `rootNode.form` was non-null, then we could try `form.elements`,
            // but that sometimes behaves strangely in IE8. We could also try using
            // `form.getElementsByName`, but that will only return direct children
            // and won't include inputs that use the HTML5 `form=` attribute. Since
            // the input might not even be in a form. It might not even be in the
            // document. Let's just use the local `querySelectorAll` to ensure we don't
            // miss anything.
            var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
            for(var i = 0; i < group.length; i++){
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) continue;
                 // This will throw if radio buttons rendered by different copies of React
                // and the same name are rendered into the same form (same as #1939).
                // That's probably okay; we don't support it just as we don't support
                // mixing React radio buttons with non-React ones.
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                 // We need update the tracked value on the named cousin since the value
                // was changed but the input saw no event or value set
                updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
                // was previously checked to update will cause it to be come re-checked
                // as appropriate.
                updateWrapper(otherNode, otherProps);
            }
        }
    } // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253
    function setDefaultValue(node, type, value) {
        if (type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) node.defaultValue = toString(node._wrapperState.initialValue);
            else if (node.defaultValue !== toString(value)) node.defaultValue = toString(value);
        }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    function flattenChildren(children) {
        var content = ''; // Flatten children. We'll warn if they are invalid
        // during validateProps() which runs for hydration too.
        // Note that this would throw on non-element objects.
        // Elements are stringified (which is normally irrelevant
        // but matters for <fbt>).
        React.Children.forEach(children, function(child) {
            if (child == null) return;
            content += child; // Note: we don't warn about invalid children here.
        // Instead, this is done separately below so that
        // it happens during the hydration code path too.
        });
        return content;
    }
    /**
 * Implements an <option> host component that warns when `selected` is set.
 */ function validateProps(element, props) {
        // This mirrors the code path above, but runs for hydration too.
        // Warn about invalid children here so that client and hydration are consistent.
        // TODO: this seems like it could cause a DEV-only throw for hydration
        // if children contains a non-element object. We should try to avoid that.
        if (typeof props.children === 'object' && props.children !== null) React.Children.forEach(props.children, function(child) {
            if (child == null) return;
            if (typeof child === 'string' || typeof child === 'number') return;
            if (typeof child.type !== 'string') return;
            if (!didWarnInvalidChild) {
                didWarnInvalidChild = true;
                error('Only strings and numbers are supported as <option> children.');
            }
        });
         // TODO: Remove support for `selected` in <option>.
        if (props.selected != null && !didWarnSelectedSetOnOption) {
            error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
        }
    }
    function postMountWrapper$1(element, props) {
        // value="" should make a value attribute (#6219)
        if (props.value != null) element.setAttribute('value', toString(getToStringValue(props.value)));
    }
    function getHostProps$1(element, props) {
        var hostProps = _assign({
            children: undefined
        }, props);
        var content = flattenChildren(props.children);
        if (content) hostProps.children = content;
        return hostProps;
    }
    var didWarnValueDefaultValue$1;
    didWarnValueDefaultValue$1 = false;
    function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) return '\n\nCheck the render method of `' + ownerName + '`.';
        return '';
    }
    var valuePropNames = [
        'value',
        'defaultValue'
    ];
    /**
 * Validation function for `value` and `defaultValue`.
 */ function checkSelectPropTypes(props) {
        checkControlledValueProps('select', props);
        for(var i = 0; i < valuePropNames.length; i++){
            var propName = valuePropNames[i];
            if (props[propName] == null) continue;
            var isArray = Array.isArray(props[propName]);
            if (props.multiple && !isArray) error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            else if (!props.multiple && isArray) error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
        }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options = node.options;
        if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {
            };
            for(var i = 0; i < selectedValues.length; i++)// Prefix to avoid chaos with special keys.
            selectedValue['$' + selectedValues[i]] = true;
            for(var _i = 0; _i < options.length; _i++){
                var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
                if (options[_i].selected !== selected) options[_i].selected = selected;
                if (selected && setDefaultSelected) options[_i].defaultSelected = true;
            }
        } else {
            // Do not set `select.value` as exact behavior isn't consistent across all
            // browsers for all cases.
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for(var _i2 = 0; _i2 < options.length; _i2++){
                if (options[_i2].value === _selectedValue) {
                    options[_i2].selected = true;
                    if (setDefaultSelected) options[_i2].defaultSelected = true;
                    return;
                }
                if (defaultSelected === null && !options[_i2].disabled) defaultSelected = options[_i2];
            }
            if (defaultSelected !== null) defaultSelected.selected = true;
        }
    }
    /**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */ function getHostProps$2(element, props) {
        return _assign({
        }, props, {
            value: undefined
        });
    }
    function initWrapperState$1(element, props) {
        var node = element;
        checkSelectPropTypes(props);
        node._wrapperState = {
            wasMultiple: !!props.multiple
        };
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
        }
    }
    function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
    }
    function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (wasMultiple !== !!props.multiple) {
            // For simplicity, reapply `defaultValue` if `multiple` is toggled.
            if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
            else // Revert the select back to its default unselected state.
            updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
        }
    }
    function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
    }
    var didWarnValDefaultVal = false;
    /**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */ function getHostProps$3(element, props) {
        var node = element;
        if (!(props.dangerouslySetInnerHTML == null)) throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
         // Always set children to the same thing. In IE9, the selection range will
        // get reset if `textContent` is mutated.  We could add a check in setTextContent
        // to only set the value if/when the value differs from the node value (which would
        // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
        // solution. The value can be a boolean or object so that's why it's forced
        // to be a string.
        var hostProps = _assign({
        }, props, {
            value: undefined,
            defaultValue: undefined,
            children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
    }
    function initWrapperState$2(element, props) {
        var node = element;
        checkControlledValueProps('textarea', props);
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component');
            didWarnValDefaultVal = true;
        }
        var initialValue = props.value; // Only bother fetching default value if we're going to use it
        if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                if (!(defaultValue == null)) throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                if (Array.isArray(children)) {
                    if (!(children.length <= 1)) throw Error("<textarea> can only have at most one child.");
                    children = children[0];
                }
                defaultValue = children;
            }
            if (defaultValue == null) defaultValue = '';
            initialValue = defaultValue;
        }
        node._wrapperState = {
            initialValue: getToStringValue(initialValue)
        };
    }
    function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
            // Cast `value` to a string to ensure the value is set correctly. While
            // browsers typically do this as necessary, jsdom doesn't.
            var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed
            if (newValue !== node.value) node.value = newValue;
            if (props.defaultValue == null && node.defaultValue !== newValue) node.defaultValue = newValue;
        }
        if (defaultValue != null) node.defaultValue = toString(defaultValue);
    }
    function postMountWrapper$3(element, props) {
        var node = element; // This is in postMount because we need access to the DOM node, which is not
        // available until after the component has mounted.
        var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
        // initial value. In IE10/IE11 there is a bug where the placeholder attribute
        // will populate textContent as well.
        // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
        if (textContent === node._wrapperState.initialValue) {
            if (textContent !== '' && textContent !== null) node.value = textContent;
        }
    }
    function restoreControlledState$2(element, props) {
        // DOM component is still mounted; update
        updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var Namespaces = {
        html: HTML_NAMESPACE,
        mathml: MATH_NAMESPACE,
        svg: SVG_NAMESPACE
    }; // Assumes there is no parent namespace.
    function getIntrinsicNamespace(type) {
        switch(type){
            case 'svg':
                return SVG_NAMESPACE;
            case 'math':
                return MATH_NAMESPACE;
            default:
                return HTML_NAMESPACE;
        }
    }
    function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
        if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') // We're leaving SVG.
        return HTML_NAMESPACE;
         // By default, pass namespace below.
        return parentNamespace;
    }
    /* globals MSApp */ /**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */ var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
            });
        };
        else return func;
    };
    var reusableSVGContainer;
    /**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */ var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === Namespaces.svg) {
            if (!('innerHTML' in node)) {
                // IE does not have innerHTML for SVG nodes, so instead we inject the
                // new markup in a temp node and then move the child nodes across into
                // the target node
                reusableSVGContainer = reusableSVGContainer || document.createElement('div');
                reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
                var svgNode = reusableSVGContainer.firstChild;
                while(node.firstChild)node.removeChild(node.firstChild);
                while(svgNode.firstChild)node.appendChild(svgNode.firstChild);
                return;
            }
        }
        node.innerHTML = html;
    });
    /**
 * HTML nodeType values that represent the type of the node
 */ var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */ var setTextContent = function(node, text) {
        if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
            }
        }
        node.textContent = text;
    };
    // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
    var shorthandToLonghand = {
        animation: [
            'animationDelay',
            'animationDirection',
            'animationDuration',
            'animationFillMode',
            'animationIterationCount',
            'animationName',
            'animationPlayState',
            'animationTimingFunction'
        ],
        background: [
            'backgroundAttachment',
            'backgroundClip',
            'backgroundColor',
            'backgroundImage',
            'backgroundOrigin',
            'backgroundPositionX',
            'backgroundPositionY',
            'backgroundRepeat',
            'backgroundSize'
        ],
        backgroundPosition: [
            'backgroundPositionX',
            'backgroundPositionY'
        ],
        border: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth',
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth',
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth',
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth',
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderBlockEnd: [
            'borderBlockEndColor',
            'borderBlockEndStyle',
            'borderBlockEndWidth'
        ],
        borderBlockStart: [
            'borderBlockStartColor',
            'borderBlockStartStyle',
            'borderBlockStartWidth'
        ],
        borderBottom: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth'
        ],
        borderColor: [
            'borderBottomColor',
            'borderLeftColor',
            'borderRightColor',
            'borderTopColor'
        ],
        borderImage: [
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth'
        ],
        borderInlineEnd: [
            'borderInlineEndColor',
            'borderInlineEndStyle',
            'borderInlineEndWidth'
        ],
        borderInlineStart: [
            'borderInlineStartColor',
            'borderInlineStartStyle',
            'borderInlineStartWidth'
        ],
        borderLeft: [
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth'
        ],
        borderRadius: [
            'borderBottomLeftRadius',
            'borderBottomRightRadius',
            'borderTopLeftRadius',
            'borderTopRightRadius'
        ],
        borderRight: [
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth'
        ],
        borderStyle: [
            'borderBottomStyle',
            'borderLeftStyle',
            'borderRightStyle',
            'borderTopStyle'
        ],
        borderTop: [
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderWidth: [
            'borderBottomWidth',
            'borderLeftWidth',
            'borderRightWidth',
            'borderTopWidth'
        ],
        columnRule: [
            'columnRuleColor',
            'columnRuleStyle',
            'columnRuleWidth'
        ],
        columns: [
            'columnCount',
            'columnWidth'
        ],
        flex: [
            'flexBasis',
            'flexGrow',
            'flexShrink'
        ],
        flexFlow: [
            'flexDirection',
            'flexWrap'
        ],
        font: [
            'fontFamily',
            'fontFeatureSettings',
            'fontKerning',
            'fontLanguageOverride',
            'fontSize',
            'fontSizeAdjust',
            'fontStretch',
            'fontStyle',
            'fontVariant',
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition',
            'fontWeight',
            'lineHeight'
        ],
        fontVariant: [
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition'
        ],
        gap: [
            'columnGap',
            'rowGap'
        ],
        grid: [
            'gridAutoColumns',
            'gridAutoFlow',
            'gridAutoRows',
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        gridArea: [
            'gridColumnEnd',
            'gridColumnStart',
            'gridRowEnd',
            'gridRowStart'
        ],
        gridColumn: [
            'gridColumnEnd',
            'gridColumnStart'
        ],
        gridColumnGap: [
            'columnGap'
        ],
        gridGap: [
            'columnGap',
            'rowGap'
        ],
        gridRow: [
            'gridRowEnd',
            'gridRowStart'
        ],
        gridRowGap: [
            'rowGap'
        ],
        gridTemplate: [
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        listStyle: [
            'listStyleImage',
            'listStylePosition',
            'listStyleType'
        ],
        margin: [
            'marginBottom',
            'marginLeft',
            'marginRight',
            'marginTop'
        ],
        marker: [
            'markerEnd',
            'markerMid',
            'markerStart'
        ],
        mask: [
            'maskClip',
            'maskComposite',
            'maskImage',
            'maskMode',
            'maskOrigin',
            'maskPositionX',
            'maskPositionY',
            'maskRepeat',
            'maskSize'
        ],
        maskPosition: [
            'maskPositionX',
            'maskPositionY'
        ],
        outline: [
            'outlineColor',
            'outlineStyle',
            'outlineWidth'
        ],
        overflow: [
            'overflowX',
            'overflowY'
        ],
        padding: [
            'paddingBottom',
            'paddingLeft',
            'paddingRight',
            'paddingTop'
        ],
        placeContent: [
            'alignContent',
            'justifyContent'
        ],
        placeItems: [
            'alignItems',
            'justifyItems'
        ],
        placeSelf: [
            'alignSelf',
            'justifySelf'
        ],
        textDecoration: [
            'textDecorationColor',
            'textDecorationLine',
            'textDecorationStyle'
        ],
        textEmphasis: [
            'textEmphasisColor',
            'textEmphasisStyle'
        ],
        transition: [
            'transitionDelay',
            'transitionDuration',
            'transitionProperty',
            'transitionTimingFunction'
        ],
        wordWrap: [
            'overflowWrap'
        ]
    };
    /**
 * CSS properties which accept numbers but are not in units of "px".
 */ var isUnitlessNumber = {
        animationIterationCount: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
    };
    /**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */ function prefixKey(prefix1, key) {
        return prefix1 + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */ var prefixes = [
        'Webkit',
        'ms',
        'Moz',
        'O'
    ]; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix1) {
            isUnitlessNumber[prefixKey(prefix1, prop)] = isUnitlessNumber[prop];
        });
    });
    /**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */ function dangerousStyleValue(name, value, isCustomProperty) {
        // Note that we've removed escapeTextForBrowser() calls here since the
        // whole string will be escaped when the attribute is injected into
        // the markup. If you provide unsafe user data here they can inject
        // arbitrary CSS which may be problematic (I couldn't repro this):
        // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
        // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
        // This is not an XSS hole but instead a potential CSS injection issue
        // which has lead to a greater discussion about how we're going to
        // trust URLs moving forward. See #2115901
        var isEmpty = value == null || typeof value === 'boolean' || value === '';
        if (isEmpty) return '';
        if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
        return ('' + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */ function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }
    var warnValidStyle = function() {
    };
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
    var msPattern$1 = /^-ms-/;
    var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;
    var warnedStyleNames = {
    };
    var warnedStyleValues = {
    };
    var warnedForNaNValue = false;
    var warnedForInfinityValue = false;
    var camelize = function(string) {
        return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
        });
    };
    var warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error('Unsupported style property %s. Did you mean %s?', name, // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, 'ms-')));
    };
    var warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
    };
    var warnStyleValueWithSemicolon = function(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) return;
        warnedStyleValues[value] = true;
        error("Style property values shouldn't contain a semicolon. Try \"%s: %s\" instead.", name, value.replace(badStyleValueWithSemicolonPattern, ''));
    };
    var warnStyleValueIsNaN = function(name, value) {
        if (warnedForNaNValue) return;
        warnedForNaNValue = true;
        error('`NaN` is an invalid value for the `%s` css style property.', name);
    };
    var warnStyleValueIsInfinity = function(name, value) {
        if (warnedForInfinityValue) return;
        warnedForInfinityValue = true;
        error('`Infinity` is an invalid value for the `%s` css style property.', name);
    };
    warnValidStyle = function(name, value) {
        if (name.indexOf('-') > -1) warnHyphenatedStyleName(name);
        else if (badVendoredStyleNamePattern.test(name)) warnBadVendoredStyleName(name);
        else if (badStyleValueWithSemicolonPattern.test(value)) warnStyleValueWithSemicolon(name, value);
        if (typeof value === 'number') {
            if (isNaN(value)) warnStyleValueIsNaN(name, value);
            else if (!isFinite(value)) warnStyleValueIsInfinity(name, value);
        }
    };
    var warnValidStyle$1 = warnValidStyle;
    /**
 * Operations for dealing with CSS properties.
 */ /**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */ function createDangerousStringForStyles(styles) {
        var serialized = '';
        var delimiter = '';
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var styleValue = styles[styleName];
            if (styleValue != null) {
                var isCustomProperty = styleName.indexOf('--') === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ';';
            }
        }
        return serialized || null;
    }
    /**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */ function setValueForStyles(node, styles) {
        var style = node.style;
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var isCustomProperty = styleName.indexOf('--') === 0;
            if (!isCustomProperty) warnValidStyle$1(styleName, styles[styleName]);
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === 'float') styleName = 'cssFloat';
            if (isCustomProperty) style.setProperty(styleName, styleValue);
            else style[styleName] = styleValue;
        }
    }
    function isValueEmpty(value) {
        return value == null || typeof value === 'boolean' || value === '';
    }
    /**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */ function expandShorthandMap(styles) {
        var expanded = {
        };
        for(var key in styles){
            var longhands = shorthandToLonghand[key] || [
                key
            ];
            for(var i = 0; i < longhands.length; i++)expanded[longhands[i]] = key;
        }
        return expanded;
    }
    /**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */ function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        if (!nextStyles) return;
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {
        };
        for(var key in expandedUpdates){
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + ',' + correctOriginalKey;
                if (warnedAbout[warningKey]) continue;
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
            }
        }
    }
    // For HTML, certain tags should omit their close tag. We keep a list for
    // those special-case tags.
    var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.
    };
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.
    var voidElementTags = _assign({
        menuitem: true
    }, omittedCloseTags);
    var HTML = '__html';
    function assertValidProps(tag, props) {
        if (!props) return;
         // Note the use of `==` which checks for null or undefined.
        if (voidElementTags[tag]) {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
        }
        if (props.dangerouslySetInnerHTML != null) {
            if (!(props.children == null)) throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        if (!(props.style == null || typeof props.style === 'object')) throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
    }
    function isCustomComponent(tagName, props) {
        if (tagName.indexOf('-') === -1) return typeof props.is === 'string';
        switch(tagName){
            // These are reserved SVG and MathML elements.
            // We don't mind this list too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case 'annotation-xml':
            case 'color-profile':
            case 'font-face':
            case 'font-face-src':
            case 'font-face-uri':
            case 'font-face-format':
            case 'font-face-name':
            case 'missing-glyph':
                return false;
            default:
                return true;
        }
    }
    // When adding attributes to the HTML or SVG allowed attribute list, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.
    var possibleStandardNames = {
        // HTML
        accept: 'accept',
        acceptcharset: 'acceptCharset',
        'accept-charset': 'acceptCharset',
        accesskey: 'accessKey',
        action: 'action',
        allowfullscreen: 'allowFullScreen',
        alt: 'alt',
        as: 'as',
        async: 'async',
        autocapitalize: 'autoCapitalize',
        autocomplete: 'autoComplete',
        autocorrect: 'autoCorrect',
        autofocus: 'autoFocus',
        autoplay: 'autoPlay',
        autosave: 'autoSave',
        capture: 'capture',
        cellpadding: 'cellPadding',
        cellspacing: 'cellSpacing',
        challenge: 'challenge',
        charset: 'charSet',
        checked: 'checked',
        children: 'children',
        cite: 'cite',
        class: 'className',
        classid: 'classID',
        classname: 'className',
        cols: 'cols',
        colspan: 'colSpan',
        content: 'content',
        contenteditable: 'contentEditable',
        contextmenu: 'contextMenu',
        controls: 'controls',
        controlslist: 'controlsList',
        coords: 'coords',
        crossorigin: 'crossOrigin',
        dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
        data: 'data',
        datetime: 'dateTime',
        default: 'default',
        defaultchecked: 'defaultChecked',
        defaultvalue: 'defaultValue',
        defer: 'defer',
        dir: 'dir',
        disabled: 'disabled',
        disablepictureinpicture: 'disablePictureInPicture',
        disableremoteplayback: 'disableRemotePlayback',
        download: 'download',
        draggable: 'draggable',
        enctype: 'encType',
        enterkeyhint: 'enterKeyHint',
        for: 'htmlFor',
        form: 'form',
        formmethod: 'formMethod',
        formaction: 'formAction',
        formenctype: 'formEncType',
        formnovalidate: 'formNoValidate',
        formtarget: 'formTarget',
        frameborder: 'frameBorder',
        headers: 'headers',
        height: 'height',
        hidden: 'hidden',
        high: 'high',
        href: 'href',
        hreflang: 'hrefLang',
        htmlfor: 'htmlFor',
        httpequiv: 'httpEquiv',
        'http-equiv': 'httpEquiv',
        icon: 'icon',
        id: 'id',
        innerhtml: 'innerHTML',
        inputmode: 'inputMode',
        integrity: 'integrity',
        is: 'is',
        itemid: 'itemID',
        itemprop: 'itemProp',
        itemref: 'itemRef',
        itemscope: 'itemScope',
        itemtype: 'itemType',
        keyparams: 'keyParams',
        keytype: 'keyType',
        kind: 'kind',
        label: 'label',
        lang: 'lang',
        list: 'list',
        loop: 'loop',
        low: 'low',
        manifest: 'manifest',
        marginwidth: 'marginWidth',
        marginheight: 'marginHeight',
        max: 'max',
        maxlength: 'maxLength',
        media: 'media',
        mediagroup: 'mediaGroup',
        method: 'method',
        min: 'min',
        minlength: 'minLength',
        multiple: 'multiple',
        muted: 'muted',
        name: 'name',
        nomodule: 'noModule',
        nonce: 'nonce',
        novalidate: 'noValidate',
        open: 'open',
        optimum: 'optimum',
        pattern: 'pattern',
        placeholder: 'placeholder',
        playsinline: 'playsInline',
        poster: 'poster',
        preload: 'preload',
        profile: 'profile',
        radiogroup: 'radioGroup',
        readonly: 'readOnly',
        referrerpolicy: 'referrerPolicy',
        rel: 'rel',
        required: 'required',
        reversed: 'reversed',
        role: 'role',
        rows: 'rows',
        rowspan: 'rowSpan',
        sandbox: 'sandbox',
        scope: 'scope',
        scoped: 'scoped',
        scrolling: 'scrolling',
        seamless: 'seamless',
        selected: 'selected',
        shape: 'shape',
        size: 'size',
        sizes: 'sizes',
        span: 'span',
        spellcheck: 'spellCheck',
        src: 'src',
        srcdoc: 'srcDoc',
        srclang: 'srcLang',
        srcset: 'srcSet',
        start: 'start',
        step: 'step',
        style: 'style',
        summary: 'summary',
        tabindex: 'tabIndex',
        target: 'target',
        title: 'title',
        type: 'type',
        usemap: 'useMap',
        value: 'value',
        width: 'width',
        wmode: 'wmode',
        wrap: 'wrap',
        // SVG
        about: 'about',
        accentheight: 'accentHeight',
        'accent-height': 'accentHeight',
        accumulate: 'accumulate',
        additive: 'additive',
        alignmentbaseline: 'alignmentBaseline',
        'alignment-baseline': 'alignmentBaseline',
        allowreorder: 'allowReorder',
        alphabetic: 'alphabetic',
        amplitude: 'amplitude',
        arabicform: 'arabicForm',
        'arabic-form': 'arabicForm',
        ascent: 'ascent',
        attributename: 'attributeName',
        attributetype: 'attributeType',
        autoreverse: 'autoReverse',
        azimuth: 'azimuth',
        basefrequency: 'baseFrequency',
        baselineshift: 'baselineShift',
        'baseline-shift': 'baselineShift',
        baseprofile: 'baseProfile',
        bbox: 'bbox',
        begin: 'begin',
        bias: 'bias',
        by: 'by',
        calcmode: 'calcMode',
        capheight: 'capHeight',
        'cap-height': 'capHeight',
        clip: 'clip',
        clippath: 'clipPath',
        'clip-path': 'clipPath',
        clippathunits: 'clipPathUnits',
        cliprule: 'clipRule',
        'clip-rule': 'clipRule',
        color: 'color',
        colorinterpolation: 'colorInterpolation',
        'color-interpolation': 'colorInterpolation',
        colorinterpolationfilters: 'colorInterpolationFilters',
        'color-interpolation-filters': 'colorInterpolationFilters',
        colorprofile: 'colorProfile',
        'color-profile': 'colorProfile',
        colorrendering: 'colorRendering',
        'color-rendering': 'colorRendering',
        contentscripttype: 'contentScriptType',
        contentstyletype: 'contentStyleType',
        cursor: 'cursor',
        cx: 'cx',
        cy: 'cy',
        d: 'd',
        datatype: 'datatype',
        decelerate: 'decelerate',
        descent: 'descent',
        diffuseconstant: 'diffuseConstant',
        direction: 'direction',
        display: 'display',
        divisor: 'divisor',
        dominantbaseline: 'dominantBaseline',
        'dominant-baseline': 'dominantBaseline',
        dur: 'dur',
        dx: 'dx',
        dy: 'dy',
        edgemode: 'edgeMode',
        elevation: 'elevation',
        enablebackground: 'enableBackground',
        'enable-background': 'enableBackground',
        end: 'end',
        exponent: 'exponent',
        externalresourcesrequired: 'externalResourcesRequired',
        fill: 'fill',
        fillopacity: 'fillOpacity',
        'fill-opacity': 'fillOpacity',
        fillrule: 'fillRule',
        'fill-rule': 'fillRule',
        filter: 'filter',
        filterres: 'filterRes',
        filterunits: 'filterUnits',
        floodopacity: 'floodOpacity',
        'flood-opacity': 'floodOpacity',
        floodcolor: 'floodColor',
        'flood-color': 'floodColor',
        focusable: 'focusable',
        fontfamily: 'fontFamily',
        'font-family': 'fontFamily',
        fontsize: 'fontSize',
        'font-size': 'fontSize',
        fontsizeadjust: 'fontSizeAdjust',
        'font-size-adjust': 'fontSizeAdjust',
        fontstretch: 'fontStretch',
        'font-stretch': 'fontStretch',
        fontstyle: 'fontStyle',
        'font-style': 'fontStyle',
        fontvariant: 'fontVariant',
        'font-variant': 'fontVariant',
        fontweight: 'fontWeight',
        'font-weight': 'fontWeight',
        format: 'format',
        from: 'from',
        fx: 'fx',
        fy: 'fy',
        g1: 'g1',
        g2: 'g2',
        glyphname: 'glyphName',
        'glyph-name': 'glyphName',
        glyphorientationhorizontal: 'glyphOrientationHorizontal',
        'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
        glyphorientationvertical: 'glyphOrientationVertical',
        'glyph-orientation-vertical': 'glyphOrientationVertical',
        glyphref: 'glyphRef',
        gradienttransform: 'gradientTransform',
        gradientunits: 'gradientUnits',
        hanging: 'hanging',
        horizadvx: 'horizAdvX',
        'horiz-adv-x': 'horizAdvX',
        horizoriginx: 'horizOriginX',
        'horiz-origin-x': 'horizOriginX',
        ideographic: 'ideographic',
        imagerendering: 'imageRendering',
        'image-rendering': 'imageRendering',
        in2: 'in2',
        in: 'in',
        inlist: 'inlist',
        intercept: 'intercept',
        k1: 'k1',
        k2: 'k2',
        k3: 'k3',
        k4: 'k4',
        k: 'k',
        kernelmatrix: 'kernelMatrix',
        kernelunitlength: 'kernelUnitLength',
        kerning: 'kerning',
        keypoints: 'keyPoints',
        keysplines: 'keySplines',
        keytimes: 'keyTimes',
        lengthadjust: 'lengthAdjust',
        letterspacing: 'letterSpacing',
        'letter-spacing': 'letterSpacing',
        lightingcolor: 'lightingColor',
        'lighting-color': 'lightingColor',
        limitingconeangle: 'limitingConeAngle',
        local: 'local',
        markerend: 'markerEnd',
        'marker-end': 'markerEnd',
        markerheight: 'markerHeight',
        markermid: 'markerMid',
        'marker-mid': 'markerMid',
        markerstart: 'markerStart',
        'marker-start': 'markerStart',
        markerunits: 'markerUnits',
        markerwidth: 'markerWidth',
        mask: 'mask',
        maskcontentunits: 'maskContentUnits',
        maskunits: 'maskUnits',
        mathematical: 'mathematical',
        mode: 'mode',
        numoctaves: 'numOctaves',
        offset: 'offset',
        opacity: 'opacity',
        operator: 'operator',
        order: 'order',
        orient: 'orient',
        orientation: 'orientation',
        origin: 'origin',
        overflow: 'overflow',
        overlineposition: 'overlinePosition',
        'overline-position': 'overlinePosition',
        overlinethickness: 'overlineThickness',
        'overline-thickness': 'overlineThickness',
        paintorder: 'paintOrder',
        'paint-order': 'paintOrder',
        panose1: 'panose1',
        'panose-1': 'panose1',
        pathlength: 'pathLength',
        patterncontentunits: 'patternContentUnits',
        patterntransform: 'patternTransform',
        patternunits: 'patternUnits',
        pointerevents: 'pointerEvents',
        'pointer-events': 'pointerEvents',
        points: 'points',
        pointsatx: 'pointsAtX',
        pointsaty: 'pointsAtY',
        pointsatz: 'pointsAtZ',
        prefix: 'prefix',
        preservealpha: 'preserveAlpha',
        preserveaspectratio: 'preserveAspectRatio',
        primitiveunits: 'primitiveUnits',
        property: 'property',
        r: 'r',
        radius: 'radius',
        refx: 'refX',
        refy: 'refY',
        renderingintent: 'renderingIntent',
        'rendering-intent': 'renderingIntent',
        repeatcount: 'repeatCount',
        repeatdur: 'repeatDur',
        requiredextensions: 'requiredExtensions',
        requiredfeatures: 'requiredFeatures',
        resource: 'resource',
        restart: 'restart',
        result: 'result',
        results: 'results',
        rotate: 'rotate',
        rx: 'rx',
        ry: 'ry',
        scale: 'scale',
        security: 'security',
        seed: 'seed',
        shaperendering: 'shapeRendering',
        'shape-rendering': 'shapeRendering',
        slope: 'slope',
        spacing: 'spacing',
        specularconstant: 'specularConstant',
        specularexponent: 'specularExponent',
        speed: 'speed',
        spreadmethod: 'spreadMethod',
        startoffset: 'startOffset',
        stddeviation: 'stdDeviation',
        stemh: 'stemh',
        stemv: 'stemv',
        stitchtiles: 'stitchTiles',
        stopcolor: 'stopColor',
        'stop-color': 'stopColor',
        stopopacity: 'stopOpacity',
        'stop-opacity': 'stopOpacity',
        strikethroughposition: 'strikethroughPosition',
        'strikethrough-position': 'strikethroughPosition',
        strikethroughthickness: 'strikethroughThickness',
        'strikethrough-thickness': 'strikethroughThickness',
        string: 'string',
        stroke: 'stroke',
        strokedasharray: 'strokeDasharray',
        'stroke-dasharray': 'strokeDasharray',
        strokedashoffset: 'strokeDashoffset',
        'stroke-dashoffset': 'strokeDashoffset',
        strokelinecap: 'strokeLinecap',
        'stroke-linecap': 'strokeLinecap',
        strokelinejoin: 'strokeLinejoin',
        'stroke-linejoin': 'strokeLinejoin',
        strokemiterlimit: 'strokeMiterlimit',
        'stroke-miterlimit': 'strokeMiterlimit',
        strokewidth: 'strokeWidth',
        'stroke-width': 'strokeWidth',
        strokeopacity: 'strokeOpacity',
        'stroke-opacity': 'strokeOpacity',
        suppresscontenteditablewarning: 'suppressContentEditableWarning',
        suppresshydrationwarning: 'suppressHydrationWarning',
        surfacescale: 'surfaceScale',
        systemlanguage: 'systemLanguage',
        tablevalues: 'tableValues',
        targetx: 'targetX',
        targety: 'targetY',
        textanchor: 'textAnchor',
        'text-anchor': 'textAnchor',
        textdecoration: 'textDecoration',
        'text-decoration': 'textDecoration',
        textlength: 'textLength',
        textrendering: 'textRendering',
        'text-rendering': 'textRendering',
        to: 'to',
        transform: 'transform',
        typeof: 'typeof',
        u1: 'u1',
        u2: 'u2',
        underlineposition: 'underlinePosition',
        'underline-position': 'underlinePosition',
        underlinethickness: 'underlineThickness',
        'underline-thickness': 'underlineThickness',
        unicode: 'unicode',
        unicodebidi: 'unicodeBidi',
        'unicode-bidi': 'unicodeBidi',
        unicoderange: 'unicodeRange',
        'unicode-range': 'unicodeRange',
        unitsperem: 'unitsPerEm',
        'units-per-em': 'unitsPerEm',
        unselectable: 'unselectable',
        valphabetic: 'vAlphabetic',
        'v-alphabetic': 'vAlphabetic',
        values: 'values',
        vectoreffect: 'vectorEffect',
        'vector-effect': 'vectorEffect',
        version: 'version',
        vertadvy: 'vertAdvY',
        'vert-adv-y': 'vertAdvY',
        vertoriginx: 'vertOriginX',
        'vert-origin-x': 'vertOriginX',
        vertoriginy: 'vertOriginY',
        'vert-origin-y': 'vertOriginY',
        vhanging: 'vHanging',
        'v-hanging': 'vHanging',
        videographic: 'vIdeographic',
        'v-ideographic': 'vIdeographic',
        viewbox: 'viewBox',
        viewtarget: 'viewTarget',
        visibility: 'visibility',
        vmathematical: 'vMathematical',
        'v-mathematical': 'vMathematical',
        vocab: 'vocab',
        widths: 'widths',
        wordspacing: 'wordSpacing',
        'word-spacing': 'wordSpacing',
        writingmode: 'writingMode',
        'writing-mode': 'writingMode',
        x1: 'x1',
        x2: 'x2',
        x: 'x',
        xchannelselector: 'xChannelSelector',
        xheight: 'xHeight',
        'x-height': 'xHeight',
        xlinkactuate: 'xlinkActuate',
        'xlink:actuate': 'xlinkActuate',
        xlinkarcrole: 'xlinkArcrole',
        'xlink:arcrole': 'xlinkArcrole',
        xlinkhref: 'xlinkHref',
        'xlink:href': 'xlinkHref',
        xlinkrole: 'xlinkRole',
        'xlink:role': 'xlinkRole',
        xlinkshow: 'xlinkShow',
        'xlink:show': 'xlinkShow',
        xlinktitle: 'xlinkTitle',
        'xlink:title': 'xlinkTitle',
        xlinktype: 'xlinkType',
        'xlink:type': 'xlinkType',
        xmlbase: 'xmlBase',
        'xml:base': 'xmlBase',
        xmllang: 'xmlLang',
        'xml:lang': 'xmlLang',
        xmlns: 'xmlns',
        'xml:space': 'xmlSpace',
        xmlnsxlink: 'xmlnsXlink',
        'xmlns:xlink': 'xmlnsXlink',
        xmlspace: 'xmlSpace',
        y1: 'y1',
        y2: 'y2',
        y: 'y',
        ychannelselector: 'yChannelSelector',
        z: 'z',
        zoomandpan: 'zoomAndPan'
    };
    var ariaProperties = {
        'aria-current': 0,
        // state
        'aria-details': 0,
        'aria-disabled': 0,
        // state
        'aria-hidden': 0,
        // state
        'aria-invalid': 0,
        // state
        'aria-keyshortcuts': 0,
        'aria-label': 0,
        'aria-roledescription': 0,
        // Widget Attributes
        'aria-autocomplete': 0,
        'aria-checked': 0,
        'aria-expanded': 0,
        'aria-haspopup': 0,
        'aria-level': 0,
        'aria-modal': 0,
        'aria-multiline': 0,
        'aria-multiselectable': 0,
        'aria-orientation': 0,
        'aria-placeholder': 0,
        'aria-pressed': 0,
        'aria-readonly': 0,
        'aria-required': 0,
        'aria-selected': 0,
        'aria-sort': 0,
        'aria-valuemax': 0,
        'aria-valuemin': 0,
        'aria-valuenow': 0,
        'aria-valuetext': 0,
        // Live Region Attributes
        'aria-atomic': 0,
        'aria-busy': 0,
        'aria-live': 0,
        'aria-relevant': 0,
        // Drag-and-Drop Attributes
        'aria-dropeffect': 0,
        'aria-grabbed': 0,
        // Relationship Attributes
        'aria-activedescendant': 0,
        'aria-colcount': 0,
        'aria-colindex': 0,
        'aria-colspan': 0,
        'aria-controls': 0,
        'aria-describedby': 0,
        'aria-errormessage': 0,
        'aria-flowto': 0,
        'aria-labelledby': 0,
        'aria-owns': 0,
        'aria-posinset': 0,
        'aria-rowcount': 0,
        'aria-rowindex': 0,
        'aria-rowspan': 0,
        'aria-setsize': 0
    };
    var warnedProperties = {
    };
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    function validateProperty(tagName, name) {
        if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) return true;
        if (rARIACamel.test(name)) {
            var ariaName = 'aria-' + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (correctName == null) {
                error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
                warnedProperties[name] = true;
                return true;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== correctName) {
                error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
                warnedProperties[name] = true;
                return true;
            }
        }
        if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (standardName == null) {
                warnedProperties[name] = true;
                return false;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== standardName) {
                error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties[name] = true;
                return true;
            }
        }
        return true;
    }
    function warnInvalidARIAProps(type, props) {
        var invalidProps = [];
        for(var key in props){
            var isValid = validateProperty(type, key);
            if (!isValid) invalidProps.push(key);
        }
        var unknownPropString = invalidProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (invalidProps.length === 1) error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        else if (invalidProps.length > 1) error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
    }
    function validateProperties(type, props) {
        if (isCustomComponent(type, props)) return;
        warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
        if (type !== 'input' && type !== 'textarea' && type !== 'select') return;
        if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === 'select' && props.multiple) error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            else error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
        }
    }
    var validateProperty$1 = function() {
    };
    var warnedProperties$1 = {
    };
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var EVENT_NAME_REGEX = /^on./;
    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
    var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    validateProperty$1 = function(tagName, name, value, eventRegistry) {
        if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) return true;
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
        } // We can't rely on the event system being injected on the server.
        if (eventRegistry != null) {
            var registrationNameDependencies1 = eventRegistry.registrationNameDependencies, possibleRegistrationNames1 = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies1.hasOwnProperty(name)) return true;
            var registrationName = possibleRegistrationNames1.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames1[lowerCasedName] : null;
            if (registrationName != null) {
                error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
                warnedProperties$1[name] = true;
                return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
                error('Unknown event handler property `%s`. It will be ignored.', name);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (EVENT_NAME_REGEX.test(name)) {
            // If no event plugins have been injected, we are in a server environment.
            // So we can't tell if the event name is correct for sure, but we can filter
            // out known bad ones like `onclick`. We can't suggest a specific replacement though.
            if (INVALID_EVENT_NAME_REGEX.test(name)) error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            warnedProperties$1[name] = true;
            return true;
        } // Let the ARIA attribute hook validate ARIA attributes
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) return true;
        if (lowerCasedName === 'innerhtml') {
            error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'aria') {
            error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'number' && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
                error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (!isReserved && name !== lowerCasedName) {
            // Unknown attributes should have lowercase casing since that's how they
            // will be cased anyway with server rendering.
            error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) error("Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.", value, name, name, value, name);
            else error("Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", value, name, name, value, name, name, name);
            warnedProperties$1[name] = true;
            return true;
        } // Now that we've validated casing, do not validate
        // data types for reserved props
        if (isReserved) return true;
         // Warn when a known attribute is a bad type
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
        } // Warn when passing the strings 'false' or 'true' into a boolean prop
        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
        }
        return true;
    };
    var warnUnknownProperties = function(type, props, eventRegistry) {
        var unknownProps = [];
        for(var key in props){
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid) unknownProps.push(key);
        }
        var unknownPropString = unknownProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (unknownProps.length === 1) error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        else if (unknownProps.length > 1) error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
    };
    function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) return;
        warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
    var IS_NON_DELEGATED = 2;
    var IS_CAPTURE_PHASE = 4;
    var IS_REPLAYED = 16;
    // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
    // we call willDeferLaterForLegacyFBSupport, thus not bailing out
    // will result in endless cycles like an infinite loop.
    // We also don't want to defer during event replaying.
    var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
    /**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */ function getEventTarget(nativeEvent) {
        // Fallback to nativeEvent.srcElement for IE9
        // https://github.com/facebook/react/issues/12506
        var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963
        if (target.correspondingUseElement) target = target.correspondingUseElement;
         // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
        // @see http://www.quirksmode.org/js/events_properties.html
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
        // We perform this translation at the end of the event loop so that we
        // always receive the correct fiber here
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) // Unmounted
        return;
        if (!(typeof restoreImpl === 'function')) throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.
        if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
    }
    function setRestoreImplementation(impl) {
        restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
        if (restoreTarget) {
            if (restoreQueue) restoreQueue.push(target);
            else restoreQueue = [
                target
            ];
        } else restoreTarget = target;
    }
    function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
        if (!restoreTarget) return;
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) for(var i = 0; i < queuedTargets.length; i++)restoreStateOfTarget(queuedTargets[i]);
    }
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults
    var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
    };
    var discreteUpdatesImpl = function(fn, a, b, c, d) {
        return fn(a, b, c, d);
    };
    var flushDiscreteUpdatesImpl = function() {
    };
    var batchedEventUpdatesImpl = batchedUpdatesImpl;
    var isInsideEventHandler = false;
    var isBatchingEventUpdates = false;
    function finishEventHandler() {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
            // If a controlled event was fired, we may need to restore the state of
            // the DOM node back to the controlled value. This is necessary when React
            // bails out of the update without touching the DOM.
            flushDiscreteUpdatesImpl();
            restoreStateIfNeeded();
        }
    }
    function batchedUpdates(fn, bookkeeping) {
        if (isInsideEventHandler) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(bookkeeping);
        isInsideEventHandler = true;
        try {
            return batchedUpdatesImpl(fn, bookkeeping);
        } finally{
            isInsideEventHandler = false;
            finishEventHandler();
        }
    }
    function batchedEventUpdates(fn, a, b) {
        if (isBatchingEventUpdates) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(a, b);
        isBatchingEventUpdates = true;
        try {
            return batchedEventUpdatesImpl(fn, a, b);
        } finally{
            isBatchingEventUpdates = false;
            finishEventHandler();
        }
    }
    function discreteUpdates(fn, a, b, c, d) {
        var prevIsInsideEventHandler = isInsideEventHandler;
        isInsideEventHandler = true;
        try {
            return discreteUpdatesImpl(fn, a, b, c, d);
        } finally{
            isInsideEventHandler = prevIsInsideEventHandler;
            if (!isInsideEventHandler) finishEventHandler();
        }
    }
    function flushDiscreteUpdatesIfNeeded(timeStamp) {
        if (!isInsideEventHandler) flushDiscreteUpdatesImpl();
    }
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        discreteUpdatesImpl = _discreteUpdatesImpl;
        flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
        batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
    }
    function isInteractive(tag) {
        return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }
    function shouldPreventMouseEvent(name, type, props) {
        switch(name){
            case 'onClick':
            case 'onClickCapture':
            case 'onDoubleClick':
            case 'onDoubleClickCapture':
            case 'onMouseDown':
            case 'onMouseDownCapture':
            case 'onMouseMove':
            case 'onMouseMoveCapture':
            case 'onMouseUp':
            case 'onMouseUpCapture':
            case 'onMouseEnter':
                return !!(props.disabled && isInteractive(type));
            default:
                return false;
        }
    }
    /**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */ function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) // Work in progress (ex: onload events in incremental mode).
        return null;
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) // Work in progress.
        return null;
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        if (!(!listener || typeof listener === 'function')) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        return listener;
    }
    var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
    if (canUseDOM) try {
        var options = {
        }; // $FlowFixMe: Ignore Flow complaining about needing a value
        Object.defineProperty(options, 'passive', {
            get: function() {
                passiveBrowserEventsSupported = true;
            }
        });
        window.addEventListener('test', options, options);
        window.removeEventListener('test', options, options);
    } catch (e) {
        passiveBrowserEventsSupported = false;
    }
    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
            func.apply(context, funcArgs);
        } catch (error1) {
            this.onError(error1);
        }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    // In DEV mode, we swap out invokeGuardedCallback for a special version
    // that plays more nicely with the browser's DevTools. The idea is to preserve
    // "Pause on exceptions" behavior. Because React wraps all user-provided
    // functions in invokeGuardedCallback, and the production version of
    // invokeGuardedCallback uses a try-catch, all user exceptions are treated
    // like caught exceptions, and the DevTools won't pause unless the developer
    // takes the extra step of enabling pause on caught exceptions. This is
    // unintuitive, though, because even though React has caught the error, from
    // the developer's perspective, the error is uncaught.
    //
    // To preserve the expected "Pause on exceptions" behavior, we don't use a
    // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
    // DOM node, and call the user-provided callback from inside an event handler
    // for that fake event. If the callback throws, the error is "captured" using
    // a global event handler. But because the error happens in a different
    // event loop context, it does not interrupt the normal program flow.
    // Effectively, this gives us try-catch behavior without actually using
    // try-catch. Neat!
    // Check that the browser supports the APIs we need to implement our special
    // DEV version of invokeGuardedCallback
    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');
        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            // If document doesn't exist we know for sure we will crash in this method
            // when we call document.createEvent(). However this can cause confusing
            // errors: https://github.com/facebookincubator/create-react-app/issues/3482
            // So we preemptively throw with a better message instead.
            if (!(typeof document !== 'undefined')) throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            var evt = document.createEvent('Event');
            var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
            // set this to true at the beginning, then set it to false right after
            // calling the function. If the function errors, `didError` will never be
            // set to false. This strategy works even if the browser is flaky and
            // fails to call our global error handler, because it doesn't rely on
            // the error event at all.
            var didError = true; // Keeps track of the value of window.event so that we can reset it
            // during the callback to let user code access window.event in the
            // browsers that support it.
            var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
            // dispatching: https://github.com/facebook/react/issues/13688
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');
            function restoreAfterDispatch() {
                // We immediately remove the callback from event listeners so that
                // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                // nested call would trigger the fake event handlers of any call higher
                // in the stack.
                fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
                // window.event assignment in both IE <= 10 as they throw an error
                // "Member not found" in strict mode, and in Firefox which does not
                // support window.event.
                if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) window.event = windowEvent;
            } // Create an event handler for our fake event. We will synchronously
            // dispatch our fake event using `dispatchEvent`. Inside the handler, we
            // call the user-provided callback.
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
            } // Create a global error event handler. We use this to capture the value
            // that was thrown. It's possible that this error handler will fire more
            // than once; for example, if non-React code also calls `dispatchEvent`
            // and a handler for that event throws. We should be resilient to most of
            // those cases. Even if our error event handler fires more than once, the
            // last error event is always used. If the callback actually does error,
            // we know that the last error event is the correct one, because it's not
            // possible for anything else to have happened in between our callback
            // erroring and the code that follows the `dispatchEvent` call below. If
            // the callback doesn't error, but the error event was fired, we know to
            // ignore it because `didError` will be false, as described above.
            var error1; // Use this to track whether the error event is ever called.
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
                error1 = event.error;
                didSetError = true;
                if (error1 === null && event.colno === 0 && event.lineno === 0) isCrossOriginError = true;
                if (event.defaultPrevented) {
                    // Some other error handler has prevented default.
                    // Browsers silence the error report if this happens.
                    // We'll remember this to later decide whether to log it or not.
                    if (error1 != null && typeof error1 === 'object') try {
                        error1._suppressLogging = true;
                    } catch (inner) {
                    }
                }
            } // Create a fake event type.
            var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers
            window.addEventListener('error', handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
            // errors, it will trigger our global error handler.
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) Object.defineProperty(window, 'event', windowEventDescriptor);
            if (didCall && didError) {
                if (!didSetError) // The callback errored, but the error event never fired.
                error1 = new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.");
                else if (isCrossOriginError) error1 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                this.onError(error1);
            } // Remove our event listeners
            window.removeEventListener('error', handleWindowError);
            if (!didCall) {
                // Something went really wrong, and our event was not dispatched.
                // https://github.com/facebook/react/issues/16734
                // https://github.com/facebook/react/issues/16585
                // Fall back to the production implementation.
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
            }
        };
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null; // Used by event system to capture/rethrow the first error.
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
        onError: function(error1) {
            hasError = true;
            caughtError = error1;
        }
    };
    /**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
            var error1 = clearCaughtError();
            if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error1;
            }
        }
    }
    /**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */ function rethrowCaughtError() {
        if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
        }
    }
    function hasCaughtError() {
        return hasError;
    }
    function clearCaughtError() {
        if (hasError) {
            var error3 = caughtError;
            hasError = false;
            caughtError = null;
            return error3;
        } else throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    /**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */ function get(key) {
        return key._reactInternals;
    }
    function has(key) {
        return key._reactInternals !== undefined;
    }
    function set(key, value) {
        key._reactInternals = value;
    }
    // Don't change these two values. They're used by React Dev Tools.
    var NoFlags = /*                      */ 0;
    var PerformedWork = /*                */ 1; // You can change the rest (and add more).
    var Placement = /*                    */ 2;
    var Update = /*                       */ 4;
    var PlacementAndUpdate = /*           */ 6;
    var Deletion = /*                     */ 8;
    var ContentReset = /*                 */ 16;
    var Callback = /*                     */ 32;
    var DidCapture = /*                   */ 64;
    var Ref = /*                          */ 128;
    var Snapshot = /*                     */ 256;
    var Passive = /*                      */ 512; // TODO (effects) Remove this bit once the new reconciler is synced to the old.
    var PassiveUnmountPendingDev = /*     */ 8192;
    var Hydrating = /*                    */ 1024;
    var HydratingAndUpdate = /*           */ 1028; // Passive & Update & Callback & Ref & Snapshot
    var LifecycleEffectMask = /*          */ 932; // Union of all host effects
    var HostEffectMask = /*               */ 2047; // These are not really side effects, but we still reuse this field.
    var Incomplete = /*                   */ 2048;
    var ShouldCapture = /*                */ 4096;
    var ForceUpdateForLegacySuspense = /* */ 16384; // Static tags describe aspects of a fiber that are not specific to a render,
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
            // If there is no alternate, this might be a new tree that isn't inserted
            // yet. If it is, then it will have a pending insertion effect on it.
            var nextNode = node;
            do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) // This is an insertion or in-progress hydration. The nearest possible
                // mounted fiber is the parent but we need to continue to figure out
                // if that one is still mounted.
                nearestMounted = node.return;
                nextNode = node.return;
            }while (nextNode)
        } else while(node.return)node = node.return;
        if (node.tag === HostRoot) // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return nearestMounted;
         // If we didn't hit the root, that means that we're in an disconnected tree
        // that has been unmounted.
        return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
                var current1 = fiber.alternate;
                if (current1 !== null) suspenseState = current1.memoizedState;
            }
            if (suspenseState !== null) return suspenseState.dehydrated;
        }
        return null;
    }
    function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || 'A component');
            instance._warnedAboutRefsInRender = true;
        }
        var fiber = get(component);
        if (!fiber) return false;
        return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
        if (!(getNearestMountedFiber(fiber) === fiber)) throw Error("Unable to find node on an unmounted component.");
    }
    function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
            // If there is no alternate, then we only need to check if it is mounted.
            var nearestMounted = getNearestMountedFiber(fiber);
            if (!(nearestMounted !== null)) throw Error("Unable to find node on an unmounted component.");
            if (nearestMounted !== fiber) return null;
            return fiber;
        } // If we have two possible branches, we'll walk backwards up to the root
        // to see what path the root points to. On the way we may hit one of the
        // special cases and we'll deal with them.
        var a = fiber;
        var b = alternate;
        while(true){
            var parentA = a.return;
            if (parentA === null) break;
            var parentB = parentA.alternate;
            if (parentB === null) {
                // There is no alternate. This is an unusual case. Currently, it only
                // happens when a Suspense component is hidden. An extra fragment fiber
                // is inserted in between the Suspense fiber and its children. Skip
                // over this extra fragment fiber and proceed to the next parent.
                var nextParent = parentA.return;
                if (nextParent !== null) {
                    a = b = nextParent;
                    continue;
                } // If there's no parent, we're at the root.
                break;
            } // If both copies of the parent fiber point to the same child, we can
            // assume that the child is current. This happens when we bailout on low
            // priority: the bailed out fiber's child reuses the current child.
            if (parentA.child === parentB.child) {
                var child = parentA.child;
                while(child){
                    if (child === a) {
                        // We've determined that A is the current branch.
                        assertIsMounted(parentA);
                        return fiber;
                    }
                    if (child === b) {
                        // We've determined that B is the current branch.
                        assertIsMounted(parentA);
                        return alternate;
                    }
                    child = child.sibling;
                } // We should never have an alternate for any mounting node. So the only
                throw Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
                // The return pointer of A and the return pointer of B point to different
                // fibers. We assume that return pointers never criss-cross, so A must
                // belong to the child set of A.return, and B must belong to the child
                // set of B.return.
                a = parentA;
                b = parentB;
            } else {
                // The return pointers point to the same fiber. We'll have to use the
                // default, slow path: scan the child sets of each parent alternate to see
                // which child belongs to which set.
                //
                // Search parent A's child set
                var didFindChild = false;
                var _child = parentA.child;
                while(_child){
                    if (_child === a) {
                        didFindChild = true;
                        a = parentA;
                        b = parentB;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = true;
                        b = parentA;
                        a = parentB;
                        break;
                    }
                    _child = _child.sibling;
                }
                if (!didFindChild) {
                    // Search parent B's child set
                    _child = parentB.child;
                    while(_child){
                        if (_child === a) {
                            didFindChild = true;
                            a = parentB;
                            b = parentA;
                            break;
                        }
                        if (_child === b) {
                            didFindChild = true;
                            b = parentB;
                            a = parentA;
                            break;
                        }
                        _child = _child.sibling;
                    }
                    if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
            }
            if (!(a.alternate === b)) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        } // If the root is not a host container, we're in a disconnected tree. I.e.
        // unmounted.
        if (!(a.tag === HostRoot)) throw Error("Unable to find node on an unmounted component.");
        if (a.stateNode.current === a) // We've determined that A is the current branch.
        return fiber;
         // Otherwise B has to be current branch.
        return alternate;
    }
    function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) return null;
         // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText) return node;
            else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) return null;
            while(!node.sibling){
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) return null;
         // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) return node;
            else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) return null;
            while(!node.sibling){
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function doesFiberContain(parentFiber, childFiber) {
        var node = childFiber;
        var parentFiberAlternate = parentFiber.alternate;
        while(node !== null){
            if (node === parentFiber || node === parentFiberAlternate) return true;
            node = node.return;
        }
        return false;
    }
    var attemptUserBlockingHydration;
    function setAttemptUserBlockingHydration(fn) {
        attemptUserBlockingHydration = fn;
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
    } // TODO: Upgrade this definition once we're on a newer version of Flow that
    var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.
    var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
    // if the last target was dehydrated.
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null; // For pointer events there can be one latest event per pointerId.
    var queuedPointers = new Map();
    var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.
    var queuedExplicitHydrationTargets = [];
    function hasQueuedDiscreteEvents() {
        return queuedDiscreteEvents.length > 0;
    }
    var discreteReplayableEvents = [
        'mousedown',
        'mouseup',
        'touchcancel',
        'touchend',
        'touchstart',
        'auxclick',
        'dblclick',
        'pointercancel',
        'pointerdown',
        'pointerup',
        'dragend',
        'dragstart',
        'drop',
        'compositionend',
        'compositionstart',
        'keydown',
        'keypress',
        'keyup',
        'input',
        'textInput',
        'copy',
        'cut',
        'paste',
        'click',
        'change',
        'contextmenu',
        'reset',
        'submit'
    ];
    function isReplayableDiscreteEvent(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
            blockedOn: blockedOn,
            domEventName: domEventName,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent: nativeEvent,
            targetContainers: [
                targetContainer
            ]
        };
    }
    function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
        queuedDiscreteEvents.push(queuedEvent);
    } // Resets the replaying for this type of continuous event to no event.
    function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch(domEventName){
            case 'focusin':
            case 'focusout':
                queuedFocus = null;
                break;
            case 'dragenter':
            case 'dragleave':
                queuedDrag = null;
                break;
            case 'mouseover':
            case 'mouseout':
                queuedMouse = null;
                break;
            case 'pointerover':
            case 'pointerout':
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
        }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) // Attempt to increase the priority of this target.
                attemptContinuousHydration(_fiber2);
            }
            return queuedEvent;
        } // If we have already queued this exact event, then it's because
        // the different event systems have different DOM event listeners.
        // We can accumulate the flags, and the targetContainers, and
        // store a single event to be replayed.
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) targetContainers.push(targetContainer);
        return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // These set relatedTarget to null because the replayed event will be treated as if we
        // moved from outside the window (no target) onto the target once it hydrates.
        // Instead of mutating we could clone the event.
        switch(domEventName){
            case 'focusin':
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
            case 'dragenter':
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
            case 'mouseover':
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
            case 'pointerover':
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
            case 'gotpointercapture':
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
        }
        return false;
    } // Check if this target is unblocked. Returns true if it's unblocked.
    function attemptExplicitHydrationTarget(queuedTarget) {
        // TODO: This function shares a lot of logic with attemptToDispatchEvent.
        // Try to unify them. It's a bit tricky since it would require two return
        // values.
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) {
                        // We're blocked on hydrating this boundary.
                        // Increase its priority.
                        queuedTarget.blockedOn = instance;
                        attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                            Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                                attemptHydrationAtCurrentPriority(nearestMounted);
                            });
                        });
                        return;
                    }
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (root.hydrate) {
                        queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
                        // a root other than sync.
                        return;
                    }
                }
            }
        }
        queuedTarget.blockedOn = null;
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) return false;
        var targetContainers = queuedEvent.targetContainers;
        while(targetContainers.length > 0){
            var targetContainer = targetContainers[0];
            var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn !== null) {
                // We're still blocked. Try again later.
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) attemptContinuousHydration(_fiber3);
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
            } // This target container was successfully dispatched. Try the next.
            targetContainers.shift();
        }
        return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) map.delete(key);
    }
    function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false; // First replay discrete events.
        while(queuedDiscreteEvents.length > 0){
            var nextDiscreteEvent = queuedDiscreteEvents[0];
            if (nextDiscreteEvent.blockedOn !== null) {
                // We're still blocked.
                // Increase the priority of this boundary to unblock
                // the next discrete event.
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) attemptUserBlockingHydration(_fiber4);
                break;
            }
            var targetContainers = nextDiscreteEvent.targetContainers;
            while(targetContainers.length > 0){
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                    // We're still blocked. Try again later.
                    nextDiscreteEvent.blockedOn = nextBlockedOn;
                    break;
                } // This target container was successfully dispatched. Try the next.
                targetContainers.shift();
            }
            if (nextDiscreteEvent.blockedOn === null) // We've successfully replayed the first event. Let's try the next one.
            queuedDiscreteEvents.shift();
        } // Next replay any continuous events.
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) queuedFocus = null;
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) queuedDrag = null;
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) queuedMouse = null;
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
                // now unblocked. This first might not actually be unblocked yet.
                // We could check it early to avoid scheduling an unnecessary callback.
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
        }
    }
    function retryIfBlockedOn(unblocked) {
        // Mark anything that was blocked on this as no longer blocked
        // and eligible for a replay.
        if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
            // worth it because we expect very few discrete events to queue up and once
            // we are actually fully unblocked it will be fast to replay them.
            for(var i = 1; i < queuedDiscreteEvents.length; i++){
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) queuedEvent.blockedOn = null;
            }
        }
        if (queuedFocus !== null) scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        if (queuedDrag !== null) scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        if (queuedMouse !== null) scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        var unblock = function(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for(var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++){
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) queuedTarget.blockedOn = null;
        }
        while(queuedExplicitHydrationTargets.length > 0){
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) break;
            else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) // We're unblocked.
                queuedExplicitHydrationTargets.shift();
            }
        }
    }
    var DiscreteEvent = 0;
    var UserBlockingEvent = 1;
    var ContinuousEvent = 2;
    /**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */ function makePrefixMap(styleProp, eventName) {
        var prefixes1 = {
        };
        prefixes1[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes1['Webkit' + styleProp] = 'webkit' + eventName;
        prefixes1['Moz' + styleProp] = 'moz' + eventName;
        return prefixes1;
    }
    /**
 * A list of event names to a configurable list of vendor prefixes.
 */ var vendorPrefixes = {
        animationend: makePrefixMap('Animation', 'AnimationEnd'),
        animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
        animationstart: makePrefixMap('Animation', 'AnimationStart'),
        transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    /**
 * Event names that have already been detected and prefixed (if applicable).
 */ var prefixedEventNames = {
    };
    /**
 * Element to check for prefixes on.
 */ var style = {
    };
    /**
 * Bootstrap if a DOM exists.
 */ if (canUseDOM) {
        style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
        // the un-prefixed "animation" and "transition" properties are defined on the
        // style object but the events that fire will still be prefixed, so we need
        // to check if the un-prefixed events are usable, and if not remove them from the map.
        if (!('AnimationEvent' in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
        } // Same as above
        if (!('TransitionEvent' in window)) delete vendorPrefixes.transitionend.transition;
    }
    /**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */ function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
        else if (!vendorPrefixes[eventName]) return eventName;
        var prefixMap = vendorPrefixes[eventName];
        for(var styleProp in prefixMap){
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
        return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName('animationend');
    var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
    var ANIMATION_START = getVendorPrefixedEventName('animationstart');
    var TRANSITION_END = getVendorPrefixedEventName('transitionend');
    var topLevelEventsToReactNames = new Map();
    var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
    // the code required to apply the same logic for event prioritization and that of the
    // SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
    // duplication (for which there would be quite a bit). For the events that are not needed
    // for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
    // array of top level events.
    // Lastly, we ignore prettier so we can keep the formatting sane.
    // prettier-ignore
    var discreteEventPairsForSimpleEventPlugin = [
        'cancel',
        'cancel',
        'click',
        'click',
        'close',
        'close',
        'contextmenu',
        'contextMenu',
        'copy',
        'copy',
        'cut',
        'cut',
        'auxclick',
        'auxClick',
        'dblclick',
        'doubleClick',
        'dragend',
        'dragEnd',
        'dragstart',
        'dragStart',
        'drop',
        'drop',
        'focusin',
        'focus',
        'focusout',
        'blur',
        'input',
        'input',
        'invalid',
        'invalid',
        'keydown',
        'keyDown',
        'keypress',
        'keyPress',
        'keyup',
        'keyUp',
        'mousedown',
        'mouseDown',
        'mouseup',
        'mouseUp',
        'paste',
        'paste',
        'pause',
        'pause',
        'play',
        'play',
        'pointercancel',
        'pointerCancel',
        'pointerdown',
        'pointerDown',
        'pointerup',
        'pointerUp',
        'ratechange',
        'rateChange',
        'reset',
        'reset',
        'seeked',
        'seeked',
        'submit',
        'submit',
        'touchcancel',
        'touchCancel',
        'touchend',
        'touchEnd',
        'touchstart',
        'touchStart',
        'volumechange',
        'volumeChange'
    ];
    var otherDiscreteEvents = [
        'change',
        'selectionchange',
        'textInput',
        'compositionstart',
        'compositionend',
        'compositionupdate'
    ];
    var userBlockingPairsForSimpleEventPlugin = [
        'drag',
        'drag',
        'dragenter',
        'dragEnter',
        'dragexit',
        'dragExit',
        'dragleave',
        'dragLeave',
        'dragover',
        'dragOver',
        'mousemove',
        'mouseMove',
        'mouseout',
        'mouseOut',
        'mouseover',
        'mouseOver',
        'pointermove',
        'pointerMove',
        'pointerout',
        'pointerOut',
        'pointerover',
        'pointerOver',
        'scroll',
        'scroll',
        'toggle',
        'toggle',
        'touchmove',
        'touchMove',
        'wheel',
        'wheel'
    ]; // prettier-ignore
    var continuousPairsForSimpleEventPlugin = [
        'abort',
        'abort',
        ANIMATION_END,
        'animationEnd',
        ANIMATION_ITERATION,
        'animationIteration',
        ANIMATION_START,
        'animationStart',
        'canplay',
        'canPlay',
        'canplaythrough',
        'canPlayThrough',
        'durationchange',
        'durationChange',
        'emptied',
        'emptied',
        'encrypted',
        'encrypted',
        'ended',
        'ended',
        'error',
        'error',
        'gotpointercapture',
        'gotPointerCapture',
        'load',
        'load',
        'loadeddata',
        'loadedData',
        'loadedmetadata',
        'loadedMetadata',
        'loadstart',
        'loadStart',
        'lostpointercapture',
        'lostPointerCapture',
        'playing',
        'playing',
        'progress',
        'progress',
        'seeking',
        'seeking',
        'stalled',
        'stalled',
        'suspend',
        'suspend',
        'timeupdate',
        'timeUpdate',
        TRANSITION_END,
        'transitionEnd',
        'waiting',
        'waiting'
    ];
    /**
 * Turns
 * ['abort', ...]
 *
 * into
 *
 * topLevelEventsToReactNames = new Map([
 *   ['abort', 'onAbort'],
 * ]);
 *
 * and registers them.
 */ function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
        // As the event types are in pairs of two, we need to iterate
        // through in twos. The events are in pairs of two to save code
        // and improve init perf of processing this array, as it will
        // result in far fewer object allocations and property accesses
        // if we only use three arrays to process all the categories of
        // instead of tuples.
        for(var i = 0; i < eventTypes.length; i += 2){
            var topEvent = eventTypes[i];
            var event = eventTypes[i + 1];
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            var reactName = 'on' + capitalizedEvent;
            eventPriorities.set(topEvent, priority);
            topLevelEventsToReactNames.set(topEvent, reactName);
            registerTwoPhaseEvent(reactName, [
                topEvent
            ]);
        }
    }
    function setEventPriorities(eventTypes, priority) {
        for(var i = 0; i < eventTypes.length; i++)eventPriorities.set(eventTypes[i], priority);
    }
    function getEventPriorityForPluginSystem(domEventName) {
        var priority = eventPriorities.get(domEventName); // Default to a ContinuousEvent. Note: we might
        // want to warn if we can't detect the priority
        // for the event.
        return priority === undefined ? ContinuousEvent : priority;
    }
    function registerSimpleEvents() {
        registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
        registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
        registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
        setEventPriorities(otherDiscreteEvents, DiscreteEvent);
    }
    var Scheduler_now = Scheduler.unstable_now;
    // Provide explicit error message when production+profiling bundle of e.g.
    // react-dom is used with production (non-profiling) bundle of
    // scheduler/tracing
    if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority = 99;
    var UserBlockingPriority = 98;
    var NormalPriority = 97;
    var LowPriority = 96;
    var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.
    var NoPriority = 90;
    var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    var SyncLanePriority = 15;
    var SyncBatchedLanePriority = 14;
    var InputDiscreteHydrationLanePriority = 13;
    var InputDiscreteLanePriority = 12;
    var InputContinuousHydrationLanePriority = 11;
    var InputContinuousLanePriority = 10;
    var DefaultHydrationLanePriority = 9;
    var DefaultLanePriority = 8;
    var TransitionHydrationPriority = 7;
    var TransitionPriority = 6;
    var RetryLanePriority = 5;
    var SelectiveHydrationLanePriority = 4;
    var IdleHydrationLanePriority = 3;
    var IdleLanePriority = 2;
    var OffscreenLanePriority = 1;
    var NoLanePriority = 0;
    var TotalLanes = 31;
    var NoLanes = /*                        */ 0;
    var NoLane = /*                          */ 0;
    var SyncLane = /*                        */ 1;
    var SyncBatchedLane = /*                 */ 2;
    var InputDiscreteHydrationLane = /*      */ 4;
    var InputDiscreteLanes = /*                    */ 24;
    var InputContinuousHydrationLane = /*           */ 32;
    var InputContinuousLanes = /*                  */ 192;
    var DefaultHydrationLane = /*            */ 256;
    var DefaultLanes = /*                   */ 3584;
    var TransitionHydrationLane = /*                */ 4096;
    var TransitionLanes = /*                       */ 4186112;
    var RetryLanes = /*                            */ 62914560;
    var SomeRetryLane = /*                  */ 33554432;
    var SelectiveHydrationLane = /*          */ 67108864;
    var NonIdleLanes = /*                                 */ 134217727;
    var IdleHydrationLane = /*               */ 134217728;
    var IdleLanes = /*                             */ 805306368;
    var OffscreenLane = /*                   */ 1073741824;
    var NoTimestamp = -1;
    function setCurrentUpdateLanePriority(newLanePriority) {
    } // "Registers" used to "return" multiple values
    // Used by getHighestPriorityLanes and getNextLanes:
    var return_highestLanePriority = DefaultLanePriority;
    function getHighestPriorityLanes(lanes) {
        if ((SyncLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncLanePriority;
            return SyncLane;
        }
        if ((SyncBatchedLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncBatchedLanePriority;
            return SyncBatchedLane;
        }
        if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
            return_highestLanePriority = InputDiscreteHydrationLanePriority;
            return InputDiscreteHydrationLane;
        }
        var inputDiscreteLanes = InputDiscreteLanes & lanes;
        if (inputDiscreteLanes !== NoLanes) {
            return_highestLanePriority = InputDiscreteLanePriority;
            return inputDiscreteLanes;
        }
        if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
            return_highestLanePriority = InputContinuousHydrationLanePriority;
            return InputContinuousHydrationLane;
        }
        var inputContinuousLanes = InputContinuousLanes & lanes;
        if (inputContinuousLanes !== NoLanes) {
            return_highestLanePriority = InputContinuousLanePriority;
            return inputContinuousLanes;
        }
        if ((lanes & DefaultHydrationLane) !== NoLanes) {
            return_highestLanePriority = DefaultHydrationLanePriority;
            return DefaultHydrationLane;
        }
        var defaultLanes = DefaultLanes & lanes;
        if (defaultLanes !== NoLanes) {
            return_highestLanePriority = DefaultLanePriority;
            return defaultLanes;
        }
        if ((lanes & TransitionHydrationLane) !== NoLanes) {
            return_highestLanePriority = TransitionHydrationPriority;
            return TransitionHydrationLane;
        }
        var transitionLanes = TransitionLanes & lanes;
        if (transitionLanes !== NoLanes) {
            return_highestLanePriority = TransitionPriority;
            return transitionLanes;
        }
        var retryLanes = RetryLanes & lanes;
        if (retryLanes !== NoLanes) {
            return_highestLanePriority = RetryLanePriority;
            return retryLanes;
        }
        if (lanes & SelectiveHydrationLane) {
            return_highestLanePriority = SelectiveHydrationLanePriority;
            return SelectiveHydrationLane;
        }
        if ((lanes & IdleHydrationLane) !== NoLanes) {
            return_highestLanePriority = IdleHydrationLanePriority;
            return IdleHydrationLane;
        }
        var idleLanes = IdleLanes & lanes;
        if (idleLanes !== NoLanes) {
            return_highestLanePriority = IdleLanePriority;
            return idleLanes;
        }
        if ((OffscreenLane & lanes) !== NoLanes) {
            return_highestLanePriority = OffscreenLanePriority;
            return OffscreenLane;
        }
        error('Should have found matching lanes. This is a bug in React.');
        return_highestLanePriority = DefaultLanePriority;
        return lanes;
    }
    function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
        switch(schedulerPriorityLevel){
            case ImmediatePriority:
                return SyncLanePriority;
            case UserBlockingPriority:
                return InputContinuousLanePriority;
            case NormalPriority:
            case LowPriority:
                // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
                return DefaultLanePriority;
            case IdlePriority:
                return IdleLanePriority;
            default:
                return NoLanePriority;
        }
    }
    function lanePriorityToSchedulerPriority(lanePriority) {
        switch(lanePriority){
            case SyncLanePriority:
            case SyncBatchedLanePriority:
                return ImmediatePriority;
            case InputDiscreteHydrationLanePriority:
            case InputDiscreteLanePriority:
            case InputContinuousHydrationLanePriority:
            case InputContinuousLanePriority:
                return UserBlockingPriority;
            case DefaultHydrationLanePriority:
            case DefaultLanePriority:
            case TransitionHydrationPriority:
            case TransitionPriority:
            case SelectiveHydrationLanePriority:
            case RetryLanePriority:
                return NormalPriority;
            case IdleHydrationLanePriority:
            case IdleLanePriority:
            case OffscreenLanePriority:
                return IdlePriority;
            case NoLanePriority:
                return NoPriority;
            default:
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
        }
    }
    function getNextLanes(root, wipLanes) {
        // Early bailout if there's no pending work left.
        var pendingLanes = root.pendingLanes;
        if (pendingLanes === NoLanes) {
            return_highestLanePriority = NoLanePriority;
            return NoLanes;
        }
        var nextLanes = NoLanes;
        var nextLanePriority = NoLanePriority;
        var expiredLanes = root.expiredLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes; // Check if any work has expired.
        if (expiredLanes !== NoLanes) {
            nextLanes = expiredLanes;
            nextLanePriority = return_highestLanePriority = SyncLanePriority;
        } else {
            // Do not work on any idle work until all the non-idle work has finished,
            // even if the work is suspended.
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                    nextLanePriority = return_highestLanePriority;
                } else {
                    var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                    if (nonIdlePingedLanes !== NoLanes) {
                        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                        nextLanePriority = return_highestLanePriority;
                    }
                }
            } else {
                // The only remaining work is Idle.
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(unblockedLanes);
                    nextLanePriority = return_highestLanePriority;
                } else if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                }
            }
        }
        if (nextLanes === NoLanes) // This should only be reachable if we're suspended
        // TODO: Consider warning in this path if a fallback timer is not scheduled.
        return NoLanes;
         // If there are higher priority lanes, we'll include them even if they
        // are suspended.
        nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes); // If we're already in the middle of a render, switching lanes will interrupt
        // it and we'll lose our progress. We should only do this if the new lanes are
        // higher priority.
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && // bother waiting until the root is complete.
        (wipLanes & suspendedLanes) === NoLanes) {
            getHighestPriorityLanes(wipLanes);
            var wipLanePriority = return_highestLanePriority;
            if (nextLanePriority <= wipLanePriority) return wipLanes;
            else return_highestLanePriority = nextLanePriority;
        } // Check for entangled lanes and add them to the batch.
        //
        // A lane is said to be entangled with another when it's not allowed to render
        // in a batch that does not also include the other lane. Typically we do this
        // when multiple updates have the same source, and we only want to respond to
        // the most recent event from that source.
        //
        // Note that we apply entanglements *after* checking for partial work above.
        // This means that if a lane is entangled during an interleaved event while
        // it's already rendering, we won't interrupt it. This is intentional, since
        // entanglement is usually "best effort": we'll try our best to render the
        // lanes in the same batch, but it's not worth throwing out partially
        // completed work in order to do it.
        //
        // For those exceptions where entanglement is semantically important, like
        // useMutableSource, we should ensure that there is no partial work at the
        // time we apply the entanglement.
        var entangledLanes = root.entangledLanes;
        if (entangledLanes !== NoLanes) {
            var entanglements = root.entanglements;
            var lanes = nextLanes & entangledLanes;
            while(lanes > 0){
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                nextLanes |= entanglements[index];
                lanes &= ~lane;
            }
        }
        return nextLanes;
    }
    function getMostRecentEventTime(root, lanes) {
        var eventTimes = root.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var eventTime = eventTimes[index];
            if (eventTime > mostRecentEventTime) mostRecentEventTime = eventTime;
            lanes &= ~lane;
        }
        return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
        // TODO: Expiration heuristic is constant per lane, so could use a map.
        getHighestPriorityLanes(lane);
        var priority = return_highestLanePriority;
        if (priority >= InputContinuousLanePriority) // User interactions should expire slightly more quickly.
        //
        // NOTE: This is set to the corresponding constant as in Scheduler.js. When
        // we made it larger, a product metric in www regressed, suggesting there's
        // a user interaction that's being starved by a series of synchronous
        // updates. If that theory is correct, the proper solution is to fix the
        // starvation. However, this scenario supports the idea that expiration
        // times are an important safeguard when starvation does happen.
        //
        // Also note that, in the case of user input specifically, this will soon no
        // longer be an issue because we plan to make user input synchronous by
        // default (until you enter `startTransition`, of course.)
        //
        // If weren't planning to make these updates synchronous soon anyway, I
        // would probably make this number a configurable parameter.
        return currentTime + 250;
        else if (priority >= TransitionPriority) return currentTime + 5000;
        else // Anything idle priority or lower should never expire.
        return NoTimestamp;
    }
    function markStarvedLanesAsExpired(root, currentTime) {
        // TODO: This gets called every time we yield. We can optimize by storing
        // the earliest expiration time on the root. Then use that to quickly bail out
        // of this function.
        var pendingLanes = root.pendingLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes;
        var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
        // expiration time. If so, we'll assume the update is being starved and mark
        // it as expired to force it to finish.
        var lanes = pendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var expirationTime = expirationTimes[index];
            if (expirationTime === NoTimestamp) // Found a pending lane with no expiration time. If it's not suspended, or
            // if it's pinged, assume it's CPU-bound. Compute a new expiration time
            // using the current time.
            {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) // Assumes timestamps are monotonically increasing.
                expirationTimes[index] = computeExpirationTime(lane, currentTime);
            } else if (expirationTime <= currentTime) // This lane expired
            root.expiredLanes |= lane;
            lanes &= ~lane;
        }
    } // This returns the highest priority pending lanes regardless of whether they
    function getLanesToRetrySynchronouslyOnError(root) {
        var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) return everythingButOffscreen;
        if (everythingButOffscreen & OffscreenLane) return OffscreenLane;
        return NoLanes;
    }
    function returnNextLanesPriority() {
        return return_highestLanePriority;
    }
    function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
    } // To ensure consistency across multiple updates in the same event, this should
    // be a pure function, so that it always returns the same lane for given inputs.
    function findUpdateLane(lanePriority, wipLanes) {
        switch(lanePriority){
            case NoLanePriority:
                break;
            case SyncLanePriority:
                return SyncLane;
            case SyncBatchedLanePriority:
                return SyncBatchedLane;
            case InputDiscreteLanePriority:
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) // Shift to the next priority level
                return findUpdateLane(InputContinuousLanePriority, wipLanes);
                return _lane;
            case InputContinuousLanePriority:
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) // Shift to the next priority level
                return findUpdateLane(DefaultLanePriority, wipLanes);
                return _lane2;
            case DefaultLanePriority:
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                    // If all the default lanes are already being worked on, look for a
                    // lane in the transition range.
                    _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                    if (_lane3 === NoLane) // All the transition lanes are taken, too. This should be very
                    // rare, but as a last resort, pick a default lane. This will have
                    // the effect of interrupting the current work-in-progress render.
                    _lane3 = pickArbitraryLane(DefaultLanes);
                }
                return _lane3;
            case TransitionPriority:
            case RetryLanePriority:
                break;
            case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) lane = pickArbitraryLane(IdleLanes);
                return lane;
        }
        throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
    } // To ensure consistency across multiple updates in the same event, this should
    // be pure function, so that it always returns the same lane for given inputs.
    function findTransitionLane(wipLanes, pendingLanes) {
        // First look for lanes that are completely unclaimed, i.e. have no
        // pending work.
        var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
        if (lane === NoLane) {
            // If all lanes have pending work, look for a lane that isn't currently
            // being worked on.
            lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
            if (lane === NoLane) // If everything is being worked on, pick any lane. This has the
            // effect of interrupting the current work-in-progress.
            lane = pickArbitraryLane(TransitionLanes);
        }
        return lane;
    } // To ensure consistency across multiple updates in the same event, this should
    // be pure function, so that it always returns the same lane for given inputs.
    function findRetryLane(wipLanes) {
        // This is a fork of `findUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
        if (lane === NoLane) lane = pickArbitraryLane(RetryLanes);
        return lane;
    }
    function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
    }
    function getLowestPriorityLane(lanes) {
        // This finds the most significant non-zero bit.
        var index = 31 - clz32(lanes);
        return index < 0 ? NoLanes : 1 << index;
    }
    function getEqualOrHigherPriorityLanes(lanes) {
        return (getLowestPriorityLane(lanes) << 1) - 1;
    }
    function pickArbitraryLane(lanes) {
        // This wrapper function gets inlined. Only exists so to communicate that it
        // doesn't matter which bit is selected; you can pick any bit without
        // affecting the algorithms where its used. Here I'm using
        // getHighestPriorityLane because it requires the fewest operations.
        return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
    }
    function isSubsetOfLanes(set1, subset) {
        return (set1 & subset) === subset;
    }
    function mergeLanes(a, b) {
        return a | b;
    }
    function removeLanes(set1, subset) {
        return set1 & ~subset;
    } // Seems redundant, but it changes the type from a single lane (used for
    // updates) to a group of lanes (used for flushing work).
    function laneToLanes(lane) {
        return lane;
    }
    function higherPriorityLane(a, b) {
        // This works because the bit ranges decrease in priority as you go left.
        return a !== NoLane && a < b ? a : b;
    }
    function createLaneMap(initial) {
        // Intentionally pushing one by one.
        // https://v8.dev/blog/elements-kinds#avoid-creating-holes
        var laneMap = [];
        for(var i = 0; i < TotalLanes; i++)laneMap.push(initial);
        return laneMap;
    }
    function markRootUpdated(root, updateLane, eventTime) {
        root.pendingLanes |= updateLane; // TODO: Theoretically, any update to any lane can unblock any other lane. But
        // it's not practical to try every single possible combination. We need a
        // heuristic to decide which lanes to attempt to render, and in which batches.
        // For now, we use the same heuristic as in the old ExpirationTimes model:
        // retry any lane at equal or lower priority, but don't try updates at higher
        // priority without also including the lower priority updates. This works well
        // when considering updates across different priority levels, but isn't
        // sufficient for updates within the same priority, since we want to treat
        // those updates as parallel.
        // Unsuspend any update at equal or lower priority.
        var higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111
        root.suspendedLanes &= higherPriorityLanes;
        root.pingedLanes &= higherPriorityLanes;
        var eventTimes = root.eventTimes;
        var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
        // recent event, and we assume time is monotonically increasing.
        eventTimes[index] = eventTime;
    }
    function markRootSuspended(root, suspendedLanes) {
        root.suspendedLanes |= suspendedLanes;
        root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.
        var expirationTimes = root.expirationTimes;
        var lanes = suspendedLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootPinged(root, pingedLanes, eventTime) {
        root.pingedLanes |= root.suspendedLanes & pingedLanes;
    }
    function markDiscreteUpdatesExpired(root) {
        root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;
    }
    function hasDiscreteLanes(lanes) {
        return (lanes & InputDiscreteLanes) !== NoLanes;
    }
    function markRootMutableRead(root, updateLane) {
        root.mutableReadLanes |= updateLane & root.pendingLanes;
    }
    function markRootFinished(root, remainingLanes) {
        var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
        root.pendingLanes = remainingLanes; // Let's try everything again
        root.suspendedLanes = 0;
        root.pingedLanes = 0;
        root.expiredLanes &= remainingLanes;
        root.mutableReadLanes &= remainingLanes;
        root.entangledLanes &= remainingLanes;
        var entanglements = root.entanglements;
        var eventTimes = root.eventTimes;
        var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work
        var lanes = noLongerPendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] = NoLanes;
            eventTimes[index] = NoTimestamp;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootEntangled(root, entangledLanes) {
        root.entangledLanes |= entangledLanes;
        var entanglements = root.entanglements;
        var lanes = entangledLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] |= entangledLanes;
            lanes &= ~lane;
        }
    }
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros. Only used on lanes, so assume input is an integer.
    // Based on:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(lanes) {
        if (lanes === 0) return 32;
        return 31 - (log(lanes) / LN2 | 0) | 0;
    }
    // Intentionally not named imports because Rollup would use dynamic dispatch for
    var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?
    var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
    // We'd like to remove this but it's not clear if this is safe.
    function setEnabled(enabled) {
        _enabled = !!enabled;
    }
    function isEnabled() {
        return _enabled;
    }
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriorityForPluginSystem(domEventName);
        var listenerWrapper;
        switch(eventPriority){
            case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
            case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
            case ContinuousEvent:
            default:
                listenerWrapper = dispatchEvent;
                break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
        discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
    }
    function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
        runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) return;
        var allowReplay = true;
        // TODO: replaying capture phase events is currently broken
        // because we used to do it during top-level native bubble handlers
        // but now we use different bubble and capture handlers.
        // In eager mode, we attach capture listeners early, so we need
        // to filter them out until we fix the logic to handle them correctly.
        // This could've been outside the flag but I put it inside to reduce risk.
        allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
        if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
            // If we already have a queue of discrete events, and this is another discrete
            // event, then we can't dispatch it regardless of its target, since they
            // need to dispatch in order.
            queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            return;
        }
        var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
            // We successfully dispatched this event.
            if (allowReplay) clearIfContinuousEvent(domEventName, nativeEvent);
            return;
        }
        if (allowReplay) {
            if (isReplayableDiscreteEvent(domEventName)) {
                // This this to be replayed later once the target is available.
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) return;
             // We need to clear only if we didn't queue because
            // queueing is accummulative.
            clearIfContinuousEvent(domEventName, nativeEvent);
        } // This is not replayable so we'll invoke it but without a target,
        // in case the event system needs to trace it.
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    } // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.
    function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // TODO: Warn if _enabled is false.
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) // This tree has been unmounted already. Dispatch without a target.
            targetInst = null;
            else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) // Queue the event to be replayed later. Abort dispatching since we
                    // don't want this event dispatched twice through the event system.
                    // TODO: If this is the first discrete event in the queue. Schedule an increased
                    // priority for this boundary.
                    return instance;
                     // This shouldn't happen, something went wrong but to avoid blocking
                    // the whole system, dispatch the event without a target.
                    // TODO: Warn.
                    targetInst = null;
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (root.hydrate) // If this happens during a replay something went wrong and it might block
                    // the whole system.
                    return getContainerFromFiber(nearestMounted);
                    targetInst = null;
                } else if (nearestMounted !== targetInst) // If we get an event (ex: img onload) before committing that
                // component's mount, ignore it for now (that is, treat it as if it was an
                // event on a non-React tree). We might also consider queueing events and
                // dispatching them after the mount.
                targetInst = null;
            }
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer); // We're not blocked on anything.
        return null;
    }
    function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            capture: true,
            passive: passive
        });
        return listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            passive: passive
        });
        return listener;
    }
    /**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */ var root = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
    }
    function reset() {
        root = null;
        startText = null;
        fallbackText = null;
    }
    function getData() {
        if (fallbackText) return fallbackText;
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for(start = 0; start < startLength; start++){
            if (startValue[start] !== endValue[start]) break;
        }
        var minEnd = startLength - start;
        for(end = 1; end <= minEnd; end++){
            if (startValue[startLength - end] !== endValue[endLength - end]) break;
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
    }
    function getText() {
        if ('value' in root) return root.value;
        return root.textContent;
    }
    /**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */ function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ('charCode' in nativeEvent) {
            charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.
            if (charCode === 0 && keyCode === 13) charCode = 13;
        } else // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
         // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
        // report Enter as charCode 10 when ctrl is pressed.
        if (charCode === 10) charCode = 13;
         // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
        // Must not discard the (non-)printable Enter-key.
        if (charCode >= 32 || charCode === 13) return charCode;
        return 0;
    }
    function functionThatReturnsTrue() {
        return true;
    }
    function functionThatReturnsFalse() {
        return false;
    } // This is intentionally a factory so that we have different returned constructors.
    // If we had a single constructor, it would be megamorphic and engines would deopt.
    function createSyntheticEvent(Interface) {
        /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */ function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for(var _propName in Interface){
                if (!Interface.hasOwnProperty(_propName)) continue;
                var normalize = Interface[_propName];
                if (normalize) this[_propName] = normalize(nativeEvent);
                else this[_propName] = nativeEvent[_propName];
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) this.isDefaultPrevented = functionThatReturnsTrue;
            else this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
        }
        _assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) return;
                if (event.preventDefault) event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.returnValue !== 'unknown') event.returnValue = false;
                this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) return;
                if (event.stopPropagation) event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.cancelBubble !== 'unknown') // The ChangeEventPlugin registers a "propertychange" event for
                // IE. This event does not support bubbling or cancelling, and
                // any references to cancelBubble throw "Member not found".  A
                // typeof check of "unknown" circumvents this issue (and is also
                // IE specific).
                event.cancelBubble = true;
                this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */ persist: function() {
            },
            /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */ isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
    }
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
            return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = _assign({
    }, EventInterface, {
        view: 0,
        detail: 0
    });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === 'mousemove') {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
                lastMovementX = 0;
                lastMovementY = 0;
            }
            lastMouseEvent = event;
        }
    }
    /**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var MouseEventInterface = _assign({
    }, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
            if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
        },
        movementX: function(event) {
            if ('movementX' in event) return event.movementX;
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
        },
        movementY: function(event) {
            if ('movementY' in event) return event.movementY;
             // Don't need to call updateMouseMovementPolyfillState() here
            // because it's guaranteed to have already run when movementX
            // was copied.
            return lastMovementY;
        }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    /**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var DragEventInterface = _assign({
    }, MouseEventInterface, {
        dataTransfer: 0
    });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    /**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var FocusEventInterface = _assign({
    }, UIEventInterface, {
        relatedTarget: 0
    });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */ var AnimationEventInterface = _assign({
    }, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */ var ClipboardEventInterface = _assign({
    }, EventInterface, {
        clipboardData: function(event) {
            return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
        }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */ var CompositionEventInterface = _assign({
    }, EventInterface, {
        data: 0
    });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */ // Happens to share the same list for now.
    var SyntheticInputEvent = SyntheticCompositionEvent;
    /**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var normalizeKey = {
        Esc: 'Escape',
        Spacebar: ' ',
        Left: 'ArrowLeft',
        Up: 'ArrowUp',
        Right: 'ArrowRight',
        Down: 'ArrowDown',
        Del: 'Delete',
        Win: 'OS',
        Menu: 'ContextMenu',
        Apps: 'ContextMenu',
        Scroll: 'ScrollLock',
        MozPrintableKey: 'Unidentified'
    };
    /**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var translateToKey = {
        '8': 'Backspace',
        '9': 'Tab',
        '12': 'Clear',
        '13': 'Enter',
        '16': 'Shift',
        '17': 'Control',
        '18': 'Alt',
        '19': 'Pause',
        '20': 'CapsLock',
        '27': 'Escape',
        '32': ' ',
        '33': 'PageUp',
        '34': 'PageDown',
        '35': 'End',
        '36': 'Home',
        '37': 'ArrowLeft',
        '38': 'ArrowUp',
        '39': 'ArrowRight',
        '40': 'ArrowDown',
        '45': 'Insert',
        '46': 'Delete',
        '112': 'F1',
        '113': 'F2',
        '114': 'F3',
        '115': 'F4',
        '116': 'F5',
        '117': 'F6',
        '118': 'F7',
        '119': 'F8',
        '120': 'F9',
        '121': 'F10',
        '122': 'F11',
        '123': 'F12',
        '144': 'NumLock',
        '145': 'ScrollLock',
        '224': 'Meta'
    };
    /**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */ function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
            // Normalize inconsistent values reported by browsers due to
            // implementations of a working draft specification.
            // FireFox implements `key` but returns `MozPrintableKey` for all
            // printable characters (normalized to `Unidentified`), ignore it.
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== 'Unidentified') return key;
        } // Browser does not implement `key`, polyfill as much of it as we can.
        if (nativeEvent.type === 'keypress') {
            var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
            // thus be captured by `keypress`, no other non-printable key should.
            return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
        return '';
    }
    /**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */ var modifierKeyToProp = {
        Alt: 'altKey',
        Control: 'ctrlKey',
        Meta: 'metaKey',
        Shift: 'shiftKey'
    }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.
    function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) return nativeEvent.getModifierState(keyArg);
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
    }
    /**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var KeyboardEventInterface = _assign({
    }, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function(event) {
            // `charCode` is the result of a KeyPress event and represents the value of
            // the actual printable character.
            // KeyPress is deprecated, but its replacement is not yet final and not
            // implemented in any major browser. Only KeyPress has charCode.
            if (event.type === 'keypress') return getEventCharCode(event);
            return 0;
        },
        keyCode: function(event) {
            // `keyCode` is the result of a KeyDown/Up event and represents the value of
            // physical keyboard key.
            // The actual meaning of the value depends on the users' keyboard layout
            // which cannot be detected. Assuming that it is a US keyboard layout
            // provides a surprisingly accurate mapping for US and European users.
            // Due to this, it is left to the user to implement at this time.
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        },
        which: function(event) {
            // `which` is an alias for either `keyCode` or `charCode` depending on the
            // type of the event.
            if (event.type === 'keypress') return getEventCharCode(event);
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    /**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */ var PointerEventInterface = _assign({
    }, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    /**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */ var TouchEventInterface = _assign({
    }, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */ var TransitionEventInterface = _assign({
    }, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    /**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var WheelEventInterface = _assign({
    }, MouseEventInterface, {
        deltaX: function(event) {
            return 'deltaX' in event ? event.deltaX : 'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
            return 'deltaY' in event ? event.deltaY : 'wheelDeltaY' in event ? -event.wheelDeltaY : 'wheelDelta' in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var END_KEYCODES = [
        9,
        13,
        27,
        32
    ]; // Tab, Return, Esc, Space
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
    var documentMode = null;
    if (canUseDOM && 'documentMode' in document) documentMode = document.documentMode;
     // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
        registerTwoPhaseEvent('onBeforeInput', [
            'compositionend',
            'keypress',
            'textInput',
            'paste'
        ]);
        registerTwoPhaseEvent('onCompositionEnd', [
            'compositionend',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionStart', [
            'compositionstart',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionUpdate', [
            'compositionupdate',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
    } // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;
    /**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */ function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
 * Translate native top level events into event types.
 */ function getCompositionEventType(domEventName) {
        switch(domEventName){
            case 'compositionstart':
                return 'onCompositionStart';
            case 'compositionend':
                return 'onCompositionEnd';
            case 'compositionupdate':
                return 'onCompositionUpdate';
        }
    }
    /**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */ function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
 * Does our fallback mode think that this event is the end of composition?
 */ function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch(domEventName){
            case 'keyup':
                // Command keys insert or clear IME input.
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case 'keydown':
                // Expect IME keyCode on each keydown. If we get any other
                // code we must have exited earlier.
                return nativeEvent.keyCode !== START_KEYCODE;
            case 'keypress':
            case 'mousedown':
            case 'focusout':
                // Events are not possible without cancelling IME.
                return true;
            default:
                return false;
        }
    }
    /**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */ function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === 'object' && 'data' in detail) return detail.data;
        return null;
    }
    /**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */ function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === 'ko';
    } // Track the current IME composition status, if any.
    var isComposing = false;
    /**
 * @return {?object} A SyntheticCompositionEvent.
 */ function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) eventType = getCompositionEventType(domEventName);
        else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) eventType = 'onCompositionStart';
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) eventType = 'onCompositionEnd';
        if (!eventType) return null;
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            // The current composition is stored statically and must not be
            // overwritten while composition continues.
            if (!isComposing && eventType === 'onCompositionStart') isComposing = initialize(nativeEventTarget);
            else if (eventType === 'onCompositionEnd') {
                if (isComposing) fallbackData = getData();
            }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            if (fallbackData) // Inject data generated from fallback path into the synthetic event.
            // This matches the property of native CompositionEventInterface.
            event.data = fallbackData;
            else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) event.data = customData;
            }
        }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch(domEventName){
            case 'compositionend':
                return getDataFromCustomEvent(nativeEvent);
            case 'keypress':
                /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */ var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) return null;
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
            case 'textInput':
                // Record the characters to be added to the DOM.
                var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
                // it at the keypress level and bail immediately. Android Chrome
                // doesn't give us keycodes, so we need to ignore it.
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) return null;
                return chars;
            default:
                // For other native event types, do nothing.
                return null;
        }
    }
    /**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */ function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        // If we are currently composing (IME) and using a fallback to do so,
        // try to extract the composed characters from the fallback object.
        // If composition event is available, we extract a string only at
        // compositionevent, otherwise extract it at fallback events.
        if (isComposing) {
            if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
            }
            return null;
        }
        switch(domEventName){
            case 'paste':
                // If a paste event occurs after a keypress, throw out the input
                // chars. Paste events should not lead to BeforeInput events.
                return null;
            case 'keypress':
                /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */ if (!isKeypressCommand(nativeEvent)) {
                    // IE fires the `keypress` event when a user types an emoji via
                    // Touch keyboard of Windows.  In such a case, the `char` property
                    // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                    // is 2, the property `which` does not represent an emoji correctly.
                    // In such a case, we directly return the `char` property instead of
                    // using `which`.
                    if (nativeEvent.char && nativeEvent.char.length > 1) return nativeEvent.char;
                    else if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
                }
                return null;
            case 'compositionend':
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
                return null;
        }
    }
    /**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */ function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        else chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
         // If no characters are being inserted, no BeforeInput event should
        // be fired.
        if (!chars) return null;
        var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');
        if (listeners.length > 0) {
            var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            event.data = chars;
        }
    }
    /**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */ function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    /**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */ var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        'datetime-local': true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
    };
    function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === 'input') return !!supportedInputTypes[elem.type];
        if (nodeName === 'textarea') return true;
        return false;
    }
    /**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */ function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) return false;
        var eventName = 'on' + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
            var element = document.createElement('div');
            element.setAttribute(eventName, 'return;');
            isSupported = typeof element[eventName] === 'function';
        }
        return isSupported;
    }
    function registerEvents$1() {
        registerTwoPhaseEvent('onChange', [
            'change',
            'click',
            'focusin',
            'focusout',
            'input',
            'keydown',
            'keyup',
            'selectionchange'
        ]);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        // Flag this event loop as needing state restore.
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, 'onChange');
        if (listeners.length > 0) {
            var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
        }
    }
    /**
 * For IE shims
 */ var activeElement = null;
    var activeElementInst = null;
    /**
 * SECTION: handle `change` event
 */ function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }
    function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
        // other events and have it go through ReactBrowserEventEmitter. Since it
        // doesn't, we manually listen for the events and so we have to enqueue and
        // process the abstract event manually.
        //
        // Batching is necessary here in order to ensure that all event handlers run
        // before the next rerender (including event handlers attached to ancestor
        // elements instead of directly on the input). Without this, controlled
        // components don't work properly in conjunction with event bubbling because
        // the component is rerendered and the value reverted before all the event
        // handlers can run. See https://github.com/facebook/react/issues/708.
        batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) return targetInst;
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === 'change') return targetInst;
    }
    /**
 * SECTION: handle `input` event
 */ var isInputEventSupported = false;
    if (canUseDOM) // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events.
    isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    /**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */ function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    /**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */ function stopWatchingForValueChange() {
        if (!activeElement) return;
        activeElement.detachEvent('onpropertychange', handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
    }
    /**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */ function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== 'value') return;
        if (getInstIfValueChanged(activeElementInst)) manualDispatchChangeEvent(nativeEvent);
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === 'focusin') {
            // In IE9, propertychange fires for most input events but is buggy and
            // doesn't fire when text is deleted, but conveniently, selectionchange
            // appears to fire in all of the remaining cases so we catch those and
            // forward the event if the value has changed
            // In either case, we don't want to call the event handler if the value
            // is changed from JS so we redefine a setter for `.value` that updates
            // our activeElementValue variable, allowing us to ignore those changes
            //
            // stopWatching() should be a noop here but we call it just in case we
            // missed a blur event somehow.
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
        } else if (domEventName === 'focusout') stopWatchingForValueChange();
    } // For IE8 and IE9.
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
    }
    /**
 * SECTION: handle `click` event
 */ function shouldUseClickEvent(elem) {
        // Use the `click` event to detect changes to checkbox and radio inputs.
        // This approach works across all browsers, whereas `change` does not fire
        // until `blur` in IE8.
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === 'click') return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === 'input' || domEventName === 'change') return getInstIfValueChanged(targetInst);
    }
    function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== 'number') return;
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, 'number', node.value);
    }
    /**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */ function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) getTargetInstFunc = getTargetInstForChangeEvent;
        else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
            }
        } else if (shouldUseClickEvent(targetNode)) getTargetInstFunc = getTargetInstForClickEvent;
        if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
            }
        }
        if (handleEventFunc) handleEventFunc(domEventName, targetNode, targetInst);
         // When blurring, set the value attribute for number inputs
        if (domEventName === 'focusout') handleControlledInputBlur(targetNode);
    }
    function registerEvents$2() {
        registerDirectEvent('onMouseEnter', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onMouseLeave', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onPointerEnter', [
            'pointerout',
            'pointerover'
        ]);
        registerDirectEvent('onPointerLeave', [
            'pointerout',
            'pointerover'
        ]);
    }
    /**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */ function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
        var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';
        if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
            // If this is an over event with a target, we might have already dispatched
            // the event in the out event of the other target. If this is replayed,
            // then it's because we couldn't dispatch against this target previously
            // so we have to do it now instead.
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
                // If the related node is managed by React, we can assume that we have
                // already dispatched the corresponding events during its mouseout.
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) return;
            }
        }
        if (!isOutEvent && !isOverEvent) // Must not be a mouse or pointer in or out - ignoring.
        return;
        var win; // TODO: why is this nullable in the types but we read from it?
        if (nativeEventTarget.window === nativeEventTarget) // `nativeEventTarget` is probably a window object.
        win = nativeEventTarget;
        else {
            // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
            var doc = nativeEventTarget.ownerDocument;
            if (doc) win = doc.defaultView || doc.parentWindow;
            else win = window;
        }
        var from;
        var to;
        if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) to = null;
            }
        } else {
            // Moving to a node from outside the window.
            from = null;
            to = targetInst;
        }
        if (from === to) // Nothing pertains to our managed components.
        return;
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = 'onMouseLeave';
        var enterEventType = 'onMouseEnter';
        var eventTypePrefix = 'mouse';
        if (domEventName === 'pointerout' || domEventName === 'pointerover') {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = 'onPointerLeave';
            enterEventType = 'onPointerEnter';
            eventTypePrefix = 'pointer';
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null; // We should only process this nativeEvent if we are processing
        // the first ancestor. Next time, we will ignore the event.
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
    }
    /**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */ function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
        ;
    }
    var objectIs = typeof Object.is === 'function' ? Object.is : is;
    var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
    /**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */ function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) return true;
        if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) return false;
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;
         // Test for A's keys different from B.
        for(var i = 0; i < keysA.length; i++){
            if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) return false;
        }
        return true;
    }
    /**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */ function getLeafNode(node) {
        while(node && node.firstChild)node = node.firstChild;
        return node;
    }
    /**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */ function getSiblingNode(node) {
        while(node){
            if (node.nextSibling) return node.nextSibling;
            node = node.parentNode;
        }
    }
    /**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */ function getNodeForCharacterOffset(root1, offset) {
        var node = getLeafNode(root1);
        var nodeStart = 0;
        var nodeEnd = 0;
        while(node){
            if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) return {
                    node: node,
                    offset: offset - nodeStart
                };
                nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
        }
    }
    /**
 * @param {DOMElement} outerNode
 * @return {?object}
 */ function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) return null;
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
        // up/down buttons on an <input type="number">. Anonymous divs do not seem to
        // expose properties, triggering a "Permission denied error" if any of its
        // properties are accessed. The only seemingly possible way to avoid erroring
        // is to access a property that typically works for non-anonymous divs and
        // catch any error that may otherwise arise. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
        try {
            /* eslint-disable no-unused-expressions */ anchorNode.nodeType;
            focusNode.nodeType;
        /* eslint-enable no-unused-expressions */ } catch (e) {
            return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */ function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer: while(true){
            var next = null;
            while(true){
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) start = length + anchorOffset;
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) end = length + focusOffset;
                if (node.nodeType === TEXT_NODE) length += node.nodeValue.length;
                if ((next = node.firstChild) === null) break;
                 // Moving from `node` to its first child `next`.
                parentNode = node;
                node = next;
            }
            while(true){
                if (node === outerNode) break outer;
                if (parentNode === anchorNode && (++indexWithinAnchor) === anchorOffset) start = length;
                if (parentNode === focusNode && (++indexWithinFocus) === focusOffset) end = length;
                if ((next = node.nextSibling) !== null) break;
                node = parentNode;
                parentNode = node.parentNode;
            } // Moving from `node` to its next sibling `next`.
            node = next;
        }
        if (start === -1 || end === -1) // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
        return {
            start: start,
            end: end
        };
    }
    /**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */ function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
        // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
        // fails when pasting 100+ items)
        if (!win.getSelection) return;
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
        // Flip backward selections, so we can set with a single range.
        if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) return;
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
            } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
            }
        }
    }
    function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) return false;
        else if (outerNode === innerNode) return true;
        else if (isTextNode(outerNode)) return false;
        else if (isTextNode(innerNode)) return containsNode(outerNode, innerNode.parentNode);
        else if ('contains' in outerNode) return outerNode.contains(innerNode);
        else if (outerNode.compareDocumentPosition) return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        else return false;
    }
    function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
        try {
            // Accessing the contentDocument of a HTMLIframeElement can cause the browser
            // to throw, e.g. if it has a cross-origin src attribute.
            // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
            // iframe.contentDocument.defaultView;
            // A safety way is to access one of the cross origin properties: Window or Location
            // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
            // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
            return typeof iframe.contentWindow.location.href === 'string';
        } catch (err) {
            return false;
        }
    }
    function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while(element instanceof win.HTMLIFrameElement){
            if (isSameOriginFrame(element)) win = element.contentWindow;
            else return element;
            element = getActiveElement(win.document);
        }
        return element;
    }
    /**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */ /**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */ function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }
    function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
            focusedElem: focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
    }
    /**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */ function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) setSelection(priorFocusedElem, priorSelectionRange);
             // Focusing a node can change the scroll position, which is undesirable
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while(ancestor = ancestor.parentNode)if (ancestor.nodeType === ELEMENT_NODE) ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
            });
            if (typeof priorFocusedElem.focus === 'function') priorFocusedElem.focus();
            for(var i = 0; i < ancestors.length; i++){
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
            }
        }
    }
    /**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */ function getSelection(input) {
        var selection;
        if ('selectionStart' in input) // Modern browser with input or textarea.
        selection = {
            start: input.selectionStart,
            end: input.selectionEnd
        };
        else // Content editable or old IE textarea.
        selection = getOffsets(input);
        return selection || {
            start: 0,
            end: 0
        };
    }
    /**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */ function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === undefined) end = start;
        if ('selectionStart' in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
        } else setOffsets(input, offsets);
    }
    var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
    function registerEvents$3() {
        registerTwoPhaseEvent('onSelect', [
            'focusout',
            'contextmenu',
            'dragend',
            'focusin',
            'keydown',
            'keyup',
            'mousedown',
            'mouseup',
            'selectionchange'
        ]);
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */ function getSelection$1(node) {
        if ('selectionStart' in node && hasSelectionCapabilities(node)) return {
            start: node.selectionStart,
            end: node.selectionEnd
        };
        else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
            };
        }
    }
    /**
 * Get document associated with the event target.
 */ function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */ function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        // Ensure we have the right element, and that the user is not dragging a
        // selection (this matches native `select` event behavior). In HTML5, select
        // fires only on input and textarea thus if there's no focused element we
        // won't dispatch.
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) return;
         // Only fire when selection has actually changed.
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');
            if (listeners.length > 0) {
                var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                    event: event,
                    listeners: listeners
                });
                event.target = activeElement$1;
            }
        }
    }
    /**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */ function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch(domEventName){
            // Track the input node that has focus.
            case 'focusin':
                if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                    activeElement$1 = targetNode;
                    activeElementInst$1 = targetInst;
                    lastSelection = null;
                }
                break;
            case 'focusout':
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
            // Don't fire the event while the user is dragging. This matches the
            // semantics of the native select event.
            case 'mousedown':
                mouseDown = true;
                break;
            case 'contextmenu':
            case 'mouseup':
            case 'dragend':
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
            // Chrome and IE fire non-standard event when selection is changed (and
            // sometimes when it hasn't). IE's event fires out of order with respect
            // to key and input events on deletion, so we discard it.
            //
            // Firefox doesn't support selectionchange, so check selection status
            // after each key entry. The selection changes after keydown and before
            // keyup, but we check on keydown as well in the case of holding down a
            // key, when multiple keydown events are fired but only one keyup is.
            // This is also our approach for IE handling, for the reason above.
            case 'selectionchange':
                if (skipSelectionChangeEvent) break;
            // falls through
            case 'keydown':
            case 'keyup':
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === undefined) return;
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch(domEventName){
            case 'keypress':
                // Firefox creates a keypress event for function keys too. This removes
                // the unwanted keypress events. Enter is however both printable and
                // non-printable. One would expect Tab to be as well (but it isn't).
                if (getEventCharCode(nativeEvent) === 0) return;
            /* falls through */ case 'keydown':
            case 'keyup':
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
            case 'focusin':
                reactEventType = 'focus';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'focusout':
                reactEventType = 'blur';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'beforeblur':
            case 'afterblur':
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'click':
                // Firefox creates a click event on right mouse clicks. This removes the
                // unwanted click events.
                if (nativeEvent.button === 2) return;
            /* falls through */ case 'auxclick':
            case 'dblclick':
            case 'mousedown':
            case 'mousemove':
            case 'mouseup':
            /* falls through */ case 'mouseout':
            case 'mouseover':
            case 'contextmenu':
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
            case 'drag':
            case 'dragend':
            case 'dragenter':
            case 'dragexit':
            case 'dragleave':
            case 'dragover':
            case 'dragstart':
            case 'drop':
                SyntheticEventCtor = SyntheticDragEvent;
                break;
            case 'touchcancel':
            case 'touchend':
            case 'touchmove':
            case 'touchstart':
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
            case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
            case 'scroll':
                SyntheticEventCtor = SyntheticUIEvent;
                break;
            case 'wheel':
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
            case 'copy':
            case 'cut':
            case 'paste':
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
            case 'pointercancel':
            case 'pointerdown':
            case 'pointermove':
            case 'pointerout':
            case 'pointerover':
            case 'pointerup':
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        // Some events don't bubble in the browser.
        // In the past, React has always bubbled them, but this can be surprising.
        // We're going to try aligning closer to the browser behavior by not bubbling
        // them in React either. We'll start by not bubbling onScroll, and then expand.
        var accumulateTargetOnly = !inCapturePhase && // nonDelegatedEvents list in DOMPluginEventSystem.
        // Then we can remove this special list.
        // This is a breaking change that can wait until React 18.
        domEventName === 'scroll';
        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
            // Intentionally create event lazily.
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: _event,
                listeners: _listeners
            });
        }
    }
    // TODO: remove top-level side effect.
    registerSimpleEvents();
    registerEvents$2();
    registerEvents$1();
    registerEvents$3();
    registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        // TODO: we should remove the concept of a "SimpleEventPlugin".
        // This is the basic functionality of the event system. All
        // the other plugins are essentially polyfills. So the plugin
        // should probably be inlined somewhere and have its logic
        // be core the to event system. This would potentially allow
        // us to ship builds of React without the polyfilled plugins below.
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
        // event's native "bubble" phase, which means that we're
        // not in the capture phase. That's because we emulate
        // the capture phase here still. This is a trade-off,
        // because in an ideal world we would not emulate and use
        // the phases properly, like we do with the SimpleEvent
        // plugin. However, the plugins below either expect
        // emulation (EnterLeave) or use state localized to that
        // plugin (BeforeInput, Change, Select). The state in
        // these modules complicates things, as you'll essentially
        // get the case where the capture phase event might change
        // state, only for the following bubble event to come in
        // later and not trigger anything as the state now
        // invalidates the heuristics of the event plugin. We
        // could alter all these plugins to work in such ways, but
        // that might cause other unknown side-effects that we
        // can't forsee right now.
        if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
    } // List of events that need to be individually attached to media elements.
    var mediaEventTypes = [
        'abort',
        'canplay',
        'canplaythrough',
        'durationchange',
        'emptied',
        'encrypted',
        'ended',
        'error',
        'loadeddata',
        'loadedmetadata',
        'loadstart',
        'pause',
        'play',
        'playing',
        'progress',
        'ratechange',
        'seeked',
        'seeking',
        'stalled',
        'suspend',
        'timeupdate',
        'volumechange',
        'waiting'
    ]; // We should not delegate these events to the container, but rather
    // set them on the actual target element itself. This is primarily
    // because these events do not consistently bubble in the DOM.
    var nonDelegatedEvents = new Set([
        'cancel',
        'close',
        'invalid',
        'load',
        'scroll',
        'toggle'
    ].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
        var type = event.type || 'unknown-event';
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) for(var i = dispatchListeners.length - 1; i >= 0; i--){
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
        }
        else for(var _i = 0; _i < dispatchListeners.length; _i++){
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
        }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for(var i = 0; i < dispatchQueue.length; i++){
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
        } // This would be a good time to rethrow if any of the event handlers threw.
        rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
        if (rootContainerElement[listeningMarker]) // Performance optimization: don't iterate through events
        // for the same portal container or root node more than once.
        // TODO: once we remove the flag, we may be able to also
        // remove some of the bookkeeping maps used for laziness.
        return;
        rootContainerElement[listeningMarker] = true;
        allNativeEvents.forEach(function(domEventName) {
            if (!nonDelegatedEvents.has(domEventName)) listenToNativeEvent(domEventName, false, rootContainerElement, null);
            listenToNativeEvent(domEventName, true, rootContainerElement, null);
        });
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
        var eventSystemFlags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var target = rootContainerElement; // selectionchange needs to be attached to the document
        // otherwise it won't capture incoming events that are only
        // triggered on the document directly.
        if (domEventName === 'selectionchange' && rootContainerElement.nodeType !== DOCUMENT_NODE) target = rootContainerElement.ownerDocument;
         // If the event can be delegated (or is capture phase), we can
        // register it to the root container. Otherwise, we should
        // register the event to the target element and mark it as
        // a non-delegated event.
        if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
            // For all non-delegated events, apart from scroll, we attach
            // their event listeners to the respective elements that their
            // events fire on. That means we can skip this step, as event
            // listener has already been added previously. However, we
            // special case the scroll event because the reality is that any
            // element can scroll.
            // TODO: ideally, we'd eventually apply the same logic to all
            // events from the nonDelegatedEvents list. Then we can remove
            // this special case and use the same logic for all events.
            if (domEventName !== 'scroll') return;
            eventSystemFlags |= IS_NON_DELEGATED;
            target = targetElement;
        }
        var listenerSet = getEventListenerSet(target);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener); // If the listener entry is empty or we should upgrade, then
        // we need to trap an event listener onto the target.
        if (!listenerSet.has(listenerSetKey)) {
            if (isCapturePhaseListener) eventSystemFlags |= IS_CAPTURE_PHASE;
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
        // active and not passive.
        var isPassiveListener = undefined;
        if (passiveBrowserEventsSupported) // Browsers introduced an intervention, making these events
        // passive by default on document. React doesn't bind them
        // to document anymore, but changing this now would undo
        // the performance wins from the change. So we emulate
        // the existing behavior manually on the roots now.
        // https://github.com/facebook/react/issues/19651
        {
            if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') isPassiveListener = true;
        }
        var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we
        if (isCapturePhaseListener) {
            if (isPassiveListener !== undefined) unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            else unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
        } else if (isPassiveListener !== undefined) unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        else unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we
            if (targetInst !== null) {
                // The below logic attempts to work out if we need to change
                // the target fiber to a different ancestor. We had similar logic
                // in the legacy event system, except the big difference between
                // systems is that the modern event system now has an event listener
                // attached to each React Root and React Portal Root. Together,
                // the DOM nodes representing these roots are the "rootContainer".
                // To figure out which ancestor instance we should use, we traverse
                // up the fiber tree from the target instance and attempt to find
                // root boundaries that match that of our current "rootContainer".
                // If we find that "rootContainer", we find the parent fiber
                // sub-tree for that root and make that our ancestor instance.
                var node = targetInst;
                mainLoop: while(true){
                    if (node === null) return;
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                        var container = node.stateNode.containerInfo;
                        if (isMatchingRootContainer(container, targetContainerNode)) break;
                        if (nodeTag === HostPortal) {
                            // The target is a portal, but it's not the rootContainer we're looking for.
                            // Normally portals handle their own events all the way down to the root.
                            // So we should be able to stop now. However, we don't know if this portal
                            // was part of *our* root.
                            var grandNode = node.return;
                            while(grandNode !== null){
                                var grandTag = grandNode.tag;
                                if (grandTag === HostRoot || grandTag === HostPortal) {
                                    var grandContainer = grandNode.stateNode.containerInfo;
                                    if (isMatchingRootContainer(grandContainer, targetContainerNode)) // This is the rootContainer we're looking for and we found it as
                                    // a parent of the Portal. That means we can ignore it because the
                                    // Portal will bubble through to us.
                                    return;
                                }
                                grandNode = grandNode.return;
                            }
                        } // Now we need to find it's corresponding host fiber in the other
                        // tree. To do this we can use getClosestInstanceFromNode, but we
                        // need to validate that the fiber is a host instance, otherwise
                        // we need to traverse up through the DOM till we find the correct
                        // node that is from the other tree.
                        while(container !== null){
                            var parentNode = getClosestInstanceFromNode(container);
                            if (parentNode === null) return;
                            var parentTag = parentNode.tag;
                            if (parentTag === HostComponent || parentTag === HostText) {
                                node = ancestorInst = parentNode;
                                continue mainLoop;
                            }
                            container = container.parentNode;
                        }
                    }
                    node = node.return;
                }
            }
        }
        batchedEventUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
    }
    function createDispatchListener(instance, listener, currentTarget) {
        return {
            instance: instance,
            listener: listener,
            currentTarget: currentTarget
        };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
        var captureName = reactName !== null ? reactName + 'Capture' : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode; // createEventHandle listeners
                if (reactEventName !== null) {
                    var listener = getListener(instance, reactEventName);
                    if (listener != null) listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
            } // If we are only accumulating events for the target, then we don't
            // continue to propagate through the React fiber tree to find other
            // listeners.
            if (accumulateTargetOnly) break;
            instance = instance.return;
        }
        return listeners;
    } // We should only use this function for:
    // - BeforeInputEventPlugin
    // - ChangeEventPlugin
    // - SelectEventPlugin
    // This is because we only process these plugins
    // in the bubble phase, so we need to accumulate two
    // phase event listeners (via emulation).
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + 'Capture';
        var listeners = [];
        var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
            instance = instance.return;
        }
        return listeners;
    }
    function getParent(inst) {
        if (inst === null) return null;
        do inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
        while (inst && inst.tag !== HostComponent)
        if (inst) return inst;
        return null;
    }
    /**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */ function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for(var tempA = nodeA; tempA; tempA = getParent(tempA))depthA++;
        var depthB = 0;
        for(var tempB = nodeB; tempB; tempB = getParent(tempB))depthB++;
         // If A is deeper, crawl up.
        while(depthA - depthB > 0){
            nodeA = getParent(nodeA);
            depthA--;
        } // If B is deeper, crawl up.
        while(depthB - depthA > 0){
            nodeB = getParent(nodeB);
            depthB--;
        } // Walk in lockstep until we find a match.
        var depth = depthA;
        while(depth--){
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) return nodeA;
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
        }
        return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while(instance !== null){
            if (instance === common) break;
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) break;
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                    var captureListener = getListener(instance, registrationName);
                    if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                } else if (!inCapturePhase) {
                    var bubbleListener = getListener(instance, registrationName);
                    if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
            }
            instance = instance.return;
        }
        if (listeners.length !== 0) dispatchQueue.push({
            event: event,
            listeners: listeners
        });
    } // We should only use this function for:
    // - EnterLeaveEventPlugin
    // This is because we only process this plugin
    // in the bubble phase, so we need to accumulate two
    // phase event listeners.
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        if (from !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        if (to !== null && enterEvent !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
    }
    function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? 'capture' : 'bubble');
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE = 'style';
    var HTML$1 = '__html';
    var HTML_NAMESPACE$1 = Namespaces.html;
    var warnedUnknownTags;
    var suppressHydrationWarning;
    var validatePropertiesInDevelopment;
    var warnForTextDifference;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeMarkupForTextOrAttribute;
    var normalizeHTML;
    warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
    };
    validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, {
            registrationNameDependencies: registrationNameDependencies,
            possibleRegistrationNames: possibleRegistrationNames
        });
    }; // IE 11 parses & normalizes the style attribute as opposed to other
    // browsers. It adds spaces and sorts the properties in some
    // non-alphabetical order. Handling that would require sorting CSS
    // properties in the client & server versions or applying
    // `expectedStyle` to a temporary DOM node to read its `style` attribute
    // normalized. Since it only affects IE, we're skipping style warnings
    // in that browser completely in favor of doing all that work.
    // See https://github.com/facebook/react/issues/11807
    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
    // It also can turn \u0000 into \uFFFD inside attributes.
    // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
    // If we have a mismatch, it might be caused by that.
    // We will still patch up in this case but not fire the warning.
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    normalizeMarkupForTextOrAttribute = function(markup) {
        var markupString = typeof markup === 'string' ? markup : '' + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
    };
    warnForTextDifference = function(serverText, clientText) {
        if (didWarnInvalidHydration) return;
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) return;
        didWarnInvalidHydration = true;
        error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
    };
    warnForPropDifference = function(propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) return;
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) return;
        didWarnInvalidHydration = true;
        error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
    };
    warnForExtraAttributes = function(attributeNames) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function(name) {
            names.push(name);
        });
        error('Extra attributes from the server: %s', names);
    };
    warnForInvalidEventListener = function(registrationName, listener) {
        if (listener === false) error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
        else error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }; // Parse the HTML and read it back to normalize the HTML string so that it
    // can be used for comparison.
    normalizeHTML = function(parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
    };
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {
    }
    function trapClickOnNonInteractiveElement(node) {
        // Mobile Safari does not fire properly bubble click events on
        // non-interactive elements, which means delegated click listeners do not
        // fire. The workaround for this bug involves attaching an empty click
        // listener on the target node.
        // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
        // Just set it using the onclick property so that we don't have to manage any
        // bookkeeping for it. Not sure if we need to clear it when the listener is
        // removed.
        // TODO: Only do this for the relevant Safaris maybe?
        node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for(var propKey in nextProps){
            if (!nextProps.hasOwnProperty(propKey)) continue;
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                if (nextHtml != null) setInnerHTML(domElement, nextHtml);
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string') {
                    // Avoid setting initial textContent when the text is empty. In IE11 setting
                    // textContent on a <textarea> will cause the placeholder to not
                    // show within the <textarea> until it has been focused and blurred again.
                    // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                    var canSetTextContent = tag !== 'textarea' || nextProp !== '';
                    if (canSetTextContent) setTextContent(domElement, nextProp);
                } else if (typeof nextProp === 'number') setTextContent(domElement, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (nextProp != null) setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        // TODO: Handle wasCustomComponentTag
        for(var i = 0; i < updatePayload.length; i += 2){
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) setValueForStyles(domElement, propValue);
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) setInnerHTML(domElement, propValue);
            else if (propKey === CHILDREN) setTextContent(domElement, propValue);
            else setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
        // tags get no namespace.
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE$1) namespaceURI = getIntrinsicNamespace(type);
        if (namespaceURI === HTML_NAMESPACE$1) {
            isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
            // allow <SVG> or <mATH>.
            if (!isCustomComponentTag && type !== type.toLowerCase()) error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            if (type === 'script') {
                // Create the script via .innerHTML so its "parser-inserted" flag is
                // set to true and it does not execute
                var div = ownerDocument.createElement('div');
                div.innerHTML = "<script></script>"; // eslint-disable-line
                // This is guaranteed to yield a script element.
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
            } else if (typeof props.is === 'string') // $FlowIssue `createElement` should be updated for Web Components
            domElement = ownerDocument.createElement(type, {
                is: props.is
            });
            else {
                // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                // See discussion in https://github.com/facebook/react/pull/6896
                // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
                // attributes on `select`s needs to be added before `option`s are inserted.
                // This prevents:
                // - a bug where the `select` does not scroll to the correct option because singular
                //  `select` elements automatically pick the first item #13222
                // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
                // See https://github.com/facebook/react/issues/13222
                // and https://github.com/facebook/react/issues/14239
                if (type === 'select') {
                    var node = domElement;
                    if (props.multiple) node.multiple = true;
                    else if (props.size) // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                    // it is possible that no option is selected.
                    //
                    // This is only necessary when a select in "single selection mode".
                    node.size = props.size;
                }
            }
        } else domElement = ownerDocument.createElementNS(namespaceURI, type);
        if (namespaceURI === HTML_NAMESPACE$1) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
        }
        return domElement;
    }
    function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        var props;
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                props = rawProps;
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                props = rawProps;
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                props = rawProps;
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                props = rawProps;
                break;
            case 'input':
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            default:
                props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'option':
                postMountWrapper$1(domElement, rawProps);
                break;
            case 'select':
                postMountWrapper$2(domElement, rawProps);
                break;
            default:
                if (typeof props.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
    } // Calculate the diff between the two objects.
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        validatePropertiesInDevelopment(tag, nextRawProps);
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch(tag){
            case 'input':
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'option':
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'select':
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'textarea':
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
            default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for(propKey in lastProps){
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) continue;
            if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for(styleName in lastStyle)if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) styleUpdates = {
                    };
                    styleUpdates[styleName] = '';
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) // This is a special case. If any listener updates we need to ensure
            // that the "current" fiber pointer gets updated so we need a commit
            // to update this element.
            {
                if (!updatePayload) updatePayload = [];
            } else // For all other deleted properties we add it to the queue. We use
            // the allowed property list in the commit phase instead.
            (updatePayload = updatePayload || []).push(propKey, null);
        }
        for(propKey in nextProps){
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : undefined;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) continue;
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                if (lastProp) {
                    // Unset styles on `lastProp` but not on `nextProp`.
                    for(styleName in lastProp)if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                        if (!styleUpdates) styleUpdates = {
                        };
                        styleUpdates[styleName] = '';
                    }
                     // Update styles that changed since `lastProp`.
                    for(styleName in nextProp)if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                        if (!styleUpdates) styleUpdates = {
                        };
                        styleUpdates[styleName] = nextProp[styleName];
                    }
                } else {
                    // Relies on `updateStylesByID` not mutating `styleUpdates`.
                    if (!styleUpdates) {
                        if (!updatePayload) updatePayload = [];
                        updatePayload.push(propKey, styleUpdates);
                    }
                    styleUpdates = nextProp;
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
                if (nextHtml != null) {
                    if (lastHtml !== nextHtml) (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string' || typeof nextProp === 'number') (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    // We eagerly listen to this even though we haven't committed yet.
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
                if (!updatePayload && lastProp !== nextProp) // This is a special case. If any listener updates we need to ensure
                // that the "current" props pointer gets updated so we need a commit
                // to update this element.
                updatePayload = [];
            } else if (typeof nextProp === 'object' && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) // If we encounter useOpaqueReference's opaque object, this means we are hydrating.
            // In this case, call the opaque object's toString function which generates a new client
            // ID so client and server IDs match and throws to rerender.
            nextProp.toString();
            else // For any other property we always add it to the queue and then we
            // filter it out using the allowed property list during the commit.
            (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
        if (styleUpdates) {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
    } // Apply the diff.
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        // Update checked *before* name.
        // In the middle of an update, it is possible to have multiple checked.
        // When a checked radio tries to change name, browser makes another radio's checked false.
        if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) updateChecked(domElement, nextRawProps);
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
        // changed.
        switch(tag){
            case 'input':
                // Update the wrapper around inputs *after* updating props. This has to
                // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                // raise warnings and prevent the new value from being assigned.
                updateWrapper(domElement, nextRawProps);
                break;
            case 'textarea':
                updateWrapper$1(domElement, nextRawProps);
                break;
            case 'select':
                // <select> value update needs to occur after <option> children
                // reconciliation
                postUpdateWrapper(domElement, nextRawProps);
                break;
        }
    }
    function getPossibleStandardName(propName) {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) return null;
        return possibleStandardNames[lowerCasedName] || null;
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
        var isCustomComponentTag;
        var extraAttributeNames;
        suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                break;
            case 'input':
                initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
        }
        assertValidProps(tag, rawProps);
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;
        for(var _i = 0; _i < attributes.length; _i++){
            var name = attributes[_i].name.toLowerCase();
            switch(name){
                // Built-in SSR attribute is allowed
                case 'data-reactroot':
                    break;
                // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                case 'value':
                    break;
                case 'checked':
                    break;
                case 'selected':
                    break;
                default:
                    // Intentionally use the original name.
                    // See discussion in https://github.com/facebook/react/pull/10676.
                    extraAttributeNames.add(attributes[_i].name);
            }
        }
        var updatePayload = null;
        for(var propKey in rawProps){
            if (!rawProps.hasOwnProperty(propKey)) continue;
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
                // For text content children we compare against textContent. This
                // might match additional HTML that is hidden when we read it using
                // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                // satisfies our requirement. Our requirement is not to produce perfect
                // HTML and attributes. Ideally we should preserve structure but it's
                // ok not to if the visible content is still enough to indicate what
                // even listeners these nodes might be wired up to.
                // TODO: Warn if there is more than a single textNode as a child.
                // TODO: Should we use domElement.firstChild.nodeValue to compare?
                if (typeof nextProp === 'string') {
                    if (domElement.textContent !== nextProp) {
                        if (!suppressHydrationWarning) warnForTextDifference(domElement.textContent, nextProp);
                        updatePayload = [
                            CHILDREN,
                            nextProp
                        ];
                    }
                } else if (typeof nextProp === 'number') {
                    if (domElement.textContent !== '' + nextProp) {
                        if (!suppressHydrationWarning) warnForTextDifference(domElement.textContent, nextProp);
                        updatePayload = [
                            CHILDREN,
                            '' + nextProp
                        ];
                    }
                }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (typeof isCustomComponentTag === 'boolean') {
                // Validate that the properties correspond to their expected values.
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // TODO: Only ignore them on controlled tags.
                propKey === 'value' || propKey === 'checked' || propKey === 'selected') ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML;
                    var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                    if (nextHtml != null) {
                        var expectedHTML = normalizeHTML(domElement, nextHtml);
                        if (expectedHTML !== serverHTML) warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                } else if (propKey === STYLE) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey);
                    if (canDiffStyleForHydrationWarning) {
                        var expectedStyle = createDangerousStringForStyles(nextProp);
                        serverValue = domElement.getAttribute('style');
                        if (expectedStyle !== serverValue) warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                } else if (isCustomComponentTag) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    if (nextProp !== serverValue) warnForPropDifference(propKey, serverValue, nextProp);
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = false;
                    if (propertyInfo !== null) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propertyInfo.attributeName);
                        serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    } else {
                        var ownNamespace = parentNamespace;
                        if (ownNamespace === HTML_NAMESPACE$1) ownNamespace = getIntrinsicNamespace(tag);
                        if (ownNamespace === HTML_NAMESPACE$1) // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey.toLowerCase());
                        else {
                            var standardName = getPossibleStandardName(propKey);
                            if (standardName !== null && standardName !== propKey) {
                                // If an SVG prop is supplied with bad casing, it will
                                // be successfully parsed from HTML, but will produce a mismatch
                                // (and would be incorrectly rendered on the client).
                                // However, we already warn about bad casing elsewhere.
                                // So we'll skip the misleading extra mismatch warning in this case.
                                isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.
                                extraAttributeNames.delete(standardName);
                            } // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames.delete(propKey);
                        }
                        serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    if (nextProp !== serverValue && !isMismatchDueToBadCasing) warnForPropDifference(propKey, serverValue, nextProp);
                }
            }
        }
        // $FlowFixMe - Should be inferred as not undefined.
        if (extraAttributeNames.size > 0 && !suppressHydrationWarning) // $FlowFixMe - Should be inferred as not undefined.
        warnForExtraAttributes(extraAttributeNames);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'select':
            case 'option':
                break;
            default:
                if (typeof rawProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        return updatePayload;
    }
    function diffHydratedText(textNode, text) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
    }
    function warnForUnmatchedText(textNode, text) {
        warnForTextDifference(textNode.nodeValue, text);
    }
    function warnForDeletedHydratableElement(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
    }
    function warnForDeletedHydratableText(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedText(parentNode, text) {
        if (text === '') // We expect to insert empty text nodes since they're not represented in
        // the HTML.
        // TODO: Remove this special case if we can just avoid inserting empty
        // text nodes.
        return;
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
    }
    function restoreControlledState$3(domElement, tag, props) {
        switch(tag){
            case 'input':
                restoreControlledState(domElement, props);
                return;
            case 'textarea':
                restoreControlledState$2(domElement, props);
                return;
            case 'select':
                restoreControlledState$1(domElement, props);
                return;
        }
    }
    var validateDOMNesting = function() {
    };
    var updatedAncestorInfo = function() {
    };
    // This validation code was written based on the HTML5 parsing spec:
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    //
    // Note: this does not catch all invalid nesting, nor does it try to (as it's
    // not clear what practical benefit doing so provides); instead, we warn only
    // for cases where the parser will give a parse tree differing from what React
    // intended. For example, <b><div></div></b> is invalid but we don't warn
    // because it still parses correctly; we do warn for other cases like nested
    // <p> tags where the beginning of the second element implicitly closes the
    // first, causing a confusing mess.
    // https://html.spec.whatwg.org/multipage/syntax.html#special
    var specialTags = [
        'address',
        'applet',
        'area',
        'article',
        'aside',
        'base',
        'basefont',
        'bgsound',
        'blockquote',
        'body',
        'br',
        'button',
        'caption',
        'center',
        'col',
        'colgroup',
        'dd',
        'details',
        'dir',
        'div',
        'dl',
        'dt',
        'embed',
        'fieldset',
        'figcaption',
        'figure',
        'footer',
        'form',
        'frame',
        'frameset',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'head',
        'header',
        'hgroup',
        'hr',
        'html',
        'iframe',
        'img',
        'input',
        'isindex',
        'li',
        'link',
        'listing',
        'main',
        'marquee',
        'menu',
        'menuitem',
        'meta',
        'nav',
        'noembed',
        'noframes',
        'noscript',
        'object',
        'ol',
        'p',
        'param',
        'plaintext',
        'pre',
        'script',
        'section',
        'select',
        'source',
        'style',
        'summary',
        'table',
        'tbody',
        'td',
        'template',
        'textarea',
        'tfoot',
        'th',
        'thead',
        'title',
        'tr',
        'track',
        'ul',
        'wbr',
        'xmp'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    var inScopeTags = [
        'applet',
        'caption',
        'html',
        'table',
        'td',
        'th',
        'marquee',
        'object',
        'template',
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        'foreignObject',
        'desc',
        'title'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
    var buttonScopeTags = inScopeTags.concat([
        'button'
    ]); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
    var impliedEndTags = [
        'dd',
        'dt',
        'li',
        'option',
        'optgroup',
        'p',
        'rp',
        'rt'
    ];
    var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
    };
    updatedAncestorInfo = function(oldInfo, tag) {
        var ancestorInfo = _assign({
        }, oldInfo || emptyAncestorInfo);
        var info = {
            tag: tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) ancestorInfo.pTagInButtonScope = null;
         // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === 'form') ancestorInfo.formTag = info;
        if (tag === 'a') ancestorInfo.aTagInScope = info;
        if (tag === 'button') ancestorInfo.buttonTagInScope = info;
        if (tag === 'nobr') ancestorInfo.nobrTagInScope = info;
        if (tag === 'p') ancestorInfo.pTagInButtonScope = info;
        if (tag === 'li') ancestorInfo.listItemTagAutoclosing = info;
        if (tag === 'dd' || tag === 'dt') ancestorInfo.dlItemTagAutoclosing = info;
        return ancestorInfo;
    };
    /**
   * Returns whether
   */ var isTagValidWithParent = function(tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch(parentTag){
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
            case 'select':
                return tag === 'option' || tag === 'optgroup' || tag === '#text';
            case 'optgroup':
                return tag === 'option' || tag === '#text';
            // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
            // but
            case 'option':
                return tag === '#text';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
            // No special behavior since these rules fall back to "in body" mode for
            // all except special table nodes which cause bad parsing behavior anyway.
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
            case 'tr':
                return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
            case 'tbody':
            case 'thead':
            case 'tfoot':
                return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
            case 'colgroup':
                return tag === 'col' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
            case 'table':
                return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
            case 'head':
                return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
            case 'html':
                return tag === 'head' || tag === 'body' || tag === 'frameset';
            case 'frameset':
                return tag === 'frame';
            case '#document':
                return tag === 'html';
        } // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        switch(tag){
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
            case 'rp':
            case 'rt':
                return impliedEndTags.indexOf(parentTag) === -1;
            case 'body':
            case 'caption':
            case 'col':
            case 'colgroup':
            case 'frameset':
            case 'frame':
            case 'head':
            case 'html':
            case 'tbody':
            case 'td':
            case 'tfoot':
            case 'th':
            case 'thead':
            case 'tr':
                // These tags are only valid with a few parents that have special child
                // parsing rules -- if we're down here, then none of those matched and
                // so we allow it only if we don't know what the parent is, as all other
                // cases are invalid.
                return parentTag == null;
        }
        return true;
    };
    /**
   * Returns whether
   */ var findInvalidAncestorForTag = function(tag, ancestorInfo) {
        switch(tag){
            case 'address':
            case 'article':
            case 'aside':
            case 'blockquote':
            case 'center':
            case 'details':
            case 'dialog':
            case 'dir':
            case 'div':
            case 'dl':
            case 'fieldset':
            case 'figcaption':
            case 'figure':
            case 'footer':
            case 'header':
            case 'hgroup':
            case 'main':
            case 'menu':
            case 'nav':
            case 'ol':
            case 'p':
            case 'section':
            case 'summary':
            case 'ul':
            case 'pre':
            case 'listing':
            case 'table':
            case 'hr':
            case 'xmp':
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return ancestorInfo.pTagInButtonScope;
            case 'form':
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case 'li':
                return ancestorInfo.listItemTagAutoclosing;
            case 'dd':
            case 'dt':
                return ancestorInfo.dlItemTagAutoclosing;
            case 'button':
                return ancestorInfo.buttonTagInScope;
            case 'a':
                // Spec says something about storing a list of markers, but it sounds
                // equivalent to this check.
                return ancestorInfo.aTagInScope;
            case 'nobr':
                return ancestorInfo.nobrTagInScope;
        }
        return null;
    };
    var didWarn$1 = {
    };
    validateDOMNesting = function(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
            if (childTag != null) error('validateDOMNesting: when childText is passed, childTag should be null');
            childTag = '#text';
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) return;
        var ancestorTag = invalidParentOrAncestor.tag;
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;
        if (didWarn$1[warnKey]) return;
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = '';
        if (childTag === '#text') {
            if (/\S/.test(childText)) tagDisplayName = 'Text nodes';
            else {
                tagDisplayName = 'Whitespace text nodes';
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
        } else tagDisplayName = '<' + childTag + '>';
        if (invalidParent) {
            var info = '';
            if (ancestorTag === 'table' && childTag === 'tr') info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
    };
    var SUPPRESS_HYDRATION_WARNING$1;
    SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    var SUSPENSE_START_DATA = '$';
    var SUSPENSE_END_DATA = '/$';
    var SUSPENSE_PENDING_START_DATA = '$?';
    var SUSPENSE_FALLBACK_START_DATA = '$!';
    var STYLE$1 = 'style';
    var eventsEnabled = null;
    var selectionInformation = null;
    function shouldAutoFocusHostComponent(type, props) {
        switch(type){
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
                return !!props.autoFocus;
        }
        return false;
    }
    function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch(nodeType){
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
                type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
                var root1 = rootContainerInstance.documentElement;
                namespace = root1 ? root1.namespaceURI : getChildNamespace(null, '');
                break;
            default:
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
        }
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getPublicInstance(instance) {
        return instance;
    }
    function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
    }
    function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === 'string' || typeof props.children === 'number') {
            var string = '' + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
    }
    function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        return shouldAutoFocusHostComponent(type, props);
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
            var string = '' + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
        return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
    }
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.
    var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    var noTimeout = -1; // -------------------
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
        // Despite the naming that might imply otherwise, this method only
        // fires if there is an `Update` effect scheduled during mounting.
        // This happens if `finalizeInitialChildren` returns `true` (which it
        // does to implement the `autoFocus` attribute on the client). But
        // there are also other cases when this might happen (such as patching
        // up text content during hydration mismatch). So we'll check this again.
        if (shouldAutoFocusHostComponent(type, newProps)) domElement.focus();
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        // Update the props handle so that we know which props are the ones with
        // with current event handlers.
        updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
    }
    function resetTextContent(domElement) {
        setTextContent(domElement, '');
    }
    function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
        } else {
            parentNode = container;
            parentNode.appendChild(child);
        } // This container might be used for a portal.
        // If something inside a portal is clicked, that click should bubble
        // through the React tree. However, on Mobile Safari the click would
        // never bubble through the *DOM* tree unless an ancestor with onclick
        // event exists. So we wouldn't see it and dispatch it.
        // This is why we ensure that non React root containers have inline onclick
        // defined.
        // https://github.com/facebook/react/issues/11918
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
    }
    function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.insertBefore(child, beforeChild);
        else container.insertBefore(child, beforeChild);
    }
    function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.removeChild(child);
        else container.removeChild(child);
    }
    function hideInstance(instance) {
        var style1 = instance.style;
        if (typeof style1.setProperty === 'function') style1.setProperty('display', 'none', 'important');
        else style1.display = 'none';
    }
    function hideTextInstance(textInstance) {
        textInstance.nodeValue = '';
    }
    function unhideInstance(instance, props) {
        var styleProp = props[STYLE$1];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
        instance.style.display = dangerousStyleValue('display', display);
    }
    function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
    }
    function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) container.textContent = '';
        else if (container.nodeType === DOCUMENT_NODE) {
            var body = container.body;
            if (body != null) body.textContent = '';
        }
    } // -------------------
    function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) return null;
         // This has now been refined to an element node.
        return instance;
    }
    function canHydrateTextInstance(instance, text) {
        if (text === '' || instance.nodeType !== TEXT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
         // This has now been refined to a text node.
        return instance;
    }
    function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function getNextHydratable(node) {
        // Skip non-hydratable nodes.
        for(; node != null; node = node.nextSibling){
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) break;
        }
        return node;
    }
    function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
        // get attached.
        updateFiberProps(instance, props);
        var parentNamespace;
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
        return diffHydratedProperties(instance, type, props, parentNamespace);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        return diffHydratedText(textInstance, text);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) return getNextHydratableSibling(node);
                    else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) depth++;
            }
            node = node.nextSibling;
        } // TODO: Warn, we didn't find the end comment boundary.
        return null;
    } // Returns the SuspenseInstance if this node is a direct child of a
    // SuspenseInstance. I.e. if its previous sibling is a Comment with
    // SUSPENSE_x_START_DATA. Otherwise, null.
    function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                    if (depth === 0) return node;
                    else depth--;
                } else if (data === SUSPENSE_END_DATA) depth++;
            }
            node = node.previousSibling;
        }
        return null;
    }
    function commitHydratedContainer(container) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance);
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
        warnForUnmatchedText(textInstance, text);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForUnmatchedText(textInstance, text);
    }
    function didNotHydrateContainerInstance(parentContainer, instance) {
        if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentContainer, instance);
        else if (instance.nodeType === COMMENT_NODE) ;
        else warnForDeletedHydratableText(parentContainer, instance);
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentInstance, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentInstance, instance);
        }
    }
    function didNotFindHydratableContainerInstance(parentContainer, type, props) {
        warnForInsertedHydratedElement(parentContainer, type);
    }
    function didNotFindHydratableContainerTextInstance(parentContainer, text) {
        warnForInsertedHydratedText(parentContainer, text);
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedElement(parentInstance, type);
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedText(parentInstance, text);
    }
    function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
        parentProps[SUPPRESS_HYDRATION_WARNING$1];
    }
    var clientId = 0;
    function makeClientIdInDEV(warnOnAccessInDEV) {
        var id = 'r:' + (clientId++).toString(36);
        return {
            toString: function() {
                warnOnAccessInDEV();
                return id;
            },
            valueOf: function() {
                warnOnAccessInDEV();
                return id;
            }
        };
    }
    function isOpaqueHydratingObject(value) {
        return value !== null && typeof value === 'object' && value.$$typeof === REACT_OPAQUE_ID_TYPE;
    }
    function makeOpaqueHydratingObject(attemptToReadValue) {
        return {
            $$typeof: REACT_OPAQUE_ID_TYPE,
            toString: attemptToReadValue,
            valueOf: attemptToReadValue
        };
    }
    function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactFiber$' + randomKey;
    var internalPropsKey = '__reactProps$' + randomKey;
    var internalContainerInstanceKey = '__reactContainer$' + randomKey;
    var internalEventHandlersKey = '__reactEvents$' + randomKey;
    function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
    } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
    // If the target node is part of a hydrated or not yet rendered subtree, then
    // this may also return a SuspenseComponent or HostRoot to indicate that.
    // Conceptually the HostRoot fiber is a child of the Container node. So if you
    // pass the Container node as the targetNode, you will not actually get the
    // HostRoot back. To get to the HostRoot, you need to pass a child of it.
    // The same thing applies to Suspense boundaries.
    function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) // Don't return HostRoot or SuspenseComponent here.
        return targetInst;
         // If the direct event target isn't a React owned DOM node, we need to look
        // to see if one of its parents is a React owned DOM node.
        var parentNode = targetNode.parentNode;
        while(parentNode){
            // We'll check if this is a container root that could include
            // React nodes in the future. We need to check this first because
            // if we're a child of a dehydrated container, we need to first
            // find that inner container before moving on to finding the parent
            // instance. Note that we don't check this field on  the targetNode
            // itself because the fibers are conceptually between the container
            // node and the first child. It isn't surrounding the container node.
            // If it's not a container, we check if it's an instance.
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
                // Since this wasn't the direct target of the event, we might have
                // stepped past dehydrated DOM nodes to get here. However they could
                // also have been non-React nodes. We need to answer which one.
                // If we the instance doesn't have any children, then there can't be
                // a nested suspense boundary within it. So we can use this as a fast
                // bailout. Most of the time, when people add non-React children to
                // the tree, it is using a ref to a child-less DOM node.
                // Normally we'd only need to check one of the fibers because if it
                // has ever gone from having children to deleting them or vice versa
                // it would have deleted the dehydrated boundary nested inside already.
                // However, since the HostRoot starts out with an alternate it might
                // have one on the alternate so we need to check in case this was a
                // root.
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                    // Next we need to figure out if the node that skipped past is
                    // nested within a dehydrated boundary and if so, which one.
                    var suspenseInstance = getParentSuspenseInstance(targetNode);
                    while(suspenseInstance !== null){
                        // We found a suspense instance. That means that we haven't
                        // hydrated it yet. Even though we leave the comments in the
                        // DOM after hydrating, and there are boundaries in the DOM
                        // that could already be hydrated, we wouldn't have found them
                        // through this pass since if the target is hydrated it would
                        // have had an internalInstanceKey on it.
                        // Let's get the fiber associated with the SuspenseComponent
                        // as the deepest instance.
                        var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                        if (targetSuspenseInst) return targetSuspenseInst;
                         // If we don't find a Fiber on the comment, it might be because
                        // we haven't gotten to hydrate it yet. There might still be a
                        // parent boundary that hasn't above this one so we need to find
                        // the outer most that is known.
                        suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
                    // host component also hasn't hydrated yet. We can return it
                    // below since it will bail out on the isMounted check later.
                    }
                }
                return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
        }
        return null;
    }
    /**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */ function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) return inst;
            else return null;
        }
        return null;
    }
    /**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */ function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
         // Without this first invariant, passing a non-DOM-component triggers the next
        throw Error("getNodeFromInstance: Invalid argument.");
    }
    function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
    }
    function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
    }
    function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === undefined) elementListenerSet = node[internalEventHandlersKey] = new Set();
        return elementListenerSet;
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has1 = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has1(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var valueStack = [];
    var fiberStack;
    fiberStack = [];
    var index = -1;
    function createCursor(defaultValue) {
        return {
            current: defaultValue
        };
    }
    function pop(cursor, fiber) {
        if (index < 0) {
            error('Unexpected pop.');
            return;
        }
        if (fiber !== fiberStack[index]) error('Unexpected Fiber popped.');
        cursor.current = valueStack[index];
        valueStack[index] = null;
        fiberStack[index] = null;
        index--;
    }
    function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        fiberStack[index] = fiber;
        cursor.current = value;
    }
    var warnedAboutMissingGetChildContext;
    warnedAboutMissingGetChildContext = {
    };
    var emptyContextObject = {
    };
    Object.freeze(emptyContextObject);
    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.
    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
        return contextStackCursor.current;
    }
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }
    function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) return emptyContextObject;
         // Avoid recreating masked context unless unmasked context has changed.
        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
        // This may trigger infinite loops if componentWillReceiveProps calls setState.
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
        var context = {
        };
        for(var key in contextTypes)context[key] = unmaskedContext[key];
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name);
        // Context is created before the class component is instantiated so check for instance.
        if (instance) cacheContext(workInProgress, unmaskedContext, context);
        return context;
    }
    function hasContextChanged() {
        return didPerformWorkStackCursor.current;
    }
    function isContextProvider(type) {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== undefined;
    }
    function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
        if (!(contextStackCursor.current === emptyContextObject)) throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
    }
    function processChildContext(fiber, type, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
        // It has only been added in Fiber to match the (unintentional) behavior in Stack.
        if (typeof instance.getChildContext !== 'function') {
            var componentName = getComponentName(type) || 'Unknown';
            if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
            }
            return parentContext;
        }
        var childContext = instance.getChildContext();
        for(var contextKey in childContext){
            if (!(contextKey in childContextTypes)) throw Error((getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
        }
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name);
        return _assign({
        }, parentContext, childContext);
    }
    function pushContextProvider(workInProgress) {
        var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
        // If the instance does not exist yet, we will push null at first,
        // and replace it on the stack later when invalidating the context.
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
    }
    function invalidateContextProvider(workInProgress, type, didChange) {
        var instance = workInProgress.stateNode;
        if (!instance) throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (didChange) {
            // Merge parent and own context.
            // Skip this if we're not updating due to sCU.
            // This avoids unnecessarily recomputing memoized values.
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
            // It is important to unwind the context in the reverse order.
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        }
    }
    function findCurrentUnmaskedContext(fiber) {
        // Currently this is only used with renderSubtreeIntoContainer; not sure if it
        // makes sense elsewhere
        if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var node = fiber;
        do {
            switch(node.tag){
                case HostRoot:
                    return node.stateNode.context;
                case ClassComponent:
                    var Component = node.type;
                    if (isContextProvider(Component)) return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    break;
            }
            node = node.return;
        }while (node !== null)
        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    var LegacyRoot = 0;
    var BlockingRoot = 1;
    var ConcurrentRoot = 2;
    var rendererID = null;
    var injectedHook = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
    function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') // No DevTools
        return false;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
        if (!hook.supportsFiber) {
            error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            return true;
        }
        try {
            rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.
            injectedHook = hook;
        } catch (err) {
            error('React instrumentation encountered an error: %s.', err);
        } // DevTools exists
        return true;
    }
    function onScheduleRoot(root1, children) {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') try {
            injectedHook.onScheduleFiberRoot(rendererID, root1, children);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitRoot(root1, priorityLevel) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') try {
            var didError = (root1.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) injectedHook.onCommitFiberRoot(rendererID, root1, priorityLevel, didError);
            else injectedHook.onCommitFiberRoot(rendererID, root1, undefined, didError);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
    // Provide explicit error message when production+profiling bundle of e.g.
    // react-dom is used with production (non-profiling) bundle of
    // scheduler/tracing
    if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
    var fakeCallbackNode = {
    }; // Except for NoPriority, these correspond to Scheduler priorities. We use
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority$1 = 99;
    var UserBlockingPriority$2 = 98;
    var NormalPriority$1 = 97;
    var LowPriority$1 = 96;
    var IdlePriority$1 = 95; // NoPriority is the absence of priority. Also React-only.
    var NoPriority$1 = 90;
    var shouldYield = Scheduler_shouldYield;
    var requestPaint = Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function() {
    };
    var syncQueue = null;
    var immediateQueueCallbackNode = null;
    var isFlushingSyncQueue = false;
    var initialTimeMs$1 = Scheduler_now$1(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    // This will be the case for modern browsers that support `performance.now`. In
    // older browsers, Scheduler falls back to `Date.now`, which returns a Unix
    // timestamp. In that case, subtract the module initialization time to simulate
    // the behavior of performance.now and keep our times small enough to fit
    // within 32 bits.
    // TODO: Consider lifting this into Scheduler.
    var now = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function() {
        return Scheduler_now$1() - initialTimeMs$1;
    };
    function getCurrentPriorityLevel() {
        switch(Scheduler_getCurrentPriorityLevel()){
            case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
            case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
            case Scheduler_NormalPriority:
                return NormalPriority$1;
            case Scheduler_LowPriority:
                return LowPriority$1;
            case Scheduler_IdlePriority:
                return IdlePriority$1;
            default:
                throw Error("Unknown priority level.");
        }
    }
    function reactPriorityToSchedulerPriority(reactPriorityLevel) {
        switch(reactPriorityLevel){
            case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
            case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
            case NormalPriority$1:
                return Scheduler_NormalPriority;
            case LowPriority$1:
                return Scheduler_LowPriority;
            case IdlePriority$1:
                return Scheduler_IdlePriority;
            default:
                throw Error("Unknown priority level.");
        }
    }
    function runWithPriority$1(reactPriorityLevel, fn) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_runWithPriority(priorityLevel, fn);
    }
    function scheduleCallback(reactPriorityLevel, callback, options1) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_scheduleCallback(priorityLevel, callback, options1);
    }
    function scheduleSyncCallback(callback) {
        // Push this callback into an internal queue. We'll flush these either in
        // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
        if (syncQueue === null) {
            syncQueue = [
                callback
            ]; // Flush the queue in the next tick, at the earliest.
            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
        } else // Push onto existing queue. Don't need to schedule a callback because
        // we already scheduled one when we created the queue.
        syncQueue.push(callback);
        return fakeCallbackNode;
    }
    function cancelCallback(callbackNode) {
        if (callbackNode !== fakeCallbackNode) Scheduler_cancelCallback(callbackNode);
    }
    function flushSyncCallbackQueue() {
        if (immediateQueueCallbackNode !== null) {
            var node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node);
        }
        flushSyncCallbackQueueImpl();
    }
    function flushSyncCallbackQueueImpl() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
            // Prevent re-entrancy.
            isFlushingSyncQueue = true;
            var i = 0;
            try {
                var _isSync2 = true;
                var _queue = syncQueue;
                runWithPriority$1(ImmediatePriority$1, function() {
                    for(; i < _queue.length; i++){
                        var callback = _queue[i];
                        do callback = callback(_isSync2);
                        while (callback !== null)
                    }
                });
                syncQueue = null;
            } catch (error4) {
                // If something throws, leave the remaining callbacks on the queue.
                if (syncQueue !== null) syncQueue = syncQueue.slice(i + 1);
                 // Resume flushing in the next tick
                Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                throw error4;
            } finally{
                isFlushingSyncQueue = false;
            }
        }
    }
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.1';
    var NoMode = 0;
    var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
    // tag instead
    var BlockingMode = 2;
    var ConcurrentMode = 4;
    var ProfileMode = 8;
    var DebugTracingMode = 16;
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
    var NoTransition = 0;
    function requestCurrentTransition() {
        return ReactCurrentBatchConfig.transition;
    }
    var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function(fiber, instance) {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
    };
    var findStrictRoot = function(fiber) {
        var maybeStrictRoot = null;
        var node = fiber;
        while(node !== null){
            if (node.mode & StrictMode) maybeStrictRoot = node;
            node = node.return;
        }
        return maybeStrictRoot;
    };
    var setToSortedString = function(set1) {
        var array = [];
        set1.forEach(function(value) {
            array.push(value);
        });
        return array.sort().join(', ');
    };
    var pendingComponentWillMountWarnings = [];
    var pendingUNSAFE_ComponentWillMountWarnings = [];
    var pendingComponentWillReceivePropsWarnings = [];
    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    var pendingComponentWillUpdateWarnings = [];
    var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.
    var didWarnAboutUnsafeLifecycles = new Set();
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        // Dedup strategy: Warn once per component.
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) return;
        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) pendingComponentWillMountWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) pendingComponentWillReceivePropsWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) pendingComponentWillUpdateWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        // We do an initial pass to gather component names
        var componentWillMountUniqueNames = new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
        } // Finally, we flush all the warnings
        // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
        }
    };
    var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.
    var didWarnAboutLegacyContext = new Set();
    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
        } // Dedup strategy: Warn once per component.
        if (didWarnAboutLegacyContext.has(fiber.type)) return;
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
            if (warningsForRoot === undefined) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
        }
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) return;
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally{
                resetCurrentFiber();
            }
        });
    };
    ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = new Map();
    };
    function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
            // Resolve default props. Taken from ReactElement
            var props = _assign({
            }, baseProps);
            var defaultProps = Component.defaultProps;
            for(var propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
            return props;
        }
        return baseProps;
    }
    // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var MAX_SIGNED_31_BIT_INT = 1073741823;
    var valueCursor = createCursor(null);
    var rendererSigil;
    // Use this to detect multiple renderers using the same context
    rendererSigil = {
    };
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastContextWithAllBitsObserved = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
        // This is called right before React yields execution, to ensure `readContext`
        // cannot be called outside the render phase.
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        isDisallowedContextReadInDEV = false;
    }
    function enterDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = true;
    }
    function exitDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = false;
    }
    function pushProvider(providerFiber, nextValue) {
        var context = providerFiber.type._context;
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
        context._currentRenderer = rendererSigil;
    }
    function popProvider(providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        var context = providerFiber.type._context;
        context._currentValue = currentValue;
    }
    function calculateChangedBits(context, newValue, oldValue) {
        if (objectIs(oldValue, newValue)) // No change
        return 0;
        else {
            var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
            return changedBits | 0;
        }
    }
    function scheduleWorkOnParentPath(parent, renderLanes) {
        // Update the child lanes of all the ancestors, including the alternates.
        var node = parent;
        while(node !== null){
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes);
                if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            else break;
            node = node.return;
        }
    }
    function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
        var fiber = workInProgress.child;
        if (fiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
        while(fiber !== null){
            var nextFiber = void 0; // Visit this fiber.
            var list = fiber.dependencies;
            if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while(dependency !== null){
                    // Check if the context matches.
                    if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                        // Match! Schedule an update on this fiber.
                        if (fiber.tag === ClassComponent) {
                            // Schedule a force update on the work-in-progress.
                            var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
                            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                            // update to the current fiber, too, which means it will persist even if
                            // this render is thrown away. Since it's a race condition, not sure it's
                            // worth fixing.
                            enqueueUpdate(fiber, update);
                        }
                        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                        var alternate = fiber.alternate;
                        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                        scheduleWorkOnParentPath(fiber.return, renderLanes); // Mark the updated lanes on the list, too.
                        list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
                        break;
                    }
                    dependency = dependency.next;
                }
            } else if (fiber.tag === ContextProvider) // Don't scan deeper if this is a matching provider
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            else // Traverse down.
            nextFiber = fiber.child;
            if (nextFiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
            nextFiber.return = fiber;
            else {
                // No child. Traverse to next sibling.
                nextFiber = fiber;
                while(nextFiber !== null){
                    if (nextFiber === workInProgress) {
                        // We're back to the root of this subtree. Exit.
                        nextFiber = null;
                        break;
                    }
                    var sibling = nextFiber.sibling;
                    if (sibling !== null) {
                        // Set the return pointer of the sibling to the work-in-progress fiber.
                        sibling.return = nextFiber.return;
                        nextFiber = sibling;
                        break;
                    } // No more siblings. Traverse up.
                    nextFiber = nextFiber.return;
                }
            }
            fiber = nextFiber;
        }
    }
    function prepareToReadContext(workInProgress, renderLanes) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        var dependencies = workInProgress.dependencies;
        if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes)) // Context list has a pending update. Mark that this fiber performed work.
                markWorkInProgressReceivedUpdate();
                 // Reset the work-in-progress list
                dependencies.firstContext = null;
            }
        }
    }
    function readContext(context, observedBits) {
        // This warning would fire if you read context inside a Hook like useMemo.
        // Unlike the class check below, it's not enforced in production for perf.
        if (isDisallowedContextReadInDEV) error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        if (lastContextWithAllBitsObserved === context) ;
        else if (observedBits === false || observedBits === 0) ;
        else {
            var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.
            if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
                // Observe all updates.
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
            } else resolvedObservedBits = observedBits;
            var contextItem = {
                context: context,
                observedBits: resolvedObservedBits,
                next: null
            };
            if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                 // This is the first dependency for this component. Create a new list.
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                    lanes: NoLanes,
                    firstContext: contextItem,
                    responders: null
                };
            } else // Append a new context item.
            lastContextDependency = lastContextDependency.next = contextItem;
        }
        return context._currentValue;
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    didWarnUpdateInsideUpdate = false;
    currentlyProcessingQueue = null;
    function initializeUpdateQueue(fiber) {
        var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
                pending: null
            },
            effects: null
        };
        fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current2, workInProgress) {
        // Clone the update queue from current. Unless it's already a clone.
        var queue = workInProgress.updateQueue;
        var currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
            var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
            };
            workInProgress.updateQueue = clone;
        }
    }
    function createUpdate(eventTime, lane) {
        var update = {
            eventTime: eventTime,
            lane: lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
        };
        return update;
    }
    function enqueueUpdate(fiber, update) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) // Only occurs if the fiber has been unmounted.
        return;
        var sharedQueue = updateQueue.shared;
        var pending = sharedQueue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        sharedQueue.pending = update;
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
        }
    }
    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
        // Captured updates are updates that are thrown by a child during the render
        // phase. They should be discarded if the render is aborted. Therefore,
        // we should only put them on the work-in-progress queue, not the current one.
        var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.
        var current2 = workInProgress.alternate;
        if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
                // The work-in-progress queue is the same as current. This happens when
                // we bail out on a parent fiber that then captures an error thrown by
                // a child. Since we want to append the update only to the work-in
                // -progress queue, we need to clone the updates. We usually clone during
                // processUpdateQueue, but that didn't happen in this case because we
                // skipped over the parent when we bailed out.
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                    // Loop through the updates and clone them.
                    var update = firstBaseUpdate;
                    do {
                        var clone = {
                            eventTime: update.eventTime,
                            lane: update.lane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        if (newLast === null) newFirst = newLast = clone;
                        else {
                            newLast.next = clone;
                            newLast = clone;
                        }
                        update = update.next;
                    }while (update !== null) // Append the captured update the end of the cloned list.
                    if (newLast === null) newFirst = newLast = capturedUpdate;
                    else {
                        newLast.next = capturedUpdate;
                        newLast = capturedUpdate;
                    }
                } else // There are no base updates.
                newFirst = newLast = capturedUpdate;
                queue = {
                    baseState: currentQueue.baseState,
                    firstBaseUpdate: newFirst,
                    lastBaseUpdate: newLast,
                    shared: currentQueue.shared,
                    effects: currentQueue.effects
                };
                workInProgress.updateQueue = queue;
                return;
            }
        } // Append the update to the end of the list.
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) queue.firstBaseUpdate = capturedUpdate;
        else lastBaseUpdate.next = capturedUpdate;
        queue.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch(update.tag){
            case ReplaceState:
                var payload = update.payload;
                if (typeof payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    var nextState = payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictMode) {
                        disableLogs();
                        try {
                            payload.call(instance, prevState, nextProps);
                        } finally{
                            reenableLogs();
                        }
                    }
                    exitDisallowedContextReadInDEV();
                    return nextState;
                } // State object
                return payload;
            case CaptureUpdate:
                workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
            // Intentional fallthrough
            case UpdateState:
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    partialState = _payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictMode) {
                        disableLogs();
                        try {
                            _payload.call(instance, prevState, nextProps);
                        } finally{
                            reenableLogs();
                        }
                    }
                    exitDisallowedContextReadInDEV();
                } else // Partial state object
                partialState = _payload;
                if (partialState === null || partialState === undefined) // Null and undefined are treated as no-ops.
                return prevState;
                 // Merge the partial state and the previous state.
                return _assign({
                }, prevState, partialState);
            case ForceUpdate:
                hasForceUpdate = true;
                return prevState;
        }
        return prevState;
    }
    function processUpdateQueue(workInProgress, props, instance, renderLanes) {
        // This is always non-null on a ClassComponent or HostRoot
        var queue = workInProgress.updateQueue;
        hasForceUpdate = false;
        currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
            queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
            // and last so that it's non-circular.
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null; // Append pending updates to base queue
            if (lastBaseUpdate === null) firstBaseUpdate = firstPendingUpdate;
            else lastBaseUpdate.next = firstPendingUpdate;
            lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
            // we need to transfer the updates to that queue, too. Because the base
            // queue is a singly-linked list with no cycles, we can append to both
            // lists and take advantage of structural sharing.
            // TODO: Pass `current` as argument
            var current2 = workInProgress.alternate;
            if (current2 !== null) {
                // This is always non-null on a ClassComponent or HostRoot
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                    if (currentLastBaseUpdate === null) currentQueue.firstBaseUpdate = firstPendingUpdate;
                    else currentLastBaseUpdate.next = firstPendingUpdate;
                    currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
            }
        } // These values may change as we process the queue.
        if (firstBaseUpdate !== null) {
            // Iterate through the list of updates to compute the result.
            var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
            // from the original lanes.
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        eventTime: updateEventTime,
                        lane: updateLane,
                        tag: update.tag,
                        payload: update.payload,
                        callback: update.callback,
                        next: null
                    };
                    if (newLastBaseUpdate === null) {
                        newFirstBaseUpdate = newLastBaseUpdate = clone;
                        newBaseState = newState;
                    } else newLastBaseUpdate = newLastBaseUpdate.next = clone;
                     // Update the remaining priority in the queue.
                    newLanes = mergeLanes(newLanes, updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newLastBaseUpdate !== null) {
                        var _clone = {
                            eventTime: updateEventTime,
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                    } // Process this update.
                    newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                    var callback = update.callback;
                    if (callback !== null) {
                        workInProgress.flags |= Callback;
                        var effects = queue.effects;
                        if (effects === null) queue.effects = [
                            update
                        ];
                        else effects.push(update);
                    }
                }
                update = update.next;
                if (update === null) {
                    pendingQueue = queue.shared.pending;
                    if (pendingQueue === null) break;
                    else {
                        // An update was scheduled from inside a reducer. Add the new
                        // pending updates to the end of the list and keep processing.
                        var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
                        // unravel them when transferring them to the base queue.
                        var _firstPendingUpdate = _lastPendingUpdate.next;
                        _lastPendingUpdate.next = null;
                        update = _firstPendingUpdate;
                        queue.lastBaseUpdate = _lastPendingUpdate;
                        queue.shared.pending = null;
                    }
                }
            }while (true)
            if (newLastBaseUpdate === null) newBaseState = newState;
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
            // This should be fine because the only two other things that contribute to
            // expiration time are props and context. We're already in the middle of the
            // begin phase by the time we start processing the queue, so we've already
            // dealt with the props. Context in components that specify
            // shouldComponentUpdate is tricky; but we'll have to account for
            // that regardless.
            markSkippedUpdateLanes(newLanes);
            workInProgress.lanes = newLanes;
            workInProgress.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
    }
    function callCallback(callback, context) {
        if (!(typeof callback === 'function')) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        // Commit the effects
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) for(var i = 0; i < effects.length; i++){
            var effect = effects[i];
            var callback = effect.callback;
            if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
            }
        }
    }
    var fakeInternalInstance = {
    };
    var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.
    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    didWarnAboutStateAssignmentForComponent = new Set();
    didWarnAboutUninitializedState = new Set();
    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    didWarnAboutDirectlyAssigningPropsToState = new Set();
    didWarnAboutUndefinedDerivedState = new Set();
    didWarnAboutContextTypeAndContextTypes = new Set();
    didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();
    warnOnInvalidCallback = function(callback, callerName) {
        if (callback === null || typeof callback === 'function') return;
        var key = callerName + '_' + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
    };
    warnOnUndefinedDerivedState = function(type, partialState) {
        if (partialState === undefined) {
            var componentName = getComponentName(type) || 'Component';
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
        }
    }; // This is so gross but it's at least non-critical and can be removed if
    // it causes problems. This is meant to give a nicer error message for
    // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
    // ...)) which otherwise throws a "_processChildContext is not a function"
    // exception.
    Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function() {
            throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
    });
    Object.freeze(fakeInternalInstance);
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                // Invoke the function an extra time to help detect side-effects.
                getDerivedStateFromProps(nextProps, prevState);
            } finally{
                reenableLogs();
            }
        }
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        warnOnUndefinedDerivedState(ctor, partialState);
        var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({
        }, prevState, partialState);
        workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
        // base state.
        if (workInProgress.lanes === NoLanes) {
            // Queue is always non-null for classes
            var updateQueue = workInProgress.updateQueue;
            updateQueue.baseState = memoizedState;
        }
    }
    var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'setState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'replaceState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'forceUpdate');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
    };
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;
        if (typeof instance.shouldComponentUpdate === 'function') {
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    // Invoke the function an extra time to help detect side-effects.
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally{
                    reenableLogs();
                }
            }
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            if (shouldUpdate === undefined) error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || 'Component');
            return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        return true;
    }
    function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        var name = getComponentName(ctor) || 'Component';
        var renderPresent = instance.render;
        if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === 'function') error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            else error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
        }
        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        if (instance.propTypes) error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        if (instance.contextType) error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        if (instance.contextTypes) error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
        }
        if (typeof instance.componentShouldUpdate === 'function') error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || 'A pure component');
        if (typeof instance.componentDidUnmount === 'function') error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        if (typeof instance.componentDidReceiveProps === 'function') error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        if (typeof instance.componentWillRecieveProps === 'function') error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        var hasMutatedProps = instance.props !== newProps;
        if (instance.props !== undefined && hasMutatedProps) error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        if (instance.defaultProps) error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
        }
        if (typeof instance.getDerivedStateFromProps === 'function') error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof instance.getDerivedStateFromError === 'function') error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof ctor.getSnapshotBeforeUpdate === 'function') error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        var _state = instance.state;
        if (_state && (typeof _state !== 'object' || isArray(_state))) error('%s.state: must be set to an object or null', name);
        if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates
        set(instance, workInProgress);
        instance._reactInternalInstance = fakeInternalInstance;
    }
    function constructClassInstance(workInProgress, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        if ('contextType' in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = '';
                if (contextType === undefined) addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                else if (typeof contextType !== 'object') addendum = ' However, it is set to a ' + typeof contextType + '.';
                else if (contextType.$$typeof === REACT_PROVIDER_TYPE) addendum = ' Did you accidentally pass the Context.Provider instead?';
                else if (contextType._context !== undefined) // <Context.Consumer>
                addendum = ' Did you accidentally pass the Context.Consumer instead?';
                else addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || 'Component', addendum);
            }
        }
        if (typeof contextType === 'object' && contextType !== null) context = readContext(contextType);
        else {
            unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        } // Instantiate twice to help detect side-effects.
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                new ctor(props, context); // eslint-disable-line no-new
            } finally{
                reenableLogs();
            }
        }
        var instance = new ctor(props, context);
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? 'null' : 'undefined', componentName);
            }
        } // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.
        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) foundWillMountName = 'componentWillMount';
            else if (typeof instance.UNSAFE_componentWillMount === 'function') foundWillMountName = 'UNSAFE_componentWillMount';
            if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) foundWillReceivePropsName = 'componentWillReceiveProps';
            else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
            if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) foundWillUpdateName = 'componentWillUpdate';
            else if (typeof instance.UNSAFE_componentWillUpdate === 'function') foundWillUpdateName = 'UNSAFE_componentWillUpdate';
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || 'Component';
                var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
                }
            }
        }
        // ReactFiberContext usually updates this cache but can't for newly-created instances.
        if (isLegacyContextConsumer) cacheContext(workInProgress, unmaskedContext, context);
        return instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
        if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
        if (oldState !== instance.state) {
            error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress.type) || 'Component');
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === 'function') instance.componentWillReceiveProps(newProps, nextContext);
        if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        if (instance.state !== oldState) {
            var componentName = getComponentName(workInProgress.type) || 'Component';
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    } // Invokes the mount life-cycles on a previously never rendered instance.
    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        checkClassInstance(workInProgress, ctor, newProps);
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress);
        var contextType = ctor.contextType;
        if (typeof contextType === 'object' && contextType !== null) instance.context = readContext(contextType);
        else {
            var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }
        if (instance.state === newProps) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
        }
        if (workInProgress.mode & StrictMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        instance.state = workInProgress.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress.memoizedState;
        } // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
            callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
            // process them now.
            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            instance.state = workInProgress.memoizedState;
        }
        if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
    }
    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (oldProps !== newProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
                if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
            }
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
             // If shouldComponentUpdate returned false, we should still update the
            // memoized state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    } // Invokes the update life-cycles and returns false if it shouldn't rerender.
    function updateClassInstance(current3, workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        cloneUpdateQueue(current3, workInProgress);
        var unresolvedOldProps = workInProgress.memoizedProps;
        var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Snapshot;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
                if (typeof instance.componentWillUpdate === 'function') instance.componentWillUpdate(newProps, newState, nextContext);
                if (typeof instance.UNSAFE_componentWillUpdate === 'function') instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.componentDidUpdate === 'function') workInProgress.flags |= Update;
            if (typeof instance.getSnapshotBeforeUpdate === 'function') workInProgress.flags |= Snapshot;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Snapshot;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized props/state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    }
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function(child, returnFiber) {
    };
    didWarnAboutMaps = false;
    didWarnAboutGenerators = false;
    didWarnAboutStringRefs = {
    };
    /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */ ownerHasKeyUseWarning = {
    };
    ownerHasFunctionTypeWarning = {
    };
    warnForMissingKey = function(child, returnFiber) {
        if (child === null || typeof child !== 'object') return;
        if (!child._store || child._store.validated || child.key != null) return;
        if (!(typeof child._store === 'object')) throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        child._store.validated = true;
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (ownerHasKeyUseWarning[componentName]) return;
        ownerHasKeyUseWarning[componentName] = true;
        error("Each child in a list should have a unique \"key\" prop. See https://reactjs.org/link/warning-keys for more information.");
    };
    var isArray$1 = Array.isArray;
    function coerceRef(returnFiber, current3, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
            // TODO: Clean this up once we turn on the string ref warning for
            // everyone, because the strict mode case will no longer be relevant
            if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // because these cannot be automatically converted to an arrow function
            // using a codemod. Therefore, we don't have to warn about string refs again.
            !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentName(returnFiber.type) || 'Component';
                if (!didWarnAboutStringRefs[componentName]) {
                    error("A string ref, \"%s\", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", mixedRef);
                    didWarnAboutStringRefs[componentName] = true;
                }
            }
            if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                    var ownerFiber = owner;
                    if (!(ownerFiber.tag === ClassComponent)) throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    inst = ownerFiber.stateNode;
                }
                if (!inst) throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref
                if (current3 !== null && current3.ref !== null && typeof current3.ref === 'function' && current3.ref._stringRef === stringRef) return current3.ref;
                var ref = function(value) {
                    var refs = inst.refs;
                    if (refs === emptyRefsObject) // This is a lazy pooled frozen object, so we need to initialize.
                    refs = inst.refs = {
                    };
                    if (value === null) delete refs[stringRef];
                    else refs[stringRef] = value;
                };
                ref._stringRef = stringRef;
                return ref;
            } else {
                if (!(typeof mixedRef === 'string')) throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                if (!element._owner) throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
            }
        }
        return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== 'textarea') throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + "). If you meant to render a collection of children, use an array instead.");
    }
    function warnOnFunctionType(returnFiber) {
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (ownerHasFunctionTypeWarning[componentName]) return;
        ownerHasFunctionTypeWarning[componentName] = true;
        error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
    } // We avoid inlining this to avoid potential deopts from using try/catch.
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.
    function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) // Noop.
            return;
             // Deletions are added in reversed order so we add it to the front.
            // At this point, the return fiber's effect list is empty except for
            // deletions, so we can just append the deletion to the list. The remaining
            // effects aren't added until the complete phase. Once we implement
            // resuming, this may not be true.
            var last = returnFiber.lastEffect;
            if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
            } else returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            childToDelete.nextEffect = null;
            childToDelete.flags = Deletion;
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) // Noop.
            return null;
             // TODO: For the shouldClone case, this could be micro-optimized a bit by
            // assuming that after the first child we've already added everything.
            var childToDelete = currentFirstChild;
            while(childToDelete !== null){
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
            }
            return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
            // Add the remaining children to a temporary map so that we can find them by
            // keys quickly. Implicit (null) keys get added to this set with their index
            // instead.
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while(existingChild !== null){
                if (existingChild.key !== null) existingChildren.set(existingChild.key, existingChild);
                else existingChildren.set(existingChild.index, existingChild);
                existingChild = existingChild.sibling;
            }
            return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
            // We currently set sibling to null and index to 0 here because it is easy
            // to forget to do before returning it. E.g. for the single child case.
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) // Noop.
            return lastPlacedIndex;
            var current3 = newFiber.alternate;
            if (current3 !== null) {
                var oldIndex = current3.index;
                if (oldIndex < lastPlacedIndex) {
                    // This is a move.
                    newFiber.flags = Placement;
                    return lastPlacedIndex;
                } else // This item can stay in place.
                return oldIndex;
            } else {
                // This is an insertion.
                newFiber.flags = Placement;
                return lastPlacedIndex;
            }
        }
        function placeSingleChild(newFiber) {
            // This is simpler for the single child case. We only need to do a
            // placement for inserting new children.
            if (shouldTrackSideEffects && newFiber.alternate === null) newFiber.flags = Placement;
            return newFiber;
        }
        function updateTextNode(returnFiber, current3, textContent, lanes) {
            if (current3 === null || current3.tag !== HostText) {
                // Insert
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, textContent);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateElement(returnFiber, current3, element, lanes) {
            if (current3 !== null) {
                if (current3.elementType === element.type || isCompatibleFamilyForHotReloading(current3, element)) {
                    // Move based on index
                    var existing = useFiber(current3, element.props);
                    existing.ref = coerceRef(returnFiber, current3, element);
                    existing.return = returnFiber;
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                    return existing;
                }
            } // Insert
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current3, element);
            created.return = returnFiber;
            return created;
        }
        function updatePortal(returnFiber, current3, portal, lanes) {
            if (current3 === null || current3.tag !== HostPortal || current3.stateNode.containerInfo !== portal.containerInfo || current3.stateNode.implementation !== portal.implementation) {
                // Insert
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, portal.children || []);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateFragment(returnFiber, current3, fragment, lanes, key) {
            if (current3 === null || current3.tag !== Fragment) {
                // Insert
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, fragment);
                existing.return = returnFiber;
                return existing;
            }
        }
        function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                        _created.ref = coerceRef(returnFiber, null, newChild);
                        _created.return = returnFiber;
                        return _created;
                    case REACT_PORTAL_TYPE:
                        var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                        _created2.return = returnFiber;
                        return _created2;
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                    _created3.return = returnFiber;
                    return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            // Update the fiber if the keys match, otherwise return null.
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                if (key !== null) return null;
                return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        if (newChild.key === key) {
                            if (newChild.type === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
                            return updateElement(returnFiber, oldFiber, newChild, lanes);
                        } else return null;
                    case REACT_PORTAL_TYPE:
                        if (newChild.key === key) return updatePortal(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    if (key !== null) return null;
                    return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys, so we neither have to check the old nor
                // new node for the key. If both are text nodes, they match.
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        if (newChild.type === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                        return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                    case REACT_PORTAL_TYPE:
                        var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    var _matchedFiber3 = existingChildren.get(newIdx) || null;
                    return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        /**
   * Warns if there is a duplicate or missing key
   */ function warnOnInvalidKey(child, knownKeys, returnFiber) {
            if (typeof child !== 'object' || child === null) return knownKeys;
            switch(child.$$typeof){
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== 'string') break;
                    if (knownKeys === null) {
                        knownKeys = new Set();
                        knownKeys.add(key);
                        break;
                    }
                    if (!knownKeys.has(key)) {
                        knownKeys.add(key);
                        break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key);
                    break;
            }
            return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            // First, validate keys.
            var knownKeys = null;
            for(var i = 0; i < newChildren.length; i++){
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for(; oldFiber !== null && newIdx < newChildren.length; newIdx++){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; newIdx < newChildren.length; newIdx++){
                    var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                    if (_newFiber === null) continue;
                    lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber;
                    else previousNewFiber.sibling = _newFiber;
                    previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; newIdx < newChildren.length; newIdx++){
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber2.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber2;
                    else previousNewFiber.sibling = _newFiber2;
                    previousNewFiber = _newFiber2;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            // This is the same implementation as reconcileChildrenArray(),
            // but using the iterator instead.
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (!(typeof iteratorFn === 'function')) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            // We don't support rendering Generators because it's a mutation.
            // See https://github.com/facebook/react/issues/12995
            if (typeof Symbol === 'function' && newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                if (!didWarnAboutGenerators) error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                didWarnAboutGenerators = true;
            } // Warn about using Maps as children
            if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                didWarnAboutMaps = true;
            } // First, validate keys.
            // We'll get a different iterator later for the main pass.
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for(; !_step.done; _step = _newChildren.next()){
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (!(newChildren != null)) throw Error("An iterable object provided no iterator.");
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for(; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (step.done) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; !step.done; newIdx++, step = newChildren.next()){
                    var _newFiber3 = createChild(returnFiber, step.value, lanes);
                    if (_newFiber3 === null) continue;
                    lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber3;
                    else previousNewFiber.sibling = _newFiber3;
                    previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; !step.done; newIdx++, step = newChildren.next()){
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber4.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber4;
                    else previousNewFiber.sibling = _newFiber4;
                    previousNewFiber = _newFiber4;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            // There's no need to check for keys on text nodes since we don't have a
            // way to define them.
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                // We already have an existing node so let's just update it and delete
                // the rest.
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
            } // The existing first child is not a text node so we need to create one
            // and delete the existing ones.
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    switch(child.tag){
                        case Fragment:
                            if (element.type === REACT_FRAGMENT_TYPE) {
                                deleteRemainingChildren(returnFiber, child.sibling);
                                var existing = useFiber(child, element.props.children);
                                existing.return = returnFiber;
                                existing._debugSource = element._source;
                                existing._debugOwner = element._owner;
                                return existing;
                            }
                            break;
                        case Block:
                        // We intentionally fallthrough here if enableBlocksAPI is not on.
                        // eslint-disable-next-lined no-fallthrough
                        default:
                            if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                                deleteRemainingChildren(returnFiber, child.sibling);
                                var _existing3 = useFiber(child, element.props);
                                _existing3.ref = coerceRef(returnFiber, child, element);
                                _existing3.return = returnFiber;
                                _existing3._debugSource = element._source;
                                _existing3._debugOwner = element._owner;
                                return _existing3;
                            }
                            break;
                    } // Didn't match.
                    deleteRemainingChildren(returnFiber, child);
                    break;
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
            } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
            }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, portal.children || []);
                        existing.return = returnFiber;
                        return existing;
                    } else {
                        deleteRemainingChildren(returnFiber, child);
                        break;
                    }
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        } // This API will tag the children with the side-effect of the reconciliation
        // itself. They will be added to the side-effect list as we pass through the
        // children and the parent.
        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
            // This function is not recursive.
            // If the top level item is an array, we treat it as a set of children,
            // not as a fragment. Nested arrays on the other hand will be treated as
            // fragment nodes. Recursion happens at the normal flow.
            // Handle top level unkeyed fragments as if they were arrays.
            // This leads to an ambiguity between <>{[...]}</> and <>...</>.
            // We treat the ambiguous cases above the same.
            var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) newChild = newChild.props.children;
             // Handle object types
            var isObject = typeof newChild === 'object' && newChild !== null;
            if (isObject) switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
            }
            if (typeof newChild === 'string' || typeof newChild === 'number') return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
            if (isArray$1(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            if (isObject) throwOnInvalidObjectType(returnFiber, newChild);
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) // If the new child is undefined, and the return fiber is a composite
            // component, throw an error. If Fiber return types are disabled,
            // we already threw above.
            switch(returnFiber.tag){
                case ClassComponent:
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) break;
                // Intentionally fall through to the next case, which handles both
                // functions and classes
                // eslint-disable-next-lined no-fallthrough
                case Block:
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                    throw Error((getComponentName(returnFiber.type) || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
            }
             // Remaining cases are all treated as empty.
            return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers;
    }
    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current3, workInProgress) {
        if (!(current3 === null || workInProgress.child === current3.child)) throw Error("Resuming work not yet implemented.");
        if (workInProgress.child === null) return;
        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress.child = newChild;
        newChild.return = workInProgress;
        while(currentChild.sibling !== null){
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress;
        }
        newChild.sibling = null;
    } // Reset a workInProgress child set to prepare it for a second pass.
    function resetChildFibers(workInProgress, lanes) {
        var child = workInProgress.child;
        while(child !== null){
            resetWorkInProgress(child, lanes);
            child = child.sibling;
        }
    }
    var NO_CONTEXT = {
    };
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
        if (!(c !== NO_CONTEXT)) throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        return c;
    }
    function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
        // Push current root instance onto the stack;
        // This allows us to reset root when portals are popped.
        push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
        // However, we can't just call getRootHostContext() and push it because
        // we'd have a different number of entries on the stack depending on
        // whether getRootHostContext() throws somewhere in renderer code or not.
        // So we push an empty value first. This lets us safely unwind on errors.
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.
        if (context === nextContext) return;
         // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
        // Do not pop unless this Fiber provided the current context.
        // pushHostContext() only pushes Fibers that provide unique contexts.
        if (contextFiberStackCursor.current !== fiber) return;
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
    // inherited deeply down the subtree. The upper bits only affect
    // this immediate suspense boundary and gets reset each new
    // boundary or suspense list.
    var SubtreeSuspenseContextMask = 1; // Subtree Flags:
    // InvisibleParentSuspenseContext indicates that one of our parent Suspense
    // boundaries is not currently showing visible main content.
    // Either because it is already showing a fallback or is not mounted at all.
    // We can use this to determine if it is desirable to trigger a fallback at
    // the parent. If not, then we might need to trigger undesirable boundaries
    // and/or suspend the commit to avoid hiding the parent content.
    var InvisibleParentSuspenseContext = 1; // Shallow Flags:
    // ForceSuspenseFallback can be used by SuspenseList to force newly added
    // items into their fallback state during one of the render passes.
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        // If it was the primary children that just suspended, capture and render the
        // fallback. Otherwise, don't capture and bubble to the next boundary.
        var nextState = workInProgress.memoizedState;
        if (nextState !== null) {
            if (nextState.dehydrated !== null) // A dehydrated boundary always captures.
            return true;
            return false;
        }
        var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.
        if (props.fallback === undefined) return false;
         // Regular boundaries always capture.
        if (props.unstable_avoidThisFallback !== true) return true;
         // If it's a boundary we should avoid, then we prefer to bubble up to the
        // parent boundary if it is currently invisible.
        if (hasInvisibleParent) return false;
         // If the parent is not able to handle it, we must handle it.
        return true;
    }
    function findFirstSuspended(row) {
        var node = row;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                    var dehydrated = state.dehydrated;
                    if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) return node;
                }
            } else if (node.tag === SuspenseListComponent && // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== undefined) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) return node;
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === row) return null;
            while(node.sibling === null){
                if (node.return === null || node.return === row) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return null;
    }
    var NoFlags$1 = /*  */ 0; // Represents whether effect should fire.
    var HasEffect = /* */ 1; // Represents the phase in which the effect (not the clean-up) fires.
    var Layout = /*    */ 2;
    var Passive$1 = /*   */ 4;
    // This may have been an insertion or a hydration.
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;
    function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChild(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        return true;
    }
    function deleteHydratableInstance(returnFiber, instance) {
        switch(returnFiber.tag){
            case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
            case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
        }
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        childToDelete.flags = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
        // these children are not part of the reconciliation list of children.
        // Even if we abort and rereconcile the children, that will try to hydrate
        // again and the nodes are still in the host tree so these will be
        // recreated.
        if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
        } else returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        switch(returnFiber.tag){
            case HostRoot:
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch(fiber.tag){
                    case HostComponent:
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        didNotFindHydratableContainerInstance(parentContainer, type);
                        break;
                    case HostText:
                        var text = fiber.pendingProps;
                        didNotFindHydratableContainerTextInstance(parentContainer, text);
                        break;
                }
                break;
            case HostComponent:
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch(fiber.tag){
                    case HostComponent:
                        var _type = fiber.type;
                        var _props = fiber.pendingProps;
                        didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                        break;
                    case HostText:
                        var _text = fiber.pendingProps;
                        didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                        break;
                    case SuspenseComponent:
                        didNotFindHydratableSuspenseInstance(parentType, parentProps);
                        break;
                }
                break;
            default:
                return;
        }
    }
    function tryHydrate(fiber, nextInstance) {
        switch(fiber.tag){
            case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                    fiber.stateNode = instance;
                    return true;
                }
                return false;
            case HostText:
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                    fiber.stateNode = textInstance;
                    return true;
                }
                return false;
            case SuspenseComponent:
                return false;
            default:
                return false;
        }
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) return;
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
            // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
            // If we can't hydrate this instance let's try the next one.
            // We use this as a heuristic. It's based on intuition and not data so it
            // might be flawed or unnecessary.
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
            } // We matched the next one, we'll now assume that the first one was
            // superfluous and we'll delete it. Since we can't eagerly delete it
            // we'll have to schedule a deletion. To do that, this node needs a dummy
            // fiber associated with it.
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
        }
        hydrationParentFiber = fiber;
        nextHydratableInstance = getFirstHydratableChild(nextInstance);
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.
        fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update.
        if (updatePayload !== null) return true;
        return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
            // We assume that prepareToHydrateHostTextInstance is called in a context where the
            // hydration parent is the parent host component of this host text.
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) switch(returnFiber.tag){
                case HostRoot:
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                case HostComponent:
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
            }
        }
        return shouldUpdate;
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while(parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent)parent = parent.return;
        hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
        if (!isHydrating) {
            // If we're not currently hydrating but we're in a hydration context, then
            // we were an insertion and now need to pop up reenter hydration of our
            // siblings.
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
        }
        var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
        // We only do this deeper than head and body since they tend to have random
        // other nodes in them. We also ignore components with pure text content in
        // side of them.
        // TODO: Better heuristic.
        if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while(nextInstance){
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
            }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        else nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return true;
    }
    function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
    }
    function getIsHydrating() {
        return isHydrating;
    }
    // and should be reset before starting a new render.
    // This tracks which mutable sources need to be reset after a render.
    var workInProgressSources = [];
    var rendererSigil$1;
    // Used to detect multiple renderers using the same mutable source.
    rendererSigil$1 = {
    };
    function markSourceAsDirty(mutableSource) {
        workInProgressSources.push(mutableSource);
    }
    function resetWorkInProgressVersions() {
        for(var i = 0; i < workInProgressSources.length; i++){
            var mutableSource = workInProgressSources[i];
            mutableSource._workInProgressVersionPrimary = null;
        }
        workInProgressSources.length = 0;
    }
    function getWorkInProgressVersion(mutableSource) {
        return mutableSource._workInProgressVersionPrimary;
    }
    function setWorkInProgressVersion(mutableSource, version) {
        mutableSource._workInProgressVersionPrimary = version;
        workInProgressSources.push(mutableSource);
    }
    function warnAboutMultipleRenderersDEV(mutableSource) {
        if (mutableSource._currentPrimaryRenderer == null) mutableSource._currentPrimaryRenderer = rendererSigil$1;
        else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
    } // Eager reads the version of a mutable source and stores it on the root.
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    var didWarnAboutUseOpaqueIdentifier;
    didWarnAboutUseOpaqueIdentifier = {
    };
    didWarnAboutMismatchedHooksForComponent = new Set();
    // These are set right before calling the component.
    var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.
    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.
    var currentHook = null;
    var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
    // does not get reset if we do another render pass; only when we're completely
    // finished evaluating this component. This is an optimization so we know
    // whether we need to clear render phase updates after a throw.
    var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
    // gets reset after each attempt.
    // TODO: Maybe there's some way to consolidate this with
    // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.
    var didScheduleRenderPhaseUpdateDuringThisPass = false;
    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook
    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
    // When true, such Hooks will always be "remounted". Only used during hot reload.
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) hookTypesDev = [
            hookName
        ];
        else hookTypesDev.push(hookName);
    }
    function updateHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) warnOnHookMismatchInDev(hookName);
        }
    }
    function checkDepsAreArrayDev(deps) {
        if (deps !== undefined && deps !== null && !Array.isArray(deps)) // Verify deps, but only on mount to avoid extra checks.
        // It's unlikely their type would change as usually you define them inline.
        error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
    }
    function warnOnHookMismatchInDev(currentHookName) {
        var componentName = getComponentName(currentlyRenderingFiber$1.type);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
                var table = '';
                var secondColumnStart = 30;
                for(var i = 0; i <= hookTypesUpdateIndexDev; i++){
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
                    // lol @ IE not supporting String#repeat
                    while(row.length < secondColumnStart)row += ' ';
                    row += newHookName + '\n';
                    table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
        }
    }
    function throwInvalidHookError() {
        throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies) // Only true when this component is being hot reloaded.
        return false;
        if (prevDeps === null) {
            error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            return false;
        }
        // Don't bother comparing lengths in prod because these arrays should be
        // passed inline.
        if (nextDeps.length !== prevDeps.length) error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
        for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){
            if (objectIs(nextDeps[i], prevDeps[i])) continue;
            return false;
        }
        return true;
    }
    function renderWithHooks(current3, workInProgress, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress;
        hookTypesDev = current3 !== null ? current3._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1; // Used for hot reloading:
        ignorePreviousDependencies = current3 !== null && current3.type !== workInProgress.type;
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.lanes = NoLanes; // The following should have already been reset
        if (current3 !== null && current3.memoizedState !== null) ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        else if (hookTypesDev !== null) // This dispatcher handles an edge case where a component is updating,
        // but no stateful hooks have been used.
        // We want to match the production code behavior (which will use HooksDispatcherOnMount),
        // but with the extra DEV validation to ensure hooks ordering hasn't changed.
        // This dispatcher does that.
        ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        else ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        var children = Component(props, secondArg); // Check if there was a render phase update
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
            // Keep rendering in a loop for as long as render phase updates continue to
            // be scheduled. Use a counter to prevent infinite loops.
            var numberOfReRenders = 0;
            do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                numberOfReRenders += 1;
                // Even when hot reloading, allow dependencies to stabilize
                // after first render to prevent infinite render phase updates.
                ignorePreviousDependencies = false;
                currentHook = null;
                workInProgressHook = null;
                workInProgress.updateQueue = null;
                // Also validate hook order for cascading updates.
                hookTypesUpdateIndexDev = -1;
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
            }while (didScheduleRenderPhaseUpdateDuringThisPass)
        } // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        workInProgress._debugHookTypes = hookTypesDev;
        // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        didScheduleRenderPhaseUpdate = false;
        if (!!didRenderTooFewHooks) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        return children;
    }
    function bailoutHooks(current3, workInProgress, lanes) {
        workInProgress.updateQueue = current3.updateQueue;
        workInProgress.flags &= ~(Passive | Update);
        current3.lanes = removeLanes(current3.lanes, lanes);
    }
    function resetHooksAfterThrow() {
        // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
            // There were render phase updates. These are only valid for this render
            // phase, which we are now aborting. Remove the updates from the queues so
            // they do not persist to the next render. Do not remove updates from hooks
            // that weren't processed.
            //
            // Only reset the updates from the queue if it has a clone. If it does
            // not have a clone, that means it wasn't processed, and the updates were
            // scheduled before we entered the render phase.
            var hook = currentlyRenderingFiber$1.memoizedState;
            while(hook !== null){
                var queue = hook.queue;
                if (queue !== null) queue.pending = null;
                hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        isUpdatingOpaqueValueInRenderPhase = false;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
    }
    function mountWorkInProgressHook() {
        var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
        };
        if (workInProgressHook === null) // This is the first hook in the list
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        else // Append to the end of the list
        workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
    }
    function updateWorkInProgressHook() {
        // This function is used both for updates and for re-renders triggered by a
        // render phase update. It assumes there is either a current hook we can
        // clone, or a work-in-progress hook from a previous render pass that we can
        // use as a base. When we reach the end of the base list, we must switch to
        // the dispatcher used for mounts.
        var nextCurrentHook;
        if (currentHook === null) {
            var current3 = currentlyRenderingFiber$1.alternate;
            if (current3 !== null) nextCurrentHook = current3.memoizedState;
            else nextCurrentHook = null;
        } else nextCurrentHook = currentHook.next;
        var nextWorkInProgressHook;
        if (workInProgressHook === null) nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        else nextWorkInProgressHook = workInProgressHook.next;
        if (nextWorkInProgressHook !== null) {
            // There's already a work-in-progress. Reuse it.
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
        } else {
            // Clone from the current hook.
            if (!(nextCurrentHook !== null)) throw Error("Rendered more hooks than during the previous render.");
            currentHook = nextCurrentHook;
            var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
            };
            if (workInProgressHook === null) // This is the first hook in the list.
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            else // Append to the end of the list.
            workInProgressHook = workInProgressHook.next = newHook;
        }
        return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
        return {
            lastEffect: null
        };
    }
    function basicStateReducer(state, action) {
        // $FlowFixMe: Flow doesn't like mixed types
        return typeof action === 'function' ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) initialState = init(initialArg);
        else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer;
        var current4 = currentHook; // The last rebase update that is NOT part of the base state.
        var baseQueue = current4.baseQueue; // The last pending update that hasn't been processed yet.
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
            // We have new updates that haven't been processed yet.
            // We'll add them to the base queue.
            if (baseQueue !== null) {
                // Merge the pending queue and the base queue.
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
            }
            if (current4.baseQueue !== baseQueue) // Internal invariant that should never happen, but feasibly could in
            // the future if we implement resuming, or some form of that.
            error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            current4.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
        }
        if (baseQueue !== null) {
            // We have a queue to process.
            var first = baseQueue.next;
            var newState = current4.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        lane: updateLane,
                        action: update.action,
                        eagerReducer: update.eagerReducer,
                        eagerState: update.eagerState,
                        next: null
                    };
                    if (newBaseQueueLast === null) {
                        newBaseQueueFirst = newBaseQueueLast = clone;
                        newBaseState = newState;
                    } else newBaseQueueLast = newBaseQueueLast.next = clone;
                     // Update the remaining priority in the queue.
                    // TODO: Don't need to accumulate this. Instead, we can remove
                    // renderLanes from the original lanes.
                    currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                    markSkippedUpdateLanes(updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newBaseQueueLast !== null) {
                        var _clone = {
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            action: update.action,
                            eagerReducer: update.eagerReducer,
                            eagerState: update.eagerState,
                            next: null
                        };
                        newBaseQueueLast = newBaseQueueLast.next = _clone;
                    } // Process this update.
                    if (update.eagerReducer === reducer) // If this update was processed eagerly, and its reducer matches the
                    // current reducer, we can use the eagerly computed state.
                    newState = update.eagerState;
                    else {
                        var action = update.action;
                        newState = reducer(newState, action);
                    }
                }
                update = update.next;
            }while (update !== null && update !== first)
            if (newBaseQueueLast === null) newBaseState = newState;
            else newBaseQueueLast.next = newBaseQueueFirst;
             // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
        }
        var dispatch = queue.dispatch;
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
        // work-in-progress hook.
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
            // The queue doesn't persist past this render pass.
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
                // Process this render phase update. We don't have to check the
                // priority because it will always be the same as the current
                // render's.
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
            }while (update !== firstRenderPhaseUpdate) // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
            // the base state unless the queue is empty.
            // TODO: Not sure if this is the desired semantics, but it's what we
            // do for gDSFP. I can't remember why.
            if (hook.baseQueue === null) hook.baseState = newState;
            queue.lastRenderedState = newState;
        }
        return [
            newState,
            dispatch
        ];
    }
    function readFromUnsubcribedMutableSource(root1, source, getSnapshot) {
        warnAboutMultipleRenderersDEV(source);
        var getVersion = source._getVersion;
        var version = getVersion(source._source); // Is it safe for this component to read from this source during the current render?
        var isSafeToReadFromSource = false; // Check the version first.
        // If this render has already been started with a specific version,
        // we can use it alone to determine if we can safely read from the source.
        var currentRenderVersion = getWorkInProgressVersion(source);
        if (currentRenderVersion !== null) // It's safe to read if the store hasn't been mutated since the last time
        // we read something.
        isSafeToReadFromSource = currentRenderVersion === version;
        else {
            // If there's no version, then this is the first time we've read from the
            // source during the current render pass, so we need to do a bit more work.
            // What we need to determine is if there are any hooks that already
            // subscribed to the source, and if so, whether there are any pending
            // mutations that haven't been synchronized yet.
            //
            // If there are no pending mutations, then `root.mutableReadLanes` will be
            // empty, and we know we can safely read.
            //
            // If there *are* pending mutations, we may still be able to safely read
            // if the currently rendering lanes are inclusive of the pending mutation
            // lanes, since that guarantees that the value we're about to read from
            // the source is consistent with the values that we read during the most
            // recent mutation.
            isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root1.mutableReadLanes);
            if (isSafeToReadFromSource) // If it's safe to read from this source during the current render,
            // store the version in case other components read from it.
            // A changed version number will let those components know to throw and restart the render.
            setWorkInProgressVersion(source, version);
        }
        if (isSafeToReadFromSource) {
            var snapshot = getSnapshot(source._source);
            if (typeof snapshot === 'function') error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
            return snapshot;
        } else {
            // This handles the special case of a mutable source being shared between renderers.
            // In that case, if the source is mutated between the first and second renderer,
            // The second renderer don't know that it needs to reset the WIP version during unwind,
            // (because the hook only marks sources as dirty if it's written to their WIP version).
            // That would cause this tear check to throw again and eventually be visible to the user.
            // We can avoid this infinite loop by explicitly marking the source as dirty.
            //
            // This can lead to tearing in the first renderer when it resumes,
            // but there's nothing we can do about that (short of throwing here and refusing to continue the render).
            markSourceAsDirty(source);
            throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
        }
    }
    function useMutableSource(hook, source, getSnapshot, subscribe) {
        var root1 = getWorkInProgressRoot();
        if (!(root1 !== null)) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        var getVersion = source._getVersion;
        var version = getVersion(source._source);
        var dispatcher = ReactCurrentDispatcher$1.current; // eslint-disable-next-line prefer-const
        var _dispatcher$useState = dispatcher.useState(function() {
            return readFromUnsubcribedMutableSource(root1, source, getSnapshot);
        }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
        var snapshot = currentSnapshot; // Grab a handle to the state hook as well.
        // We use it to clear the pending update queue if we have a new source.
        var stateHook = workInProgressHook;
        var memoizedState = hook.memoizedState;
        var refs = memoizedState.refs;
        var prevGetSnapshot = refs.getSnapshot;
        var prevSource = memoizedState.source;
        var prevSubscribe = memoizedState.subscribe;
        var fiber = currentlyRenderingFiber$1;
        hook.memoizedState = {
            refs: refs,
            source: source,
            subscribe: subscribe
        }; // Sync the values needed by our subscription handler after each commit.
        dispatcher.useEffect(function() {
            refs.getSnapshot = getSnapshot; // Normally the dispatch function for a state hook never changes,
            // but this hook recreates the queue in certain cases  to avoid updates from stale sources.
            // handleChange() below needs to reference the dispatch function without re-subscribing,
            // so we use a ref to ensure that it always has the latest version.
            refs.setSnapshot = setSnapshot; // Check for a possible change between when we last rendered now.
            var maybeNewVersion = getVersion(source._source);
            if (!objectIs(version, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                if (typeof maybeNewSnapshot === 'function') error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                if (!objectIs(snapshot, maybeNewSnapshot)) {
                    setSnapshot(maybeNewSnapshot);
                    var lane = requestUpdateLane(fiber);
                    markRootMutableRead(root1, lane);
                } // If the source mutated between render and now,
                // there may be state updates already scheduled from the old source.
                // Entangle the updates so that they render in the same batch.
                markRootEntangled(root1, root1.mutableReadLanes);
            }
        }, [
            getSnapshot,
            source,
            subscribe
        ]); // If we got a new source or subscribe function, re-subscribe in a passive effect.
        dispatcher.useEffect(function() {
            var handleChange = function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                    latestSetSnapshot(latestGetSnapshot(source._source)); // Record a pending mutable source update with the same expiration time.
                    var lane = requestUpdateLane(fiber);
                    markRootMutableRead(root1, lane);
                } catch (error4) {
                    // A selector might throw after a source mutation.
                    // e.g. it might try to read from a part of the store that no longer exists.
                    // In this case we should still schedule an update with React.
                    // Worst case the selector will throw again and then an error boundary will handle it.
                    latestSetSnapshot(function() {
                        throw error4;
                    });
                }
            };
            var unsubscribe = subscribe(source._source, handleChange);
            if (typeof unsubscribe !== 'function') error('Mutable source subscribe function must return an unsubscribe function.');
            return unsubscribe;
        }, [
            source,
            subscribe
        ]); // If any of the inputs to useMutableSource change, reading is potentially unsafe.
        //
        // If either the source or the subscription have changed we can't can't trust the update queue.
        // Maybe the source changed in a way that the old subscription ignored but the new one depends on.
        //
        // If the getSnapshot function changed, we also shouldn't rely on the update queue.
        // It's possible that the underlying source was mutated between the when the last "change" event fired,
        // and when the current render (with the new getSnapshot function) is processed.
        //
        // In both cases, we need to throw away pending updates (since they are no longer relevant)
        // and treat reading from the source as we do in the mount case.
        if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
            // Create a new queue and setState method,
            // So if there are interleaved updates, they get pushed to the older queue.
            // When this becomes current, the previous queue and dispatch method will be discarded,
            // including any interleaving updates that occur.
            var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
            };
            newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
            stateHook.queue = newQueue;
            stateHook.baseQueue = null;
            snapshot = readFromUnsubcribedMutableSource(root1, source, getSnapshot);
            stateHook.memoizedState = stateHook.baseState = snapshot;
        }
        return snapshot;
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = {
            refs: {
                getSnapshot: getSnapshot,
                setSnapshot: null
            },
            source: source,
            subscribe: subscribe
        };
        return useMutableSource(hook, source, getSnapshot, subscribe);
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
        var hook = updateWorkInProgressHook();
        return useMutableSource(hook, source, getSnapshot, subscribe);
    }
    function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === 'function') // $FlowFixMe: Flow doesn't like mixed types
        initialState = initialState();
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateState(initialState) {
        return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create, destroy, deps) {
        var effect = {
            tag: tag,
            create: create,
            destroy: destroy,
            deps: deps,
            // Circular
            next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) componentUpdateQueue.lastEffect = effect.next = effect;
            else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
            }
        }
        return effect;
    }
    function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var ref = {
            current: initialValue
        };
        Object.seal(ref);
        hook.memoizedState = ref;
        return ref;
    }
    function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                    pushEffect(hookFlags, create, destroy, nextDeps);
                    return;
                }
            }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        return mountEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function updateEffect(create, deps) {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        return updateEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function mountLayoutEffect(create, deps) {
        return mountEffectImpl(Update, Layout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
        if (typeof ref === 'function') {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
                refCallback(null);
            };
        } else if (ref !== null && ref !== undefined) {
            var refObject = ref;
            if (!refObject.hasOwnProperty('current')) error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
                refObject.current = null;
            };
        }
    }
    function mountImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {
    // The react-debug-hooks package injects its own implementation
    // so that e.g. DevTools can display custom hook values.
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) // Assume these are defined. If they're not, areHookInputsEqual will warn.
        {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function mountDeferredValue(value) {
        var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
        mountEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function updateDeferredValue(value) {
        var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
        updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function rerenderDeferredValue(value) {
        var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
        updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function startTransition(setPending, callback) {
        var priorityLevel = getCurrentPriorityLevel();
        runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
            setPending(true);
        });
        runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setPending(false);
                callback();
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        });
    }
    function mountTransition() {
        var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1]; // The `start` method can be stored on a ref, since `setPending`
        // never changes.
        var start = startTransition.bind(null, setPending);
        mountRef(start);
        return [
            start,
            isPending
        ];
    }
    function updateTransition() {
        var _updateState2 = updateState(), isPending = _updateState2[0];
        var startRef = updateRef();
        var start = startRef.current;
        return [
            start,
            isPending
        ];
    }
    function rerenderTransition() {
        var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
        var startRef = updateRef();
        var start = startRef.current;
        return [
            start,
            isPending
        ];
    }
    var isUpdatingOpaqueValueInRenderPhase = false;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        return isUpdatingOpaqueValueInRenderPhase;
    }
    function warnOnOpaqueIdentifierAccessInDEV(fiber) {
        // TODO: Should warn in effects and callbacks, too
        var name = getComponentName(fiber.type) || 'Unknown';
        if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
            error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            didWarnAboutUseOpaqueIdentifier[name] = true;
        }
    }
    function mountOpaqueIdentifier() {
        var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
        if (getIsHydrating()) {
            var didUpgrade = false;
            var fiber = currentlyRenderingFiber$1;
            var readValue = function() {
                if (!didUpgrade) {
                    // Only upgrade once. This works even inside the render phase because
                    // the update is added to a shared queue, which outlasts the
                    // in-progress render.
                    didUpgrade = true;
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                }
                throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            };
            var id = makeOpaqueHydratingObject(readValue);
            var setId = mountState(id)[1];
            if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                    setId(makeId());
                }, undefined, null);
            }
            return id;
        } else {
            var _id = makeId();
            mountState(_id);
            return _id;
        }
    }
    function updateOpaqueIdentifier() {
        var id = updateState()[0];
        return id;
    }
    function rerenderOpaqueIdentifier() {
        var id = rerenderState()[0];
        return id;
    }
    function dispatchAction(fiber, queue, action) {
        if (typeof arguments[3] === 'function') error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            eagerReducer: null,
            eagerState: null,
            next: null
        }; // Append the update to the end of the list.
        var pending = queue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        queue.pending = update;
        var alternate = fiber.alternate;
        if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) // This is a render phase update. Stash it in a lazily-created map of
        // queue -> linked list of updates. After this render pass, we'll restart
        // and apply the stashed updates on top of the work-in-progress hook.
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        else {
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                // The queue is currently empty, which means we can eagerly compute the
                // next state before entering the render phase. If the new state is the
                // same as the current state, we may be able to bail out entirely.
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                    var prevDispatcher;
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        var currentState = queue.lastRenderedState;
                        var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
                        // it, on the update object. If the reducer hasn't changed by the
                        // time we enter the render phase, then the eager state can be used
                        // without calling the reducer again.
                        update.eagerReducer = lastRenderedReducer;
                        update.eagerState = eagerState;
                        if (objectIs(eagerState, currentState)) // Fast path. We can bail out without scheduling React to re-render.
                        // It's still possible that we'll need to rebase this update later,
                        // if the component re-renders for a different reason and by that
                        // time the reducer has changed.
                        return;
                    } catch (error4) {
                    } finally{
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                }
            }
            // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
            if ('undefined' !== typeof jest) {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
            }
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
    }
    var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useOpaqueIdentifier: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    var warnInvalidContextAccess = function() {
        error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
    };
    var warnInvalidHookAccess = function() {
        error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
    };
    HooksDispatcherOnMountInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            mountHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            mountHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnUpdateInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return updateOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnRerenderInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    var now$1 = Scheduler.unstable_now;
    var commitTime = 0;
    var profilerStartTime = -1;
    function getCommitTime() {
        return commitTime;
    }
    function recordCommitTime() {
        commitTime = now$1();
    }
    function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) fiber.actualStartTime = now$1();
    }
    function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) fiber.selfBaseDuration = elapsedTime;
            profilerStartTime = -1;
        }
    }
    function transferActualDuration(fiber) {
        // Transfer time spent rendering these children so we don't lose it
        // after we rerender. This is used as a helper in special cases
        // where we should count the work of multiple passes.
        var child = fiber.child;
        while(child){
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
        }
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    didWarnAboutBadClass = {
    };
    didWarnAboutModulePatternComponent = {
    };
    didWarnAboutContextTypeOnFunctionComponent = {
    };
    didWarnAboutGetDerivedStateOnFunctionComponent = {
    };
    didWarnAboutFunctionRefs = {
    };
    didWarnAboutReassigningProps = false;
    didWarnAboutRevealOrder = {
    };
    didWarnAboutTailOptions = {
    };
    function reconcileChildren(current4, workInProgress, nextChildren, renderLanes1) {
        if (current4 === null) // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes1);
        else // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers(workInProgress, current4.child, nextChildren, renderLanes1);
    }
    function forceUnmountCurrentAndReconcile(current4, workInProgress, nextChildren, renderLanes1) {
        // This function is fork of reconcileChildren. It's used in cases where we
        // want to reconcile without matching against the existing set. This has the
        // effect of all current children being unmounted; even if the type and key
        // are the same, the old child is unmounted and a new child is created.
        //
        // To do this, we're going to go through the reconcile algorithm twice. In
        // the first pass, we schedule a deletion for all the current children by
        // passing null.
        workInProgress.child = reconcileChildFibers(workInProgress, current4.child, null, renderLanes1); // In the second pass, we mount the new children. The trick here is that we
        // pass null in place of where we usually pass the current child set. This has
        // the effect of remounting all children regardless of whether their
        // identities match.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes1);
    }
    function updateForwardRef(current4, workInProgress, Component, nextProps, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        var render = Component.render;
        var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent
        var nextChildren;
        prepareToReadContext(workInProgress, renderLanes1);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current4, workInProgress, render, nextProps, ref, renderLanes1);
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                nextChildren = renderWithHooks(current4, workInProgress, render, nextProps, ref, renderLanes1);
            } finally{
                reenableLogs();
            }
        }
        setIsRendering(false);
        if (current4 !== null && !didReceiveUpdate) {
            bailoutHooks(current4, workInProgress, renderLanes1);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateMemoComponent(current4, workInProgress, Component, nextProps, updateLanes, renderLanes1) {
        if (current4 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
                var resolvedType = type;
                resolvedType = resolveFunctionForHotReloading(type);
                // and with only the default shallow comparison, we upgrade it
                // to a SimpleMemoComponent to allow fast path updates.
                workInProgress.tag = SimpleMemoComponent;
                workInProgress.type = resolvedType;
                validateFunctionComponentInDev(workInProgress, type);
                return updateSimpleMemoComponent(current4, workInProgress, resolvedType, nextProps, updateLanes, renderLanes1);
            }
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(type));
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes1);
            child.ref = workInProgress.ref;
            child.return = workInProgress;
            workInProgress.child = child;
            return child;
        }
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(_innerPropTypes, nextProps, 'prop', getComponentName(_type));
        var currentChild = current4.child; // This is always exactly one child
        if (!includesSomeLane(updateLanes, renderLanes1)) {
            // This will be the props with resolved defaultProps,
            // unlike current.memoizedProps which will be the unresolved ones.
            var prevProps = currentChild.memoizedProps; // Default to shallow comparison
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current4.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
    }
    function updateSimpleMemoComponent(current4, workInProgress, Component, nextProps, updateLanes, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var outerMemoType = workInProgress.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                // We warn when you define propTypes on lazy()
                // so let's just skip over it to find memo() outer wrapper.
                // Inner props for memo are validated later.
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    outerMemoType = init(payload);
                } catch (x) {
                    outerMemoType = null;
                } // Inner propTypes will be validated in the function component path.
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) checkPropTypes(outerPropTypes, nextProps, 'prop', getComponentName(outerMemoType));
            }
        }
        if (current4 !== null) {
            var prevProps = current4.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current4.ref === workInProgress.ref && workInProgress.type === current4.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes1, updateLanes)) {
                    // The pending lanes were cleared at the beginning of beginWork. We're
                    // about to bail out, but there might be other lanes that weren't
                    // included in the current render. Usually, the priority level of the
                    // remaining updates is accumlated during the evaluation of the
                    // component (i.e. when processing the update queue). But since since
                    // we're bailing out early *without* evaluating the component, we need
                    // to account for it here, too. Reset to the value of the current fiber.
                    // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
                    // because a MemoComponent fiber does not have hooks or an update queue;
                    // rather, it wraps around an inner component, which may or may not
                    // contains hooks.
                    // TODO: Move the reset at in beginWork out of the common path so that
                    // this is no longer necessary.
                    workInProgress.lanes = current4.lanes;
                    return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
                } else if ((current4.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
            }
        }
        return updateFunctionComponent(current4, workInProgress, Component, nextProps, renderLanes1);
    }
    function updateOffscreenComponent(current4, workInProgress, renderLanes1) {
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current4 !== null ? current4.memoizedState : null;
        if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {
            if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                // In legacy sync mode, don't defer the subtree. Render it now.
                // TODO: Figure out what we should do in Blocking mode.
                var nextState = {
                    baseLanes: NoLanes
                };
                workInProgress.memoizedState = nextState;
                pushRenderLanes(workInProgress, renderLanes1);
            } else if (!includesSomeLane(renderLanes1, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                    var prevBaseLanes = prevState.baseLanes;
                    nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes1);
                } else nextBaseLanes = renderLanes1;
                 // Schedule this fiber to re-render at offscreen priority. Then bailout.
                markSpawnedWork(OffscreenLane);
                workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                    baseLanes: nextBaseLanes
                };
                workInProgress.memoizedState = _nextState; // We're about to bail out, but we need to push this to the stack anyway
                // to avoid a push/pop misalignment.
                pushRenderLanes(workInProgress, nextBaseLanes);
                return null;
            } else {
                // Rendering at offscreen, so we can clear the base lanes.
                var _nextState2 = {
                    baseLanes: NoLanes
                };
                workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.
                var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes1;
                pushRenderLanes(workInProgress, subtreeRenderLanes);
            }
        } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes1); // Since we're not hidden anymore, reset the state
                workInProgress.memoizedState = null;
            } else // We weren't previously hidden, and we still aren't, so there's nothing
            // special to do. Need to push to the stack regardless, though, to avoid
            // a push/pop misalignment.
            _subtreeRenderLanes = renderLanes1;
            pushRenderLanes(workInProgress, _subtreeRenderLanes);
        }
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    } // Note: These happen to have identical begin phases, for now. We shouldn't hold
    // ourselves to this constraint, though. If the behavior diverges, we should
    // fork the function.
    var updateLegacyHiddenComponent = updateOffscreenComponent;
    function updateFragment(current4, workInProgress, renderLanes1) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateMode(current4, workInProgress, renderLanes1) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateProfiler(current4, workInProgress, renderLanes1) {
        workInProgress.flags |= Update; // Reset effect durations for the next eventual effect phase.
        // These are reset during render to allow the DevTools commit hook a chance to read them,
        var stateNode = workInProgress.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function markRef(current4, workInProgress) {
        var ref = workInProgress.ref;
        if (current4 === null && ref !== null || current4 !== null && current4.ref !== ref) // Schedule a Ref effect
        workInProgress.flags |= Ref;
    }
    function updateFunctionComponent(current4, workInProgress, Component, nextProps, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
        context = getMaskedContext(workInProgress, unmaskedContext);
        var nextChildren;
        prepareToReadContext(workInProgress, renderLanes1);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current4, workInProgress, Component, nextProps, context, renderLanes1);
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                nextChildren = renderWithHooks(current4, workInProgress, Component, nextProps, context, renderLanes1);
            } finally{
                reenableLogs();
            }
        }
        setIsRendering(false);
        if (current4 !== null && !didReceiveUpdate) {
            bailoutHooks(current4, workInProgress, renderLanes1);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateClassComponent(current4, workInProgress, Component, nextProps, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes1);
        var instance = workInProgress.stateNode;
        var shouldUpdate;
        if (instance === null) {
            if (current4 !== null) {
                // A class component without an instance only mounts if it suspended
                // inside a non-concurrent tree, in an inconsistent state. We want to
                // treat it like a new mount, even though an empty version of it already
                // committed. Disconnect the alternate pointers.
                current4.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
                workInProgress.flags |= Placement;
            } // In the initial pass we might need to construct the instance.
            constructClassInstance(workInProgress, Component, nextProps);
            mountClassInstance(workInProgress, Component, nextProps, renderLanes1);
            shouldUpdate = true;
        } else if (current4 === null) // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes1);
        else shouldUpdate = updateClassInstance(current4, workInProgress, Component, nextProps, renderLanes1);
        var nextUnitOfWork = finishClassComponent(current4, workInProgress, Component, shouldUpdate, hasContext, renderLanes1);
        var inst = workInProgress.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress.type) || 'a component');
            didWarnAboutReassigningProps = true;
        }
        return nextUnitOfWork;
    }
    function finishClassComponent(current4, workInProgress, Component, shouldUpdate, hasContext, renderLanes1) {
        // Refs should update even if shouldComponentUpdate returns false
        markRef(current4, workInProgress);
        var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
            // Context providers should defer to sCU for rendering
            if (hasContext) invalidateContextProvider(workInProgress, Component, false);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        }
        var instance = workInProgress.stateNode; // Rerender
        ReactCurrentOwner$1.current = workInProgress;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
            // If we captured an error, but getDerivedStateFromError is not defined,
            // unmount all the children. componentDidCatch will schedule an update to
            // re-render a fallback. This is temporary until we migrate everyone to
            // the new API.
            // TODO: Warn in a future release.
            nextChildren = null;
            stopProfilerTimerIfRunning();
        } else {
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    instance.render();
                } finally{
                    reenableLogs();
                }
            }
            setIsRendering(false);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        if (current4 !== null && didCaptureError) // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current4, workInProgress, nextChildren, renderLanes1);
        else reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
         // Memoize state using the values we just used to render.
        // TODO: Restructure so we never read values from the instance.
        workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.
        if (hasContext) invalidateContextProvider(workInProgress, Component, true);
        return workInProgress.child;
    }
    function pushHostRootContext(workInProgress) {
        var root1 = workInProgress.stateNode;
        if (root1.pendingContext) pushTopLevelContextObject(workInProgress, root1.pendingContext, root1.pendingContext !== root1.context);
        else if (root1.context) // Should always be set
        pushTopLevelContextObject(workInProgress, root1.context, false);
        pushHostContainer(workInProgress, root1.containerInfo);
    }
    function updateHostRoot(current4, workInProgress, renderLanes1) {
        pushHostRootContext(workInProgress);
        var updateQueue = workInProgress.updateQueue;
        if (!(current4 !== null && updateQueue !== null)) throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState !== null ? prevState.element : null;
        cloneUpdateQueue(current4, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderLanes1);
        var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
        // being called "element".
        var nextChildren = nextState.element;
        if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        }
        var root1 = workInProgress.stateNode;
        if (root1.hydrate && enterHydrationState(workInProgress)) {
            var mutableSourceEagerHydrationData = root1.mutableSourceEagerHydrationData;
            if (mutableSourceEagerHydrationData != null) for(var i = 0; i < mutableSourceEagerHydrationData.length; i += 2){
                var mutableSource = mutableSourceEagerHydrationData[i];
                var version = mutableSourceEagerHydrationData[i + 1];
                setWorkInProgressVersion(mutableSource, version);
            }
            var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes1);
            workInProgress.child = child;
            var node = child;
            while(node){
                // Mark each child as hydrating. This is a fast path to know whether this
                // tree is part of a hydrating tree. This is used to determine if a child
                // node has fully mounted yet, and for scheduling event replaying.
                // Conceptually this is similar to Placement in that a new subtree is
                // inserted into the React tree here. It just happens to not need DOM
                // mutations because it already exists.
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
            }
        } else {
            // Otherwise reset hydration state in case we aborted and resumed another
            // root.
            reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
            resetHydrationState();
        }
        return workInProgress.child;
    }
    function updateHostComponent(current4, workInProgress, renderLanes1) {
        pushHostContext(workInProgress);
        if (current4 === null) tryToClaimNextHydratableInstance(workInProgress);
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current4 !== null ? current4.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also has access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
        else if (prevProps !== null && shouldSetTextContent(type, prevProps)) // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.flags |= ContentReset;
        markRef(current4, workInProgress);
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateHostText(current4, workInProgress) {
        if (current4 === null) tryToClaimNextHydratableInstance(workInProgress);
         // Nothing to do here. This is terminal. We'll do the completion step
        // immediately after.
        return null;
    }
    function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes1) {
        if (_current !== null) {
            // A lazy component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        }
        var props = workInProgress.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component = init(payload); // Store the unwrapped component in the type.
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch(resolvedTag){
            case FunctionComponent:
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes1);
                return child;
            case ClassComponent:
                workInProgress.type = Component = resolveClassForHotReloading(Component);
                child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes1);
                return child;
            case ForwardRef:
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes1);
                return child;
            case MemoComponent:
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, resolvedProps, 'prop', getComponentName(Component));
                }
                child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes1);
                return child;
        }
        var hint = '';
        if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) hint = ' Did you wrap a component in React.lazy() more than once?';
        throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
    }
    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes1) {
        if (_current !== null) {
            // An incomplete component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        } // Promote the fiber to a class and try rendering again.
        workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes1);
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderLanes1);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes1);
    }
    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes1) {
        if (_current !== null) {
            // An indeterminate component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        }
        var props = workInProgress.pendingProps;
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
        context = getMaskedContext(workInProgress, unmaskedContext);
        prepareToReadContext(workInProgress, renderLanes1);
        var value;
        if (Component.prototype && typeof Component.prototype.render === 'function') {
            var componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
            }
        }
        if (workInProgress.mode & StrictMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes1);
        setIsRendering(false);
        workInProgress.flags |= PerformedWork;
        // Support for module components is deprecated and is removed behind a flag.
        // Whether or not it would crash later, we want to show a good message in DEV first.
        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
            }
        }
        if (// Eventually we'll delete this branch altogether.
        typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName2 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
            }
            workInProgress.tag = ClassComponent; // Throw out any hooks that were used.
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
            // During mounting we don't know the child context yet as the instance doesn't exist.
            // We will invalidate the child context in finishClassComponent() right after rendering.
            var hasContext = false;
            if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
            } else hasContext = false;
            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
            initializeUpdateQueue(workInProgress);
            var getDerivedStateFromProps = Component.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === 'function') applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, Component, props, renderLanes1);
            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes1);
        } else {
            // Proceed under the assumption that this is a function component
            workInProgress.tag = FunctionComponent;
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes1);
                } finally{
                    reenableLogs();
                }
            }
            reconcileChildren(null, workInProgress, value, renderLanes1);
            validateFunctionComponentInDev(workInProgress, Component);
            return workInProgress.child;
        }
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
        if (Component) {
            if (Component.childContextTypes) error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
        }
        if (workInProgress.ref !== null) {
            var info = '';
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
            var warningKey = ownerName || workInProgress._debugID || '';
            var debugSource = workInProgress._debugSource;
            if (debugSource) warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
            if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
        }
        if (typeof Component.getDerivedStateFromProps === 'function') {
            var _componentName3 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
        }
        if (typeof Component.contextType === 'object' && Component.contextType !== null) {
            var _componentName4 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error('%s: Function components do not support contextType.', _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
        }
    }
    var SUSPENDED_MARKER = {
        dehydrated: null,
        retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes1) {
        return {
            baseLanes: renderLanes1
        };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes1) {
        return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes1)
        };
    } // TODO: Probably should inline this back
    function shouldRemainOnFallback(suspenseContext, current4, workInProgress, renderLanes1) {
        // If we're already showing a fallback, there are cases where we need to
        // remain on that fallback regardless of whether the content has resolved.
        // For example, SuspenseList coordinates when nested content appears.
        if (current4 !== null) {
            var suspenseState = current4.memoizedState;
            if (suspenseState === null) // Currently showing content. Don't hide it, even if ForceSuspenseFallack
            // is true. More precise name might be "ForceRemainSuspenseFallback".
            // Note: This is a factoring smell. Can't remain on a fallback if there's
            // no fallback to remain on.
            return false;
        } // Not currently showing content. Consult the Suspense context.
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current4, renderLanes1) {
        // TODO: Should not remove render lanes that were pinged during this render
        return removeLanes(current4.childLanes, renderLanes1);
    }
    function updateSuspenseComponent(current4, workInProgress, renderLanes1) {
        var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.
        if (shouldSuspend(workInProgress)) workInProgress.flags |= DidCapture;
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current4)) {
            // Something in this boundary's subtree already suspended. Switch to
            // rendering the fallback children.
            showFallback = true;
            workInProgress.flags &= ~DidCapture;
        } else {
            // Attempting the main content
            if (current4 === null || current4.memoizedState !== null) // This is a new mount or this boundary is already showing a fallback state.
            // Mark this subtree context as having at least one invisible parent that could
            // handle the fallback state.
            // Boundaries without fallbacks or should be avoided are not considered since
            // they cannot handle preferred fallback states.
            {
                if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
        // boundary's children. This involves some custom reconcilation logic. Two
        // main reasons this is so complicated.
        //
        // First, Legacy Mode has different semantics for backwards compatibility. The
        // primary tree will commit in an inconsistent state, so when we do the
        // second pass to render the fallback, we do some exceedingly, uh, clever
        // hacks to make that not totally break. Like transferring effects and
        // deletions from hidden tree. In Concurrent Mode, it's much simpler,
        // because we bailout on the primary tree completely and leave it in its old
        // state, no effects. Same as what we do for Offscreen (except that
        // Offscreen doesn't have the first render pass).
        //
        // Second is hydration. During hydration, the Suspense fiber has a slightly
        // different layout, where the child points to a dehydrated fragment, which
        // contains the DOM rendered by the server.
        //
        // Third, even if you set all that aside, Suspense is like error boundaries in
        // that we first we try to render one tree, and if that fails, we render again
        // and switch to a different tree. Like a try/catch block. So we have to track
        // which branch we're currently rendering. Ideally we would model this using
        // a stack.
        if (current4 === null) {
            // Initial mount
            // If we're currently hydrating, try to hydrate this boundary.
            // But only if this has a fallback.
            if (nextProps.fallback !== undefined) tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes1);
                var primaryChildFragment = workInProgress.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes1);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
            } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {
                // This is a CPU-bound tree. Skip this tree and show a placeholder to
                // unblock the surrounding content. Then immediately retry after the
                // initial commit.
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes1);
                var _primaryChildFragment = workInProgress.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes1);
                workInProgress.memoizedState = SUSPENDED_MARKER; // Since nothing actually suspended, there will nothing to ping this to
                // get it started back up to attempt the next item. While in terms of
                // priority this work has the same priority as this current render, it's
                // not part of the same transition once the transition has committed. If
                // it's sync, we still want to yield so that it can be painted.
                // Conceptually, this is really the same as pinging. We can use any
                // RetryLane even if it's the one currently rendering since we're leaving
                // it behind on this node.
                workInProgress.lanes = SomeRetryLane;
                markSpawnedWork(SomeRetryLane);
                return _fallbackFragment;
            } else return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes1);
        } else {
            // This is an update.
            // If the current fiber has a SuspenseState, that means it's already showing
            // a fallback.
            var prevState = current4.memoizedState;
            if (prevState !== null) {
                if (showFallback) {
                    var _nextFallbackChildren2 = nextProps.fallback;
                    var _nextPrimaryChildren2 = nextProps.children;
                    var _fallbackChildFragment = updateSuspenseFallbackChildren(current4, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes1);
                    var _primaryChildFragment3 = workInProgress.child;
                    var prevOffscreenState = current4.child.memoizedState;
                    _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes1) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes1);
                    _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current4, renderLanes1);
                    workInProgress.memoizedState = SUSPENDED_MARKER;
                    return _fallbackChildFragment;
                } else {
                    var _nextPrimaryChildren3 = nextProps.children;
                    var _primaryChildFragment4 = updateSuspensePrimaryChildren(current4, workInProgress, _nextPrimaryChildren3, renderLanes1);
                    workInProgress.memoizedState = null;
                    return _primaryChildFragment4;
                }
            } else // The current tree is not already showing a fallback.
            if (showFallback) {
                // Timed out.
                var _nextFallbackChildren3 = nextProps.fallback;
                var _nextPrimaryChildren4 = nextProps.children;
                var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current4, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes1);
                var _primaryChildFragment5 = workInProgress.child;
                var _prevOffscreenState = current4.child.memoizedState;
                _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes1) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes1);
                _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current4, renderLanes1); // Skip the primary children, and continue working on the
                // fallback children.
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment2;
            } else {
                // Still haven't timed out. Continue rendering the children, like we
                // normally do.
                var _nextPrimaryChildren5 = nextProps.children;
                var _primaryChildFragment6 = updateSuspensePrimaryChildren(current4, workInProgress, _nextPrimaryChildren5, renderLanes1);
                workInProgress.memoizedState = null;
                return _primaryChildFragment6;
            }
        }
    }
    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes1) {
        var mode = workInProgress.mode;
        var primaryChildProps = {
            mode: 'visible',
            children: primaryChildren
        };
        var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes1, null);
        primaryChildFragment.return = workInProgress;
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes1) {
        var mode = workInProgress.mode;
        var progressedPrimaryFragment = workInProgress.child;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes1, null);
        } else {
            primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes1, null);
        }
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function createWorkInProgressOffscreenFiber(current4, offscreenProps) {
        // The props argument to `createWorkInProgress` is `any` typed, so we use this
        // wrapper function to constrain it.
        return createWorkInProgress(current4, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current4, workInProgress, primaryChildren, renderLanes1) {
        var currentPrimaryChildFragment = current4.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: 'visible',
            children: primaryChildren
        });
        if ((workInProgress.mode & BlockingMode) === NoMode) primaryChildFragment.lanes = renderLanes1;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
            // Delete the fallback child fragment
            currentFallbackChildFragment.nextEffect = null;
            currentFallbackChildFragment.flags = Deletion;
            workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
        }
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current4, workInProgress, primaryChildren, fallbackChildren, renderLanes1) {
        var mode = workInProgress.mode;
        var currentPrimaryChildFragment = current4.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        if (// completed, even though it's in an inconsistent state.
        (mode & BlockingMode) === NoMode && // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        workInProgress.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            } // The fallback fiber was added as a deletion effect during the first pass.
            // However, since we're going to remain on the fallback, we no longer want
            // to delete it. So we need to remove it from the list. Deletions are stored
            // on the same list as effects. We want to keep the effects from the primary
            // tree. So we copy the primary child fragment's effect list, which does not
            // include the fallback deletion effect.
            var progressedLastEffect = primaryChildFragment.lastEffect;
            if (progressedLastEffect !== null) {
                workInProgress.firstEffect = primaryChildFragment.firstEffect;
                workInProgress.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
            } else // TODO: Reset this somewhere else? Lol legacy mode is so weird.
            workInProgress.firstEffect = workInProgress.lastEffect = null;
        } else primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes1, null); // Needs a placement effect because the parent (the Suspense boundary) already
            // mounted but this is a new fiber.
            fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function scheduleWorkOnFiber(fiber, renderLanes1) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes1);
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes1);
        scheduleWorkOnParentPath(fiber.return, renderLanes1);
    }
    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes1) {
        // Mark any Suspense boundaries with fallbacks as having work to do.
        // If they were previously forced into fallbacks, they may now be able
        // to unblock.
        var node = firstChild;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) scheduleWorkOnFiber(node, renderLanes1);
            } else if (node.tag === SuspenseListComponent) // If the tail is hidden there might not be an Suspense boundaries
            // to schedule work on. In this case we have to schedule it on the
            // list itself.
            // We don't have to traverse to the children of the list since
            // the list will propagate the change when it rerenders.
            scheduleWorkOnFiber(node, renderLanes1);
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function findLastContentRow(firstChild) {
        // This is going to find the last row among these children that is already
        // showing content on the screen, as opposed to being in fallback state or
        // new. If a row has multiple Suspense boundaries, any of them being in the
        // fallback state, counts as the whole row being in a fallback state.
        // Note that the "rows" will be workInProgress, but any nested children
        // will still be current since we haven't rendered them yet. The mounted
        // order may not be the same as the new order. We use the new order.
        var row = firstChild;
        var lastContentRow = null;
        while(row !== null){
            var currentRow = row.alternate; // New rows can't be content rows.
            if (currentRow !== null && findFirstSuspended(currentRow) === null) lastContentRow = row;
            row = row.sibling;
        }
        return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
        if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === 'string') switch(revealOrder.toLowerCase()){
                case 'together':
                case 'forwards':
                case 'backwards':
                    error("\"%s\" is not a valid value for revealOrder on <SuspenseList />. Use lowercase \"%s\" instead.", revealOrder, revealOrder.toLowerCase());
                    break;
                case 'forward':
                case 'backward':
                    error("\"%s\" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use \"%ss\" instead.", revealOrder, revealOrder.toLowerCase());
                    break;
                default:
                    error("\"%s\" is not a supported revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?", revealOrder);
                    break;
            }
            else error("%s is not a supported value for revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?", revealOrder);
        }
    }
    function validateTailOptions(tailMode, revealOrder) {
        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                didWarnAboutTailOptions[tailMode] = true;
                error("\"%s\" is not a supported value for tail on <SuspenseList />. Did you mean \"collapsed\" or \"hidden\"?", tailMode);
            } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
                didWarnAboutTailOptions[tailMode] = true;
                error("<SuspenseList tail=\"%s\" /> is only valid if revealOrder is \"forwards\" or \"backwards\". Did you mean to specify revealOrder=\"forwards\"?", tailMode);
            }
        }
    }
    function validateSuspenseListNestedChild(childSlot, index1) {
        var isArray1 = Array.isArray(childSlot);
        var isIterable = !isArray1 && typeof getIteratorFn(childSlot) === 'function';
        if (isArray1 || isIterable) {
            var type = isArray1 ? 'array' : 'iterable';
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index1, type);
            return false;
        }
        return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
        if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
            if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
                if (!validateSuspenseListNestedChild(children[i], i)) return;
            }
            else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === 'function') {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                        var step = childrenIterator.next();
                        var _i = 0;
                        for(; !step.done; step = childrenIterator.next()){
                            if (!validateSuspenseListNestedChild(step.value, _i)) return;
                            _i++;
                        }
                    }
                } else error("A single row was passed to a <SuspenseList revealOrder=\"%s\" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?", revealOrder);
            }
        }
    }
    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
        var renderState = workInProgress.memoizedState;
        if (renderState === null) workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode,
            lastEffect: lastEffectBeforeRendering
        };
        else {
            // We can reuse the existing object from previous renders.
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
        }
    } // This can end up rendering this component multiple passes.
    // The first pass splits the children fibers into two sets. A head and tail.
    // We first render the head. If anything is in fallback state, we do another
    // pass through beginWork to rerender all children (including the tail) with
    // the force suspend context. If the first render didn't have anything in
    // in fallback state. Then we render each row in the tail one-by-one.
    // That happens in the completeWork phase without going back to beginWork.
    function updateSuspenseListComponent(current4, workInProgress, renderLanes1) {
        var nextProps = workInProgress.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current4, workInProgress, newChildren, renderLanes1);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress.flags |= DidCapture;
        } else {
            var didSuspendBefore = current4 !== null && (current4.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) // If we previously forced a fallback, we need to schedule work
            // on any nested boundaries to let them know to try to render
            // again. This is the same as context updating.
            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes1);
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress, suspenseContext);
        if ((workInProgress.mode & BlockingMode) === NoMode) // In legacy mode, SuspenseList doesn't work so we just
        // use make it a noop by treating it as the default revealOrder.
        workInProgress.memoizedState = null;
        else switch(revealOrder){
            case 'forwards':
                var lastContentRow = findLastContentRow(workInProgress.child);
                var tail;
                if (lastContentRow === null) {
                    // The whole list is part of the tail.
                    // TODO: We could fast path by just rendering the tail now.
                    tail = workInProgress.child;
                    workInProgress.child = null;
                } else {
                    // Disconnect the tail rows after the content row.
                    // We're going to render them separately later.
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode, workInProgress.lastEffect);
                break;
            case 'backwards':
                // We're going to find the first row that has existing content.
                // At the same time we're going to reverse the list of everything
                // we pass in the meantime. That's going to be our tail in reverse
                // order.
                var _tail = null;
                var row = workInProgress.child;
                workInProgress.child = null;
                while(row !== null){
                    var currentRow = row.alternate; // New rows can't be content rows.
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                        // This is the beginning of the main content.
                        workInProgress.child = row;
                        break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                } // TODO: If workInProgress.child is null, we can continue on the tail immediately.
                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode, workInProgress.lastEffect);
                break;
            case 'together':
                initSuspenseListRenderState(workInProgress, false, null, null, undefined, workInProgress.lastEffect);
                break;
            default:
                // The default reveal order is the same as not having
                // a boundary.
                workInProgress.memoizedState = null;
        }
        return workInProgress.child;
    }
    function updatePortalComponent(current4, workInProgress, renderLanes1) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;
        if (current4 === null) // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes1);
        else reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
    function updateContextProvider(current4, workInProgress, renderLanes1) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        if (!('value' in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
            }
        }
        var providerPropTypes = workInProgress.type.propTypes;
        if (providerPropTypes) checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
        pushProvider(workInProgress, newValue);
        if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context, newValue, oldValue);
            if (changedBits === 0) {
                // No change. Bailout early if children are the same.
                if (oldProps.children === newProps.children && !hasContextChanged()) return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
            } else // The context value changed. Search for matching consumers and schedule
            // them to update.
            propagateContextChange(workInProgress, context, changedBits, renderLanes1);
        }
        var newChildren = newProps.children;
        reconcileChildren(current4, workInProgress, newChildren, renderLanes1);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current4, workInProgress, renderLanes1) {
        var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
        if (context._context === undefined) {
            // This may be because it's a Context (rather than a Consumer).
            // Or it may be because it's older React where they're the same thing.
            // We only want to warn if we're sure it's a new React.
            if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
            }
        } else context = context._context;
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        if (typeof render !== 'function') error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        prepareToReadContext(workInProgress, renderLanes1);
        var newValue = readContext(context, newProps.unstable_observedBits);
        var newChildren;
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        newChildren = render(newValue);
        setIsRendering(false);
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current4, workInProgress, newChildren, renderLanes1);
        return workInProgress.child;
    }
    function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
    }
    function bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1) {
        if (current4 !== null) // Reuse previous dependencies
        workInProgress.dependencies = current4.dependencies;
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning();
        markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.
        if (!includesSomeLane(renderLanes1, workInProgress.childLanes)) // The children don't have any work either. We can skip them.
        // TODO: Once we add back resuming, we should check if the children are
        // a work-in-progress set. If so, we need to transfer their effects.
        return null;
        else {
            // This fiber doesn't have work, but its subtree does. Clone the child
            // fibers and continue.
            cloneChildFibers(current4, workInProgress);
            return workInProgress.child;
        }
    }
    function remountFiber(current4, oldWorkInProgress, newWorkInProgress) {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) throw new Error('Cannot swap the root fiber.');
         // Disconnect from the old current.
        // It will get deleted.
        current4.alternate = null;
        oldWorkInProgress.alternate = null; // Connect to the new tree.
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.
        if (oldWorkInProgress === returnFiber.child) returnFiber.child = newWorkInProgress;
        else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) throw new Error('Expected parent to have a child.');
            while(prevSibling.sibling !== oldWorkInProgress){
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) throw new Error('Expected to find the previous sibling.');
            }
            prevSibling.sibling = newWorkInProgress;
        } // Delete the old fiber and place the new one.
        // Since the old fiber is disconnected, we have to schedule it manually.
        var last = returnFiber.lastEffect;
        if (last !== null) {
            last.nextEffect = current4;
            returnFiber.lastEffect = current4;
        } else returnFiber.firstEffect = returnFiber.lastEffect = current4;
        current4.nextEffect = null;
        current4.flags = Deletion;
        newWorkInProgress.flags |= Placement; // Restart work from the new fiber.
        return newWorkInProgress;
    }
    function beginWork(current4, workInProgress, renderLanes1) {
        var updateLanes = workInProgress.lanes;
        if (workInProgress._debugNeedsRemount && current4 !== null) // This will restart the begin phase with a new fiber.
        return remountFiber(current4, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
        if (current4 !== null) {
            var oldProps = current4.memoizedProps;
            var newProps = workInProgress.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current4.type) // If props or context changed, mark the fiber as having performed work.
            // This may be unset if the props are determined to be equal later (memo).
            didReceiveUpdate = true;
            else if (!includesSomeLane(renderLanes1, updateLanes)) {
                didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
                // the begin phase. There's still some bookkeeping we that needs to be done
                // in this optimized path, mostly pushing stuff onto the stack.
                switch(workInProgress.tag){
                    case HostRoot:
                        pushHostRootContext(workInProgress);
                        resetHydrationState();
                        break;
                    case HostComponent:
                        pushHostContext(workInProgress);
                        break;
                    case ClassComponent:
                        var Component = workInProgress.type;
                        if (isContextProvider(Component)) pushContextProvider(workInProgress);
                        break;
                    case HostPortal:
                        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                        break;
                    case ContextProvider:
                        var newValue = workInProgress.memoizedProps.value;
                        pushProvider(workInProgress, newValue);
                        break;
                    case Profiler:
                        // Profiler should only call onRender when one of its descendants actually rendered.
                        var hasChildWork = includesSomeLane(renderLanes1, workInProgress.childLanes);
                        if (hasChildWork) workInProgress.flags |= Update;
                         // Reset effect durations for the next eventual effect phase.
                        // These are reset during render to allow the DevTools commit hook a chance to read them,
                        var stateNode = workInProgress.stateNode;
                        stateNode.effectDuration = 0;
                        stateNode.passiveEffectDuration = 0;
                        break;
                    case SuspenseComponent:
                        var state = workInProgress.memoizedState;
                        if (state !== null) {
                            // whether to retry the primary children, or to skip over it and
                            // go straight to the fallback. Check the priority of the primary
                            // child fragment.
                            var primaryChildFragment = workInProgress.child;
                            var primaryChildLanes = primaryChildFragment.childLanes;
                            if (includesSomeLane(renderLanes1, primaryChildLanes)) // The primary children have pending work. Use the normal path
                            // to attempt to render the primary children again.
                            return updateSuspenseComponent(current4, workInProgress, renderLanes1);
                            else {
                                // The primary child fragment does not have pending work marked
                                // on it
                                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                                // priority. Bailout.
                                var child = bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
                                if (child !== null) // The fallback children have pending work. Skip over the
                                // primary children and work on the fallback.
                                return child.sibling;
                                else return null;
                            }
                        } else pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        break;
                    case SuspenseListComponent:
                        var didSuspendBefore = (current4.flags & DidCapture) !== NoFlags;
                        var _hasChildWork = includesSomeLane(renderLanes1, workInProgress.childLanes);
                        if (didSuspendBefore) {
                            if (_hasChildWork) // If something was in fallback state last time, and we have all the
                            // same children then we're still in progressive loading state.
                            // Something might get unblocked by state updates or retries in the
                            // tree which will affect the tail. So we need to use the normal
                            // path to compute the correct tail.
                            return updateSuspenseListComponent(current4, workInProgress, renderLanes1);
                             // If none of the children had any work, that means that none of
                            // them got retried so they'll still be blocked in the same way
                            // as before. We can fast bail out.
                            workInProgress.flags |= DidCapture;
                        } // If nothing suspended before and we're rendering the same children,
                        // then the tail doesn't matter. Anything new that suspends will work
                        // in the "together" mode, so we can continue from the state we had.
                        var renderState = workInProgress.memoizedState;
                        if (renderState !== null) {
                            // Reset to the "together" mode in case we've started a different
                            // update in the past but didn't complete it.
                            renderState.rendering = null;
                            renderState.tail = null;
                            renderState.lastEffect = null;
                        }
                        pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                        if (_hasChildWork) break;
                        else // If none of the children had any work, that means that none of
                        // them got retried so they'll still be blocked in the same way
                        // as before. We can fast bail out.
                        return null;
                    case OffscreenComponent:
                    case LegacyHiddenComponent:
                        // Need to check if the tree still needs to be deferred. This is
                        // almost identical to the logic used in the normal update path,
                        // so we'll just enter that. The only difference is we'll bail out
                        // at the next level instead of this one, because the child props
                        // have not changed. Which is fine.
                        // TODO: Probably should refactor `beginWork` to split the bailout
                        // path from the normal path. I'm tempted to do a labeled break here
                        // but I won't :)
                        workInProgress.lanes = NoLanes;
                        return updateOffscreenComponent(current4, workInProgress, renderLanes1);
                }
                return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
            } else if ((current4.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
            // See https://github.com/facebook/react/pull/19216.
            didReceiveUpdate = true;
            else // An update was scheduled on this fiber, but there are no new props
            // nor legacy context. Set this to false. If an update queue or context
            // consumer produces a changed value, it will set this to true. Otherwise,
            // the component will assume the children have not changed and bail out.
            didReceiveUpdate = false;
        } else didReceiveUpdate = false;
         // Before entering the begin phase, clear pending update priority.
        // TODO: This assumes that we're about to evaluate the component and process
        // the update queue. However, there's an exception: SimpleMemoComponent
        // sometimes bails out later in the begin phase. This indicates that we should
        // move this assignment out of the common path and into each branch.
        workInProgress.lanes = NoLanes;
        switch(workInProgress.tag){
            case IndeterminateComponent:
                return mountIndeterminateComponent(current4, workInProgress, workInProgress.type, renderLanes1);
            case LazyComponent:
                var elementType = workInProgress.elementType;
                return mountLazyComponent(current4, workInProgress, elementType, updateLanes, renderLanes1);
            case FunctionComponent:
                var _Component = workInProgress.type;
                var unresolvedProps = workInProgress.pendingProps;
                var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current4, workInProgress, _Component, resolvedProps, renderLanes1);
            case ClassComponent:
                var _Component2 = workInProgress.type;
                var _unresolvedProps = workInProgress.pendingProps;
                var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current4, workInProgress, _Component2, _resolvedProps, renderLanes1);
            case HostRoot:
                return updateHostRoot(current4, workInProgress, renderLanes1);
            case HostComponent:
                return updateHostComponent(current4, workInProgress, renderLanes1);
            case HostText:
                return updateHostText(current4, workInProgress);
            case SuspenseComponent:
                return updateSuspenseComponent(current4, workInProgress, renderLanes1);
            case HostPortal:
                return updatePortalComponent(current4, workInProgress, renderLanes1);
            case ForwardRef:
                var type = workInProgress.type;
                var _unresolvedProps2 = workInProgress.pendingProps;
                var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current4, workInProgress, type, _resolvedProps2, renderLanes1);
            case Fragment:
                return updateFragment(current4, workInProgress, renderLanes1);
            case Mode:
                return updateMode(current4, workInProgress, renderLanes1);
            case Profiler:
                return updateProfiler(current4, workInProgress, renderLanes1);
            case ContextProvider:
                return updateContextProvider(current4, workInProgress, renderLanes1);
            case ContextConsumer:
                return updateContextConsumer(current4, workInProgress, renderLanes1);
            case MemoComponent:
                var _type2 = workInProgress.type;
                var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, _resolvedProps3, 'prop', getComponentName(_type2));
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current4, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes1);
            case SimpleMemoComponent:
                return updateSimpleMemoComponent(current4, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes1);
            case IncompleteClassComponent:
                var _Component3 = workInProgress.type;
                var _unresolvedProps4 = workInProgress.pendingProps;
                var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current4, workInProgress, _Component3, _resolvedProps4, renderLanes1);
            case SuspenseListComponent:
                return updateSuspenseListComponent(current4, workInProgress, renderLanes1);
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case Block:
                break;
            case OffscreenComponent:
                return updateOffscreenComponent(current4, workInProgress, renderLanes1);
            case LegacyHiddenComponent:
                return updateLegacyHiddenComponent(current4, workInProgress, renderLanes1);
        }
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function markUpdate(workInProgress) {
        // Tag the fiber with an update effect. This turns a Placement into
        // a PlacementAndUpdate.
        workInProgress.flags |= Update;
    }
    function markRef$1(workInProgress) {
        workInProgress.flags |= Ref;
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent$1;
    var updateHostText$1;
    // Mutation mode
    appendAllChildren = function(parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while(node !== null){
            if (node.tag === HostComponent || node.tag === HostText) appendInitialChild(parent, node.stateNode);
            else if (node.tag === HostPortal) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    };
    updateHostContainer = function(workInProgress) {
    };
    updateHostComponent$1 = function(current4, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current4.memoizedProps;
        if (oldProps === newProps) // In mutation mode, this is sufficient for a bailout because
        // we won't touch this node even if children changed.
        return;
         // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.
        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.
        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.
        if (updatePayload) markUpdate(workInProgress);
    };
    updateHostText$1 = function(current4, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) markUpdate(workInProgress);
    };
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) // If we're hydrating, we should consume as many items as we can
        // so we don't leave any behind.
        return;
        switch(renderState.tailMode){
            case 'hidden':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while(tailNode !== null){
                    if (tailNode.alternate !== null) lastTailNode = tailNode;
                    tailNode = tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (lastTailNode === null) // All remaining items in the tail are insertions.
                renderState.tail = null;
                else // Detach the insertion after the last node that was already
                // inserted.
                lastTailNode.sibling = null;
                break;
            case 'collapsed':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while(_tailNode !== null){
                    if (_tailNode.alternate !== null) _lastTailNode = _tailNode;
                    _tailNode = _tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (_lastTailNode === null) {
                    // All remaining items in the tail are insertions.
                    if (!hasRenderedATailFallback && renderState.tail !== null) // We suspended during the head. We want to show at least one
                    // row at the tail. So we'll keep on and cut off the rest.
                    renderState.tail.sibling = null;
                    else renderState.tail = null;
                } else // Detach the insertion after the last node that was already
                // inserted.
                _lastTailNode.sibling = null;
                break;
        }
    }
    function completeWork(current4, workInProgress, renderLanes1) {
        var newProps = workInProgress.pendingProps;
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
                return null;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress.stateNode;
                if (fiberRoot.pendingContext) {
                    fiberRoot.context = fiberRoot.pendingContext;
                    fiberRoot.pendingContext = null;
                }
                if (current4 === null || current4.child === null) {
                    // If we hydrated, pop so that we can delete any remaining children
                    // that weren't hydrated.
                    var wasHydrated = popHydrationState(workInProgress);
                    if (wasHydrated) // If we hydrated, then we'll need to schedule an update for
                    // the commit side-effects on the root.
                    markUpdate(workInProgress);
                    else if (!fiberRoot.hydrate) // Schedule an effect to clear this container at the start of the next commit.
                    // This handles the case of React rendering into a container with previous children.
                    // It's also safe to do for updates too, because current.child would only be null
                    // if the previous render was null (so the the container would already be empty).
                    workInProgress.flags |= Snapshot;
                }
                updateHostContainer(workInProgress);
                return null;
            case HostComponent:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;
                if (current4 !== null && workInProgress.stateNode != null) {
                    updateHostComponent$1(current4, workInProgress, type, newProps, rootContainerInstance);
                    if (current4.ref !== workInProgress.ref) markRef$1(workInProgress);
                } else {
                    if (!newProps) {
                        if (!(workInProgress.stateNode !== null)) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                        return null;
                    }
                    var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                    // "stack" as the parent. Then append children as we go in beginWork
                    // or completeWork depending on whether we want to add them top->down or
                    // bottom->up. Top->down is faster in IE11.
                    var _wasHydrated = popHydrationState(workInProgress);
                    if (_wasHydrated) // TODO: Move this and createInstance step into the beginPhase
                    // to consolidate.
                    {
                        if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) // If changes to the hydrated node need to be applied at the
                        // commit-phase we mark this as such.
                        markUpdate(workInProgress);
                    } else {
                        var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                        appendAllChildren(instance, workInProgress, false, false);
                        workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
                        // (eg DOM renderer supports auto-focus for certain elements).
                        // Make sure such renderers get scheduled for later work.
                        if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) markUpdate(workInProgress);
                    }
                    if (workInProgress.ref !== null) // If there is a ref on a host node we need to schedule a callback
                    markRef$1(workInProgress);
                }
                return null;
            case HostText:
                var newText = newProps;
                if (current4 && workInProgress.stateNode != null) {
                    var oldText = current4.memoizedProps; // If we have an alternate, that means this is an update and we need
                    // to schedule a side-effect to do the updates.
                    updateHostText$1(current4, workInProgress, oldText, newText);
                } else {
                    if (typeof newText !== 'string') {
                        if (!(workInProgress.stateNode !== null)) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                    }
                    var _rootContainerInstance = getRootHostContainer();
                    var _currentHostContext = getHostContext();
                    var _wasHydrated2 = popHydrationState(workInProgress);
                    if (_wasHydrated2) {
                        if (prepareToHydrateHostTextInstance(workInProgress)) markUpdate(workInProgress);
                    } else workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var nextState = workInProgress.memoizedState;
                if ((workInProgress.flags & DidCapture) !== NoFlags) {
                    // Something suspended. Re-render with the fallback children.
                    workInProgress.lanes = renderLanes1; // Do not reset the effect list.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current4 === null) {
                    if (workInProgress.memoizedProps.fallback !== undefined) popHydrationState(workInProgress);
                } else {
                    var prevState = current4.memoizedState;
                    prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) // If this subtreee is running in blocking mode we can suspend,
                // otherwise we won't suspend.
                // TODO: This will still suspend a synchronous tree if anything
                // in the concurrent tree already suspended during this render.
                // This is a known bug.
                {
                    if ((workInProgress.mode & BlockingMode) !== NoMode) {
                        // TODO: Move this back to throwException because this is too late
                        // if this is a large tree which is common for initial loads. We
                        // don't know if we should restart a render or not until we get
                        // this marker, and this is too late.
                        // If this render already had a ping or lower pri updates,
                        // and this is the first time we know we're going to suspend we
                        // should be able to immediately restart from within throwException.
                        var hasInvisibleChildContext = current4 === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;
                        if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) // If this was in an invisible tree or a new render, then showing
                        // this boundary is ok.
                        renderDidSuspend();
                        else // Otherwise, we're going to have to hide content so we should
                        // suspend for longer if possible.
                        renderDidSuspendDelayIfPossible();
                    }
                }
                // TODO: Only schedule updates if these values are non equal, i.e. it changed.
                if (nextDidTimeout || prevDidTimeout) // If this boundary just timed out, schedule an effect to attach a
                // retry listener to the promise. This flag is also used to hide the
                // primary children. In mutation mode, we also need the flag to
                // *unhide* children that were previously hidden, so check if this
                // is currently timed out, too.
                workInProgress.flags |= Update;
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                updateHostContainer(workInProgress);
                if (current4 === null) preparePortalMount(workInProgress.stateNode.containerInfo);
                return null;
            case ContextProvider:
                // Pop provider fiber
                popProvider(workInProgress);
                return null;
            case IncompleteClassComponent:
                // Same as class component case. I put it down here so that the tags are
                // sequential to ensure this switch is compiled to a jump table.
                var _Component = workInProgress.type;
                if (isContextProvider(_Component)) popContext(workInProgress);
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress);
                var renderState = workInProgress.memoizedState;
                if (renderState === null) // We're running in the default, "independent" mode.
                // We don't do anything in this mode.
                return null;
                var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                    // We just rendered the head.
                    if (!didSuspendAlready) {
                        // This is the first pass. We need to figure out if anything is still
                        // suspended in the rendered set.
                        // If new content unsuspended, but there's still some content that
                        // didn't. Then we need to do a second pass that forces everything
                        // to keep showing their fallbacks.
                        // We might be suspended if something in this render pass suspended, or
                        // something in the previous committed pass suspended. Otherwise,
                        // there's no chance so we can skip the expensive call to
                        // findFirstSuspended.
                        var cannotBeSuspended = renderHasNotSuspendedYet() && (current4 === null || (current4.flags & DidCapture) === NoFlags);
                        if (!cannotBeSuspended) {
                            var row = workInProgress.child;
                            while(row !== null){
                                var suspended = findFirstSuspended(row);
                                if (suspended !== null) {
                                    didSuspendAlready = true;
                                    workInProgress.flags |= DidCapture;
                                    cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                                    // part of the second pass. In that case nothing will subscribe to
                                    // its thennables. Instead, we'll transfer its thennables to the
                                    // SuspenseList so that it can retry if they resolve.
                                    // There might be multiple of these in the list but since we're
                                    // going to wait for all of them anyway, it doesn't really matter
                                    // which ones gets to ping. In theory we could get clever and keep
                                    // track of how many dependencies remain but it gets tricky because
                                    // in the meantime, we can add/remove/change items and dependencies.
                                    // We might bail out of the loop before finding any but that
                                    // doesn't matter since that means that the other boundaries that
                                    // we did find already has their listeners attached.
                                    var newThennables = suspended.updateQueue;
                                    if (newThennables !== null) {
                                        workInProgress.updateQueue = newThennables;
                                        workInProgress.flags |= Update;
                                    } // Rerender the whole list, but this time, we'll force fallbacks
                                    // to stay in place.
                                    // Reset the effect list before doing the second pass since that's now invalid.
                                    if (renderState.lastEffect === null) workInProgress.firstEffect = null;
                                    workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.
                                    resetChildFibers(workInProgress, renderLanes1); // Set up the Suspense Context to force suspense and immediately
                                    // rerender the children.
                                    pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                                    return workInProgress.child;
                                }
                                row = row.sibling;
                            }
                        }
                        if (renderState.tail !== null && now() > getRenderTargetTime()) {
                            // We have already passed our CPU deadline but we still have rows
                            // left in the tail. We'll just give up further attempts to render
                            // the main content and only render fallbacks.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                            markSpawnedWork(SomeRetryLane);
                        }
                    } else cutOffTailIfNeeded(renderState, false);
                     // Next we're going to render the tail.
                } else {
                    // Append the rendered row to the child list.
                    if (!didSuspendAlready) {
                        var _suspended = findFirstSuspended(renderedTail);
                        if (_suspended !== null) {
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                            // get lost if this row ends up dropped during a second pass.
                            var _newThennables = _suspended.updateQueue;
                            if (_newThennables !== null) {
                                workInProgress.updateQueue = _newThennables;
                                workInProgress.flags |= Update;
                            }
                            cutOffTailIfNeeded(renderState, true); // This might have been modified.
                            if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
                            ) {
                                // We need to delete the row we just rendered.
                                // Reset the effect list to what it was before we rendered this
                                // child. The nested children have already appended themselves.
                                var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.
                                if (lastEffect !== null) lastEffect.nextEffect = null;
                                 // We're done.
                                return null;
                            }
                        } else if (// time we have to render. So rendering one more row would likely
                        // exceed it.
                        now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes1 !== OffscreenLane) {
                            // We have now passed our CPU deadline and we'll just give up further
                            // attempts to render the main content and only render fallbacks.
                            // The assumption is that this is usually faster.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                            markSpawnedWork(SomeRetryLane);
                        }
                    }
                    if (renderState.isBackwards) {
                        // The effect list of the backwards tail will have been added
                        // to the end. This breaks the guarantee that life-cycles fire in
                        // sibling order but that isn't a strong guarantee promised by React.
                        // Especially since these might also just pop in during future commits.
                        // Append to the beginning of the list.
                        renderedTail.sibling = workInProgress.child;
                        workInProgress.child = renderedTail;
                    } else {
                        var previousSibling = renderState.last;
                        if (previousSibling !== null) previousSibling.sibling = renderedTail;
                        else workInProgress.child = renderedTail;
                        renderState.last = renderedTail;
                    }
                }
                if (renderState.tail !== null) {
                    // We still have tail rows to render.
                    // Pop a row.
                    var next = renderState.tail;
                    renderState.rendering = next;
                    renderState.tail = next.sibling;
                    renderState.lastEffect = workInProgress.lastEffect;
                    renderState.renderingStartTime = now();
                    next.sibling = null; // Restore the context.
                    // TODO: We can probably just avoid popping it instead and only
                    // setting it the first time we go from not suspended to suspended.
                    var suspenseContext = suspenseStackCursor.current;
                    if (didSuspendAlready) suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                    else suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
                    return next;
                }
                return null;
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case Block:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                if (current4 !== null) {
                    var _nextState = workInProgress.memoizedState;
                    var _prevState = current4.memoizedState;
                    var prevIsHidden = _prevState !== null;
                    var nextIsHidden = _nextState !== null;
                    if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') workInProgress.flags |= Update;
                }
                return null;
        }
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function unwindWork(workInProgress, renderLanes1) {
        switch(workInProgress.tag){
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                var flags = workInProgress.flags;
                if (flags & ShouldCapture) {
                    workInProgress.flags = flags & ~ShouldCapture | DidCapture;
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var _flags = workInProgress.flags;
                if (!((_flags & DidCapture) === NoFlags)) throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress;
            case HostComponent:
                // TODO: popHydrationState
                popHostContext(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var _flags2 = workInProgress.flags;
                if (_flags2 & ShouldCapture) {
                    workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
                // caught by a nested boundary. If not, it should bubble through.
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                return null;
            case ContextProvider:
                popProvider(workInProgress);
                return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                return null;
            default:
                return null;
        }
    }
    function unwindInterruptedWork(interruptedWork) {
        switch(interruptedWork.tag){
            case ClassComponent:
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== undefined) popContext(interruptedWork);
                break;
            case HostRoot:
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
            case HostComponent:
                popHostContext(interruptedWork);
                break;
            case HostPortal:
                popHostContainer(interruptedWork);
                break;
            case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
            case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
            case ContextProvider:
                popProvider(interruptedWork);
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
        }
    }
    function createCapturedValue(value, source) {
        // If the value is an error, call this function immediately after it is thrown
        // so the stack is accurate.
        return {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source)
        };
    }
    // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.
    function showErrorDialog(boundary, errorInfo) {
        return true;
    }
    function logCapturedError(boundary, errorInfo) {
        try {
            var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
            // This enables renderers like ReactNative to better manage redbox behavior.
            if (logError === false) return;
            var error4 = errorInfo.value;
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
            // `preventDefault()` in window `error` handler.
            // We record this information as an expando on the error.
            if (error4 != null && error4._suppressLogging) {
                if (boundary.tag === ClassComponent) // The error is recoverable and was silenced.
                // Ignore it and don't print the stack addendum.
                // This is handy for testing error boundaries without noise.
                return;
                 // The error is fatal. Since the silencing might have
                // been accidental, we'll surface it anyway.
                // However, the browser would have silenced the original error
                // so we'll print it first, and then print the stack addendum.
                console['error'](error4); // Don't transform to our wrapper
            // For a more detailed description of this block, see:
            // https://github.com/facebook/react/pull/13384
            }
            var componentName = source ? getComponentName(source.type) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
            var errorBoundaryMessage;
            var errorBoundaryName = getComponentName(boundary.type);
            if (errorBoundaryName) errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            else errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
            // We don't include the original error message and JS stack because the browser
            // has already printed it. Even if the application swallows the error, it is still
            // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
            console['error'](combinedMessage); // Don't transform to our wrapper
        } catch (e) {
            // This method must not throw, or React internal state will get messed up.
            // If console.error is overridden, or logCapturedError() shows a dialog that throws,
            // we want to report this error outside of the normal stack as a last resort.
            // https://github.com/facebook/react/issues/13188
            setTimeout(function() {
                throw e;
            });
        }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.
        update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: null
        };
        var error4 = errorInfo.value;
        update.callback = function() {
            onUncaughtError(error4);
            logCapturedError(fiber, errorInfo);
        };
        return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === 'function') {
            var error$1 = errorInfo.value;
            update.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
            };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === 'function') update.callback = function callback() {
            markFailedErrorBoundaryForHotReloading(fiber);
            if (typeof getDerivedStateFromError !== 'function') {
                // To preserve the preexisting retry behavior of error boundaries,
                // we keep track of which ones already failed during this batch.
                // This gets reset before we yield back to the browser.
                // TODO: Warn in strict mode if getDerivedStateFromError is
                // not defined.
                markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined
                logCapturedError(fiber, errorInfo);
            }
            var error$1 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$1, {
                componentStack: stack !== null ? stack : ''
            });
            if (typeof getDerivedStateFromError !== 'function') // If componentDidCatch is the only error boundary method defined,
            // then it needs to call setState to recover from errors.
            // If no state update is scheduled then the boundary will swallow the error.
            {
                if (!includesSomeLane(fiber.lanes, SyncLane)) error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || 'Unknown');
            }
        };
        else update.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber);
        };
        return update;
    }
    function attachPingListener(root1, wakeable, lanes) {
        // Attach a listener to the promise to "ping" the root and retry. But only if
        // one does not already exist for the lanes we're currently rendering (which
        // acts like a "thread ID" here).
        var pingCache = root1.pingCache;
        var threadIDs;
        if (pingCache === null) {
            pingCache = root1.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
        } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === undefined) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
            }
        }
        if (!threadIDs.has(lanes)) {
            // Memoize using the thread ID to prevent redundant listeners.
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root1, wakeable, lanes);
            wakeable.then(ping, ping);
        }
    }
    function throwException(root1, returnFiber, sourceFiber, value, rootRenderLanes) {
        // The source fiber did not complete.
        sourceFiber.flags |= Incomplete; // Its effect list is no longer valid.
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;
        if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
            // This is a wakeable.
            var wakeable = value;
            if ((sourceFiber.mode & BlockingMode) === NoMode) {
                // Reset the memoizedState to what it was before we attempted
                // to render it.
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                    sourceFiber.updateQueue = currentSource.updateQueue;
                    sourceFiber.memoizedState = currentSource.memoizedState;
                    sourceFiber.lanes = currentSource.lanes;
                } else {
                    sourceFiber.updateQueue = null;
                    sourceFiber.memoizedState = null;
                }
            }
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.
            var _workInProgress = returnFiber;
            do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                    // Found the nearest boundary.
                    // Stash the promise on the boundary fiber. If the boundary times out, we'll
                    // attach another listener to flip the boundary back to its normal state.
                    var wakeables = _workInProgress.updateQueue;
                    if (wakeables === null) {
                        var updateQueue = new Set();
                        updateQueue.add(wakeable);
                        _workInProgress.updateQueue = updateQueue;
                    } else wakeables.add(wakeable);
                     // If the boundary is outside of blocking mode, we should *not*
                    // suspend the commit. Pretend as if the suspended component rendered
                    // null and keep rendering. In the commit phase, we'll schedule a
                    // subsequent synchronous update to re-render the Suspense.
                    //
                    // Note: It doesn't matter whether the component that suspended was
                    // inside a blocking mode tree. If the Suspense is outside of it, we
                    // should *not* suspend the commit.
                    if ((_workInProgress.mode & BlockingMode) === NoMode) {
                        _workInProgress.flags |= DidCapture;
                        sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
                        // But we shouldn't call any lifecycle methods or callbacks. Remove
                        // all lifecycle effect tags.
                        sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                        if (sourceFiber.tag === ClassComponent) {
                            var currentSourceFiber = sourceFiber.alternate;
                            if (currentSourceFiber === null) // This is a new mount. Change the tag so it's not mistaken for a
                            // completed class component. For example, we should not call
                            // componentWillUnmount if it is deleted.
                            sourceFiber.tag = IncompleteClassComponent;
                            else {
                                // When we try rendering again, we should not reuse the current fiber,
                                // since it's known to be in an inconsistent state. Use a force update to
                                // prevent a bail out.
                                var update = createUpdate(NoTimestamp, SyncLane);
                                update.tag = ForceUpdate;
                                enqueueUpdate(sourceFiber, update);
                            }
                        } // The source fiber did not complete. Mark it with Sync priority to
                        // indicate that it still has pending work.
                        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane); // Exit without suspending.
                        return;
                    } // Confirmed that the boundary is in a concurrent mode tree. Continue
                    // with the normal suspend path.
                    //
                    // After this we'll use a set of heuristics to determine whether this
                    // render pass will run to completion or restart or "suspend" the commit.
                    // The actual logic for this is spread out in different places.
                    //
                    // This first principle is that if we're going to suspend when we complete
                    // a root, then we should also restart if we get an update or ping that
                    // might unsuspend it, and vice versa. The only reason to suspend is
                    // because you think you might want to restart before committing. However,
                    // it doesn't make sense to restart only while in the period we're suspended.
                    //
                    // Restarting too aggressively is also not good because it starves out any
                    // intermediate loading state. So we use heuristics to determine when.
                    // Suspense Heuristics
                    //
                    // If nothing threw a Promise or all the same fallbacks are already showing,
                    // then don't suspend/restart.
                    //
                    // If this is an initial render of a new tree of Suspense boundaries and
                    // those trigger a fallback, then don't suspend/restart. We want to ensure
                    // that we can show the initial loading state as quickly as possible.
                    //
                    // If we hit a "Delayed" case, such as when we'd switch from content back into
                    // a fallback, then we should always suspend/restart. Transitions apply
                    // to this case. If none is defined, JND is used instead.
                    //
                    // If we're already showing a fallback and it gets "retried", allowing us to show
                    // another level, but there's still an inner boundary that would show a fallback,
                    // then we suspend/restart for 500ms since the last time we showed a fallback
                    // anywhere in the tree. This effectively throttles progressive loading into a
                    // consistent train of commits. This also gives us an opportunity to restart to
                    // get to the completed state slightly earlier.
                    //
                    // If there's ambiguity due to batching it's resolved in preference of:
                    // 1) "delayed", 2) "initial render", 3) "retry".
                    //
                    // We want to ensure that a "busy" state doesn't get force committed. We want to
                    // ensure that new initial loading states can commit as soon as possible.
                    attachPingListener(root1, wakeable, rootRenderLanes);
                    _workInProgress.flags |= ShouldCapture;
                    _workInProgress.lanes = rootRenderLanes;
                    return;
                } // This boundary already captured during this render. Continue to the next
                // boundary.
                _workInProgress = _workInProgress.return;
            }while (_workInProgress !== null) // No boundary was found. Fallthrough to error mode.
            // TODO: Use invariant so the message is stripped in prod?
            value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.');
        } // We didn't find a boundary that could handle this type of exception. Start
        // over and traverse parent path again, this time treating the exception
        // as an error.
        renderDidError();
        value = createCapturedValue(value, sourceFiber);
        var workInProgress = returnFiber;
        do {
            switch(workInProgress.tag){
                case HostRoot:
                    var _errorInfo = value;
                    workInProgress.flags |= ShouldCapture;
                    var lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
                    var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
                    enqueueCapturedUpdate(workInProgress, _update);
                    return;
                case ClassComponent:
                    // Capture and retry
                    var errorInfo = value;
                    var ctor = workInProgress.type;
                    var instance = workInProgress.stateNode;
                    if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                        workInProgress.flags |= ShouldCapture;
                        var _lane = pickArbitraryLane(rootRenderLanes);
                        workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state
                        var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);
                        enqueueCapturedUpdate(workInProgress, _update2);
                        return;
                    }
                    break;
            }
            workInProgress = workInProgress.return;
        }while (workInProgress !== null)
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
    var callComponentWillUnmountWithTimer = function(current4, instance) {
        instance.props = current4.memoizedProps;
        instance.state = current4.memoizedState;
        instance.componentWillUnmount();
    }; // Capture errors so they don't interrupt unmounting.
    function safelyCallComponentWillUnmount(current4, instance) {
        invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current4, instance);
        if (hasCaughtError()) {
            var unmountError = clearCaughtError();
            captureCommitPhaseError(current4, unmountError);
        }
    }
    function safelyDetachRef(current4) {
        var ref = current4.ref;
        if (ref !== null) {
            if (typeof ref === 'function') {
                invokeGuardedCallback(null, ref, null, null);
                if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current4, refError);
                }
            } else ref.current = null;
        }
    }
    function safelyCallDestroy(current4, destroy) {
        invokeGuardedCallback(null, destroy, null);
        if (hasCaughtError()) {
            var error4 = clearCaughtError();
            captureCommitPhaseError(current4, error4);
        }
    }
    function commitBeforeMutationLifeCycles(current4, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
                return;
            case ClassComponent:
                if (finishedWork.flags & Snapshot) {
                    if (current4 !== null) {
                        var prevProps = current4.memoizedProps;
                        var prevState = current4.memoizedState;
                        var instance = finishedWork.stateNode; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                        var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                        if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                            didWarnSet.add(finishedWork.type);
                            error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                        }
                        instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                    }
                }
                return;
            case HostRoot:
                if (finishedWork.flags & Snapshot) {
                    var root1 = finishedWork.stateNode;
                    clearContainer(root1.containerInfo);
                }
                return;
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
                // Nothing to do for these component types
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function commitHookEffectListUnmount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & tag) === tag) {
                    // Unmount
                    var destroy = effect.destroy;
                    effect.destroy = undefined;
                    if (destroy !== undefined) destroy();
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function commitHookEffectListMount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & tag) === tag) {
                    // Mount
                    var create = effect.create;
                    effect.destroy = create();
                    var destroy = effect.destroy;
                    if (destroy !== undefined && typeof destroy !== 'function') {
                        var addendum = void 0;
                        if (destroy === null) addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                        else if (typeof destroy.then === 'function') addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                        else addendum = ' You returned: ' + destroy;
                        error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function schedulePassiveEffects(finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                var _effect = effect, next = _effect.next, tag = _effect.tag;
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                    enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                    enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                }
                effect = next;
            }while (effect !== firstEffect)
        }
    }
    function commitLifeCycles(finishedRoot, current4, finishedWork, committedLanes) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
                schedulePassiveEffects(finishedWork);
                return;
            case ClassComponent:
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                    if (current4 === null) {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        instance.componentDidMount();
                    } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current4.memoizedProps : resolveDefaultProps(finishedWork.type, current4.memoizedProps);
                        var prevState = current4.memoizedState; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                } // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                    }
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
            case HostRoot:
                // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) switch(finishedWork.child.tag){
                        case HostComponent:
                            _instance = getPublicInstance(finishedWork.child.stateNode);
                            break;
                        case ClassComponent:
                            _instance = finishedWork.child.stateNode;
                            break;
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
            case HostComponent:
                var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
                // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                // These effects should only be committed when components are first mounted,
                // aka when there is no current/alternate.
                if (current4 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                }
                return;
            case HostText:
                // We have no life-cycles associated with text.
                return;
            case HostPortal:
                // We have no life-cycles associated with portals.
                return;
            case Profiler:
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime1 = getCommitTime();
                if (typeof onRender === 'function') onRender(finishedWork.memoizedProps.id, current4 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime1, finishedRoot.memoizedInteractions);
                return;
            case SuspenseComponent:
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
        // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = finishedWork;
        while(true){
            if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (isHidden) hideInstance(instance);
                else unhideInstance(node.stateNode, node.memoizedProps);
            } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;
                if (isHidden) hideTextInstance(_instance3);
                else unhideTextInstance(_instance3, node.memoizedProps);
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === finishedWork) return;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch(finishedWork.tag){
                case HostComponent:
                    instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            } // Moved outside to ensure DCE works with this flag
            if (typeof ref === 'function') ref(instanceToUse);
            else {
                if (!ref.hasOwnProperty('current')) error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                ref.current = instanceToUse;
            }
        }
    }
    function commitDetachRef(current4) {
        var currentRef = current4.ref;
        if (currentRef !== null) {
            if (typeof currentRef === 'function') currentRef(null);
            else currentRef.current = null;
        }
    } // User-originating errors (lifecycles and refs) should not interrupt
    // deletion, so don't let them throw. Host-originating errors should
    // interrupt deletion, so it's okay
    function commitUnmount(finishedRoot, current4, renderPriorityLevel) {
        onCommitUnmount(current4);
        switch(current4.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
                var updateQueue = current4.updateQueue;
                if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                        var firstEffect = lastEffect.next;
                        var effect = firstEffect;
                        do {
                            var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                            if (destroy !== undefined) {
                                if ((tag & Passive$1) !== NoFlags$1) enqueuePendingPassiveHookEffectUnmount(current4, effect);
                                else safelyCallDestroy(current4, destroy);
                            }
                            effect = effect.next;
                        }while (effect !== firstEffect)
                    }
                }
                return;
            case ClassComponent:
                safelyDetachRef(current4);
                var instance = current4.stateNode;
                if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(current4, instance);
                return;
            case HostComponent:
                safelyDetachRef(current4);
                return;
            case HostPortal:
                unmountHostComponents(finishedRoot, current4);
                return;
            case FundamentalComponent:
                return;
            case DehydratedFragment:
                return;
            case ScopeComponent:
                return;
        }
    }
    function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
        // While we're inside a removed host node we don't want to call
        // removeChild on the inner nodes because they're removed by the top
        // call anyway. We also want to call componentWillUnmount on all
        // composites before this host node is removed from the tree. Therefore
        // we do an inner loop while we're still inside the host node.
        var node = root2;
        while(true){
            commitUnmount(finishedRoot, node); // Visit children because they may contain more composite or host nodes.
            // Skip portals because commitUnmount() currently visits them recursively.
            if (node.child !== null && // If we don't use mutation we drill down into portals here instead.
            node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === root2) return;
            while(node.sibling === null){
                if (node.return === null || node.return === root2) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function detachFiberMutation(fiber) {
        // Cut off the return pointers to disconnect it from the tree. Ideally, we
        // should clear the child pointer of the parent alternate to let this
        // get GC:ed but we don't know which for sure which parent is the current
        // one so we'll settle for GC:ing the subtree of this child. This child
        // itself will be GC:ed when the parent updates the next time.
        // Note: we cannot null out sibling here, otherwise it can cause issues
        // with findDOMNode and how it requires the sibling field to carry out
        // traversal in a later effect. See PR #16820. We now clear the sibling
        // field after effects, see: detachFiberAfterEffects.
        //
        // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.
        // It may be required if the current component is an error boundary,
        // and one of its descendants throws while unmounting a passive effect.
        fiber.alternate = null;
        fiber.child = null;
        fiber.dependencies = null;
        fiber.firstEffect = null;
        fiber.lastEffect = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.return = null;
        fiber.updateQueue = null;
        fiber._debugOwner = null;
    }
    function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while(parent !== null){
            if (isHostParent(parent)) return parent;
            parent = parent.return;
        }
        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
        // We're going to search forward into the tree until we find a sibling host
        // node. Unfortunately, if multiple insertions are done in a row we have to
        // search past them. This leads to exponential search for the next sibling.
        // TODO: Find a more efficient way to do this.
        var node = fiber;
        siblings: while(true){
            // If we didn't find anything, let's try the next sibling.
            while(node.sibling === null){
                if (node.return === null || isHostParent(node.return)) // If we pop out of the root or hit the parent the fiber we are the
                // last sibling.
                return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while(node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment){
                // If it is not host node and, we might have a host node inside it.
                // Try to search down until we find one.
                if (node.flags & Placement) continue siblings;
                 // If we don't have a child, try the siblings instead.
                // We also skip portals because they are not part of this host tree.
                if (node.child === null || node.tag === HostPortal) continue siblings;
                else {
                    node.child.return = node;
                    node = node.child;
                }
            } // Check if this host node is stable or about to be placed.
            if (!(node.flags & Placement)) // Found it!
            return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.
        var parent;
        var isContainer;
        var parentStateNode = parentFiber.stateNode;
        switch(parentFiber.tag){
            case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
            case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
            case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
            case FundamentalComponent:
            // eslint-disable-next-line-no-fallthrough
            default:
                throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (parentFiber.flags & ContentReset) {
            // Reset the text content of the parent before doing any insertions
            resetTextContent(parent); // Clear ContentReset from the effect tag
            parentFiber.flags &= ~ContentReset;
        }
        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        if (isContainer) insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
        else insertOrAppendPlacementNode(finishedWork, before, parent);
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) insertInContainerBefore(parent, stateNode, before);
            else appendChildToContainer(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) insertBefore(parent, stateNode, before);
            else appendChild(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNode(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function unmountHostComponents(finishedRoot, current4, renderPriorityLevel) {
        // We only have the top Fiber that was deleted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = current4; // Each iteration, currentParent is populated with node's host parent if not
        // currentParentIsValid.
        var currentParentIsValid = false; // Note: these two variables *must* always be updated together.
        var currentParent;
        var currentParentIsContainer;
        while(true){
            if (!currentParentIsValid) {
                var parent = node.return;
                findParent: while(true){
                    if (!(parent !== null)) throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    var parentStateNode = parent.stateNode;
                    switch(parent.tag){
                        case HostComponent:
                            currentParent = parentStateNode;
                            currentParentIsContainer = false;
                            break findParent;
                        case HostRoot:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                        case HostPortal:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                    }
                    parent = parent.return;
                }
                currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node); // After all the children have unmounted, it is now safe to remove the
                // node from the tree.
                if (currentParentIsContainer) removeChildFromContainer(currentParent, node.stateNode);
                else removeChild(currentParent, node.stateNode);
                 // Don't visit children because we already visited them.
            } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                    // When we go into a portal, it becomes the parent to remove from.
                    // We will reassign it back when we pop the portal on the way up.
                    currentParent = node.stateNode.containerInfo;
                    currentParentIsContainer = true; // Visit children because portals might contain host components.
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            } else {
                commitUnmount(finishedRoot, node); // Visit children because we may find more host components below.
                if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            }
            if (node === current4) return;
            while(node.sibling === null){
                if (node.return === null || node.return === current4) return;
                node = node.return;
                if (node.tag === HostPortal) // When we go out of the portal, we need to restore the parent.
                // Since we don't keep a stack of them, we will search for it.
                currentParentIsValid = false;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitDeletion(finishedRoot, current4, renderPriorityLevel) {
        // Recursively delete all host nodes from the parent.
        // Detach refs and call componentWillUnmount() on the whole subtree.
        unmountHostComponents(finishedRoot, current4);
        var alternate = current4.alternate;
        detachFiberMutation(current4);
        if (alternate !== null) detachFiberMutation(alternate);
    }
    function commitWork(current4, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                return;
            case ClassComponent:
                return;
            case HostComponent:
                var instance = finishedWork.stateNode;
                if (instance != null) {
                    // Commit the work prepared earlier.
                    var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.
                    var oldProps = current4 !== null ? current4.memoizedProps : newProps;
                    var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
                return;
            case HostText:
                if (!(finishedWork.stateNode !== null)) throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                // as the newProps. The updatePayload will contain the real change in
                // this case.
                var oldText = current4 !== null ? current4.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
            case HostRoot:
                var _root = finishedWork.stateNode;
                if (_root.hydrate) {
                    // We've just hydrated. No need to hydrate again.
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                }
                return;
            case Profiler:
                return;
            case SuspenseComponent:
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
            case SuspenseListComponent:
                attachSuspenseRetryListeners(finishedWork);
                return;
            case IncompleteClassComponent:
                return;
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function commitSuspenseComponent(finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState !== null) {
            markCommitTimeOfFallback();
            // Hide the Offscreen component that contains the primary children. TODO:
            // Ideally, this effect would have been scheduled on the Offscreen fiber
            // itself. That's how unhiding works: the Offscreen component schedules an
            // effect on itself. However, in this case, the component didn't complete,
            // so the fiber was never added to the effect list in the normal path. We
            // could have appended it to the effect list in the Suspense component's
            // second pass, but doing it this way is less complicated. This would be
            // simpler if we got rid of the effect list and traversed the tree, like
            // we're planning to do.
            var primaryChildParent = finishedWork.child;
            hideOrUnhideAllChildren(primaryChildParent, true);
        }
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
            var current4 = finishedWork.alternate;
            if (current4 !== null) {
                var prevState = current4.memoizedState;
                if (prevState !== null) {
                    var suspenseInstance = prevState.dehydrated;
                    if (suspenseInstance !== null) commitHydratedSuspenseInstance(suspenseInstance);
                }
            }
        }
    }
    function attachSuspenseRetryListeners(finishedWork) {
        // If this boundary just timed out, then it will have a set of wakeables.
        // For each wakeable, attach a listener so that when it resolves, React
        // attempts to re-render the boundary in the primary (pre-timeout) state.
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            wakeables.forEach(function(wakeable) {
                // Memoize using the boundary fiber to prevent redundant listeners.
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                    if (wakeable.__reactDoNotTraceInteractions !== true) retry = tracing.unstable_wrap(retry);
                    retryCache.add(wakeable);
                    wakeable.then(retry, retry);
                }
            });
        }
    } // This function detects when a Suspense boundary goes from visible to hidden.
    // It returns false if the boundary is already hidden.
    // TODO: Use an effect tag.
    function isSuspenseBoundaryBeingHidden(current5, finishedWork) {
        if (current5 !== null) {
            var oldState = current5.memoizedState;
            if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
            }
        }
        return false;
    }
    function commitResetTextContent(current5) {
        resetTextContent(current5.stateNode);
    }
    var COMPONENT_TYPE = 0;
    var HAS_PSEUDO_CLASS_TYPE = 1;
    var ROLE_TYPE = 2;
    var TEST_NAME_TYPE = 3;
    var TEXT_TYPE = 4;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor$1 = Symbol.for;
        COMPONENT_TYPE = symbolFor$1('selector.component');
        HAS_PSEUDO_CLASS_TYPE = symbolFor$1('selector.has_pseudo_class');
        ROLE_TYPE = symbolFor$1('selector.role');
        TEST_NAME_TYPE = symbolFor$1('selector.test_id');
        TEXT_TYPE = symbolFor$1('selector.text');
    }
    var commitHooks = [];
    function onCommitRoot$1() {
        commitHooks.forEach(function(commitHook) {
            return commitHook();
        });
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
    var NoContext = /*             */ 0;
    var BatchedContext = /*               */ 1;
    var EventContext = /*                 */ 2;
    var DiscreteEventContext = /*         */ 4;
    var LegacyUnbatchedContext = /*       */ 8;
    var RenderContext = /*                */ 16;
    var CommitContext = /*                */ 32;
    var RetryAfterError = /*       */ 64;
    var RootIncomplete = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5; // Describes where we are in the React execution stack
    var executionContext = NoContext; // The root we're working on
    var workInProgressRoot = null; // The fiber we're working on
    var workInProgress = null; // The lanes we're rendering
    var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
    // This is a superset of the lanes we started working on at the root. The only
    // case where it's different from `workInProgressRootRenderLanes` is when we
    // enter a subtree that is hidden and needs to be unhidden: Suspense and
    // Offscreen component.
    //
    // Most things in the work loop should deal with workInProgressRootRenderLanes.
    // Most things in begin/complete phases should deal with subtreeRenderLanes.
    var subtreeRenderLanes = NoLanes;
    var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.
    var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown
    var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
    // slightly different than `renderLanes` because `renderLanes` can change as you
    // enter and exit an Offscreen tree. This value is the combination of all render
    // lanes for the entire render phase.
    var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
    // includes unprocessed updates, not work in bailed out children.
    var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.
    var workInProgressRootUpdatedLanes = NoLanes; // Lanes that were pinged (in an interleaved event) during this render.
    var workInProgressRootPingedLanes = NoLanes;
    var mostRecentlyUpdatedRoot = null; // The most recent time we committed a fallback. This lets us ensure a train
    // model where we don't commit new loading states in too quick succession.
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
    // more and prefer CPU suspense heuristics instead.
    var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
    // suspense heuristics and opt out of rendering more content.
    var RENDER_TIMEOUT_MS = 500;
    function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
    }
    var nextEffect = null;
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsRenderPriority = NoPriority$1;
    var pendingPassiveEffectsLanes = NoLanes;
    var pendingPassiveHookEffectsMount = [];
    var pendingPassiveHookEffectsUnmount = [];
    var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0; // Marks the need to reschedule pending interactions at these lanes
    // during the commit phase. This enables them to be traced across components
    // that spawn new work during render. E.g. hidden boundaries, suspended SSR
    // hydration or SuspenseList.
    // TODO: Can use a bitmask instead of an array
    var spawnedWorkDuringRender = null; // If two updates are scheduled within the same event, we should treat their
    // event times as simultaneous, even if the actual clock time has advanced
    // between the first and second call.
    var currentEventTime = NoTimestamp;
    var currentEventWipLanes = NoLanes;
    var currentEventPendingLanes = NoLanes; // Dev only flag that tracks if passive effects are currently being flushed.
    // We warn about state updates for unmounted components differently in this case.
    var isFlushingPassiveEffects = false;
    var focusedInstanceHandle = null;
    var shouldFireAfterActiveInstanceBlur = false;
    function getWorkInProgressRoot() {
        return workInProgressRoot;
    }
    function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) // We're inside React, so it's fine to read the actual time.
        return now();
         // We're not inside React, so we may be in the middle of a browser event.
        if (currentEventTime !== NoTimestamp) // Use the same start time for all updates until we enter React again.
        return currentEventTime;
         // This is the first update since React yielded. Compute a new start time.
        currentEventTime = now();
        return currentEventTime;
    }
    function requestUpdateLane(fiber) {
        // Special cases
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) return SyncLane;
        else if ((mode & ConcurrentMode) === NoMode) return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
         // The algorithm for assigning an update to a lane should be stable for all
        // updates at the same priority within the same event. To do this, the inputs
        // to the algorithm must be the same. For example, we use the `renderLanes`
        // to avoid choosing a lane that is already in the middle of rendering.
        //
        // However, the "included" lanes could be mutated in between updates in the
        // same event, like if you perform an update inside `flushSync`. Or any other
        // code path that might call `prepareFreshStack`.
        //
        // The trick we use is to cache the first of each of these inputs within an
        // event. Then reset the cached values once we can be sure the event is over.
        // Our heuristic for that is whenever we enter a concurrent work loop.
        //
        // We'll do the same for `currentEventPendingLanes` below.
        if (currentEventWipLanes === NoLanes) currentEventWipLanes = workInProgressRootIncludedLanes;
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
            if (currentEventPendingLanes !== NoLanes) currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
            return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
        } // TODO: Remove this dependency on the Scheduler priority.
        // To do that, we're replacing it with an update lane priority.
        var schedulerPriority = getCurrentPriorityLevel(); // The old behavior was using the priority level of the Scheduler.
        // This couples React to the Scheduler internals, so we're replacing it
        // with the currentUpdateLanePriority above. As an example of how this
        // could be problematic, if we're not inside `Scheduler.runWithPriority`,
        // then we'll get the priority of the current running Scheduler task,
        // which is probably not what we want.
        var lane;
        if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
        else {
            var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
            lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
        }
        return lane;
    }
    function requestRetryLane(fiber) {
        // This is a fork of `requestUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        // Special cases
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) return SyncLane;
        else if ((mode & ConcurrentMode) === NoMode) return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
         // See `requestUpdateLane` for explanation of `currentEventWipLanes`
        if (currentEventWipLanes === NoLanes) currentEventWipLanes = workInProgressRootIncludedLanes;
        return findRetryLane(currentEventWipLanes);
    }
    function scheduleUpdateOnFiber(fiber, lane, eventTime) {
        checkForNestedUpdates();
        warnAboutRenderPhaseUpdatesInDEV(fiber);
        var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
        if (root2 === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return null;
        } // Mark that the root has a pending update.
        markRootUpdated(root2, lane, eventTime);
        if (root2 === workInProgressRoot) {
            workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) // The root already suspended with a delay, which means this render
            // definitely won't finish. Since we have a new update, let's mark it as
            // suspended now, right before marking the incoming update. This has the
            // effect of interrupting the current render and switching to the update.
            // TODO: Make sure this doesn't override pings that happen while we've
            // already started rendering.
            markRootSuspended$1(root2, workInProgressRootRenderLanes);
        } // TODO: requestUpdateLanePriority also reads the priority. Pass the
        // priority as an argument to that function and this one.
        var priorityLevel = getCurrentPriorityLevel();
        if (lane === SyncLane) {
            if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                // Register pending interactions on the root to avoid losing traced interaction data.
                schedulePendingInteractions(root2, lane); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
                // root inside of batchedUpdates should be synchronous, but layout updates
                // should be deferred until the end of the batch.
                performSyncWorkOnRoot(root2);
            } else {
                ensureRootIsScheduled(root2, eventTime);
                schedulePendingInteractions(root2, lane);
                if (executionContext === NoContext) {
                    // Flush the synchronous work now, unless we're already working or inside
                    // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                    // scheduleCallbackForFiber to preserve the ability to schedule a callback
                    // without immediately flushing it. We only do this for user-initiated
                    // updates, to preserve historical behavior of legacy mode.
                    resetRenderTimer();
                    flushSyncCallbackQueue();
                }
            }
        } else {
            // Schedule a discrete update but only if it's not Sync.
            if ((executionContext & DiscreteEventContext) !== NoContext && // discrete, even inside a discrete event.
            (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                // This is the result of a discrete event. Track the lowest priority
                // discrete update per root so we can flush them early, if needed.
                if (rootsWithPendingDiscreteUpdates === null) rootsWithPendingDiscreteUpdates = new Set([
                    root2
                ]);
                else rootsWithPendingDiscreteUpdates.add(root2);
            } // Schedule other updates after in case the callback is sync.
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, lane);
        } // We use this when assigning a lane for a transition inside
        // `requestUpdateLane`. We assume it's the same as the root being updated,
        // since in the common case of a single root app it probably is. If it's not
        // the same root, then it's not a huge deal, we just might batch more stuff
        // together more than necessary.
        mostRecentlyUpdatedRoot = root2;
    } // This is split into a separate function so we can mark a fiber with pending
    // work without treating it as a typical update that originates from an event;
    // e.g. retrying a Suspense boundary isn't an update, but it does schedule work
    // on a fiber.
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        // Update the source fiber's lanes
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, lane);
        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        var node = sourceFiber;
        var parent = sourceFiber.return;
        while(parent !== null){
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            else if ((parent.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            node = parent;
            parent = parent.return;
        }
        if (node.tag === HostRoot) {
            var root2 = node.stateNode;
            return root2;
        } else return null;
    } // Use this function to schedule a task for a root. There's only one task per
    // root; if a task was already scheduled, we'll check to make sure the priority
    // of the existing task is the same as the priority of the next level that the
    // root has work on. This function is called on every update, and right before
    // exiting a task.
    function ensureRootIsScheduled(root3, currentTime) {
        var existingCallbackNode = root3.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
        // expired so we know to work on those next.
        markStarvedLanesAsExpired(root3, currentTime); // Determine the next lanes to work on, and their priority.
        var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes); // This returns the priority level computed during the `getNextLanes` call.
        var newCallbackPriority = returnNextLanesPriority();
        if (nextLanes === NoLanes) {
            // Special case: There's nothing to work on.
            if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root3.callbackNode = null;
                root3.callbackPriority = NoLanePriority;
            }
            return;
        } // Check if there's an existing task. We may be able to reuse it.
        if (existingCallbackNode !== null) {
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority) // The priority hasn't changed. We can reuse the existing task. Exit.
            return;
             // The priority changed. Cancel the existing callback. We'll schedule a new
            // one below.
            cancelCallback(existingCallbackNode);
        } // Schedule a new callback.
        var newCallbackNode;
        if (newCallbackPriority === SyncLanePriority) // Special case: Sync React callbacks are scheduled on a special
        // internal queue
        newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
        else if (newCallbackPriority === SyncBatchedLanePriority) newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root3));
        else {
            var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
            newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
        }
        root3.callbackPriority = newCallbackPriority;
        root3.callbackNode = newCallbackNode;
    } // This is the entry point for every concurrent task, i.e. anything that
    // goes through Scheduler.
    function performConcurrentWorkOnRoot(root3) {
        // Since we know we're in a React event, we can clear the current
        // event time. The next update will compute a new event time.
        currentEventTime = NoTimestamp;
        currentEventWipLanes = NoLanes;
        currentEventPendingLanes = NoLanes;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
         // Flush any pending passive effects before deciding which lanes to work on,
        // in case they schedule additional work.
        var originalCallbackNode = root3.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
            // Something in the passive effect phase may have canceled the current task.
            // Check if the task node for this root was changed.
            if (root3.callbackNode !== originalCallbackNode) // The current task was canceled. Exit. We don't need to call
            // `ensureRootIsScheduled` because the check above implies either that
            // there's a new task, or that there's no remaining work on this root.
            return null;
        } // Determine the next expiration time to work on, using the fields stored
        // on the root.
        var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) // Defensive coding. This is never expected to happen.
        return null;
        var exitStatus = renderRootConcurrent(root3, lanes);
        if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) // The render included lanes that were updated during the render phase.
        // For example, when unhiding a hidden tree, we include all the lanes
        // that were previously skipped when the tree was hidden. That set of
        // lanes is a superset of the lanes we started rendering with.
        //
        // So we'll throw out the current work and restart.
        prepareFreshStack(root3, NoLanes);
        else if (exitStatus !== RootIncomplete) {
            if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError; // If an error occurred during hydration,
                // discard server response and fall back to client side render.
                if (root3.hydrate) {
                    root3.hydrate = false;
                    clearContainer(root3.containerInfo);
                } // If something threw an error, try rendering one more time. We'll render
                // synchronously to block concurrent data mutations, and we'll includes
                // all pending updates are included. If it still fails after the second
                // attempt, we'll give up and commit the resulting tree.
                lanes = getLanesToRetrySynchronouslyOnError(root3);
                if (lanes !== NoLanes) exitStatus = renderRootSync(root3, lanes);
            }
            if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now());
                throw fatalError;
            } // We now have a consistent tree. The next step is either to commit it,
            // or, if something suspended, wait to commit it after a timeout.
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            finishConcurrentRender(root3, exitStatus, lanes);
        }
        ensureRootIsScheduled(root3, now());
        if (root3.callbackNode === originalCallbackNode) // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root3);
        return null;
    }
    function finishConcurrentRender(root3, exitStatus, lanes) {
        switch(exitStatus){
            case RootIncomplete:
            case RootFatalErrored:
                throw Error("Root did not complete. This is a bug in React.");
            // Flow knows about invariant, so it complains if I add a break
            // statement, but eslint doesn't know about invariant, so it complains
            // if I do. eslint-disable-next-line no-fallthrough
            case RootErrored:
                // We should have already attempted to retry this tree. If we reached
                // this point, it errored again. Commit it.
                commitRoot(root3);
                break;
            case RootSuspended:
                markRootSuspended$1(root3, lanes); // We have an acceptable loading state. We need to figure out if we
                // should immediately commit it or wait a bit.
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                    // This render only included retries, no updates. Throttle committing
                    // retries so that we don't show too many loading states too quickly.
                    var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.
                    if (msUntilTimeout > 10) {
                        var nextLanes = getNextLanes(root3, NoLanes);
                        if (nextLanes !== NoLanes) break;
                        var suspendedLanes = root3.suspendedLanes;
                        if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                            // We should prefer to render the fallback of at the last
                            // suspended level. Ping the last suspended level to try
                            // rendering it again.
                            // FIXME: What if the suspended lanes are Idle? Should not restart.
                            var eventTime = requestEventTime();
                            markRootPinged(root3, suspendedLanes);
                            break;
                        } // The render is suspended, it hasn't timed out, and there's no
                        // lower priority work to do. Instead of committing the fallback
                        // immediately, wait for more data to arrive.
                        root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), msUntilTimeout);
                        break;
                    }
                } // The work expired. Commit immediately.
                commitRoot(root3);
                break;
            case RootSuspendedWithDelay:
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) break;
                if (!shouldForceFlushFallbacksInDEV()) {
                    // This is not a transition, but we did trigger an avoided state.
                    // Schedule a placeholder to display after a short delay, using the Just
                    // Noticeable Difference.
                    // TODO: Is the JND optimization worth the added complexity? If this is
                    // the only reason we track the event time, then probably not.
                    // Consider removing.
                    var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                    var eventTimeMs = mostRecentEventTime;
                    var timeElapsedMs = now() - eventTimeMs;
                    var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.
                    if (_msUntilTimeout > 10) {
                        // Instead of committing the fallback immediately, wait for more data
                        // to arrive.
                        root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), _msUntilTimeout);
                        break;
                    }
                } // Commit the placeholder.
                commitRoot(root3);
                break;
            case RootCompleted:
                // The work completed. Ready to commit.
                commitRoot(root3);
                break;
            default:
                throw Error("Unknown root exit status.");
        }
    }
    function markRootSuspended$1(root3, suspendedLanes) {
        // When suspending, we should always exclude lanes that were pinged or (more
        // rarely, since we try to avoid it) updated during the render phase.
        // TODO: Lol maybe there's a better way to factor this besides this
        // obnoxiously named function :)
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
        markRootSuspended(root3, suspendedLanes);
    } // This is the entry point for synchronous tasks that don't go
    // through Scheduler
    function performSyncWorkOnRoot(root3) {
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
        flushPassiveEffects();
        var lanes;
        var exitStatus;
        if (root3 === workInProgressRoot && includesSomeLane(root3.expiredLanes, workInProgressRootRenderLanes)) {
            // There's a partial tree, and at least one of its lanes has expired. Finish
            // rendering it before rendering the rest of the expired work.
            lanes = workInProgressRootRenderLanes;
            exitStatus = renderRootSync(root3, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                // The render included lanes that were updated during the render phase.
                // For example, when unhiding a hidden tree, we include all the lanes
                // that were previously skipped when the tree was hidden. That set of
                // lanes is a superset of the lanes we started rendering with.
                //
                // Note that this only happens when part of the tree is rendered
                // concurrently. If the whole tree is rendered synchronously, then there
                // are no interleaved events.
                lanes = getNextLanes(root3, lanes);
                exitStatus = renderRootSync(root3, lanes);
            }
        } else {
            lanes = getNextLanes(root3, NoLanes);
            exitStatus = renderRootSync(root3, lanes);
        }
        if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
            executionContext |= RetryAfterError; // If an error occurred during hydration,
            // discard server response and fall back to client side render.
            if (root3.hydrate) {
                root3.hydrate = false;
                clearContainer(root3.containerInfo);
            } // If something threw an error, try rendering one more time. We'll render
            // synchronously to block concurrent data mutations, and we'll includes
            // all pending updates are included. If it still fails after the second
            // attempt, we'll give up and commit the resulting tree.
            lanes = getLanesToRetrySynchronouslyOnError(root3);
            if (lanes !== NoLanes) exitStatus = renderRootSync(root3, lanes);
        }
        if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root3, NoLanes);
            markRootSuspended$1(root3, lanes);
            ensureRootIsScheduled(root3, now());
            throw fatalError;
        } // We now have a consistent tree. Because this is a sync render, we
        // will commit it even if something suspended.
        var finishedWork = root3.current.alternate;
        root3.finishedWork = finishedWork;
        root3.finishedLanes = lanes;
        commitRoot(root3); // Before exiting, make sure there's a callback scheduled for the next
        // pending level.
        ensureRootIsScheduled(root3, now());
        return null;
    }
    function flushDiscreteUpdates() {
        // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
        // However, `act` uses `batchedUpdates`, so there's no way to distinguish
        // those two cases. Need to fix this before exposing flushDiscreteUpdates
        // as a public API.
        if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            if ((executionContext & RenderContext) !== NoContext) error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
            // This is probably a nested event dispatch triggered by a lifecycle/effect,
            // like `el.focus()`. Exit.
            return;
        }
        flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
        // they fire before the next serial event.
        flushPassiveEffects();
    }
    function flushPendingDiscreteUpdates() {
        if (rootsWithPendingDiscreteUpdates !== null) {
            // For each root with pending discrete updates, schedule a callback to
            // immediately flush them.
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function(root3) {
                markDiscreteUpdatesExpired(root3);
                ensureRootIsScheduled(root3, now());
            });
        } // Now flush the immediate queue.
        flushSyncCallbackQueue();
    }
    function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function batchedEventUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= EventContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function discreteUpdates$1(fn, a, b, c, d) {
        var prevExecutionContext = executionContext;
        executionContext |= DiscreteEventContext;
        try {
            return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function unbatchedUpdates(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext &= ~BatchedContext;
        executionContext |= LegacyUnbatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function flushSync(fn, a) {
        var prevExecutionContext = executionContext;
        if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
            error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            return fn(a);
        }
        executionContext |= BatchedContext;
        try {
            if (fn) return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
            else return undefined;
        } finally{
            executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
            // Note that this will happen even if batchedUpdates is higher up
            // the stack.
            flushSyncCallbackQueue();
        }
    }
    function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
    }
    function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root3, lanes) {
        root3.finishedWork = null;
        root3.finishedLanes = NoLanes;
        var timeoutHandle = root3.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
            // The root previous suspended and scheduled a timeout to commit a fallback
            // state. Now that we have additional work, cancel the timeout.
            root3.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
            cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while(interruptedWork !== null){
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
            }
        }
        workInProgressRoot = root3;
        workInProgress = createWorkInProgress(root3.current, null);
        workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootIncomplete;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        spawnedWorkDuringRender = null;
        ReactStrictModeWarnings.discardPendingWarnings();
    }
    function handleError(root3, thrownValue) {
        do {
            var erroredWork = workInProgress;
            try {
                // Reset module-level state that was set during the render phase.
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
                // separate issue. Write a regression test using string refs.
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                    // Expected to be working on a non-root fiber. This is a fatal error
                    // because there's no ancestor that can handle it; the root is
                    // supposed to capture all errors that weren't caught by an error
                    // boundary.
                    workInProgressRootExitStatus = RootFatalErrored;
                    workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
                    // sibling, or the parent if there are no siblings. But since the root
                    // has no siblings nor a parent, we set it to null. Usually this is
                    // handled by `completeUnitOfWork` or `unwindWork`, but since we're
                    // intentionally not calling those, we need set it here.
                    // TODO: Consider calling `unwindWork` to pop the contexts.
                    workInProgress = null;
                    return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) // Record the time spent rendering before an error was thrown. This
                // avoids inaccurate Profiler durations in the case of a
                // suspended render.
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
                // Something in the return path also threw.
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                    // If this boundary has already errored, then we had trouble processing
                    // the error. Bubble it to the next boundary.
                    erroredWork = erroredWork.return;
                    workInProgress = erroredWork;
                } else erroredWork = workInProgress;
                continue;
            } // Return to the normal work loop.
            return;
        }while (true)
    }
    function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) // The React isomorphic package does not include a default dispatcher.
        // Instead the first renderer will lazily attach one, in order to give
        // nicer error messages.
        return ContextOnlyDispatcher;
        else return prevDispatcher;
    }
    function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function pushInteractions(root3) {
        var prevInteractions = tracing.__interactionsRef.current;
        tracing.__interactionsRef.current = root3.memoizedInteractions;
        return prevInteractions;
    }
    function popInteractions(prevInteractions) {
        tracing.__interactionsRef.current = prevInteractions;
    }
    function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootIncomplete) workInProgressRootExitStatus = RootSuspended;
    }
    function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) workInProgressRootExitStatus = RootSuspendedWithDelay;
         // Check if there are updates that we skipped tree that might have unblocked
        // this render.
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) // Mark the current render as suspended so that we switch to working on
        // the updates that were skipped. Usually we only suspend at the end of
        // the render phase.
        // TODO: We should probably always mark the root as suspended immediately
        // (inside this function), since by suspending at the end of the render
        // phase introduces a potential mistake where we suspend lanes that were
        // pinged or updated while we were rendering.
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
    }
    function renderDidError() {
        if (workInProgressRootExitStatus !== RootCompleted) workInProgressRootExitStatus = RootErrored;
    } // Called during render to determine if anything has suspended.
    // Returns false if we're not sure.
    function renderHasNotSuspendedYet() {
        // If something errored or completed, we can't really be sure,
        // so those are false.
        return workInProgressRootExitStatus === RootIncomplete;
    }
    function renderRootSync(root3, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            prepareFreshStack(root3, lanes);
            startWorkOnPendingInteractions(root3, lanes);
        }
        var prevInteractions = pushInteractions(root3);
        for(;;)try {
            workLoopSync();
            break;
        } catch (thrownValue) {
            handleError(root3, thrownValue);
        }
        resetContextDependencies();
        popInteractions(prevInteractions);
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress !== null) throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
    } // The work loop is an extremely hot path. Tell Closure not to inline it.
    /** @noinline */ function workLoopSync() {
        // Already timed out, so perform work without checking if we need to yield.
        while(workInProgress !== null)performUnitOfWork(workInProgress);
    }
    function renderRootConcurrent(root3, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            resetRenderTimer();
            prepareFreshStack(root3, lanes);
            startWorkOnPendingInteractions(root3, lanes);
        }
        var prevInteractions = pushInteractions(root3);
        for(;;)try {
            workLoopConcurrent();
            break;
        } catch (thrownValue) {
            handleError(root3, thrownValue);
        }
        resetContextDependencies();
        popInteractions(prevInteractions);
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress !== null) return RootIncomplete;
        else {
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes; // Return the final exit status.
            return workInProgressRootExitStatus;
        }
    }
    /** @noinline */ function workLoopConcurrent() {
        // Perform work until Scheduler asks us to yield
        while(workInProgress !== null && !shouldYield())performUnitOfWork(workInProgress);
    }
    function performUnitOfWork(unitOfWork) {
        // The current, flushed, state of this fiber is the alternate. Ideally
        // nothing should rely on this, but relying on it here means that we don't
        // need an additional field on the work in progress.
        var current5 = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current5, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else next = beginWork$1(current5, unitOfWork, subtreeRenderLanes);
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) // If this doesn't spawn new work, complete the current work.
        completeUnitOfWork(unitOfWork);
        else workInProgress = next;
        ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
        // Attempt to complete the current unit of work, then move to the next
        // sibling. If there are no more siblings, return to the parent fiber.
        var completedWork = unitOfWork;
        do {
            // The current, flushed, state of this fiber is the alternate. Ideally
            // nothing should rely on this, but relying on it here means that we don't
            // need an additional field on the work in progress.
            var current5 = completedWork.alternate;
            var returnFiber = completedWork.return; // Check if the work completed or if something threw.
            if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) next = completeWork(current5, completedWork, subtreeRenderLanes);
                else {
                    startProfilerTimer(completedWork);
                    next = completeWork(current5, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                    // Completing this fiber spawned new work. Work on that next.
                    workInProgress = next;
                    return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                    // Append all the effects of the subtree and this fiber onto the effect
                    // list of the parent. The completion order of the children affects the
                    // side-effect order.
                    if (returnFiber.firstEffect === null) returnFiber.firstEffect = completedWork.firstEffect;
                    if (completedWork.lastEffect !== null) {
                        if (returnFiber.lastEffect !== null) returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                        returnFiber.lastEffect = completedWork.lastEffect;
                    } // If this fiber had side-effects, we append it AFTER the children's
                    // side-effects. We can perform certain side-effects earlier if needed,
                    // by doing multiple passes over the effect list. We don't want to
                    // schedule our own side-effect on our own list because if end up
                    // reusing children we'll schedule this effect onto itself since we're
                    // at the end.
                    var flags = completedWork.flags; // Skip both NoWork and PerformedWork tags when creating the effect
                    // list. PerformedWork effect is read by React DevTools but shouldn't be
                    // committed.
                    if (flags > PerformedWork) {
                        if (returnFiber.lastEffect !== null) returnFiber.lastEffect.nextEffect = completedWork;
                        else returnFiber.firstEffect = completedWork;
                        returnFiber.lastEffect = completedWork;
                    }
                }
            } else {
                // This fiber did not complete because something threw. Pop values off
                // the stack without entering the complete phase. If this is a boundary,
                // capture values if possible.
                var _next = unwindWork(completedWork); // Because this fiber did not complete, don't reset its expiration time.
                if (_next !== null) {
                    // If completing this work spawned new work, do that next. We'll come
                    // back here again.
                    // Since we're restarting, remove anything that is not a host effect
                    // from the effect tag.
                    _next.flags &= HostEffectMask;
                    workInProgress = _next;
                    return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                    // Record the render duration for the fiber that errored.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.
                    var actualDuration = completedWork.actualDuration;
                    var child = completedWork.child;
                    while(child !== null){
                        actualDuration += child.actualDuration;
                        child = child.sibling;
                    }
                    completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                    // Mark the parent fiber as incomplete and clear its effect list.
                    returnFiber.firstEffect = returnFiber.lastEffect = null;
                    returnFiber.flags |= Incomplete;
                }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
                // If there is more work to do in this returnFiber, do that next.
                workInProgress = siblingFiber;
                return;
            } // Otherwise, return to the parent
            completedWork = returnFiber; // Update the next thing we're working on in case something throws.
            workInProgress = completedWork;
        }while (completedWork !== null) // We've reached the root.
        if (workInProgressRootExitStatus === RootIncomplete) workInProgressRootExitStatus = RootCompleted;
    }
    function resetChildLanes(completedWork) {
        if (// to switch statement in `completeWork`.
        (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) // The children of this component are hidden. Don't bubble their
        // expiration times.
        return;
        var newChildLanes = NoLanes; // Bubble up the earliest expiration time.
        if ((completedWork.mode & ProfileMode) !== NoMode) {
            // In profiling mode, resetChildExpirationTime is also used to reset
            // profiler durations.
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
            // only be updated if work is done on the fiber (i.e. it doesn't bailout).
            // When work is done, it should bubble to the parent's actualDuration. If
            // the fiber has not been cloned though, (meaning no work was done), then
            // this value will reflect the amount of time spent working on a previous
            // render. In that case it should not bubble. We determine whether it was
            // cloned by comparing the child pointer.
            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child = completedWork.child;
            while(child !== null){
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
            }
            var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
            if (isTimedOutSuspense) {
                // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) treeBaseDuration -= primaryChildFragment.treeBaseDuration;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
        } else {
            var _child = completedWork.child;
            while(_child !== null){
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
            }
        }
        completedWork.childLanes = newChildLanes;
    }
    function commitRoot(root3) {
        var renderPriorityLevel = getCurrentPriorityLevel();
        runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root3, renderPriorityLevel));
        return null;
    }
    function commitRootImpl(root3, renderPriorityLevel) {
        do // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
        // means `flushPassiveEffects` will sometimes result in additional
        // passive effects. So we need to keep flushing in a loop until there are
        // no more pending effects.
        // TODO: Might be better if `flushPassiveEffects` did not automatically
        // flush synchronous work at the end, to avoid factoring hazards like this.
        flushPassiveEffects();
        while (rootWithPendingPassiveEffects !== null)
        flushRenderPhaseStrictModeWarningsInDEV();
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
        var finishedWork = root3.finishedWork;
        var lanes = root3.finishedLanes;
        if (finishedWork === null) return null;
        root3.finishedWork = null;
        root3.finishedLanes = NoLanes;
        if (!(finishedWork !== root3.current)) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
         // commitRoot never returns a continuation; it always finishes synchronously.
        // So we can clear these now to allow a new callback to be scheduled.
        root3.callbackNode = null; // Update the first and last pending times on this root. The new first
        // pending time is whatever is left on the root fiber.
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root3, remainingLanes); // Clear already finished discrete updates in case that a later call of
        // `flushDiscreteUpdates` starts a useless render pass which may cancels
        // a scheduled timeout.
        if (rootsWithPendingDiscreteUpdates !== null) {
            if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root3)) rootsWithPendingDiscreteUpdates.delete(root3);
        }
        if (root3 === workInProgressRoot) {
            // We can reset these now that they are finished.
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
        } // Get the list of effects.
        var firstEffect;
        if (finishedWork.flags > PerformedWork) {
            // A fiber's effect list consists only of its children, not itself. So if
            // the root has an effect, we need to add it to the end of the list. The
            // resulting list is the set that would belong to the root's parent, if it
            // had one; that is, all the effects in the tree including the root.
            if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
            } else firstEffect = finishedWork;
        } else // There is no effect on the root.
        firstEffect = finishedWork.firstEffect;
        if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root3); // Reset this to null before calling lifecycles
            ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
            // of the effect list for each phase: all mutation effects come before all
            // layout effects, and so on.
            // The first phase a "before mutation" phase. We use this phase to read the
            // state of the host tree right before we mutate it. This is where
            // getSnapshotBeforeUpdate is called.
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            shouldFireAfterActiveInstanceBlur = false;
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var error5 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error5);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null) // We no longer need to track the active instance fiber
            focusedInstanceHandle = null;
            // Mark the current commit time to be shared by all Profilers in this
            // batch. This enables them to be grouped later.
            recordCommitTime();
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitMutationEffects, null, root3, renderPriorityLevel);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null)
            resetAfterCommit(root3.containerInfo); // The work-in-progress tree is now the current tree. This must come after
            // the mutation phase, so that the previous tree is still current during
            // componentWillUnmount, but before the layout phase, so that the finished
            // work is current during componentDidMount/Update.
            root3.current = finishedWork; // The next phase is the layout phase, where we call effects that read
            // the host tree after it's been mutated. The idiomatic use case for this is
            // layout, but class component lifecycles also fire here for legacy reasons.
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitLayoutEffects, null, root3, lanes);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null)
            nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
            // opportunity to paint.
            requestPaint();
            popInteractions(prevInteractions);
            executionContext = prevExecutionContext;
        } else {
            // No effects.
            root3.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
            recordCommitTime();
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
            // This commit has passive effects. Stash a reference to them. But don't
            // schedule a callback until after flushing layout work.
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root3;
            pendingPassiveEffectsLanes = lanes;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
        } else {
            // We are done with the effect chain at this point so let's clear the
            // nextEffect pointers to assist with GC. If we have passive effects, we'll
            // clear this in flushPassiveEffects.
            nextEffect = firstEffect;
            while(nextEffect !== null){
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) detachFiberAfterEffects(nextEffect);
                nextEffect = nextNextEffect;
            }
        } // Read this again, since an effect might have updated it
        remainingLanes = root3.pendingLanes; // Check if there's remaining work on this root
        if (remainingLanes !== NoLanes) {
            if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;
                for(var i = 0; i < expirationTimes.length; i++)scheduleInteractions(root3, expirationTimes[i], root3.memoizedInteractions);
            }
            schedulePendingInteractions(root3, remainingLanes);
        } else // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
        if (!rootDidHavePassiveEffects) // If there are no passive effects, then we can complete the pending interactions.
        // Otherwise, we'll wait until after the passive effects are flushed.
        // Wait to do this until after remaining work has been scheduled,
        // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
        finishPendingInteractions(root3, lanes);
        if (remainingLanes === SyncLane) {
            // Count the number of times the root synchronously re-renders without
            // finishing. If there are too many, it indicates an infinite update loop.
            if (root3 === rootWithNestedUpdates) nestedUpdateCount++;
            else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
            }
        } else nestedUpdateCount = 0;
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        onCommitRoot$1();
        // additional work on this root is scheduled.
        ensureRootIsScheduled(root3, now());
        if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
        }
        if ((executionContext & LegacyUnbatchedContext) !== NoContext) // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
        // synchronously, but layout updates should be deferred until the end
        // of the batch.
        return null;
         // If layout work was scheduled, flush it now.
        flushSyncCallbackQueue();
        return null;
    }
    function commitBeforeMutationEffects() {
        while(nextEffect !== null){
            var current6 = nextEffect.alternate;
            if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                    if (doesFiberContain(nextEffect, focusedInstanceHandle)) shouldFireAfterActiveInstanceBlur = true;
                } else // TODO: Move this out of the hot path using a dedicated effect tag.
                if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current6, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) shouldFireAfterActiveInstanceBlur = true;
            }
            var flags = nextEffect.flags;
            if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current6, nextEffect);
                resetCurrentFiber();
            }
            if ((flags & Passive) !== NoFlags) // If there are passive effects, schedule a callback to flush at
            // the earliest opportunity.
            {
                if (!rootDoesHavePassiveEffects) {
                    rootDoesHavePassiveEffects = true;
                    scheduleCallback(NormalPriority$1, function() {
                        flushPassiveEffects();
                        return null;
                    });
                }
            }
            nextEffect = nextEffect.nextEffect;
        }
    }
    function commitMutationEffects(root3, renderPriorityLevel) {
        // TODO: Should probably move the bulk of this function to commitWork.
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & ContentReset) commitResetTextContent(nextEffect);
            if (flags & Ref) {
                var current7 = nextEffect.alternate;
                if (current7 !== null) commitDetachRef(current7);
            } // The following switch statement is only concerned about placement,
            // updates, and deletions. To avoid needing to add a case for every possible
            // bitmap value, we remove the secondary effects from the effect tag and
            // switch on that value.
            var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
            switch(primaryFlags){
                case Placement:
                    commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                    // inserted, before any life-cycles like componentDidMount gets called.
                    // TODO: findDOMNode doesn't rely on this any more but isMounted does
                    // and isMounted is deprecated anyway so we should be able to kill this.
                    nextEffect.flags &= ~Placement;
                    break;
                case PlacementAndUpdate:
                    // Placement
                    commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                    // inserted, before any life-cycles like componentDidMount gets called.
                    nextEffect.flags &= ~Placement; // Update
                    var _current = nextEffect.alternate;
                    commitWork(_current, nextEffect);
                    break;
                case Hydrating:
                    nextEffect.flags &= ~Hydrating;
                    break;
                case HydratingAndUpdate:
                    nextEffect.flags &= ~Hydrating; // Update
                    var _current2 = nextEffect.alternate;
                    commitWork(_current2, nextEffect);
                    break;
                case Update:
                    var _current3 = nextEffect.alternate;
                    commitWork(_current3, nextEffect);
                    break;
                case Deletion:
                    commitDeletion(root3, nextEffect);
                    break;
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
        }
    }
    function commitLayoutEffects(root3, committedLanes) {
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & (Update | Callback)) {
                var current8 = nextEffect.alternate;
                commitLifeCycles(root3, current8, nextEffect);
            }
            if (flags & Ref) commitAttachRef(nextEffect);
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
        }
    }
    function flushPassiveEffects() {
        // Returns whether passive effects were flushed.
        if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority$1;
            return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
        }
        return false;
    }
    function enqueuePendingPassiveHookEffectMount(fiber, effect) {
        pendingPassiveHookEffectsMount.push(effect, fiber);
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
        pendingPassiveHookEffectsUnmount.push(effect, fiber);
        fiber.flags |= PassiveUnmountPendingDev;
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.flags |= PassiveUnmountPendingDev;
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function invokePassiveEffectCreate(effect) {
        var create = effect.create;
        effect.destroy = create();
    }
    function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) return false;
        var root3 = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = NoLanes;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Cannot flush passive effects while already rendering.");
        isFlushingPassiveEffects = true;
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        var prevInteractions = pushInteractions(root3); // It's important that ALL pending passive effect destroy functions are called
        // before ANY passive effect create functions are called.
        // Otherwise effects in sibling components might interfere with each other.
        // e.g. a destroy function in one component may unintentionally override a ref
        // value set by a create function in another component.
        // Layout effects have the same constraint.
        // First pass: Destroy stale passive effects.
        var unmountEffects = pendingPassiveHookEffectsUnmount;
        pendingPassiveHookEffectsUnmount = [];
        for(var i = 0; i < unmountEffects.length; i += 2){
            var _effect = unmountEffects[i];
            var fiber = unmountEffects[i + 1];
            var destroy = _effect.destroy;
            _effect.destroy = undefined;
            fiber.flags &= ~PassiveUnmountPendingDev;
            var alternate = fiber.alternate;
            if (alternate !== null) alternate.flags &= ~PassiveUnmountPendingDev;
            if (typeof destroy === 'function') {
                setCurrentFiber(fiber);
                invokeGuardedCallback(null, destroy, null);
                if (hasCaughtError()) {
                    if (!(fiber !== null)) throw Error("Should be working on an effect.");
                    var error6 = clearCaughtError();
                    captureCommitPhaseError(fiber, error6);
                }
                resetCurrentFiber();
            }
        } // Second pass: Create new passive effects.
        var mountEffects = pendingPassiveHookEffectsMount;
        pendingPassiveHookEffectsMount = [];
        for(var _i = 0; _i < mountEffects.length; _i += 2){
            var _effect2 = mountEffects[_i];
            var _fiber = mountEffects[_i + 1];
            setCurrentFiber(_fiber);
            invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
            if (hasCaughtError()) {
                if (!(_fiber !== null)) throw Error("Should be working on an effect.");
                var _error4 = clearCaughtError();
                captureCommitPhaseError(_fiber, _error4);
            }
            resetCurrentFiber();
        } // Note: This currently assumes there are no passive effects on the root fiber
        // because the root is not part of its own effect list.
        // This could change in the future.
        var effect = root3.current.firstEffect;
        while(effect !== null){
            var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC
            effect.nextEffect = null;
            if (effect.flags & Deletion) detachFiberAfterEffects(effect);
            effect = nextNextEffect;
        }
        popInteractions(prevInteractions);
        finishPendingInteractions(root3, lanes);
        isFlushingPassiveEffects = false;
        executionContext = prevExecutionContext;
        flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
        // exceeds the limit, we'll fire a warning.
        nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
        return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) legacyErrorBoundariesThatAlreadyFailed = new Set([
            instance
        ]);
        else legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }
    function prepareToThrowUncaughtError(error7) {
        if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error7;
        }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error7) {
        var errorInfo = createCapturedValue(error7, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        enqueueUpdate(rootFiber, update);
        var eventTime = requestEventTime();
        var root3 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
        if (root3 !== null) {
            markRootUpdated(root3, SyncLane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
            schedulePendingInteractions(root3, SyncLane);
        }
    }
    function captureCommitPhaseError(sourceFiber, error7) {
        if (sourceFiber.tag === HostRoot) {
            // Error was thrown at the root. There is no parent, so the root
            // itself should capture it.
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error7);
            return;
        }
        var fiber = sourceFiber.return;
        while(fiber !== null){
            if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error7);
                return;
            } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    var errorInfo = createCapturedValue(error7, sourceFiber);
                    var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                    enqueueUpdate(fiber, update);
                    var eventTime = requestEventTime();
                    var root3 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                    if (root3 !== null) {
                        markRootUpdated(root3, SyncLane, eventTime);
                        ensureRootIsScheduled(root3, eventTime);
                        schedulePendingInteractions(root3, SyncLane);
                    } else {
                        // This component has already been unmounted.
                        // We can't schedule any follow up work for the root because the fiber is already unmounted,
                        // but we can still call the log-only boundary so the error isn't swallowed.
                        //
                        // TODO This is only a temporary bandaid for the old reconciler fork.
                        // We can delete this special case once the new fork is merged.
                        if (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) try {
                            instance.componentDidCatch(error7, errorInfo);
                        } catch (errorToIgnore) {
                        // This is kind of an edge case.
                        }
                    }
                    return;
                }
            }
            fiber = fiber.return;
        }
    }
    function pingSuspendedRoot(root4, wakeable, pingedLanes) {
        var pingCache = root4.pingCache;
        if (pingCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        pingCache.delete(wakeable);
        var eventTime = requestEventTime();
        markRootPinged(root4, pingedLanes);
        if (workInProgressRoot === root4 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            // Received a ping at the same priority level at which we're currently
            // rendering. We might want to restart this render. This should mirror
            // the logic of whether or not a root suspends once it completes.
            // TODO: If we're rendering sync either due to Sync, Batched or expired,
            // we should probably never restart.
            // If we're suspended with delay, or if it's a retry, we'll always suspend
            // so we can always restart.
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) // Restart from the root.
            prepareFreshStack(root4, NoLanes);
            else // Even though we can't restart right now, we might get an
            // opportunity later. So we mark this render as having a ping.
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
        }
        ensureRootIsScheduled(root4, eventTime);
        schedulePendingInteractions(root4, pingedLanes);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
        // The boundary fiber (a Suspense component or SuspenseList component)
        // previously was rendered in its fallback state. One of the promises that
        // suspended it has resolved, which means at least part of the tree was
        // likely unblocked. Try rendering again, at a new expiration time.
        if (retryLane === NoLane) retryLane = requestRetryLane(boundaryFiber);
         // TODO: Special case idle priority?
        var eventTime = requestEventTime();
        var root4 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
        if (root4 !== null) {
            markRootUpdated(root4, retryLane, eventTime);
            ensureRootIsScheduled(root4, eventTime);
            schedulePendingInteractions(root4, retryLane);
        }
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane; // Default
        var retryCache;
        retryCache = boundaryFiber.stateNode;
        if (retryCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        retryCache.delete(wakeable);
        retryTimedOutBoundary(boundaryFiber, retryLane);
    } // Computes the next Just Noticeable Difference (JND) boundary.
    // The theory is that a person can't tell the difference between small differences in time.
    // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
    // difference in the experience. However, waiting for longer might mean that we can avoid
    // showing an intermediate loading state. The longer we have already waited, the harder it
    // is to tell small differences in time. Therefore, the longer we've already waited,
    // the longer we can wait additionally. At some point we have to give up though.
    // We pick a train model where the next boundary commits at a consistent schedule.
    // These particular numbers are vague estimates. We expect to adjust them based on research.
    function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
        }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        if ((executionContext & RenderContext) !== NoContext) // We let the other warning about render phase updates deal with this one.
        return;
        if (!(fiber.mode & (BlockingMode | ConcurrentMode))) return;
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) return;
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
        } else didWarnStateUpdateForNotYetMountedComponent = new Set([
            componentName
        ]);
        var previousFiber = current;
        try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally{
            if (previousFiber) setCurrentFiber(fiber);
            else resetCurrentFiber();
        }
    }
    var didWarnStateUpdateForUnmountedComponent = null;
    function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
        var tag = fiber.tag;
        if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // If there are pending passive effects unmounts for this Fiber,
        // we can assume that they would have prevented this update.
        if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForUnmountedComponent !== null) {
            if (didWarnStateUpdateForUnmountedComponent.has(componentName)) return;
            didWarnStateUpdateForUnmountedComponent.add(componentName);
        } else didWarnStateUpdateForUnmountedComponent = new Set([
            componentName
        ]);
        if (isFlushingPassiveEffects) ;
        else {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function');
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    var beginWork$1;
    var dummyFiber = null;
    beginWork$1 = function(current9, unitOfWork, lanes) {
        // If a component throws an error, we replay it again in a synchronously
        // dispatched event, so that the debugger will treat it as an uncaught
        // error See ReactErrorUtils for more information.
        // Before entering the begin phase, copy the work-in-progress onto a dummy
        // fiber. If beginWork throws, we'll use this to reset the state.
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
            return beginWork(current9, unitOfWork, lanes);
        } catch (originalError) {
            if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') // Don't replay promises. Treat everything else like an error.
            throw originalError;
             // Keep this code in sync with handleError; any changes here must have
            // corresponding changes there.
            resetContextDependencies();
            resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
            // same fiber again.
            // Unwind the failed stack frame
            unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) // Reset the profiler timer.
            startProfilerTimer(unitOfWork);
             // Run beginWork again.
            invokeGuardedCallback(null, beginWork, null, current9, unitOfWork, lanes);
            if (hasCaughtError()) {
                var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
                // Rethrow this error instead of the original one.
                throw replayError;
            } else // This branch is reachable if the render phase is impure.
            throw originalError;
        }
    };
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    didWarnAboutUpdateInRenderForAnotherComponent = new Set();
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentName(fiber.type) || 'Unknown';
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
            case ClassComponent:
                if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                }
                break;
        }
    } // a 'shared' variable that changes when act() opens/closes in tests.
    var IsThisRendererActing = {
        current: false
    };
    function warnIfNotScopedWithMatchingAct(fiber) {
        if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
        if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
    }
    function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
        if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.
    var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
    // scheduler is the actual recommendation. The alternative could be a testing build,
    // a new lib, or whatever; we dunno just yet. This message is for early adopters
    // to get their tests right.
    function warnIfUnmockedScheduler(fiber) {
        if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
            if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error("In Concurrent or Sync modes, the \"scheduler\" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: \njest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\nFor more info, visit https://reactjs.org/link/mock-scheduler");
            }
        }
    }
    function computeThreadID(root4, lane) {
        // Interaction threads are unique per root and expiration time.
        // NOTE: Intentionally unsound cast. All that matters is that it's a number
        // and it represents a batch of work. Could make a helper function instead,
        // but meh this is fine for now.
        return lane * 1000 + root4.interactionThreadID;
    }
    function markSpawnedWork(lane) {
        if (spawnedWorkDuringRender === null) spawnedWorkDuringRender = [
            lane
        ];
        else spawnedWorkDuringRender.push(lane);
    }
    function scheduleInteractions(root4, lane, interactions) {
        if (interactions.size > 0) {
            var pendingInteractionMap = root4.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(lane);
            if (pendingInteractions != null) interactions.forEach(function(interaction) {
                if (!pendingInteractions.has(interaction)) // Update the pending async work count for previously unscheduled interaction.
                interaction.__count++;
                pendingInteractions.add(interaction);
            });
            else {
                pendingInteractionMap.set(lane, new Set(interactions)); // Update the pending async work count for the current interactions.
                interactions.forEach(function(interaction) {
                    interaction.__count++;
                });
            }
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
                var threadID = computeThreadID(root4, lane);
                subscriber.onWorkScheduled(interactions, threadID);
            }
        }
    }
    function schedulePendingInteractions(root4, lane) {
        scheduleInteractions(root4, lane, tracing.__interactionsRef.current);
    }
    function startWorkOnPendingInteractions(root4, lanes) {
        // we can accurately attribute time spent working on it, And so that cascading
        // work triggered during the render phase will be associated with it.
        var interactions = new Set();
        root4.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
            if (includesSomeLane(lanes, scheduledLane)) scheduledInteractions.forEach(function(interaction) {
                return interactions.add(interaction);
            });
        }); // Store the current set of interactions on the FiberRoot for a few reasons:
        // We can re-use it in hot functions like performConcurrentWorkOnRoot()
        // without having to recalculate it. We will also use it in commitWork() to
        // pass to any Profiler onRender() hooks. This also provides DevTools with a
        // way to access it when the onCommitRoot() hook is called.
        root4.memoizedInteractions = interactions;
        if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
                var threadID = computeThreadID(root4, lanes);
                try {
                    subscriber.onWorkStarted(interactions, threadID);
                } catch (error7) {
                    // If the subscriber throws, rethrow it in a separate task
                    scheduleCallback(ImmediatePriority$1, function() {
                        throw error7;
                    });
                }
            }
        }
    }
    function finishPendingInteractions(root4, committedLanes) {
        var remainingLanesAfterCommit = root4.pendingLanes;
        var subscriber;
        try {
            subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null && root4.memoizedInteractions.size > 0) {
                // FIXME: More than one lane can finish in a single commit.
                var threadID = computeThreadID(root4, committedLanes);
                subscriber.onWorkStopped(root4.memoizedInteractions, threadID);
            }
        } catch (error7) {
            // If the subscriber throws, rethrow it in a separate task
            scheduleCallback(ImmediatePriority$1, function() {
                throw error7;
            });
        } finally{
            // Clear completed interactions from the pending Map.
            // Unless the render was suspended or cascading work was scheduled,
            // In which case– leave pending interactions until the subsequent render.
            var pendingInteractionMap = root4.pendingInteractionMap;
            pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                // Only decrement the pending interaction count if we're done.
                // If there's still work at the current priority,
                // That indicates that we are waiting for suspense data.
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                    pendingInteractionMap.delete(lane);
                    scheduledInteractions.forEach(function(interaction) {
                        interaction.__count--;
                        if (subscriber !== null && interaction.__count === 0) try {
                            subscriber.onInteractionScheduledWorkCompleted(interaction);
                        } catch (error7) {
                            // If the subscriber throws, rethrow it in a separate task
                            scheduleCallback(ImmediatePriority$1, function() {
                                throw error7;
                            });
                        }
                    });
                }
            });
        }
    } // `act` testing API
    function shouldForceFlushFallbacksInDEV() {
        // Never force flush in production. This function should get stripped out.
        return actingUpdatesScopeDepth > 0;
    }
    // so we can tell if any async act() calls try to run in parallel.
    var actingUpdatesScopeDepth = 0;
    function detachFiberAfterEffects(fiber) {
        fiber.sibling = null;
        fiber.stateNode = null;
    }
    var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.
    var failedBoundaries = null;
    var setRefreshHandler = function(handler) {
        resolveFamily = handler;
    };
    function resolveFunctionForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) return type;
         // Use the latest known implementation.
        return family.current;
    }
    function resolveClassForHotReloading(type) {
        // No implementation differences.
        return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) {
            // Check if we're dealing with a real forwardRef. Don't want to crash early.
            if (type !== null && type !== undefined && typeof type.render === 'function') {
                // ForwardRef is special because its resolved .type is an object,
                // but it's possible that we only have its inner render function in the map.
                // If that inner render function is different, we'll build a new forwardRef type.
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                    var syntheticType = {
                        $$typeof: REACT_FORWARD_REF_TYPE,
                        render: currentRender
                    };
                    if (type.displayName !== undefined) syntheticType.displayName = type.displayName;
                    return syntheticType;
                }
            }
            return type;
        } // Use the latest known implementation.
        return family.current;
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return false;
        var prevType = fiber.elementType;
        var nextType = element.type; // If we got here, we know types aren't === equal.
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;
        switch(fiber.tag){
            case ClassComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                break;
            case FunctionComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) // We don't know the inner type yet.
                // We're going to assume that the lazy inner type is stable,
                // and so it is sufficient to avoid reconciling it away.
                // We're not going to unwrap or actually use the new lazy type.
                needsCompareFamilies = true;
                break;
            case ForwardRef:
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            case MemoComponent:
            case SimpleMemoComponent:
                if ($$typeofNextType === REACT_MEMO_TYPE) // TODO: if it was but can no longer be simple,
                // we shouldn't set this.
                needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            default:
                return false;
        } // Check if both types have a family and it's the same one.
        if (needsCompareFamilies) {
            // Note: memo() and forwardRef() we'll compare outer rather than inner type.
            // This means both of them need to be registered to preserve state.
            // If we unwrapped and compared the inner types for wrappers instead,
            // then we would risk falsely saying two separate memo(Foo)
            // calls are equivalent because they wrap the same Foo function.
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) return true;
        }
        return false;
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        if (typeof WeakSet !== 'function') return;
        if (failedBoundaries === null) failedBoundaries = new WeakSet();
        failedBoundaries.add(fiber);
    }
    var scheduleRefresh = function(root4, update) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root4.current, updatedFamilies, staleFamilies);
        });
    };
    var scheduleRoot = function(root4, element) {
        if (root4.context !== emptyContextObject) // Super edge case: root has a legacy _renderSubtree context
        // but we don't know the parentComponent so we can't pass it.
        // Just ignore. We'll delete this with _renderSubtree code path later.
        return;
        flushPassiveEffects();
        flushSync(function() {
            updateContainer(element, root4, null, null);
        });
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        if (resolveFamily === null) throw new Error('Expected resolveFamily to be set during hot reload.');
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
                if (staleFamilies.has(family)) needsRemount = true;
                else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) needsRemount = true;
                    else needsRender = true;
                }
            }
        }
        if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) needsRemount = true;
        }
        if (needsRemount) fiber._debugNeedsRemount = true;
        if (needsRemount || needsRender) scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        if (child !== null && !needsRemount) scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        if (sibling !== null) scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
    var findHostInstancesForRefresh = function(root4, families) {
        var hostInstances = new Set();
        var types = new Set(families.map(function(family) {
            return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root4.current, types, hostInstances);
        return hostInstances;
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        var didMatch = false;
        if (candidateType !== null) {
            if (types.has(candidateType)) didMatch = true;
        }
        if (didMatch) // We have a match. This only drills down to the closest host components.
        // There's no need to search deeper because for the purpose of giving
        // visual feedback, "flashing" outermost parent rectangles is sufficient.
        findHostInstancesForFiberShallowly(fiber, hostInstances);
        else // If there's no match, maybe there will be one further down in the child tree.
        if (child !== null) findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
        if (sibling !== null) findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) return;
         // If we didn't find any host children, fallback to closest host parent.
        var node = fiber;
        while(true){
            switch(node.tag){
                case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
            }
            if (node.return === null) throw new Error('Expected to reach root first.');
            node = node.return;
        }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        var node = fiber;
        var foundHostInstances = false;
        while(true){
            if (node.tag === HostComponent) {
                // We got a match.
                foundHostInstances = true;
                hostInstances.add(node.stateNode); // There may still be more, so keep searching.
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === fiber) return foundHostInstances;
            while(node.sibling === null){
                if (node.return === null || node.return === fiber) return foundHostInstances;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return false;
    }
    var hasBadMapPolyfill;
    hasBadMapPolyfill = false;
    try {
        var nonExtensibleObject = Object.preventExtensions({
        });
        /* eslint-disable no-new */ new Map([
            [
                nonExtensibleObject,
                null
            ]
        ]);
        new Set([
            nonExtensibleObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
    }
    var debugCounter = 1;
    function FiberNode(tag, pendingProps, key, mode) {
        // Instance
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null; // Fiber
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode; // Effects
        this.flags = NoFlags;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        // Note: The following is done to avoid a v8 performance cliff.
        //
        // Initializing the fields below to smis and later updating them with
        // double values will cause Fibers to end up having separate shapes.
        // This behavior/bug has something to do with Object.preventExtension().
        // Fortunately this only impacts DEV builds.
        // Unfortunately it makes React unusably slow for some applications.
        // To work around this, initialize the fields below with doubles.
        //
        // Learn more about this here:
        // https://github.com/facebook/react/issues/14365
        // https://bugs.chromium.org/p/v8/issues/detail?id=8538
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
        // This won't trigger the performance cliff mentioned above,
        // and it simplifies other profiler code (including DevTools).
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
        // This isn't directly used but is handy for debugging internals:
        this._debugID = debugCounter++;
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') Object.preventExtensions(this);
    } // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.
    var createFiber = function(tag, pendingProps, key, mode) {
        // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
        return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
        return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
    }
    function resolveLazyComponentTag(Component) {
        if (typeof Component === 'function') return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
        else if (Component !== undefined && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) return ForwardRef;
            if ($$typeof === REACT_MEMO_TYPE) return MemoComponent;
        }
        return IndeterminateComponent;
    } // This is used to create an alternate fiber to do work on.
    function createWorkInProgress(current9, pendingProps) {
        var workInProgress1 = current9.alternate;
        if (workInProgress1 === null) {
            // We use a double buffering pooling technique because we know that we'll
            // only ever need at most two versions of a tree. We pool the "other" unused
            // node that we're free to reuse. This is lazily created to avoid allocating
            // extra objects for things that are never updated. It also allow us to
            // reclaim the extra memory if needed.
            workInProgress1 = createFiber(current9.tag, pendingProps, current9.key, current9.mode);
            workInProgress1.elementType = current9.elementType;
            workInProgress1.type = current9.type;
            workInProgress1.stateNode = current9.stateNode;
            // DEV-only fields
            workInProgress1._debugID = current9._debugID;
            workInProgress1._debugSource = current9._debugSource;
            workInProgress1._debugOwner = current9._debugOwner;
            workInProgress1._debugHookTypes = current9._debugHookTypes;
            workInProgress1.alternate = current9;
            current9.alternate = workInProgress1;
        } else {
            workInProgress1.pendingProps = pendingProps; // Needed because Blocks store data on type.
            workInProgress1.type = current9.type; // We already have an alternate.
            // Reset the effect tag.
            workInProgress1.flags = NoFlags; // The effect list is no longer valid.
            workInProgress1.nextEffect = null;
            workInProgress1.firstEffect = null;
            workInProgress1.lastEffect = null;
            // We intentionally reset, rather than copy, actualDuration & actualStartTime.
            // This prevents time from endlessly accumulating in new commits.
            // This has the downside of resetting values for different priority renders,
            // But works for yielding (the common case) and should support resuming.
            workInProgress1.actualDuration = 0;
            workInProgress1.actualStartTime = -1;
        }
        workInProgress1.childLanes = current9.childLanes;
        workInProgress1.lanes = current9.lanes;
        workInProgress1.child = current9.child;
        workInProgress1.memoizedProps = current9.memoizedProps;
        workInProgress1.memoizedState = current9.memoizedState;
        workInProgress1.updateQueue = current9.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
        // it cannot be shared with the current fiber.
        var currentDependencies = current9.dependencies;
        workInProgress1.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
        }; // These will be overridden during the parent's reconciliation
        workInProgress1.sibling = current9.sibling;
        workInProgress1.index = current9.index;
        workInProgress1.ref = current9.ref;
        workInProgress1.selfBaseDuration = current9.selfBaseDuration;
        workInProgress1.treeBaseDuration = current9.treeBaseDuration;
        workInProgress1._debugNeedsRemount = current9._debugNeedsRemount;
        switch(workInProgress1.tag){
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
                workInProgress1.type = resolveFunctionForHotReloading(current9.type);
                break;
            case ClassComponent:
                workInProgress1.type = resolveClassForHotReloading(current9.type);
                break;
            case ForwardRef:
                workInProgress1.type = resolveForwardRefForHotReloading(current9.type);
                break;
        }
        return workInProgress1;
    } // Used to reuse a Fiber for a second pass.
    function resetWorkInProgress(workInProgress1, renderLanes1) {
        // This resets the Fiber to what createFiber or createWorkInProgress would
        // have set the values to before during the first pass. Ideally this wouldn't
        // be necessary but unfortunately many code paths reads from the workInProgress
        // when they should be reading from current and writing to workInProgress.
        // We assume pendingProps, index, key, ref, return are still untouched to
        // avoid doing another reconciliation.
        // Reset the effect tag but keep any Placement tags, since that's something
        // that child fiber is setting, not the reconciliation.
        workInProgress1.flags &= Placement; // The effect list is no longer valid.
        workInProgress1.nextEffect = null;
        workInProgress1.firstEffect = null;
        workInProgress1.lastEffect = null;
        var current9 = workInProgress1.alternate;
        if (current9 === null) {
            // Reset to createFiber's initial values.
            workInProgress1.childLanes = NoLanes;
            workInProgress1.lanes = renderLanes1;
            workInProgress1.child = null;
            workInProgress1.memoizedProps = null;
            workInProgress1.memoizedState = null;
            workInProgress1.updateQueue = null;
            workInProgress1.dependencies = null;
            workInProgress1.stateNode = null;
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress1.selfBaseDuration = 0;
            workInProgress1.treeBaseDuration = 0;
        } else {
            // Reset to the cloned values that createWorkInProgress would've.
            workInProgress1.childLanes = current9.childLanes;
            workInProgress1.lanes = current9.lanes;
            workInProgress1.child = current9.child;
            workInProgress1.memoizedProps = current9.memoizedProps;
            workInProgress1.memoizedState = current9.memoizedState;
            workInProgress1.updateQueue = current9.updateQueue; // Needed because Blocks store data on type.
            workInProgress1.type = current9.type; // Clone the dependencies object. This is mutated during the render phase, so
            // it cannot be shared with the current fiber.
            var currentDependencies = current9.dependencies;
            workInProgress1.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
            };
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress1.selfBaseDuration = current9.selfBaseDuration;
            workInProgress1.treeBaseDuration = current9.treeBaseDuration;
        }
        return workInProgress1;
    }
    function createHostRootFiber(tag) {
        var mode;
        if (tag === ConcurrentRoot) mode = ConcurrentMode | BlockingMode | StrictMode;
        else if (tag === BlockingRoot) mode = BlockingMode | StrictMode;
        else mode = NoMode;
        if (isDevToolsPresent) // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
        return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
        var resolvedType = type;
        if (typeof type === 'function') {
            if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                resolvedType = resolveClassForHotReloading(resolvedType);
            } else resolvedType = resolveFunctionForHotReloading(resolvedType);
        } else if (typeof type === 'string') fiberTag = HostComponent;
        else getTag: switch(type){
            case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_DEBUG_TRACING_MODE_TYPE:
                fiberTag = Mode;
                mode |= DebugTracingMode;
                break;
            case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictMode;
                break;
            case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
            case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            case REACT_LEGACY_HIDDEN_TYPE:
                return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
            case REACT_SCOPE_TYPE:
            // eslint-disable-next-line no-fallthrough
            default:
                if (typeof type === 'object' && type !== null) switch(type.$$typeof){
                    case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                    case REACT_CONTEXT_TYPE:
                        // This is a consumer
                        fiberTag = ContextConsumer;
                        break getTag;
                    case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        break getTag;
                    case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                    case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                }
                var info = '';
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                var ownerName = owner ? getComponentName(owner.type) : null;
                if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
                throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        fiber._debugOwner = owner;
        return fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        owner = element._owner;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
        return fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        if (typeof pendingProps.id !== 'string') error('Profiler must specify an "id" as a prop');
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.type = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
        };
        return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.
        fiber.type = REACT_SUSPENSE_TYPE;
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.
        fiber.type = REACT_SUSPENSE_LIST_TYPE;
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode); // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.
        fiber.type = REACT_OFFSCREEN_TYPE;
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
        var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode); // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.
        fiber.type = REACT_LEGACY_HIDDEN_TYPE;
        fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.
        fiber.elementType = 'DELETED';
        fiber.type = 'DELETED';
        return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
        };
        return fiber;
    } // Used for stashing WIP properties to replay failed work in DEV.
    function assignFiberPropertiesInDEV(target, source) {
        if (target === null) // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoMode);
         // This is intentionally written as a list of all properties.
        // We tried to use Object.assign() instead but this is called in
        // the hottest path, and Object.assign() was too slow:
        // https://github.com/facebook/react/issues/12502
        // This code is DEV-only so size is not a concern.
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.nextEffect = source.nextEffect;
        target.firstEffect = source.firstEffect;
        target.lastEffect = source.lastEffect;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
        target._debugID = source._debugID;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.hydrate = hydrate;
        this.callbackNode = null;
        this.callbackPriority = NoLanePriority;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.mutableSourceEagerHydrationData = null;
        this.interactionThreadID = tracing.unstable_getThreadID();
        this.memoizedInteractions = new Set();
        this.pendingInteractionMap = new Map();
        switch(tag){
            case BlockingRoot:
                this._debugRootType = 'createBlockingRoot()';
                break;
            case ConcurrentRoot:
                this._debugRootType = 'createRoot()';
                break;
            case LegacyRoot:
                this._debugRootType = 'createLegacyRoot()';
                break;
        }
    }
    function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
        var root4 = new FiberRootNode(containerInfo, tag, hydrate);
        // stateNode is any.
        var uninitializedFiber = createHostRootFiber(tag);
        root4.current = uninitializedFiber;
        uninitializedFiber.stateNode = root4;
        initializeUpdateQueue(uninitializedFiber);
        return root4;
    }
    // This ensures that the version used for server rendering matches the one
    // that is eventually read during hydration.
    // If they don't match there's a potential tear and a full deopt render is required.
    function registerMutableSourceForHydration(root4, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
        // Retaining it forever may interfere with GC.
        if (root4.mutableSourceEagerHydrationData == null) root4.mutableSourceEagerHydrationData = [
            mutableSource,
            version
        ];
        else root4.mutableSourceEagerHydrationData.push(mutableSource, version);
    }
    function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : '' + key,
            children: children,
            containerInfo: containerInfo,
            implementation: implementation
        };
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    didWarnAboutNestedUpdates = false;
    didWarnAboutFindNodeInStrictMode = {
    };
    function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject;
        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) return processChildContext(fiber, Component, parentContext);
        }
        return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
        var fiber = get(component);
        if (fiber === undefined) {
            if (typeof component.render === 'function') throw Error("Unable to find node on an unmounted component.");
            else throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.mode & StrictMode) {
            var componentName = getComponentName(fiber.type) || 'Component';
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    else error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } finally{
                    // Ideally this should reset to previous but this shouldn't be called in
                    // render and there's another warning for that anyway.
                    if (previousFiber) setCurrentFiber(previousFiber);
                    else resetCurrentFiber();
                }
            }
        }
        return hostFiber.stateNode;
    }
    function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
        return createFiberRoot(containerInfo, tag, hydrate);
    }
    function updateContainer(element, container, parentComponent, callback) {
        onScheduleRoot(container, element);
        var current$1 = container.current;
        var eventTime = requestEventTime();
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) {
            warnIfUnmockedScheduler(current$1);
            warnIfNotScopedWithMatchingAct(current$1);
        }
        var lane = requestUpdateLane(current$1);
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) container.context = context;
        else container.pendingContext = context;
        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || 'Unknown');
        }
        var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
            if (typeof callback !== 'function') error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            update.callback = callback;
        }
        enqueueUpdate(current$1, update);
        scheduleUpdateOnFiber(current$1, lane, eventTime);
        return lane;
    }
    function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) return null;
        switch(containerFiber.child.tag){
            case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
            default:
                return containerFiber.child.stateNode;
        }
    }
    function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
    } // Increases the priority of thennables when they resolve within this boundary.
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) markRetryLaneImpl(alternate, retryLane);
    }
    function attemptUserBlockingHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var eventTime = requestEventTime();
        var lane = InputDiscreteHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var eventTime = requestEventTime();
        var lane = SelectiveHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority other than synchronously flush it.
        return;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function runWithPriority$2(priority, fn) {
        setCurrentUpdateLanePriority(priority);
        return fn();
    }
    function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.tag === FundamentalComponent) return hostFiber.stateNode.instance;
        return hostFiber.stateNode;
    }
    var shouldSuspendImpl = function(fiber) {
        return false;
    };
    function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideHookStateDeletePath = null;
    var overrideHookStateRenamePath = null;
    var overrideProps = null;
    var overridePropsDeletePath = null;
    var overridePropsRenamePath = null;
    var scheduleUpdate = null;
    var setSuspenseHandler = null;
    var copyWithDeleteImpl = function(obj, path, index1) {
        var key = path[index1];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj);
        if (index1 + 1 === path.length) {
            if (Array.isArray(updated)) updated.splice(key, 1);
            else delete updated[key];
            return updated;
        } // $FlowFixMe number or string is fine here
        updated[key] = copyWithDeleteImpl(obj[key], path, index1 + 1);
        return updated;
    };
    var copyWithDelete = function(obj, path) {
        return copyWithDeleteImpl(obj, path, 0);
    };
    var copyWithRenameImpl = function(obj, oldPath, newPath, index1) {
        var oldKey = oldPath[index1];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj);
        if (index1 + 1 === oldPath.length) {
            var newKey = newPath[index1]; // $FlowFixMe number or string is fine here
            updated[newKey] = updated[oldKey];
            if (Array.isArray(updated)) updated.splice(oldKey, 1);
            else delete updated[oldKey];
        } else // $FlowFixMe number or string is fine here
        updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index1 + 1);
        return updated;
    };
    var copyWithRename = function(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
            warn('copyWithRename() expects paths of the same length');
            return;
        } else {
            for(var i = 0; i < newPath.length - 1; i++)if (oldPath[i] !== newPath[i]) {
                warn('copyWithRename() expects paths to be the same except for the deepest key');
                return;
            }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
    };
    var copyWithSetImpl = function(obj, path, index1, value) {
        if (index1 >= path.length) return value;
        var key = path[index1];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj); // $FlowFixMe number or string is fine here
        updated[key] = copyWithSetImpl(obj[key], path, index1 + 1, value);
        return updated;
    };
    var copyWithSet = function(obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
    };
    var findHook = function(fiber, id) {
        // For now, the "id" of stateful hooks is just the stateful hook index.
        // This may change in the future with e.g. nested hooks.
        var currentHook1 = fiber.memoizedState;
        while(currentHook1 !== null && id > 0){
            currentHook1 = currentHook1.next;
            id--;
        }
        return currentHook1;
    }; // Support DevTools editable values for useState and useReducer.
    overrideHookState = function(fiber, id, path, value) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateDeletePath = function(fiber, id, path) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    }; // Support DevTools props for function components, forwardRef, memo, host components, etc.
    overrideProps = function(fiber, path, value) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    overridePropsDeletePath = function(fiber, path) {
        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    overridePropsRenamePath = function(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    scheduleUpdate = function(fiber) {
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
    };
    function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance) {
        return null;
    }
    function getCurrentFiberForDevTools() {
        return current;
    }
    function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher1 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState: overrideHookState,
            overrideHookStateDeletePath: overrideHookStateDeletePath,
            overrideHookStateRenamePath: overrideHookStateRenamePath,
            overrideProps: overrideProps,
            overridePropsDeletePath: overridePropsDeletePath,
            overridePropsRenamePath: overridePropsRenamePath,
            setSuspenseHandler: setSuspenseHandler,
            scheduleUpdate: scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher1,
            findHostInstanceByFiber: findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh: findHostInstancesForRefresh,
            scheduleRefresh: scheduleRefresh,
            scheduleRoot: scheduleRoot,
            setRefreshHandler: setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools
        });
    }
    function ReactDOMRoot(container, options1) {
        this._internalRoot = createRootImpl(container, ConcurrentRoot, options1);
    }
    function ReactDOMBlockingRoot(container, tag, options1) {
        this._internalRoot = createRootImpl(container, tag, options1);
    }
    ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
        var root4 = this._internalRoot;
        if (typeof arguments[1] === 'function') error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var container = root4.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root4.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
            }
        }
        updateContainer(children, root4, null, null);
    };
    ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
        if (typeof arguments[0] === 'function') error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var root4 = this._internalRoot;
        var container = root4.containerInfo;
        updateContainer(null, root4, null, function() {
            unmarkContainerAsRoot(container);
        });
    };
    function createRootImpl(container, tag, options1) {
        // Tag is either LegacyRoot or Concurrent Root
        var hydrate = options1 != null && options1.hydrate === true;
        var hydrationCallbacks = options1 != null && options1.hydrationOptions || null;
        var mutableSources = options1 != null && options1.hydrationOptions != null && options1.hydrationOptions.mutableSources || null;
        var root4 = createContainer(container, tag, hydrate);
        markContainerAsRoot(root4.current, container);
        var containerNodeType = container.nodeType;
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        if (mutableSources) for(var i = 0; i < mutableSources.length; i++){
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root4, mutableSource);
        }
        return root4;
    }
    function createLegacyRoot(container, options1) {
        return new ReactDOMBlockingRoot(container, LegacyRoot, options1);
    }
    function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    var warnedAboutHydrateAPI = false;
    topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
            }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    function getReactRootElementInContainer(container) {
        if (!container) return null;
        if (container.nodeType === DOCUMENT_NODE) return container.documentElement;
        else return container.firstChild;
    }
    function shouldHydrateDueToLegacyHeuristic(container) {
        var rootElement = getReactRootElementInContainer(container);
        return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
    }
    function legacyCreateRootFromDOMContainer(container, forceHydrate) {
        var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.
        if (!shouldHydrate) {
            var warned = false;
            var rootSibling;
            while(rootSibling = container.lastChild){
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                }
                container.removeChild(rootSibling);
            }
        }
        if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
            warnedAboutHydrateAPI = true;
            warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
        }
        return createLegacyRoot(container, shouldHydrate ? {
            hydrate: true
        } : undefined);
    }
    function warnOnInvalidCallback$1(callback, callerName) {
        if (callback !== null && typeof callback !== 'function') error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
        // member of intersection type." Whyyyyyy.
        var root4 = container._reactRootContainer;
        var fiberRoot;
        if (!root4) {
            // Initial mount
            root4 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            fiberRoot = root4._internalRoot;
            if (typeof callback === 'function') {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(fiberRoot);
                    originalCallback.call(instance);
                };
            } // Initial mount should not be batched.
            unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
            });
        } else {
            fiberRoot = root4._internalRoot;
            if (typeof callback === 'function') {
                var _originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(fiberRoot);
                    _originalCallback.call(instance);
                };
            } // Update
            updateContainer(children, fiberRoot, parentComponent, callback);
        }
        return getPublicRootInstance(fiberRoot);
    }
    function findDOMNode(componentOrElement) {
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || 'A component');
            owner.stateNode._warnedAboutRefsInRender = true;
        }
        if (componentOrElement == null) return null;
        if (componentOrElement.nodeType === ELEMENT_NODE) return componentOrElement;
        return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
    }
    function hydrate(element, container, callback) {
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render(element, container, callback) {
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        if (!isValidContainer(containerNode)) throw Error("Target container is not a DOM element.");
        if (!(parentComponent != null && has(parentComponent))) throw Error("parentComponent must be a valid React Component");
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    function unmountComponentAtNode(container) {
        if (!isValidContainer(container)) throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        if (container._reactRootContainer) {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                    // $FlowFixMe This should probably use `delete container._reactRootContainer`
                    container._reactRootContainer = null;
                    unmarkContainerAsRoot(container);
                });
            }); // If you call unmountComponentAtNode twice in quick succession, you'll
            // get `true` twice. That's probably fine?
            return true;
        } else {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            return false;
        }
    }
    setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    setAttemptHydrationAtPriority(runWithPriority$2);
    var didWarnAboutUnstableCreatePortal = false;
    if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
    function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
         // TODO: pass ReactDOM portal implementation as third argument
        // $FlowFixMe The Flow type is opaque but there's no way to actually create it.
        return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    function unstable_createPortal(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!didWarnAboutUnstableCreatePortal) {
            didWarnAboutUnstableCreatePortal = true;
            warn("The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the \"unstable_\" prefix.");
        }
        return createPortal$1(children, container, key);
    }
    var Internals = {
        // Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
        // This is an array for better minification.
        Events: [
            getInstanceFromNode,
            getNodeFromInstance,
            getFiberCurrentPropsFromNode,
            enqueueStateRestore,
            restoreStateIfNeeded,
            flushPassiveEffects,
            IsThisRendererActing
        ]
    };
    var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: 'react-dom'
    });
    if (!foundDevTools && canUseDOM && window.top === window.self) // If we're in Chrome or Firefox, provide a download link if not installed.
    {
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
            var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.
            if (/^(https?|file):$/.test(protocol)) // eslint-disable-next-line react-internal/no-production-logging
            console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === 'file:' ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ''), 'font-weight:bold');
        }
    }
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    exports.createPortal = createPortal$1;
    exports.findDOMNode = findDOMNode;
    exports.flushSync = flushSync;
    exports.hydrate = hydrate;
    exports.render = render;
    exports.unmountComponentAtNode = unmountComponentAtNode;
    exports.unstable_batchedUpdates = batchedUpdates$1;
    exports.unstable_createPortal = unstable_createPortal;
    exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    exports.version = ReactVersion;
})();

},{"react":"6TuXu","object-assign":"jzTFF","scheduler":"lS3J3","scheduler/tracing":"aEthe"}],"lS3J3":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler.development.js');

},{"./cjs/scheduler.development.js":"9ljDM"}],"9ljDM":[function(require,module,exports) {
/** @license React v0.20.1
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var enableSchedulerDebugging = false;
    var enableProfiling = true;
    var requestHostCallback;
    var requestHostTimeout;
    var cancelHostTimeout;
    var requestPaint;
    var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
    if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
            return localPerformance.now();
        };
    } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
            return localDate.now() - initialTime;
        };
    }
    if (// implementation using setTimeout.
    typeof window === 'undefined' || typeof MessageChannel !== 'function') {
        // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
        // fallback to a naive implementation.
        var _callback = null;
        var _timeoutID = null;
        var _flushCallback = function() {
            if (_callback !== null) try {
                var currentTime = exports.unstable_now();
                var hasRemainingTime = true;
                _callback(hasRemainingTime, currentTime);
                _callback = null;
            } catch (e) {
                setTimeout(_flushCallback, 0);
                throw e;
            }
        };
        requestHostCallback = function(cb) {
            if (_callback !== null) // Protect against re-entrancy.
            setTimeout(requestHostCallback, 0, cb);
            else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
            }
        };
        requestHostTimeout = function(cb, ms) {
            _timeoutID = setTimeout(cb, ms);
        };
        cancelHostTimeout = function() {
            clearTimeout(_timeoutID);
        };
        exports.unstable_shouldYield = function() {
            return false;
        };
        requestPaint = exports.unstable_forceFrameRate = function() {
        };
    } else {
        // Capture local references to native APIs, in case a polyfill overrides them.
        var _setTimeout = window.setTimeout;
        var _clearTimeout = window.clearTimeout;
        if (typeof console !== 'undefined') {
            // TODO: Scheduler no longer requires these methods to be polyfilled. But
            // maybe we want to continue warning if they don't exist, to preserve the
            // option to rely on it in the future?
            var requestAnimationFrame = window.requestAnimationFrame;
            var cancelAnimationFrame = window.cancelAnimationFrame;
            if (typeof requestAnimationFrame !== 'function') // Using console['error'] to evade Babel and ESLint
            console['error']("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            if (typeof cancelAnimationFrame !== 'function') // Using console['error'] to evade Babel and ESLint
            console['error']("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
        // thread, like user events. By default, it yields multiple times per frame.
        // It does not attempt to align with frame boundaries, since most tasks don't
        // need to be frame aligned; for those that do, use requestAnimationFrame.
        var yieldInterval = 5;
        var deadline = 0; // TODO: Make this configurable
        // `isInputPending` is not available. Since we have no way of knowing if
        // there's pending input, always yield at the end of the frame.
        exports.unstable_shouldYield = function() {
            return exports.unstable_now() >= deadline;
        }; // Since we yield every frame regardless, `requestPaint` has no effect.
        requestPaint = function() {
        };
        exports.unstable_forceFrameRate = function(fps) {
            if (fps < 0 || fps > 125) {
                // Using console['error'] to evade Babel and ESLint
                console['error']("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
            }
            if (fps > 0) yieldInterval = Math.floor(1000 / fps);
            else // reset the framerate
            yieldInterval = 5;
        };
        var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
                // cycle. This means there's always time remaining at the beginning of
                // the message event.
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                    var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                    if (!hasMoreWork) {
                        isMessageLoopRunning = false;
                        scheduledHostCallback = null;
                    } else // If there's more work, schedule the next message event at the end
                    // of the preceding one.
                    port.postMessage(null);
                } catch (error) {
                    // If a scheduler task throws, exit the current browser task so the
                    // error can be observed.
                    port.postMessage(null);
                    throw error;
                }
            } else isMessageLoopRunning = false;
             // Yielding to the browser will give it a chance to paint, so we can
        };
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        requestHostCallback = function(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
            }
        };
        requestHostTimeout = function(callback, ms) {
            taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
            }, ms);
        };
        cancelHostTimeout = function() {
            _clearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
        };
    }
    function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
    }
    function peek(heap) {
        var first = heap[0];
        return first === undefined ? null : first;
    }
    function pop(heap) {
        var first = heap[0];
        if (first !== undefined) {
            var last = heap.pop();
            if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
            }
            return first;
        } else return null;
    }
    function siftUp(heap, node, i) {
        var index = i;
        while(true){
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (parent !== undefined && compare(parent, node) > 0) {
                // The parent is larger. Swap positions.
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
            } else // The parent is smaller. Exit.
            return;
        }
    }
    function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        while(index < length){
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.
            if (left !== undefined && compare(left, node) < 0) {
                if (right !== undefined && compare(right, left) < 0) {
                    heap[index] = right;
                    heap[rightIndex] = node;
                    index = rightIndex;
                } else {
                    heap[index] = left;
                    heap[leftIndex] = node;
                    index = leftIndex;
                }
            } else if (right !== undefined && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
            } else // Neither child is smaller. Exit.
            return;
        }
    }
    function compare(a, b) {
        // Compare sort index first, then task id.
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
    }
    // TODO: Use symbols?
    var NoPriority = 0;
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;
    var runIdCounter = 0;
    var mainThreadIdCounter = 0;
    var profilingStateSize = 4;
    var sharedProfilingBuffer = typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9
    ;
    var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks
    var PRIORITY = 0;
    var CURRENT_TASK_ID = 1;
    var CURRENT_RUN_ID = 2;
    var QUEUE_SIZE = 3;
    profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue
    // array might include canceled tasks.
    profilingState[QUEUE_SIZE] = 0;
    profilingState[CURRENT_TASK_ID] = 0;
    var INITIAL_EVENT_LOG_SIZE = 131072;
    var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes
    var eventLogSize = 0;
    var eventLogBuffer = null;
    var eventLog = null;
    var eventLogIndex = 0;
    var TaskStartEvent = 1;
    var TaskCompleteEvent = 2;
    var TaskErrorEvent = 3;
    var TaskCancelEvent = 4;
    var TaskRunEvent = 5;
    var TaskYieldEvent = 6;
    var SchedulerSuspendEvent = 7;
    var SchedulerResumeEvent = 8;
    function logEvent(entries) {
        if (eventLog !== null) {
            var offset = eventLogIndex;
            eventLogIndex += entries.length;
            if (eventLogIndex + 1 > eventLogSize) {
                eventLogSize *= 2;
                if (eventLogSize > MAX_EVENT_LOG_SIZE) {
                    // Using console['error'] to evade Babel and ESLint
                    console['error']("Scheduler Profiling: Event log exceeded maximum size. Don't forget to call `stopLoggingProfilingEvents()`.");
                    stopLoggingProfilingEvents();
                    return;
                }
                var newEventLog = new Int32Array(eventLogSize * 4);
                newEventLog.set(eventLog);
                eventLogBuffer = newEventLog.buffer;
                eventLog = newEventLog;
            }
            eventLog.set(entries, offset);
        }
    }
    function startLoggingProfilingEvents() {
        eventLogSize = INITIAL_EVENT_LOG_SIZE;
        eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
        eventLog = new Int32Array(eventLogBuffer);
        eventLogIndex = 0;
    }
    function stopLoggingProfilingEvents() {
        var buffer = eventLogBuffer;
        eventLogSize = 0;
        eventLogBuffer = null;
        eventLog = null;
        eventLogIndex = 0;
        return buffer;
    }
    function markTaskStart(task, ms) {
        profilingState[QUEUE_SIZE]++;
        if (eventLog !== null) // performance.now returns a float, representing milliseconds. When the
        // event is logged, it's coerced to an int. Convert to microseconds to
        // maintain extra degrees of precision.
        logEvent([
            TaskStartEvent,
            ms * 1000,
            task.id,
            task.priorityLevel
        ]);
    }
    function markTaskCompleted(task, ms) {
        profilingState[PRIORITY] = NoPriority;
        profilingState[CURRENT_TASK_ID] = 0;
        profilingState[QUEUE_SIZE]--;
        if (eventLog !== null) logEvent([
            TaskCompleteEvent,
            ms * 1000,
            task.id
        ]);
    }
    function markTaskCanceled(task, ms) {
        profilingState[QUEUE_SIZE]--;
        if (eventLog !== null) logEvent([
            TaskCancelEvent,
            ms * 1000,
            task.id
        ]);
    }
    function markTaskErrored(task, ms) {
        profilingState[PRIORITY] = NoPriority;
        profilingState[CURRENT_TASK_ID] = 0;
        profilingState[QUEUE_SIZE]--;
        if (eventLog !== null) logEvent([
            TaskErrorEvent,
            ms * 1000,
            task.id
        ]);
    }
    function markTaskRun(task, ms) {
        runIdCounter++;
        profilingState[PRIORITY] = task.priorityLevel;
        profilingState[CURRENT_TASK_ID] = task.id;
        profilingState[CURRENT_RUN_ID] = runIdCounter;
        if (eventLog !== null) logEvent([
            TaskRunEvent,
            ms * 1000,
            task.id,
            runIdCounter
        ]);
    }
    function markTaskYield(task, ms) {
        profilingState[PRIORITY] = NoPriority;
        profilingState[CURRENT_TASK_ID] = 0;
        profilingState[CURRENT_RUN_ID] = 0;
        if (eventLog !== null) logEvent([
            TaskYieldEvent,
            ms * 1000,
            task.id,
            runIdCounter
        ]);
    }
    function markSchedulerSuspended(ms) {
        mainThreadIdCounter++;
        if (eventLog !== null) logEvent([
            SchedulerSuspendEvent,
            ms * 1000,
            mainThreadIdCounter
        ]);
    }
    function markSchedulerUnsuspended(ms) {
        if (eventLog !== null) logEvent([
            SchedulerResumeEvent,
            ms * 1000,
            mainThreadIdCounter
        ]);
    }
    /* eslint-disable no-var */ // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823; // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out
    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out
    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap
    var taskQueue = [];
    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.
    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
    var currentTask = null;
    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.
    var isPerformingWork = false;
    var isHostCallbackScheduled = false;
    var isHostTimeoutScheduled = false;
    function advanceTimers(currentTime) {
        // Check for tasks that are no longer delayed and add them to the queue.
        var timer = peek(timerQueue);
        while(timer !== null){
            if (timer.callback === null) // Timer was cancelled.
            pop(timerQueue);
            else if (timer.startTime <= currentTime) {
                // Timer fired. Transfer to the task queue.
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
                markTaskStart(timer, currentTime);
                timer.isQueued = true;
            } else // Remaining timers are pending.
            return;
            timer = peek(timerQueue);
        }
    }
    function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
        }
    }
    function flushWork(hasTimeRemaining, initialTime) {
        markSchedulerUnsuspended(initialTime);
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
            // We scheduled a timeout but it's no longer needed. Cancel it.
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
            if (enableProfiling) try {
                return workLoop(hasTimeRemaining, initialTime);
            } catch (error) {
                if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                }
                throw error;
            }
            else // No catch in prod code path.
            return workLoop(hasTimeRemaining, initialTime);
        } finally{
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
            var _currentTime = exports.unstable_now();
            markSchedulerSuspended(_currentTime);
        }
    }
    function workLoop(hasTimeRemaining, initialTime) {
        var currentTime = initialTime;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while(currentTask !== null && !enableSchedulerDebugging){
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) break;
            var callback = currentTask.callback;
            if (typeof callback === 'function') {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                markTaskRun(currentTask, currentTime);
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === 'function') {
                    currentTask.callback = continuationCallback;
                    markTaskYield(currentTask, currentTime);
                } else {
                    markTaskCompleted(currentTask, currentTime);
                    currentTask.isQueued = false;
                    if (currentTask === peek(taskQueue)) pop(taskQueue);
                }
                advanceTimers(currentTime);
            } else pop(taskQueue);
            currentTask = peek(taskQueue);
        } // Return whether there's additional work
        if (currentTask !== null) return true;
        else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            return false;
        }
    }
    function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch(priorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
                break;
            default:
                priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_next(eventHandler) {
        var priorityLevel;
        switch(currentPriorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
                // Shift down to normal priority
                priorityLevel = NormalPriority;
                break;
            default:
                // Anything lower than normal priority should remain at the current level.
                priorityLevel = currentPriorityLevel;
                break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
            // This is a fork of runWithPriority, inlined for performance.
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
                return callback.apply(this, arguments);
            } finally{
                currentPriorityLevel = previousPriorityLevel;
            }
        };
    }
    function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime;
        if (typeof options === 'object' && options !== null) {
            var delay = options.delay;
            if (typeof delay === 'number' && delay > 0) startTime = currentTime + delay;
            else startTime = currentTime;
        } else startTime = currentTime;
        var timeout;
        switch(priorityLevel){
            case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
            case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
            case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
            case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
            case NormalPriority:
            default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
        }
        var expirationTime = startTime + timeout;
        var newTask = {
            id: taskIdCounter++,
            callback: callback,
            priorityLevel: priorityLevel,
            startTime: startTime,
            expirationTime: expirationTime,
            sortIndex: -1
        };
        newTask.isQueued = false;
        if (startTime > currentTime) {
            // This is a delayed task.
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                // All tasks are delayed, and this is the task with the earliest delay.
                if (isHostTimeoutScheduled) // Cancel an existing timeout.
                cancelHostTimeout();
                else isHostTimeoutScheduled = true;
                 // Schedule a timeout.
                requestHostTimeout(handleTimeout, startTime - currentTime);
            }
        } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            markTaskStart(newTask, currentTime);
            newTask.isQueued = true;
            // wait until the next time we yield.
            if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            }
        }
        return newTask;
    }
    function unstable_pauseExecution() {
    }
    function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
        }
    }
    function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
    }
    function unstable_cancelCallback(task) {
        if (task.isQueued) {
            var currentTime = exports.unstable_now();
            markTaskCanceled(task, currentTime);
            task.isQueued = false;
        }
        // remove from the queue because you can't remove arbitrary nodes from an
        // array based heap, only the first one.)
        task.callback = null;
    }
    function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
    }
    var unstable_requestPaint = requestPaint;
    var unstable_Profiling = {
        startLoggingProfilingEvents: startLoggingProfilingEvents,
        stopLoggingProfilingEvents: stopLoggingProfilingEvents,
        sharedProfilingBuffer: sharedProfilingBuffer
    };
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_Profiling = unstable_Profiling;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
    exports.unstable_next = unstable_next;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_requestPaint = unstable_requestPaint;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_wrapCallback = unstable_wrapCallback;
})();

},{}],"aEthe":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler-tracing.development.js');

},{"./cjs/scheduler-tracing.development.js":"jlVvF"}],"jlVvF":[function(require,module,exports) {
/** @license React v0.20.1
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.
    var interactionIDCounter = 0;
    var threadIDCounter = 0; // Set of currently traced interactions.
    // Interactions "stack"–
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.
    exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.
    exports.__subscriberRef = null;
    exports.__interactionsRef = {
        current: new Set()
    };
    exports.__subscriberRef = {
        current: null
    };
    function unstable_clear(callback) {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = new Set();
        try {
            return callback();
        } finally{
            exports.__interactionsRef.current = prevInteractions;
        }
    }
    function unstable_getCurrent() {
        return exports.__interactionsRef.current;
    }
    function unstable_getThreadID() {
        return ++threadIDCounter;
    }
    function unstable_trace(name, timestamp, callback) {
        var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;
        var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name: name,
            timestamp: timestamp
        };
        var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
        // To do that, clone the current interactions.
        // The previous set will be restored upon completion.
        var interactions = new Set(prevInteractions);
        interactions.add(interaction);
        exports.__interactionsRef.current = interactions;
        var subscriber = exports.__subscriberRef.current;
        var returnValue;
        try {
            if (subscriber !== null) subscriber.onInteractionTraced(interaction);
        } finally{
            try {
                if (subscriber !== null) subscriber.onWorkStarted(interactions, threadID);
            } finally{
                try {
                    returnValue = callback();
                } finally{
                    exports.__interactionsRef.current = prevInteractions;
                    try {
                        if (subscriber !== null) subscriber.onWorkStopped(interactions, threadID);
                    } finally{
                        interaction.__count--; // If no async work was scheduled for this interaction,
                        // Notify subscribers that it's completed.
                        if (subscriber !== null && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                }
            }
        }
        return returnValue;
    }
    function unstable_wrap(callback) {
        var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
        var wrappedInteractions = exports.__interactionsRef.current;
        var subscriber = exports.__subscriberRef.current;
        if (subscriber !== null) subscriber.onWorkScheduled(wrappedInteractions, threadID);
         // Update the pending async work count for the current interactions.
        // Update after calling subscribers in case of error.
        wrappedInteractions.forEach(function(interaction) {
            interaction.__count++;
        });
        var hasRun = false;
        function wrapped() {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = wrappedInteractions;
            subscriber = exports.__subscriberRef.current;
            try {
                var returnValue;
                try {
                    if (subscriber !== null) subscriber.onWorkStarted(wrappedInteractions, threadID);
                } finally{
                    try {
                        returnValue = callback.apply(undefined, arguments);
                    } finally{
                        exports.__interactionsRef.current = prevInteractions;
                        if (subscriber !== null) subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                }
                return returnValue;
            } finally{
                if (!hasRun) {
                    // We only expect a wrapped function to be executed once,
                    // But in the event that it's executed more than once–
                    // Only decrement the outstanding interaction counts once.
                    hasRun = true; // Update pending async counts for all wrapped interactions.
                    // If this was the last scheduled async work for any of them,
                    // Mark them as completed.
                    wrappedInteractions.forEach(function(interaction) {
                        interaction.__count--;
                        if (subscriber !== null && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                    });
                }
            }
        }
        wrapped.cancel = function cancel() {
            subscriber = exports.__subscriberRef.current;
            try {
                if (subscriber !== null) subscriber.onWorkCanceled(wrappedInteractions, threadID);
            } finally{
                // Update pending async counts for all wrapped interactions.
                // If this was the last scheduled async work for any of them,
                // Mark them as completed.
                wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                });
            }
        };
        return wrapped;
    }
    var subscribers = null;
    subscribers = new Set();
    function unstable_subscribe(subscriber) {
        subscribers.add(subscriber);
        if (subscribers.size === 1) exports.__subscriberRef.current = {
            onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
            onInteractionTraced: onInteractionTraced,
            onWorkCanceled: onWorkCanceled,
            onWorkScheduled: onWorkScheduled,
            onWorkStarted: onWorkStarted,
            onWorkStopped: onWorkStopped
        };
    }
    function unstable_unsubscribe(subscriber) {
        subscribers.delete(subscriber);
        if (subscribers.size === 0) exports.__subscriberRef.current = null;
    }
    function onInteractionTraced(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionTraced(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onInteractionScheduledWorkCompleted(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkScheduled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkStarted(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkStopped(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkCanceled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    exports.unstable_clear = unstable_clear;
    exports.unstable_getCurrent = unstable_getCurrent;
    exports.unstable_getThreadID = unstable_getThreadID;
    exports.unstable_subscribe = unstable_subscribe;
    exports.unstable_trace = unstable_trace;
    exports.unstable_unsubscribe = unstable_unsubscribe;
    exports.unstable_wrap = unstable_wrap;
})();

},{}],"emxSw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ariaHidden", ()=>ariaHidden
);
var _utils = require("@mui/utils");
// Is a vertical scrollbar displayed?
function isOverflowing(container) {
    const doc = _utils.unstable_ownerDocument(container);
    if (doc.body === container) return _utils.unstable_ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
    return container.scrollHeight > container.clientHeight;
}
function ariaHidden(element, show) {
    if (show) element.setAttribute('aria-hidden', 'true');
    else element.removeAttribute('aria-hidden');
}
function getPaddingRight(element) {
    return parseInt(_utils.unstable_ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
}
function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude = [], show) {
    const blacklist = [
        mountElement,
        currentElement,
        ...elementsToExclude
    ];
    const blacklistTagNames = [
        'TEMPLATE',
        'SCRIPT',
        'STYLE'
    ];
    [].forEach.call(container.children, (element)=>{
        if (blacklist.indexOf(element) === -1 && blacklistTagNames.indexOf(element.tagName) === -1) ariaHidden(element, show);
    });
}
function findIndexOf(items, callback) {
    let idx = -1;
    items.some((item, index)=>{
        if (callback(item)) {
            idx = index;
            return true;
        }
        return false;
    });
    return idx;
}
function handleContainer(containerInfo, props) {
    const restoreStyle = [];
    const container = containerInfo.container;
    if (!props.disableScrollLock) {
        if (isOverflowing(container)) {
            // Compute the size before applying overflow hidden to avoid any scroll jumps.
            const scrollbarSize = _utils.unstable_getScrollbarSize(_utils.unstable_ownerDocument(container));
            restoreStyle.push({
                value: container.style.paddingRight,
                property: 'padding-right',
                el: container
            }); // Use computed style, here to get the real padding to add our scrollbar width.
            container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`; // .mui-fixed is a global helper.
            const fixedElements = _utils.unstable_ownerDocument(container).querySelectorAll('.mui-fixed');
            [].forEach.call(fixedElements, (element)=>{
                restoreStyle.push({
                    value: element.style.paddingRight,
                    property: 'padding-right',
                    el: element
                });
                element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
            });
        } // Improve Gatsby support
        // https://css-tricks.com/snippets/css/force-vertical-scrollbar/
        const parent = container.parentElement;
        const containerWindow = _utils.unstable_ownerWindow(container);
        const scrollContainer = (parent == null ? void 0 : parent.nodeName) === 'HTML' && containerWindow.getComputedStyle(parent).overflowY === 'scroll' ? parent : container; // Block the scroll even if no scrollbar is visible to account for mobile keyboard
        // screensize shrink.
        restoreStyle.push({
            value: scrollContainer.style.overflow,
            property: 'overflow',
            el: scrollContainer
        }, {
            value: scrollContainer.style.overflowX,
            property: 'overflow-x',
            el: scrollContainer
        }, {
            value: scrollContainer.style.overflowY,
            property: 'overflow-y',
            el: scrollContainer
        });
        scrollContainer.style.overflow = 'hidden';
    }
    const restore = ()=>{
        restoreStyle.forEach(({ value , el , property  })=>{
            if (value) el.style.setProperty(property, value);
            else el.style.removeProperty(property);
        });
    };
    return restore;
}
function getHiddenSiblings(container) {
    const hiddenSiblings = [];
    [].forEach.call(container.children, (element)=>{
        if (element.getAttribute('aria-hidden') === 'true') hiddenSiblings.push(element);
    });
    return hiddenSiblings;
}
class ModalManager {
    constructor(){
        this.containers = void 0;
        this.modals = void 0;
        this.modals = [];
        this.containers = [];
    }
    add(modal, container) {
        let modalIndex = this.modals.indexOf(modal);
        if (modalIndex !== -1) return modalIndex;
        modalIndex = this.modals.length;
        this.modals.push(modal); // If the modal we are adding is already in the DOM.
        if (modal.modalRef) ariaHidden(modal.modalRef, false);
        const hiddenSiblings = getHiddenSiblings(container);
        ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
        const containerIndex = findIndexOf(this.containers, (item)=>item.container === container
        );
        if (containerIndex !== -1) {
            this.containers[containerIndex].modals.push(modal);
            return modalIndex;
        }
        this.containers.push({
            modals: [
                modal
            ],
            container,
            restore: null,
            hiddenSiblings
        });
        return modalIndex;
    }
    mount(modal, props) {
        const containerIndex = findIndexOf(this.containers, (item)=>item.modals.indexOf(modal) !== -1
        );
        const containerInfo = this.containers[containerIndex];
        if (!containerInfo.restore) containerInfo.restore = handleContainer(containerInfo, props);
    }
    remove(modal) {
        const modalIndex = this.modals.indexOf(modal);
        if (modalIndex === -1) return modalIndex;
        const containerIndex = findIndexOf(this.containers, (item)=>item.modals.indexOf(modal) !== -1
        );
        const containerInfo = this.containers[containerIndex];
        containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
        this.modals.splice(modalIndex, 1); // If that was the last modal in a container, clean up the container.
        if (containerInfo.modals.length === 0) {
            // The modal might be closed before it had the chance to be mounted in the DOM.
            if (containerInfo.restore) containerInfo.restore();
            if (modal.modalRef) // In case the modal wasn't in the DOM yet.
            ariaHidden(modal.modalRef, true);
            ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
            this.containers.splice(containerIndex, 1);
        } else {
            // Otherwise make sure the next top modal is visible to a screen reader.
            const nextTop = containerInfo.modals[containerInfo.modals.length - 1]; // as soon as a modal is adding its modalRef is undefined. it can't set
            // aria-hidden because the dom element doesn't exist either
            // when modal was unmounted before modalRef gets null
            if (nextTop.modalRef) ariaHidden(nextTop.modalRef, false);
        }
        return modalIndex;
    }
    isTopModal(modal) {
        return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
    }
}
exports.default = ModalManager;

},{"@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kVMd0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_unstableTrapFocusDefault.default
);
var _unstableTrapFocus = require("./Unstable_TrapFocus");
var _unstableTrapFocusDefault = parcelHelpers.interopDefault(_unstableTrapFocus);

},{"./Unstable_TrapFocus":"kEjc6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kEjc6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* eslint-disable @typescript-eslint/naming-convention, consistent-return, jsx-a11y/no-noninteractive-tabindex */ var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _utils = require("@mui/utils"); // Inspired by https://github.com/focus-trap/tabbable
var _jsxRuntime = require("react/jsx-runtime");
const candidatesSelector = [
    'input',
    'select',
    'textarea',
    'a[href]',
    'button',
    '[tabindex]',
    'audio[controls]',
    'video[controls]',
    '[contenteditable]:not([contenteditable="false"])'
].join(',');
function getTabIndex(node) {
    const tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);
    if (!Number.isNaN(tabindexAttr)) return tabindexAttr;
     // Browsers do not return `tabIndex` correctly for contentEditable nodes;
    // https://bugs.chromium.org/p/chromium/issues/detail?id=661108&q=contenteditable%20tabindex&can=2
    // so if they don't have a tabindex attribute specifically set, assume it's 0.
    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default
    //  `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,
    //  yet they are still part of the regular tab order; in FF, they get a default
    //  `tabIndex` of 0; since Chrome still puts those elements in the regular tab
    //  order, consider their tab index to be 0.
    if (node.contentEditable === 'true' || (node.nodeName === 'AUDIO' || node.nodeName === 'VIDEO' || node.nodeName === 'DETAILS') && node.getAttribute('tabindex') === null) return 0;
    return node.tabIndex;
}
function isNonTabbableRadio(node) {
    if (node.tagName !== 'INPUT' || node.type !== 'radio') return false;
    if (!node.name) return false;
    const getRadio = (selector)=>node.ownerDocument.querySelector(`input[type="radio"]${selector}`)
    ;
    let roving = getRadio(`[name="${node.name}"]:checked`);
    if (!roving) roving = getRadio(`[name="${node.name}"]`);
    return roving !== node;
}
function isNodeMatchingSelectorFocusable(node) {
    if (node.disabled || node.tagName === 'INPUT' && node.type === 'hidden' || isNonTabbableRadio(node)) return false;
    return true;
}
function defaultGetTabbable(root) {
    const regularTabNodes = [];
    const orderedTabNodes = [];
    Array.from(root.querySelectorAll(candidatesSelector)).forEach((node, i)=>{
        const nodeTabIndex = getTabIndex(node);
        if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) return;
        if (nodeTabIndex === 0) regularTabNodes.push(node);
        else orderedTabNodes.push({
            documentOrder: i,
            tabIndex: nodeTabIndex,
            node
        });
    });
    return orderedTabNodes.sort((a, b)=>a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex
    ).map((a)=>a.node
    ).concat(regularTabNodes);
}
function defaultIsEnabled() {
    return true;
}
/**
 * Utility component that locks focus inside the component.
 */ function Unstable_TrapFocus(props) {
    const { children , disableAutoFocus =false , disableEnforceFocus =false , disableRestoreFocus =false , getTabbable =defaultGetTabbable , isEnabled =defaultIsEnabled , open  } = props;
    const ignoreNextEnforceFocus = _react.useRef();
    const sentinelStart = _react.useRef(null);
    const sentinelEnd = _react.useRef(null);
    const nodeToRestore = _react.useRef(null);
    const reactFocusEventTarget = _react.useRef(null); // This variable is useful when disableAutoFocus is true.
    // It waits for the active element to move into the component to activate.
    const activated = _react.useRef(false);
    const rootRef = _react.useRef(null);
    const handleRef = _utils.unstable_useForkRef(children.ref, rootRef);
    const lastKeydown = _react.useRef(null);
    _react.useEffect(()=>{
        // We might render an empty child.
        if (!open || !rootRef.current) return;
        activated.current = !disableAutoFocus;
    }, [
        disableAutoFocus,
        open
    ]);
    _react.useEffect(()=>{
        // We might render an empty child.
        if (!open || !rootRef.current) return;
        const doc = _utils.unstable_ownerDocument(rootRef.current);
        if (!rootRef.current.contains(doc.activeElement)) {
            if (!rootRef.current.hasAttribute('tabIndex')) {
                console.error([
                    'MUI: The modal content node does not accept focus.',
                    "For the benefit of assistive technologies, the tabIndex of the node is being set to \"-1\"."
                ].join('\n'));
                rootRef.current.setAttribute('tabIndex', -1);
            }
            if (activated.current) rootRef.current.focus();
        }
        return ()=>{
            // restoreLastFocus()
            if (!disableRestoreFocus) {
                // In IE11 it is possible for document.activeElement to be null resulting
                // in nodeToRestore.current being null.
                // Not all elements in IE11 have a focus method.
                // Once IE11 support is dropped the focus() call can be unconditional.
                if (nodeToRestore.current && nodeToRestore.current.focus) {
                    ignoreNextEnforceFocus.current = true;
                    nodeToRestore.current.focus();
                }
                nodeToRestore.current = null;
            }
        }; // Missing `disableRestoreFocus` which is fine.
    // We don't support changing that prop on an open TrapFocus
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        open
    ]);
    _react.useEffect(()=>{
        // We might render an empty child.
        if (!open || !rootRef.current) return;
        const doc = _utils.unstable_ownerDocument(rootRef.current);
        const contain = (nativeEvent)=>{
            const { current: rootElement  } = rootRef; // Cleanup functions are executed lazily in React 17.
            // Contain can be called between the component being unmounted and its cleanup function being run.
            if (rootElement === null) return;
            if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
                ignoreNextEnforceFocus.current = false;
                return;
            }
            if (!rootElement.contains(doc.activeElement)) {
                // if the focus event is not coming from inside the children's react tree, reset the refs
                if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) reactFocusEventTarget.current = null;
                else if (reactFocusEventTarget.current !== null) return;
                if (!activated.current) return;
                let tabbable = [];
                if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) tabbable = getTabbable(rootRef.current);
                if (tabbable.length > 0) {
                    var _lastKeydown$current, _lastKeydown$current2;
                    const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === 'Tab');
                    const focusNext = tabbable[0];
                    const focusPrevious = tabbable[tabbable.length - 1];
                    if (isShiftTab) focusPrevious.focus();
                    else focusNext.focus();
                } else rootElement.focus();
            }
        };
        const loopFocus = (nativeEvent)=>{
            lastKeydown.current = nativeEvent;
            if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== 'Tab') return;
             // Make sure the next tab starts from the right place.
            // doc.activeElement referes to the origin.
            if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
                // We need to ignore the next contain as
                // it will try to move the focus back to the rootRef element.
                ignoreNextEnforceFocus.current = true;
                sentinelEnd.current.focus();
            }
        };
        doc.addEventListener('focusin', contain);
        doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area.
        // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.
        // Instead, we can look if the active element was restored on the BODY element.
        //
        // The whatwg spec defines how the browser should behave but does not explicitly mention any events:
        // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.
        const interval = setInterval(()=>{
            if (doc.activeElement.tagName === 'BODY') contain();
        }, 50);
        return ()=>{
            clearInterval(interval);
            doc.removeEventListener('focusin', contain);
            doc.removeEventListener('keydown', loopFocus, true);
        };
    }, [
        disableAutoFocus,
        disableEnforceFocus,
        disableRestoreFocus,
        isEnabled,
        open,
        getTabbable
    ]);
    const onFocus = (event)=>{
        if (nodeToRestore.current === null) nodeToRestore.current = event.relatedTarget;
        activated.current = true;
        reactFocusEventTarget.current = event.target;
        const childrenPropsHandler = children.props.onFocus;
        if (childrenPropsHandler) childrenPropsHandler(event);
    };
    const handleFocusSentinel = (event)=>{
        if (nodeToRestore.current === null) nodeToRestore.current = event.relatedTarget;
        activated.current = true;
    };
    return(/*#__PURE__*/ _jsxRuntime.jsxs(_react.Fragment, {
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx("div", {
                tabIndex: 0,
                onFocus: handleFocusSentinel,
                ref: sentinelStart,
                "data-test": "sentinelStart"
            }),
            /*#__PURE__*/ _react.cloneElement(children, {
                ref: handleRef,
                onFocus
            }),
            /*#__PURE__*/ _jsxRuntime.jsx("div", {
                tabIndex: 0,
                onFocus: handleFocusSentinel,
                ref: sentinelEnd,
                "data-test": "sentinelEnd"
            })
        ]
    }));
}
Unstable_TrapFocus.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * A single child content element.
   */ children: _utils.elementAcceptingRef,
    /**
   * If `true`, the trap focus will not automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes.
   * This also works correctly with any trap focus children that have the `disableAutoFocus` prop.
   *
   * Generally this should never be set to `true` as it makes the trap focus less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */ disableAutoFocus: _propTypesDefault.default.bool,
    /**
   * If `true`, the trap focus will not prevent focus from leaving the trap focus while open.
   *
   * Generally this should never be set to `true` as it makes the trap focus less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */ disableEnforceFocus: _propTypesDefault.default.bool,
    /**
   * If `true`, the trap focus will not restore focus to previously focused element once
   * trap focus is hidden.
   * @default false
   */ disableRestoreFocus: _propTypesDefault.default.bool,
    /**
   * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
   * For instance, you can provide the "tabbable" npm dependency.
   * @param {HTMLElement} root
   */ getTabbable: _propTypesDefault.default.func,
    /**
   * This prop extends the `open` prop.
   * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
   * This prop should be memoized.
   * It can be used to support multiple trap focus mounted at the same time.
   * @default function defaultIsEnabled() {
   *   return true;
   * }
   */ isEnabled: _propTypesDefault.default.func,
    /**
   * If `true`, focus is locked.
   */ open: _propTypesDefault.default.bool.isRequired
};
// eslint-disable-next-line
Unstable_TrapFocus['propTypes' + ''] = _utils.exactProp(Unstable_TrapFocus.propTypes);
exports.default = Unstable_TrapFocus;

},{"react":"6TuXu","prop-types":"1tgq3","@mui/utils":"9YmNw","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5ghy0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getModalUtilityClass", ()=>getModalUtilityClass
);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
function getModalUtilityClass(slot) {
    return _generateUtilityClassDefault.default('MuiModal', slot);
}
const modalUnstyledClasses = _generateUtilityClassesDefault.default('MuiModal', [
    'root',
    'hidden'
]);
exports.default = modalUnstyledClasses;

},{"../generateUtilityClasses":"gmgZV","../generateUtilityClass":"ruAWr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5DAdh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_noSsrDefault.default
);
var _noSsr = require("./NoSsr");
var _noSsrDefault = parcelHelpers.interopDefault(_noSsr);

},{"./NoSsr":"iTyfJ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iTyfJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _utils = require("@mui/utils");
/**
 * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).
 *
 * This component can be useful in a variety of situations:
 * - Escape hatch for broken dependencies not supporting SSR.
 * - Improve the time-to-first paint on the client by only rendering above the fold.
 * - Reduce the rendering time on the server.
 * - Under too heavy server load, you can turn on service degradation.
 */ var _jsxRuntime = require("react/jsx-runtime");
function NoSsr(props) {
    const { children , defer =false , fallback =null  } = props;
    const [mountedState, setMountedState] = _react.useState(false);
    _utils.unstable_useEnhancedEffect(()=>{
        if (!defer) setMountedState(true);
    }, [
        defer
    ]);
    _react.useEffect(()=>{
        if (defer) setMountedState(true);
    }, [
        defer
    ]); // We need the Fragment here to force react-docgen to recognise NoSsr as a component.
    return(/*#__PURE__*/ _jsxRuntime.jsx(_react.Fragment, {
        children: mountedState ? children : fallback
    }));
}
NoSsr.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * You can wrap a node.
   */ children: _propTypesDefault.default.node,
    /**
   * If `true`, the component will not only prevent server-side rendering.
   * It will also defer the rendering of the children into a different screen frame.
   * @default false
   */ defer: _propTypesDefault.default.bool,
    /**
   * The fallback content to display.
   * @default null
   */ fallback: _propTypesDefault.default.node
};
// eslint-disable-next-line
NoSsr['propTypes' + ''] = _utils.exactProp(NoSsr.propTypes);
exports.default = NoSsr;

},{"react":"6TuXu","prop-types":"1tgq3","@mui/utils":"9YmNw","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bpH5j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_popperDefault.default
);
var _popper = require("./Popper");
var _popperDefault = parcelHelpers.interopDefault(_popper);

},{"./Popper":"cX9va","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cX9va":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _system = require("@mui/system");
var _utils = require("@mui/utils");
var _core = require("@popperjs/core");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react = require("react");
var _portal = require("../Portal");
var _portalDefault = parcelHelpers.interopDefault(_portal);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "anchorEl",
    "children",
    "disablePortal",
    "modifiers",
    "open",
    "placement",
    "popperOptions",
    "popperRef",
    "TransitionProps"
], _excluded2 = [
    "anchorEl",
    "children",
    "container",
    "disablePortal",
    "keepMounted",
    "modifiers",
    "open",
    "placement",
    "popperOptions",
    "popperRef",
    "style",
    "transition"
];
function flipPlacement(placement, theme) {
    const direction = theme && theme.direction || 'ltr';
    if (direction === 'ltr') return placement;
    switch(placement){
        case 'bottom-end':
            return 'bottom-start';
        case 'bottom-start':
            return 'bottom-end';
        case 'top-end':
            return 'top-start';
        case 'top-start':
            return 'top-end';
        default:
            return placement;
    }
}
function resolveAnchorEl(anchorEl) {
    return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
}
const defaultPopperOptions = {
};
/* eslint-disable react/prop-types */ const PopperTooltip = /*#__PURE__*/ _react.forwardRef(function PopperTooltip1(props, ref) {
    const { anchorEl , children , disablePortal , modifiers , open , placement: initialPlacement , popperOptions , popperRef: popperRefProp , TransitionProps  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const tooltipRef = _react.useRef(null);
    const ownRef = _utils.unstable_useForkRef(tooltipRef, ref);
    const popperRef = _react.useRef(null);
    const handlePopperRef = _utils.unstable_useForkRef(popperRef, popperRefProp);
    const handlePopperRefRef = _react.useRef(handlePopperRef);
    _utils.unstable_useEnhancedEffect(()=>{
        handlePopperRefRef.current = handlePopperRef;
    }, [
        handlePopperRef
    ]);
    _react.useImperativeHandle(popperRefProp, ()=>popperRef.current
    , []);
    const theme = _system.useThemeWithoutDefault();
    const rtlPlacement = flipPlacement(initialPlacement, theme);
    /**
   * placement initialized from prop but can change during lifetime if modifiers.flip.
   * modifiers.flip is essentially a flip for controlled/uncontrolled behavior
   */ const [placement, setPlacement] = _react.useState(rtlPlacement);
    _react.useEffect(()=>{
        if (popperRef.current) popperRef.current.forceUpdate();
    });
    _utils.unstable_useEnhancedEffect(()=>{
        if (!anchorEl || !open) return undefined;
        const handlePopperUpdate = (data)=>{
            setPlacement(data.placement);
        };
        const resolvedAnchorEl = resolveAnchorEl(anchorEl);
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
            const box = resolvedAnchorEl.getBoundingClientRect();
            if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) console.warn([
                'MUI: The `anchorEl` prop provided to the component is invalid.',
                'The anchor element should be part of the document layout.',
                "Make sure the element is present in the document or that it's not display none."
            ].join('\n'));
        }
        let popperModifiers = [
            {
                name: 'preventOverflow',
                options: {
                    altBoundary: disablePortal
                }
            },
            {
                name: 'flip',
                options: {
                    altBoundary: disablePortal
                }
            },
            {
                name: 'onUpdate',
                enabled: true,
                phase: 'afterWrite',
                fn: ({ state  })=>{
                    handlePopperUpdate(state);
                }
            }
        ];
        if (modifiers != null) popperModifiers = popperModifiers.concat(modifiers);
        if (popperOptions && popperOptions.modifiers != null) popperModifiers = popperModifiers.concat(popperOptions.modifiers);
        const popper = _core.createPopper(resolveAnchorEl(anchorEl), tooltipRef.current, _extendsDefault.default({
            placement: rtlPlacement
        }, popperOptions, {
            modifiers: popperModifiers
        }));
        handlePopperRefRef.current(popper);
        return ()=>{
            popper.destroy();
            handlePopperRefRef.current(null);
        };
    }, [
        anchorEl,
        disablePortal,
        modifiers,
        open,
        popperOptions,
        rtlPlacement
    ]);
    const childProps = {
        placement
    };
    if (TransitionProps !== null) childProps.TransitionProps = TransitionProps;
    return(/*#__PURE__*/ _jsxRuntime.jsx("div", _extendsDefault.default({
        ref: ownRef,
        role: "tooltip"
    }, other, {
        children: typeof children === 'function' ? children(childProps) : children
    })));
});
/* eslint-enable react/prop-types */ /**
 * Poppers rely on the 3rd party library [Popper.js](https://popper.js.org/docs/v2/) for positioning.
 */ const Popper = /*#__PURE__*/ _react.forwardRef(function Popper1(props, ref) {
    const { anchorEl , children , container: containerProp , disablePortal =false , keepMounted =false , modifiers , open , placement ='bottom' , popperOptions =defaultPopperOptions , popperRef , style , transition =false  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded2);
    const [exited, setExited] = _react.useState(true);
    const handleEnter = ()=>{
        setExited(false);
    };
    const handleExited = ()=>{
        setExited(true);
    };
    if (!keepMounted && !open && (!transition || exited)) return null;
     // If the container prop is provided, use that
    // If the anchorEl prop is provided, use its parent body element as the container
    // If neither are provided let the Modal take care of choosing the container
    const container = containerProp || (anchorEl ? _utils.unstable_ownerDocument(resolveAnchorEl(anchorEl)).body : undefined);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_portalDefault.default, {
        disablePortal: disablePortal,
        container: container,
        children: /*#__PURE__*/ _jsxRuntime.jsx(PopperTooltip, _extendsDefault.default({
            anchorEl: anchorEl,
            disablePortal: disablePortal,
            modifiers: modifiers,
            ref: ref,
            open: transition ? !exited : open,
            placement: placement,
            popperOptions: popperOptions,
            popperRef: popperRef
        }, other, {
            style: _extendsDefault.default({
                // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
                position: 'fixed',
                // Fix Popper.js display issue
                top: 0,
                left: 0,
                display: !open && keepMounted && (!transition || exited) ? 'none' : null
            }, style),
            TransitionProps: transition ? {
                in: open,
                onEnter: handleEnter,
                onExited: handleExited
            } : null,
            children: children
        }))
    }));
});
Popper.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
   * or a function that returns either.
   * It's used to set the position of the popper.
   * The return value will passed as the reference object of the Popper instance.
   */ anchorEl: _utils.chainPropTypes(_propTypesDefault.default.oneOfType([_utils.HTMLElementType, _propTypesDefault.default.object,
        _propTypesDefault.default.func
    ]), (props)=>{
        if (props.open) {
            const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
            if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
                const box = resolvedAnchorEl.getBoundingClientRect();
                if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) return new Error([
                    'MUI: The `anchorEl` prop provided to the component is invalid.',
                    'The anchor element should be part of the document layout.',
                    "Make sure the element is present in the document or that it's not display none."
                ].join('\n'));
            } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== 'function' || resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) return new Error([
                'MUI: The `anchorEl` prop provided to the component is invalid.',
                'It should be an HTML element instance or a virtualElement ',
                '(https://popper.js.org/docs/v2/virtual-elements/).'
            ].join('\n'));
        }
        return null;
    }),
    /**
   * Popper render function or node.
   */ children: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.node,
        _propTypesDefault.default.func
    ]),
    /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */ container: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([_utils.HTMLElementType, _propTypesDefault.default.func
    ]),
    /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */ disablePortal: _propTypesDefault.default.bool,
    /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */ keepMounted: _propTypesDefault.default.bool,
    /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */ modifiers: _propTypesDefault.default.arrayOf(_propTypesDefault.default.shape({
        data: _propTypesDefault.default.object,
        effect: _propTypesDefault.default.func,
        enabled: _propTypesDefault.default.bool,
        fn: _propTypesDefault.default.func,
        name: _propTypesDefault.default.any.isRequired,
        options: _propTypesDefault.default.object,
        phase: _propTypesDefault.default.oneOf([
            'afterMain',
            'afterRead',
            'afterWrite',
            'beforeMain',
            'beforeRead',
            'beforeWrite',
            'main',
            'read',
            'write'
        ]),
        requires: _propTypesDefault.default.arrayOf(_propTypesDefault.default.string),
        requiresIfExists: _propTypesDefault.default.arrayOf(_propTypesDefault.default.string)
    })),
    /**
   * If `true`, the component is shown.
   */ open: _propTypesDefault.default.bool.isRequired,
    /**
   * Popper placement.
   * @default 'bottom'
   */ placement: _propTypesDefault.default.oneOf([
        'auto-end',
        'auto-start',
        'auto',
        'bottom-end',
        'bottom-start',
        'bottom',
        'left-end',
        'left-start',
        'left',
        'right-end',
        'right-start',
        'right',
        'top-end',
        'top-start',
        'top'
    ]),
    /**
   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
   * @default {}
   */ popperOptions: _propTypesDefault.default.shape({
        modifiers: _propTypesDefault.default.array,
        onFirstUpdate: _propTypesDefault.default.func,
        placement: _propTypesDefault.default.oneOf([
            'auto-end',
            'auto-start',
            'auto',
            'bottom-end',
            'bottom-start',
            'bottom',
            'left-end',
            'left-start',
            'left',
            'right-end',
            'right-start',
            'right',
            'top-end',
            'top-start',
            'top'
        ]),
        strategy: _propTypesDefault.default.oneOf([
            'absolute',
            'fixed'
        ])
    }),
    /**
   * A ref that points to the used popper instance.
   */ popperRef: _utils.refType,
    /**
   * @ignore
   */ style: _propTypesDefault.default.object,
    /**
   * Help supporting a react-transition-group/Transition component.
   * @default false
   */ transition: _propTypesDefault.default.bool
};
exports.default = Popper;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@mui/system":"ccIuz","@mui/utils":"9YmNw","@popperjs/core":"ePjUz","prop-types":"1tgq3","react":"6TuXu","../Portal":"kuhHh","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ccIuz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "css", ()=>_styledEngine.css
);
parcelHelpers.export(exports, "keyframes", ()=>_styledEngine.keyframes
);
parcelHelpers.export(exports, "GlobalStyles", ()=>_styledEngine.GlobalStyles
);
parcelHelpers.export(exports, "StyledEngineProvider", ()=>_styledEngine.StyledEngineProvider
);
parcelHelpers.export(exports, "borders", ()=>_bordersDefault.default
);
parcelHelpers.export(exports, "breakpoints", ()=>_breakpointsDefault.default
);
parcelHelpers.export(exports, "handleBreakpoints", ()=>_breakpoints.handleBreakpoints
);
parcelHelpers.export(exports, "mergeBreakpointsInOrder", ()=>_breakpoints.mergeBreakpointsInOrder
);
parcelHelpers.export(exports, "unstable_resolveBreakpointValues", ()=>_breakpoints.resolveBreakpointValues
);
parcelHelpers.export(exports, "compose", ()=>_composeDefault.default
);
parcelHelpers.export(exports, "display", ()=>_displayDefault.default
);
parcelHelpers.export(exports, "flexbox", ()=>_flexboxDefault.default
);
parcelHelpers.export(exports, "grid", ()=>_gridDefault.default
);
parcelHelpers.export(exports, "palette", ()=>_paletteDefault.default
);
parcelHelpers.export(exports, "positions", ()=>_positionsDefault.default
);
parcelHelpers.export(exports, "shadows", ()=>_shadowsDefault.default
);
parcelHelpers.export(exports, "sizing", ()=>_sizingDefault.default
);
parcelHelpers.export(exports, "spacing", ()=>_spacingDefault.default
);
parcelHelpers.export(exports, "style", ()=>_styleDefault.default
);
parcelHelpers.export(exports, "getPath", ()=>_style.getPath
);
parcelHelpers.export(exports, "typography", ()=>_typographyDefault.default
);
parcelHelpers.export(exports, "unstable_styleFunctionSx", ()=>_styleFunctionSxDefault.default
);
parcelHelpers.export(exports, "unstable_extendSxProp", ()=>_styleFunctionSx.extendSxProp
);
parcelHelpers.export(exports, "unstable_getThemeValue", ()=>_getThemeValueDefault.default
);
parcelHelpers.export(exports, "Box", ()=>_boxDefault.default
);
parcelHelpers.export(exports, "createBox", ()=>_createBoxDefault.default
);
parcelHelpers.export(exports, "createStyled", ()=>_createStyledDefault.default
);
parcelHelpers.export(exports, "styled", ()=>_styledDefault.default
);
parcelHelpers.export(exports, "createTheme", ()=>_createThemeDefault.default
);
parcelHelpers.export(exports, "createBreakpoints", ()=>_createBreakpointsDefault.default
);
parcelHelpers.export(exports, "createSpacing", ()=>_createSpacingDefault.default
);
parcelHelpers.export(exports, "shape", ()=>_shapeDefault.default
);
parcelHelpers.export(exports, "useThemeProps", ()=>_useThemePropsDefault.default
);
parcelHelpers.export(exports, "getThemeProps", ()=>_useThemeProps.getThemeProps
);
parcelHelpers.export(exports, "useTheme", ()=>_useThemeDefault.default
);
parcelHelpers.export(exports, "useThemeWithoutDefault", ()=>_useThemeWithoutDefaultDefault.default
);
parcelHelpers.export(exports, "ThemeProvider", ()=>_themeProviderDefault.default
);
parcelHelpers.export(exports, "unstable_createCssVarsProvider", ()=>_createCssVarsProviderDefault.default
);
var _styledEngine = require("@mui/styled-engine");
var _borders = require("./borders");
var _bordersDefault = parcelHelpers.interopDefault(_borders);
parcelHelpers.exportAll(_borders, exports);
var _breakpoints = require("./breakpoints");
var _breakpointsDefault = parcelHelpers.interopDefault(_breakpoints);
var _compose = require("./compose");
var _composeDefault = parcelHelpers.interopDefault(_compose);
var _display = require("./display");
var _displayDefault = parcelHelpers.interopDefault(_display);
var _flexbox = require("./flexbox");
var _flexboxDefault = parcelHelpers.interopDefault(_flexbox);
parcelHelpers.exportAll(_flexbox, exports);
var _grid = require("./grid");
var _gridDefault = parcelHelpers.interopDefault(_grid);
parcelHelpers.exportAll(_grid, exports);
var _palette = require("./palette");
var _paletteDefault = parcelHelpers.interopDefault(_palette);
parcelHelpers.exportAll(_palette, exports);
var _positions = require("./positions");
var _positionsDefault = parcelHelpers.interopDefault(_positions);
parcelHelpers.exportAll(_positions, exports);
var _shadows = require("./shadows");
var _shadowsDefault = parcelHelpers.interopDefault(_shadows);
var _sizing = require("./sizing");
var _sizingDefault = parcelHelpers.interopDefault(_sizing);
parcelHelpers.exportAll(_sizing, exports);
var _spacing = require("./spacing");
var _spacingDefault = parcelHelpers.interopDefault(_spacing);
parcelHelpers.exportAll(_spacing, exports);
var _style = require("./style");
var _styleDefault = parcelHelpers.interopDefault(_style);
var _typography = require("./typography");
var _typographyDefault = parcelHelpers.interopDefault(_typography);
parcelHelpers.exportAll(_typography, exports);
var _styleFunctionSx = require("./styleFunctionSx");
var _styleFunctionSxDefault = parcelHelpers.interopDefault(_styleFunctionSx);
var _getThemeValue = require("./getThemeValue");
var _getThemeValueDefault = parcelHelpers.interopDefault(_getThemeValue);
var _box = require("./Box");
var _boxDefault = parcelHelpers.interopDefault(_box);
var _createBox = require("./createBox");
var _createBoxDefault = parcelHelpers.interopDefault(_createBox);
var _createStyled = require("./createStyled");
var _createStyledDefault = parcelHelpers.interopDefault(_createStyled);
parcelHelpers.exportAll(_createStyled, exports);
var _styled = require("./styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _createTheme = require("./createTheme");
var _createThemeDefault = parcelHelpers.interopDefault(_createTheme);
var _createBreakpoints = require("./createTheme/createBreakpoints");
var _createBreakpointsDefault = parcelHelpers.interopDefault(_createBreakpoints);
var _createSpacing = require("./createTheme/createSpacing");
var _createSpacingDefault = parcelHelpers.interopDefault(_createSpacing);
var _shape = require("./createTheme/shape");
var _shapeDefault = parcelHelpers.interopDefault(_shape);
var _useThemeProps = require("./useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _useTheme = require("./useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _useThemeWithoutDefault = require("./useThemeWithoutDefault");
var _useThemeWithoutDefaultDefault = parcelHelpers.interopDefault(_useThemeWithoutDefault);
var _colorManipulator = require("./colorManipulator");
parcelHelpers.exportAll(_colorManipulator, exports);
var _themeProvider = require("./ThemeProvider");
var _themeProviderDefault = parcelHelpers.interopDefault(_themeProvider);
var _createCssVarsProvider = require("./cssVars/createCssVarsProvider");
var _createCssVarsProviderDefault = parcelHelpers.interopDefault(_createCssVarsProvider);

},{"@mui/styled-engine":"27jsV","./borders":"4nAEn","./breakpoints":"6bEk8","./compose":"8zDWu","./display":"lFxhx","./flexbox":"aHFwp","./grid":"d3mNo","./palette":"kfo3Y","./positions":"9x07Q","./shadows":"4yp2k","./sizing":"7tg0K","./spacing":"foZEo","./style":"1RuK7","./typography":"2WnLr","./styleFunctionSx":"j6cET","./getThemeValue":"fJ4vy","./Box":"kKf97","./createBox":"diE0s","./createStyled":"bBHKf","./styled":"fvfDp","./createTheme":"29UYi","./createTheme/createBreakpoints":"1g1Yd","./createTheme/createSpacing":"loiOJ","./createTheme/shape":"aRdoq","./useThemeProps":"5KLc0","./useTheme":"9fPBO","./useThemeWithoutDefault":"8fEgR","./colorManipulator":"ahaKg","./ThemeProvider":"5IhpQ","./cssVars/createCssVarsProvider":"hCaw2","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"27jsV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ThemeContext", ()=>_react.ThemeContext
);
parcelHelpers.export(exports, "keyframes", ()=>_react.keyframes
);
parcelHelpers.export(exports, "css", ()=>_react.css
);
parcelHelpers.export(exports, "StyledEngineProvider", ()=>_styledEngineProviderDefault.default
);
parcelHelpers.export(exports, "GlobalStyles", ()=>_globalStylesDefault.default
);
/** @license MUI v5.0.1
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var _styled = require("@emotion/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _react = require("@emotion/react");
var _styledEngineProvider = require("./StyledEngineProvider");
var _styledEngineProviderDefault = parcelHelpers.interopDefault(_styledEngineProvider);
var _globalStyles = require("./GlobalStyles");
var _globalStylesDefault = parcelHelpers.interopDefault(_globalStyles);
function styled(tag, options) {
    const stylesFactory = _styledDefault.default(tag, options);
    return (...styles)=>{
        const component = typeof tag === 'string' ? `"${tag}"` : 'component';
        if (styles.length === 0) console.error([
            `MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`,
            'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'
        ].join('\n'));
        else if (styles.some((style)=>style === undefined
        )) console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
        return stylesFactory(...styles);
    };
}
exports.default = styled;

},{"@emotion/styled":"dDstJ","@emotion/react":"7kZV1","./StyledEngineProvider":"fSTCy","./GlobalStyles":"5nCS4","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dDstJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/extends");
var _react = require("react");
var _isPropValid = require("@emotion/is-prop-valid");
var _emotionStyledBaseBrowserEsmJs = require("../base/dist/emotion-styled-base.browser.esm.js");
var _emotionStyledBaseBrowserEsmJsDefault = parcelHelpers.interopDefault(_emotionStyledBaseBrowserEsmJs);
var _react1 = require("@emotion/react");
var _utils = require("@emotion/utils");
var _serialize = require("@emotion/serialize");
var tags = [
    'a',
    'abbr',
    'address',
    'area',
    'article',
    'aside',
    'audio',
    'b',
    'base',
    'bdi',
    'bdo',
    'big',
    'blockquote',
    'body',
    'br',
    'button',
    'canvas',
    'caption',
    'cite',
    'code',
    'col',
    'colgroup',
    'data',
    'datalist',
    'dd',
    'del',
    'details',
    'dfn',
    'dialog',
    'div',
    'dl',
    'dt',
    'em',
    'embed',
    'fieldset',
    'figcaption',
    'figure',
    'footer',
    'form',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'head',
    'header',
    'hgroup',
    'hr',
    'html',
    'i',
    'iframe',
    'img',
    'input',
    'ins',
    'kbd',
    'keygen',
    'label',
    'legend',
    'li',
    'link',
    'main',
    'map',
    'mark',
    'marquee',
    'menu',
    'menuitem',
    'meta',
    'meter',
    'nav',
    'noscript',
    'object',
    'ol',
    'optgroup',
    'option',
    'output',
    'p',
    'param',
    'picture',
    'pre',
    'progress',
    'q',
    'rp',
    'rt',
    'ruby',
    's',
    'samp',
    'script',
    'section',
    'select',
    'small',
    'source',
    'span',
    'strong',
    'style',
    'sub',
    'summary',
    'sup',
    'table',
    'tbody',
    'td',
    'textarea',
    'tfoot',
    'th',
    'thead',
    'time',
    'title',
    'tr',
    'track',
    'u',
    'ul',
    'var',
    'video',
    'wbr',
    'circle',
    'clipPath',
    'defs',
    'ellipse',
    'foreignObject',
    'g',
    'image',
    'line',
    'linearGradient',
    'mask',
    'path',
    'pattern',
    'polygon',
    'polyline',
    'radialGradient',
    'rect',
    'stop',
    'svg',
    'text',
    'tspan'
];
var newStyled = _emotionStyledBaseBrowserEsmJsDefault.default.bind();
tags.forEach(function(tagName) {
    // $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type
    newStyled[tagName] = newStyled(tagName);
});
exports.default = newStyled;

},{"@babel/runtime/helpers/extends":"fpVWj","react":"6TuXu","@emotion/is-prop-valid":"9zlj7","../base/dist/emotion-styled-base.browser.esm.js":"iYnU4","@emotion/react":"7kZV1","@emotion/utils":"981Zc","@emotion/serialize":"dxONe","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fpVWj":[function(require,module,exports) {
function _extends() {
    module.exports = _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    module.exports["default"] = module.exports, module.exports.__esModule = true;
    return _extends.apply(this, arguments);
}
module.exports = _extends;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"9zlj7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _memoize = require("@emotion/memoize");
var _memoizeDefault = parcelHelpers.interopDefault(_memoize);
var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23
var isPropValid = /* #__PURE__ */ _memoizeDefault.default(function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
});
exports.default = isPropValid;

},{"@emotion/memoize":"8uMtf","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8uMtf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function memoize(fn) {
    var cache = Object.create(null);
    return function(arg) {
        if (cache[arg] === undefined) cache[arg] = fn(arg);
        return cache[arg];
    };
}
exports.default = memoize;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iYnU4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _isPropValid = require("@emotion/is-prop-valid");
var _isPropValidDefault = parcelHelpers.interopDefault(_isPropValid);
var _react1 = require("@emotion/react");
var _utils = require("@emotion/utils");
var _serialize = require("@emotion/serialize");
var testOmitPropsOnStringTag = _isPropValidDefault.default;
var testOmitPropsOnComponent = function testOmitPropsOnComponent1(key) {
    return key !== 'theme';
};
var getDefaultShouldForwardProp = function getDefaultShouldForwardProp1(tag) {
    return typeof tag === 'string' && // for "a" so this is checking that
    // it's a lowercase character
    tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
};
var composeShouldForwardProps = function composeShouldForwardProps1(tag, options, isReal) {
    var shouldForwardProp;
    if (options) {
        var optionsShouldForwardProp = options.shouldForwardProp;
        shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
            return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
        } : optionsShouldForwardProp;
    }
    if (typeof shouldForwardProp !== 'function' && isReal) shouldForwardProp = tag.__emotion_forwardProp;
    return shouldForwardProp;
};
var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
var createStyled = function createStyled1(tag, options) {
    if (tag === undefined) throw new Error('You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.');
    var isReal = tag.__emotion_real === tag;
    var baseTag = isReal && tag.__emotion_base || tag;
    var identifierName;
    var targetClassName;
    if (options !== undefined) {
        identifierName = options.label;
        targetClassName = options.target;
    }
    var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
    var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
    var shouldUseAs = !defaultShouldForwardProp('as');
    return function() {
        var args = arguments;
        var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];
        if (identifierName !== undefined) styles.push("label:" + identifierName + ";");
        if (args[0] == null || args[0].raw === undefined) styles.push.apply(styles, args);
        else {
            if (args[0][0] === undefined) console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            styles.push(args[0][0]);
            var len = args.length;
            var i = 1;
            for(; i < len; i++){
                if (args[0][i] === undefined) console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
                styles.push(args[i], args[0][i]);
            }
        } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class
        var Styled = _react1.withEmotionCache(function(props, cache, ref) {
            var finalTag = shouldUseAs && props.as || baseTag;
            var className = '';
            var classInterpolations = [];
            var mergedProps = props;
            if (props.theme == null) {
                mergedProps = {
                };
                for(var key in props)mergedProps[key] = props[key];
                mergedProps.theme = _react.useContext(_react1.ThemeContext);
            }
            if (typeof props.className === 'string') className = _utils.getRegisteredStyles(cache.registered, classInterpolations, props.className);
            else if (props.className != null) className = props.className + " ";
            var serialized = _serialize.serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
            var rules = _utils.insertStyles(cache, serialized, typeof finalTag === 'string');
            className += cache.key + "-" + serialized.name;
            if (targetClassName !== undefined) className += " " + targetClassName;
            var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(finalTag) : defaultShouldForwardProp;
            var newProps = {
            };
            for(var _key in props){
                if (shouldUseAs && _key === 'as') continue;
                if (finalShouldForwardProp(_key)) newProps[_key] = props[_key];
            }
            newProps.className = className;
            newProps.ref = ref;
            var ele = /*#__PURE__*/ _react.createElement(finalTag, newProps);
            return ele;
        });
        Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + ")";
        Styled.defaultProps = tag.defaultProps;
        Styled.__emotion_real = Styled;
        Styled.__emotion_base = baseTag;
        Styled.__emotion_styles = styles;
        Styled.__emotion_forwardProp = shouldForwardProp;
        Object.defineProperty(Styled, 'toString', {
            value: function value() {
                if (targetClassName === undefined && true) return 'NO_COMPONENT_SELECTOR';
                 // $FlowFixMe: coerce undefined to string
                return "." + targetClassName;
            }
        });
        Styled.withComponent = function(nextTag, nextOptions) {
            return createStyled1(nextTag, _extendsDefault.default({
            }, options, nextOptions, {
                shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
            })).apply(void 0, styles);
        };
        return Styled;
    };
};
exports.default = createStyled;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","react":"6TuXu","@emotion/is-prop-valid":"9zlj7","@emotion/react":"7kZV1","@emotion/utils":"981Zc","@emotion/serialize":"dxONe","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7kZV1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CacheProvider", ()=>_emotionElement99289B21BrowserEsmJs.C
);
parcelHelpers.export(exports, "ThemeContext", ()=>_emotionElement99289B21BrowserEsmJs.T
);
parcelHelpers.export(exports, "ThemeProvider", ()=>_emotionElement99289B21BrowserEsmJs.a
);
parcelHelpers.export(exports, "__unsafe_useEmotionCache", ()=>_emotionElement99289B21BrowserEsmJs._
);
parcelHelpers.export(exports, "useTheme", ()=>_emotionElement99289B21BrowserEsmJs.u
);
parcelHelpers.export(exports, "withEmotionCache", ()=>_emotionElement99289B21BrowserEsmJs.w
);
parcelHelpers.export(exports, "withTheme", ()=>_emotionElement99289B21BrowserEsmJs.b
);
parcelHelpers.export(exports, "ClassNames", ()=>ClassNames
);
parcelHelpers.export(exports, "Global", ()=>Global
);
parcelHelpers.export(exports, "createElement", ()=>jsx
);
parcelHelpers.export(exports, "css", ()=>css
);
parcelHelpers.export(exports, "jsx", ()=>jsx
);
parcelHelpers.export(exports, "keyframes", ()=>keyframes
);
var _react = require("react");
var _cache = require("@emotion/cache");
var _emotionElement99289B21BrowserEsmJs = require("./emotion-element-99289b21.browser.esm.js");
var _extends = require("@babel/runtime/helpers/extends");
var _weakMemoize = require("@emotion/weak-memoize");
var _hoistNonReactStatics = require("hoist-non-react-statics");
var _emotionReactIsolatedHoistNonReactStaticsDoNotUseThisInYourCodeBrowserEsmJs = require("../isolated-hoist-non-react-statics-do-not-use-this-in-your-code/dist/emotion-react-isolated-hoist-non-react-statics-do-not-use-this-in-your-code.browser.esm.js");
var _utils = require("@emotion/utils");
var _serialize = require("@emotion/serialize");
var _sheet = require("@emotion/sheet");
var global = arguments[3];
var pkg = {
    name: "@emotion/react",
    version: "11.5.0",
    main: "dist/emotion-react.cjs.js",
    module: "dist/emotion-react.esm.js",
    browser: {
        "./dist/emotion-react.cjs.js": "./dist/emotion-react.browser.cjs.js",
        "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
    },
    types: "types/index.d.ts",
    files: [
        "src",
        "dist",
        "jsx-runtime",
        "jsx-dev-runtime",
        "isolated-hoist-non-react-statics-do-not-use-this-in-your-code",
        "types/*.d.ts",
        "macro.js",
        "macro.d.ts",
        "macro.js.flow"
    ],
    sideEffects: false,
    author: "mitchellhamilton <mitchell@mitchellhamilton.me>",
    license: "MIT",
    scripts: {
        "test:typescript": "dtslint types"
    },
    dependencies: {
        "@babel/runtime": "^7.13.10",
        "@emotion/cache": "^11.5.0",
        "@emotion/serialize": "^1.0.2",
        "@emotion/sheet": "^1.0.3",
        "@emotion/utils": "^1.0.0",
        "@emotion/weak-memoize": "^0.2.5",
        "hoist-non-react-statics": "^3.3.1"
    },
    peerDependencies: {
        "@babel/core": "^7.0.0",
        react: ">=16.8.0"
    },
    peerDependenciesMeta: {
        "@babel/core": {
            optional: true
        },
        "@types/react": {
            optional: true
        }
    },
    devDependencies: {
        "@babel/core": "^7.13.10",
        "@emotion/css": "11.5.0",
        "@emotion/css-prettifier": "1.0.0",
        "@emotion/server": "11.4.0",
        "@emotion/styled": "11.3.0",
        "@types/react": "^16.9.11",
        dtslint: "^0.3.0",
        "html-tag-names": "^1.1.2",
        react: "16.14.0",
        "svg-tag-names": "^1.1.1"
    },
    repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
    publishConfig: {
        access: "public"
    },
    "umd:main": "dist/emotion-react.umd.min.js",
    preconstruct: {
        entrypoints: [
            "./index.js",
            "./jsx-runtime.js",
            "./jsx-dev-runtime.js",
            "./isolated-hoist-non-react-statics-do-not-use-this-in-your-code.js"
        ],
        umdName: "emotionReact"
    }
};
var jsx = function jsx1(type, props) {
    var args = arguments;
    if (props == null || !_emotionElement99289B21BrowserEsmJs.h.call(props, 'css')) // $FlowFixMe
    return _react.createElement.apply(undefined, args);
    var argsLength = args.length;
    var createElementArgArray = new Array(argsLength);
    createElementArgArray[0] = _emotionElement99289B21BrowserEsmJs.E;
    createElementArgArray[1] = _emotionElement99289B21BrowserEsmJs.c(type, props);
    for(var i = 2; i < argsLength; i++)createElementArgArray[i] = args[i];
     // $FlowFixMe
    return _react.createElement.apply(null, createElementArgArray);
};
var warnedAboutCssPropForGlobal = false; // maintain place over rerenders.
// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
// initial client-side render from SSR, use place of hydrating tag
var Global = /* #__PURE__ */ _emotionElement99289B21BrowserEsmJs.w(function(props, cache) {
    if (!warnedAboutCssPropForGlobal && // probably using the custom createElement which
    // means it will be turned into a className prop
    // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
    (props.className || props.css)) {
        console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
        warnedAboutCssPropForGlobal = true;
    }
    var styles = props.styles;
    var serialized = _serialize.serializeStyles([
        styles
    ], undefined, _react.useContext(_emotionElement99289B21BrowserEsmJs.T));
    // but it is based on a constant that will never change at runtime
    // it's effectively like having two implementations and switching them out
    // so it's not actually breaking anything
    var sheetRef = _react.useRef();
    _react.useLayoutEffect(function() {
        var key = cache.key + "-global";
        var sheet = new _sheet.StyleSheet({
            key: key,
            nonce: cache.sheet.nonce,
            container: cache.sheet.container,
            speedy: cache.sheet.isSpeedy
        });
        var rehydrating = false; // $FlowFixMe
        var node = document.querySelector("style[data-emotion=\"" + key + " " + serialized.name + "\"]");
        if (cache.sheet.tags.length) sheet.before = cache.sheet.tags[0];
        if (node !== null) {
            rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s
            node.setAttribute('data-emotion', key);
            sheet.hydrate([
                node
            ]);
        }
        sheetRef.current = [
            sheet,
            rehydrating
        ];
        return function() {
            sheet.flush();
        };
    }, [
        cache
    ]);
    _react.useLayoutEffect(function() {
        var sheetRefCurrent = sheetRef.current;
        var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
        if (rehydrating) {
            sheetRefCurrent[1] = false;
            return;
        }
        if (serialized.next !== undefined) // insert keyframes
        _utils.insertStyles(cache, serialized.next, true);
        if (sheet.tags.length) {
            // if this doesn't exist then it will be null so the style element will be appended
            var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
            sheet.before = element;
            sheet.flush();
        }
        cache.insert("", serialized, sheet, false);
    }, [
        cache,
        serialized.name
    ]);
    return null;
});
Global.displayName = 'EmotionGlobal';
function css() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    return _serialize.serializeStyles(args);
}
var keyframes = function keyframes1() {
    var insertable = css.apply(void 0, arguments);
    var name = "animation-" + insertable.name; // $FlowFixMe
    return {
        name: name,
        styles: "@keyframes " + name + "{" + insertable.styles + "}",
        anim: 1,
        toString: function toString() {
            return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
        }
    };
};
var classnames = function classnames1(args) {
    var len = args.length;
    var i = 0;
    var cls = '';
    for(; i < len; i++){
        var arg = args[i];
        if (arg == null) continue;
        var toAdd = void 0;
        switch(typeof arg){
            case 'boolean':
                break;
            case 'object':
                if (Array.isArray(arg)) toAdd = classnames1(arg);
                else {
                    if (arg.styles !== undefined && arg.name !== undefined) console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
                    toAdd = '';
                    for(var k in arg)if (arg[k] && k) {
                        toAdd && (toAdd += ' ');
                        toAdd += k;
                    }
                }
                break;
            default:
                toAdd = arg;
        }
        if (toAdd) {
            cls && (cls += ' ');
            cls += toAdd;
        }
    }
    return cls;
};
function merge(registered, css1, className) {
    var registeredStyles = [];
    var rawClassName = _utils.getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) return className;
    return rawClassName + css1(registeredStyles);
}
var ClassNames = /* #__PURE__ */ _emotionElement99289B21BrowserEsmJs.w(function(props, cache) {
    var hasRendered = false;
    var css1 = function css2() {
        if (hasRendered && true) throw new Error('css can only be used during render');
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        var serialized = _serialize.serializeStyles(args, cache.registered);
        _utils.insertStyles(cache, serialized, false);
        return cache.key + "-" + serialized.name;
    };
    var cx = function cx1() {
        if (hasRendered && true) throw new Error('cx can only be used during render');
        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
        return merge(cache.registered, css1, classnames(args));
    };
    var content = {
        css: css1,
        cx: cx,
        theme: _react.useContext(_emotionElement99289B21BrowserEsmJs.T)
    };
    var ele = props.children(content);
    hasRendered = true;
    return ele;
});
ClassNames.displayName = 'EmotionClassNames';
var isBrowser = true; // #1727 for some reason Jest evaluates modules twice if some consuming module gets mocked with jest.mock
var isJest = typeof jest !== 'undefined';
if (isBrowser && !isJest) {
    // globalThis has wide browser support - https://caniuse.com/?search=globalThis, Node.js 12 and later
    var globalContext = typeof globalThis !== 'undefined' ? globalThis // eslint-disable-line no-undef
     : isBrowser ? window : global;
    var globalKey = "__EMOTION_REACT_" + pkg.version.split('.')[0] + "__";
    if (globalContext[globalKey]) console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
    globalContext[globalKey] = true;
}

},{"react":"6TuXu","@emotion/cache":"7LQaX","./emotion-element-99289b21.browser.esm.js":"cGn4a","@babel/runtime/helpers/extends":"fpVWj","@emotion/weak-memoize":"hyJa4","hoist-non-react-statics":"jfzb6","../isolated-hoist-non-react-statics-do-not-use-this-in-your-code/dist/emotion-react-isolated-hoist-non-react-statics-do-not-use-this-in-your-code.browser.esm.js":"iNiTD","@emotion/utils":"981Zc","@emotion/serialize":"dxONe","@emotion/sheet":"7byLk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7LQaX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sheet = require("@emotion/sheet");
var _stylis = require("stylis");
var _weakMemoize = require("@emotion/weak-memoize");
var _memoize = require("@emotion/memoize");
var last = function last1(arr) {
    return arr.length ? arr[arr.length - 1] : null;
}; // based on https://github.com/thysultan/stylis.js/blob/e6843c373ebcbbfade25ebcc23f540ed8508da0a/src/Tokenizer.js#L239-L244
var identifierWithPointTracking = function identifierWithPointTracking1(begin, points, index) {
    var previous = 0;
    var character = 0;
    while(true){
        previous = character;
        character = _stylis.peek(); // &\f
        if (previous === 38 && character === 12) points[index] = 1;
        if (_stylis.token(character)) break;
        _stylis.next();
    }
    return _stylis.slice(begin, _stylis.position);
};
var toRules = function toRules1(parsed, points) {
    // pretend we've started with a comma
    var index = -1;
    var character = 44;
    do switch(_stylis.token(character)){
        case 0:
            // &\f
            if (character === 38 && _stylis.peek() === 12) // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
            // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
            // and when it should just concatenate the outer and inner selectors
            // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
            points[index] = 1;
            parsed[index] += identifierWithPointTracking(_stylis.position - 1, points, index);
            break;
        case 2:
            parsed[index] += _stylis.delimit(character);
            break;
        case 4:
            // comma
            if (character === 44) {
                // colon
                parsed[++index] = _stylis.peek() === 58 ? '&\f' : '';
                points[index] = parsed[index].length;
                break;
            }
        // fallthrough
        default:
            parsed[index] += _stylis.from(character);
    }
    while (character = _stylis.next())
    return parsed;
};
var getRules = function getRules1(value, points) {
    return _stylis.dealloc(toRules(_stylis.alloc(value), points));
}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11
var fixedElements = /* #__PURE__ */ new WeakMap();
var compat = function compat1(element) {
    if (element.type !== 'rule' || !element.parent || !element.length) return;
    var value = element.value, parent = element.parent;
    var isImplicitRule = element.column === parent.column && element.line === parent.line;
    while(parent.type !== 'rule'){
        parent = parent.parent;
        if (!parent) return;
    } // short-circuit for the simplest case
    if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) return;
     // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
    // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"
    if (isImplicitRule) return;
    fixedElements.set(element, true);
    var points = [];
    var rules = getRules(value, points);
    var parentRules = parent.props;
    for(var i = 0, k = 0; i < rules.length; i++)for(var j = 0; j < parentRules.length; j++, k++)element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
};
var removeLabel = function removeLabel1(element) {
    if (element.type === 'decl') {
        var value = element.value;
        if (value.charCodeAt(0) === 108 && value.charCodeAt(2) === 98) {
            // this ignores label
            element["return"] = '';
            element.value = '';
        }
    }
};
var ignoreFlag = 'emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason';
var isIgnoringComment = function isIgnoringComment1(element) {
    return !!element && element.type === 'comm' && element.children.indexOf(ignoreFlag) > -1;
};
var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm1(cache) {
    return function(element, index, children) {
        if (element.type !== 'rule') return;
        var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
        if (unsafePseudoClasses && cache.compat !== true) {
            var prevElement = index > 0 ? children[index - 1] : null;
            if (prevElement && isIgnoringComment(last(prevElement.children))) return;
            unsafePseudoClasses.forEach(function(unsafePseudoClass) {
                console.error("The pseudo class \"" + unsafePseudoClass + "\" is potentially unsafe when doing server-side rendering. Try changing it to \"" + unsafePseudoClass.split('-child')[0] + "-of-type\".");
            });
        }
    };
};
var isImportRule = function isImportRule1(element) {
    return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
};
var isPrependedWithRegularRules = function isPrependedWithRegularRules1(index, children) {
    for(var i = index - 1; i >= 0; i--){
        if (!isImportRule(children[i])) return true;
    }
    return false;
}; // use this to remove incorrect elements from further processing
// so they don't get handed to the `sheet` (or anything else)
// as that could potentially lead to additional logs which in turn could be overhelming to the user
var nullifyElement = function nullifyElement1(element) {
    element.type = '';
    element.value = '';
    element["return"] = '';
    element.children = '';
    element.props = '';
};
var incorrectImportAlarm = function incorrectImportAlarm1(element, index, children) {
    if (!isImportRule(element)) return;
    if (element.parent) {
        console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
        nullifyElement(element);
    } else if (isPrependedWithRegularRules(index, children)) {
        console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
        nullifyElement(element);
    }
};
var defaultStylisPlugins = [_stylis.prefixer];
var createCache = function createCache1(options) {
    var key = options.key;
    if (!key) throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
    if (key === 'css') {
        var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
        // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
        // note this very very intentionally targets all style elements regardless of the key to ensure
        // that creating a cache works inside of render of a React component
        Array.prototype.forEach.call(ssrStyles, function(node) {
            // we want to only move elements which have a space in the data-emotion attribute value
            // because that indicates that it is an Emotion 11 server-side rendered style elements
            // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
            // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
            // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
            // will not result in the Emotion 10 styles being destroyed
            var dataEmotionAttribute = node.getAttribute('data-emotion');
            if (dataEmotionAttribute.indexOf(' ') === -1) return;
            document.head.appendChild(node);
            node.setAttribute('data-s', '');
        });
    }
    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
    // $FlowFixMe
    if (/[^a-z-]/.test(key)) throw new Error("Emotion key must only contain lower case alphabetical characters and - but \"" + key + "\" was passed");
    var inserted = {
    }; // $FlowFixMe
    var container;
    var nodesToHydrate = [];
    container = options.container || document.head;
    Array.prototype.forEach.call(// means that the style elements we're looking at are only Emotion 11 server-rendered style elements
    document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function(node) {
        var attrib = node.getAttribute("data-emotion").split(' '); // $FlowFixMe
        for(var i = 1; i < attrib.length; i++)inserted[attrib[i]] = true;
        nodesToHydrate.push(node);
    });
    var _insert;
    var omnipresentPlugins = [
        compat,
        removeLabel
    ];
    omnipresentPlugins.push(createUnsafeSelectorsAlarm({
        get compat () {
            return cache.compat;
        }
    }), incorrectImportAlarm);
    var currentSheet;
    var finalizingPlugins = [_stylis.stringify, function(element) {
            if (!element.root) {
                if (element["return"]) currentSheet.insert(element["return"]);
                else if (element.value && element.type !== _stylis.COMMENT) // insert empty rule in non-production environments
                // so @emotion/jest can grab `key` from the (JS)DOM for caches without any rules inserted yet
                currentSheet.insert(element.value + "{}");
            }
        }
    ];
    var serializer = _stylis.middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
    var stylis = function stylis1(styles) {
        return _stylis.serialize(_stylis.compile(styles), serializer);
    };
    _insert = function insert(selector, serialized, sheet, shouldCache) {
        currentSheet = sheet;
        if (serialized.map !== undefined) currentSheet = {
            insert: function insert1(rule) {
                sheet.insert(rule + serialized.map);
            }
        };
        stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
        if (shouldCache) cache.inserted[serialized.name] = true;
    };
    var cache = {
        key: key,
        sheet: new _sheet.StyleSheet({
            key: key,
            container: container,
            nonce: options.nonce,
            speedy: options.speedy,
            prepend: options.prepend
        }),
        nonce: options.nonce,
        inserted: inserted,
        registered: {
        },
        insert: _insert
    };
    cache.sheet.hydrate(nodesToHydrate);
    return cache;
};
exports.default = createCache;

},{"@emotion/sheet":"7byLk","stylis":"9DX7s","@emotion/weak-memoize":"hyJa4","@emotion/memoize":"8uMtf","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7byLk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StyleSheet", ()=>StyleSheet1
);
/*

Based off glamor's StyleSheet, thanks Sunil ❤️

high performance StyleSheet for css-in-js systems

- uses multiple style tags behind the scenes for millions of rules
- uses `insertRule` for appending in production for *much* faster performance

// usage

import { StyleSheet } from '@emotion/sheet'

let styleSheet = new StyleSheet({ key: '', container: document.head })

styleSheet.insert('#box { border: 1px solid red; }')
- appends a css rule into the stylesheet

styleSheet.flush()
- empties the stylesheet of all its contents

*/ // $FlowFixMe
function sheetForTag(tag) {
    if (tag.sheet) // $FlowFixMe
    return tag.sheet;
     // this weirdness brought to you by firefox
    /* istanbul ignore next */ for(var i = 0; i < document.styleSheets.length; i++){
        if (document.styleSheets[i].ownerNode === tag) // $FlowFixMe
        return document.styleSheets[i];
    }
}
function createStyleElement(options) {
    var tag = document.createElement('style');
    tag.setAttribute('data-emotion', options.key);
    if (options.nonce !== undefined) tag.setAttribute('nonce', options.nonce);
    tag.appendChild(document.createTextNode(''));
    tag.setAttribute('data-s', '');
    return tag;
}
var StyleSheet1 = /*#__PURE__*/ function() {
    function StyleSheet2(options) {
        var _this = this;
        this._insertTag = function(tag) {
            var before;
            if (_this.tags.length === 0) before = _this.prepend ? _this.container.firstChild : _this.before;
            else before = _this.tags[_this.tags.length - 1].nextSibling;
            _this.container.insertBefore(tag, before);
            _this.tags.push(tag);
        };
        this.isSpeedy = options.speedy === undefined ? false : options.speedy;
        this.tags = [];
        this.ctr = 0;
        this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets
        this.key = options.key;
        this.container = options.container;
        this.prepend = options.prepend;
        this.before = null;
    }
    var _proto = StyleSheet2.prototype;
    _proto.hydrate = function hydrate(nodes) {
        nodes.forEach(this._insertTag);
    };
    _proto.insert = function insert(rule) {
        // the max length is how many rules we have per style tag, it's 65000 in speedy mode
        // it's 1 in dev because we insert source maps that map a single rule to a location
        // and you can only have one source map per style tag
        if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) this._insertTag(createStyleElement(this));
        var tag = this.tags[this.tags.length - 1];
        var isImportRule = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
        if (isImportRule && this._alreadyInsertedOrderInsensitiveRule) // this would only cause problem in speedy mode
        // but we don't want enabling speedy to affect the observable behavior
        // so we report this error at all times
        console.error("You're attempting to insert the following rule:\n" + rule + '\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.');
        this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule;
        if (this.isSpeedy) {
            var sheet = sheetForTag(tag);
            try {
                // this is the ultrafast version, works across browsers
                // the big drawback is that the css won't be editable in devtools
                sheet.insertRule(rule, sheet.cssRules.length);
            } catch (e) {
                if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear){/.test(rule)) console.error("There was a problem inserting the following rule: \"" + rule + "\"", e);
            }
        } else tag.appendChild(document.createTextNode(rule));
        this.ctr++;
    };
    _proto.flush = function flush() {
        // $FlowFixMe
        this.tags.forEach(function(tag) {
            return tag.parentNode && tag.parentNode.removeChild(tag);
        });
        this.tags = [];
        this.ctr = 0;
        this._alreadyInsertedOrderInsensitiveRule = false;
    };
    return StyleSheet2;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9DX7s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CHARSET", ()=>f
);
parcelHelpers.export(exports, "COMMENT", ()=>c
);
parcelHelpers.export(exports, "COUNTER_STYLE", ()=>w
);
parcelHelpers.export(exports, "DECLARATION", ()=>t
);
parcelHelpers.export(exports, "DOCUMENT", ()=>v
);
parcelHelpers.export(exports, "FONT_FACE", ()=>b
);
parcelHelpers.export(exports, "FONT_FEATURE_VALUES", ()=>$
);
parcelHelpers.export(exports, "IMPORT", ()=>i
);
parcelHelpers.export(exports, "KEYFRAMES", ()=>p
);
parcelHelpers.export(exports, "MEDIA", ()=>u
);
parcelHelpers.export(exports, "MOZ", ()=>r
);
parcelHelpers.export(exports, "MS", ()=>e
);
parcelHelpers.export(exports, "NAMESPACE", ()=>h
);
parcelHelpers.export(exports, "PAGE", ()=>s
);
parcelHelpers.export(exports, "RULESET", ()=>n
);
parcelHelpers.export(exports, "SUPPORTS", ()=>l
);
parcelHelpers.export(exports, "VIEWPORT", ()=>o
);
parcelHelpers.export(exports, "WEBKIT", ()=>a
);
parcelHelpers.export(exports, "abs", ()=>k
);
parcelHelpers.export(exports, "alloc", ()=>T
);
parcelHelpers.export(exports, "append", ()=>O
);
parcelHelpers.export(exports, "caret", ()=>P
);
parcelHelpers.export(exports, "char", ()=>J
);
parcelHelpers.export(exports, "character", ()=>F
);
parcelHelpers.export(exports, "characters", ()=>G
);
parcelHelpers.export(exports, "charat", ()=>z
);
parcelHelpers.export(exports, "column", ()=>B
);
parcelHelpers.export(exports, "combine", ()=>S
);
parcelHelpers.export(exports, "comment", ()=>te
);
parcelHelpers.export(exports, "commenter", ()=>ee
);
parcelHelpers.export(exports, "compile", ()=>ae
);
parcelHelpers.export(exports, "copy", ()=>I
);
parcelHelpers.export(exports, "dealloc", ()=>U
);
parcelHelpers.export(exports, "declaration", ()=>se
);
parcelHelpers.export(exports, "delimit", ()=>V
);
parcelHelpers.export(exports, "delimiter", ()=>_
);
parcelHelpers.export(exports, "escaping", ()=>Z
);
parcelHelpers.export(exports, "from", ()=>d
);
parcelHelpers.export(exports, "hash", ()=>m
);
parcelHelpers.export(exports, "identifier", ()=>re
);
parcelHelpers.export(exports, "indexof", ()=>j
);
parcelHelpers.export(exports, "length", ()=>D
);
parcelHelpers.export(exports, "line", ()=>q
);
parcelHelpers.export(exports, "match", ()=>x
);
parcelHelpers.export(exports, "middleware", ()=>oe
);
parcelHelpers.export(exports, "namespace", ()=>he
);
parcelHelpers.export(exports, "next", ()=>L
);
parcelHelpers.export(exports, "node", ()=>H
);
parcelHelpers.export(exports, "parse", ()=>ce
);
parcelHelpers.export(exports, "peek", ()=>N
);
parcelHelpers.export(exports, "position", ()=>E
);
parcelHelpers.export(exports, "prefix", ()=>ue
);
parcelHelpers.export(exports, "prefixer", ()=>ve
);
parcelHelpers.export(exports, "prev", ()=>K
);
parcelHelpers.export(exports, "replace", ()=>y
);
parcelHelpers.export(exports, "ruleset", ()=>ne
);
parcelHelpers.export(exports, "rulesheet", ()=>le
);
parcelHelpers.export(exports, "serialize", ()=>ie
);
parcelHelpers.export(exports, "sizeof", ()=>M
);
parcelHelpers.export(exports, "slice", ()=>Q
);
parcelHelpers.export(exports, "stringify", ()=>fe
);
parcelHelpers.export(exports, "strlen", ()=>A
);
parcelHelpers.export(exports, "substr", ()=>C
);
parcelHelpers.export(exports, "token", ()=>R
);
parcelHelpers.export(exports, "tokenize", ()=>W
);
parcelHelpers.export(exports, "tokenizer", ()=>Y
);
parcelHelpers.export(exports, "trim", ()=>g
);
parcelHelpers.export(exports, "whitespace", ()=>X
);
var e = "-ms-";
var r = "-moz-";
var a = "-webkit-";
var c = "comm";
var n = "rule";
var t = "decl";
var s = "@page";
var u = "@media";
var i = "@import";
var f = "@charset";
var o = "@viewport";
var l = "@supports";
var v = "@document";
var h = "@namespace";
var p = "@keyframes";
var b = "@font-face";
var w = "@counter-style";
var $ = "@font-feature-values";
var k = Math.abs;
var d = String.fromCharCode;
function m(e1, r1) {
    return (((r1 << 2 ^ z(e1, 0)) << 2 ^ z(e1, 1)) << 2 ^ z(e1, 2)) << 2 ^ z(e1, 3);
}
function g(e1) {
    return e1.trim();
}
function x(e1, r1) {
    return (e1 = r1.exec(e1)) ? e1[0] : e1;
}
function y(e1, r1, a1) {
    return e1.replace(r1, a1);
}
function j(e1, r1) {
    return e1.indexOf(r1);
}
function z(e1, r1) {
    return e1.charCodeAt(r1) | 0;
}
function C(e1, r1, a1) {
    return e1.slice(r1, a1);
}
function A(e1) {
    return e1.length;
}
function M(e1) {
    return e1.length;
}
function O(e1, r1) {
    return r1.push(e1), e1;
}
function S(e1, r1) {
    return e1.map(r1).join("");
}
var q = 1;
var B = 1;
var D = 0;
var E = 0;
var F = 0;
var G = "";
function H(e1, r1, a1, c1, n1, t1, s1) {
    return {
        value: e1,
        root: r1,
        parent: a1,
        type: c1,
        props: n1,
        children: t1,
        line: q,
        column: B,
        length: s1,
        return: ""
    };
}
function I(e1, r1, a1) {
    return H(e1, r1.root, r1.parent, a1, r1.props, r1.children, 0);
}
function J() {
    return F;
}
function K() {
    F = E > 0 ? z(G, --E) : 0;
    if (B--, F === 10) B = 1, q--;
    return F;
}
function L() {
    F = E < D ? z(G, E++) : 0;
    if (B++, F === 10) B = 1, q++;
    return F;
}
function N() {
    return z(G, E);
}
function P() {
    return E;
}
function Q(e1, r1) {
    return C(G, e1, r1);
}
function R(e1) {
    switch(e1){
        case 0:
        case 9:
        case 10:
        case 13:
        case 32:
            return 5;
        case 33:
        case 43:
        case 44:
        case 47:
        case 62:
        case 64:
        case 126:
        case 59:
        case 123:
        case 125:
            return 4;
        case 58:
            return 3;
        case 34:
        case 39:
        case 40:
        case 91:
            return 2;
        case 41:
        case 93:
            return 1;
    }
    return 0;
}
function T(e1) {
    return q = B = 1, D = A(G = e1), E = 0, [];
}
function U(e1) {
    return G = "", e1;
}
function V(e1) {
    return g(Q(E - 1, _(e1 === 91 ? e1 + 2 : e1 === 40 ? e1 + 1 : e1)));
}
function W(e1) {
    return U(Y(T(e1)));
}
function X(e1) {
    while(F = N())if (F < 33) L();
    else break;
    return R(e1) > 2 || R(F) > 3 ? "" : " ";
}
function Y(e1) {
    while(L())switch(R(F)){
        case 0:
            O(re(E - 1), e1);
            break;
        case 2:
            O(V(F), e1);
            break;
        default:
            O(d(F), e1);
    }
    return e1;
}
function Z(e1, r1) {
    while((--r1) && L())if (F < 48 || F > 102 || F > 57 && F < 65 || F > 70 && F < 97) break;
    return Q(e1, P() + (r1 < 6 && N() == 32 && L() == 32));
}
function _(e1) {
    while(L())switch(F){
        case e1:
            return E;
        case 34:
        case 39:
            return _(e1 === 34 || e1 === 39 ? e1 : F);
        case 40:
            if (e1 === 41) _(e1);
            break;
        case 92:
            L();
            break;
    }
    return E;
}
function ee(e1, r1) {
    while(L())if (e1 + F === 57) break;
    else if (e1 + F === 84 && N() === 47) break;
    return "/*" + Q(r1, E - 1) + "*" + d(e1 === 47 ? e1 : L());
}
function re(e1) {
    while(!R(N()))L();
    return Q(e1, E);
}
function ae(e1) {
    return U(ce("", null, null, null, [
        ""
    ], e1 = T(e1), 0, [
        0
    ], e1));
}
function ce(e1, r1, a1, c1, n1, t1, s1, u1, i1) {
    var f1 = 0;
    var o1 = 0;
    var l1 = s1;
    var v1 = 0;
    var h1 = 0;
    var p1 = 0;
    var b1 = 1;
    var w1 = 1;
    var $1 = 1;
    var k1 = 0;
    var m1 = "";
    var g1 = n1;
    var x1 = t1;
    var j1 = c1;
    var z1 = m1;
    while(w1)switch(p1 = k1, k1 = L()){
        case 34:
        case 39:
        case 91:
        case 40:
            z1 += V(k1);
            break;
        case 9:
        case 10:
        case 13:
        case 32:
            z1 += X(p1);
            break;
        case 92:
            z1 += Z(P() - 1, 7);
            continue;
        case 47:
            switch(N()){
                case 42:
                case 47:
                    O(te(ee(L(), P()), r1, a1), i1);
                    break;
                default:
                    z1 += "/";
            }
            break;
        case 123 * b1:
            u1[f1++] = A(z1) * $1;
        case 125 * b1:
        case 59:
        case 0:
            switch(k1){
                case 0:
                case 125:
                    w1 = 0;
                case 59 + o1:
                    if (h1 > 0 && A(z1) - l1) O(h1 > 32 ? se(z1 + ";", c1, a1, l1 - 1) : se(y(z1, " ", "") + ";", c1, a1, l1 - 2), i1);
                    break;
                case 59:
                    z1 += ";";
                default:
                    O(j1 = ne(z1, r1, a1, f1, o1, n1, u1, m1, g1 = [], x1 = [], l1), t1);
                    if (k1 === 123) {
                        if (o1 === 0) ce(z1, r1, j1, j1, g1, t1, l1, u1, x1);
                        else switch(v1){
                            case 100:
                            case 109:
                            case 115:
                                ce(e1, j1, j1, c1 && O(ne(e1, j1, j1, 0, 0, n1, u1, m1, n1, g1 = [], l1), x1), n1, x1, l1, u1, c1 ? g1 : x1);
                                break;
                            default:
                                ce(z1, j1, j1, j1, [
                                    ""
                                ], x1, l1, u1, x1);
                        }
                    }
            }
            f1 = o1 = h1 = 0, b1 = $1 = 1, m1 = z1 = "", l1 = s1;
            break;
        case 58:
            l1 = 1 + A(z1), h1 = p1;
        default:
            if (b1 < 1) {
                if (k1 == 123) --b1;
                else if (k1 == 125 && (b1++) == 0 && K() == 125) continue;
            }
            switch(z1 += d(k1), k1 * b1){
                case 38:
                    $1 = o1 > 0 ? 1 : (z1 += "\f", -1);
                    break;
                case 44:
                    u1[f1++] = (A(z1) - 1) * $1, $1 = 1;
                    break;
                case 64:
                    if (N() === 45) z1 += V(L());
                    v1 = N(), o1 = A(m1 = z1 += re(P())), k1++;
                    break;
                case 45:
                    if (p1 === 45 && A(z1) == 2) b1 = 0;
            }
    }
    return t1;
}
function ne(e1, r1, a1, c1, t1, s1, u1, i1, f1, o1, l1) {
    var v1 = t1 - 1;
    var h1 = t1 === 0 ? s1 : [
        ""
    ];
    var p1 = M(h1);
    for(var b1 = 0, w1 = 0, $1 = 0; b1 < c1; ++b1)for(var d1 = 0, m1 = C(e1, v1 + 1, v1 = k(w1 = u1[b1])), x1 = e1; d1 < p1; ++d1)if (x1 = g(w1 > 0 ? h1[d1] + " " + m1 : y(m1, /&\f/g, h1[d1]))) f1[$1++] = x1;
    return H(e1, r1, a1, t1 === 0 ? n : i1, f1, o1, l1);
}
function te(e1, r1, a1) {
    return H(e1, r1, a1, c, d(J()), C(e1, 2, -2), 0);
}
function se(e1, r1, a1, c1) {
    return H(e1, r1, a1, t, C(e1, 0, c1), C(e1, c1 + 1, -1), c1);
}
function ue(c1, n1) {
    switch(m(c1, n1)){
        case 5103:
            return a + "print-" + c1 + c1;
        case 5737:
        case 4201:
        case 3177:
        case 3433:
        case 1641:
        case 4457:
        case 2921:
        case 5572:
        case 6356:
        case 5844:
        case 3191:
        case 6645:
        case 3005:
        case 6391:
        case 5879:
        case 5623:
        case 6135:
        case 4599:
        case 4855:
        case 4215:
        case 6389:
        case 5109:
        case 5365:
        case 5621:
        case 3829:
            return a + c1 + c1;
        case 5349:
        case 4246:
        case 4810:
        case 6968:
        case 2756:
            return a + c1 + r + c1 + e + c1 + c1;
        case 6828:
        case 4268:
            return a + c1 + e + c1 + c1;
        case 6165:
            return a + c1 + e + "flex-" + c1 + c1;
        case 5187:
            return a + c1 + y(c1, /(\w+).+(:[^]+)/, a + "box-$1$2" + e + "flex-$1$2") + c1;
        case 5443:
            return a + c1 + e + "flex-item-" + y(c1, /flex-|-self/, "") + c1;
        case 4675:
            return a + c1 + e + "flex-line-pack" + y(c1, /align-content|flex-|-self/, "") + c1;
        case 5548:
            return a + c1 + e + y(c1, "shrink", "negative") + c1;
        case 5292:
            return a + c1 + e + y(c1, "basis", "preferred-size") + c1;
        case 6060:
            return a + "box-" + y(c1, "-grow", "") + a + c1 + e + y(c1, "grow", "positive") + c1;
        case 4554:
            return a + y(c1, /([^-])(transform)/g, "$1" + a + "$2") + c1;
        case 6187:
            return y(y(y(c1, /(zoom-|grab)/, a + "$1"), /(image-set)/, a + "$1"), c1, "") + c1;
        case 5495:
        case 3959:
            return y(c1, /(image-set\([^]*)/, a + "$1" + "$`$1");
        case 4968:
            return y(y(c1, /(.+:)(flex-)?(.*)/, a + "box-pack:$3" + e + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + a + c1 + c1;
        case 4095:
        case 3583:
        case 4068:
        case 2532:
            return y(c1, /(.+)-inline(.+)/, a + "$1$2") + c1;
        case 8116:
        case 7059:
        case 5753:
        case 5535:
        case 5445:
        case 5701:
        case 4933:
        case 4677:
        case 5533:
        case 5789:
        case 5021:
        case 4765:
            if (A(c1) - 1 - n1 > 6) switch(z(c1, n1 + 1)){
                case 109:
                    if (z(c1, n1 + 4) !== 45) break;
                case 102:
                    return y(c1, /(.+:)(.+)-([^]+)/, "$1" + a + "$2-$3" + "$1" + r + (z(c1, n1 + 3) == 108 ? "$3" : "$2-$3")) + c1;
                case 115:
                    return ~j(c1, "stretch") ? ue(y(c1, "stretch", "fill-available"), n1) + c1 : c1;
            }
            break;
        case 4949:
            if (z(c1, n1 + 1) !== 115) break;
        case 6444:
            switch(z(c1, A(c1) - 3 - (~j(c1, "!important") && 10))){
                case 107:
                    return y(c1, ":", ":" + a) + c1;
                case 101:
                    return y(c1, /(.+:)([^;!]+)(;|!.+)?/, "$1" + a + (z(c1, 14) === 45 ? "inline-" : "") + "box$3" + "$1" + a + "$2$3" + "$1" + e + "$2box$3") + c1;
            }
            break;
        case 5936:
            switch(z(c1, n1 + 11)){
                case 114:
                    return a + c1 + e + y(c1, /[svh]\w+-[tblr]{2}/, "tb") + c1;
                case 108:
                    return a + c1 + e + y(c1, /[svh]\w+-[tblr]{2}/, "tb-rl") + c1;
                case 45:
                    return a + c1 + e + y(c1, /[svh]\w+-[tblr]{2}/, "lr") + c1;
            }
            return a + c1 + e + c1 + c1;
    }
    return c1;
}
function ie(e1, r1) {
    var a1 = "";
    var c1 = M(e1);
    for(var n1 = 0; n1 < c1; n1++)a1 += r1(e1[n1], n1, e1, r1) || "";
    return a1;
}
function fe(e1, r1, a1, s1) {
    switch(e1.type){
        case i:
        case t:
            return e1.return = e1.return || e1.value;
        case c:
            return "";
        case n:
            e1.value = e1.props.join(",");
    }
    return A(a1 = ie(e1.children, s1)) ? e1.return = e1.value + "{" + a1 + "}" : "";
}
function oe(e1) {
    var r1 = M(e1);
    return function(a1, c1, n1, t1) {
        var s1 = "";
        for(var u1 = 0; u1 < r1; u1++)s1 += e1[u1](a1, c1, n1, t1) || "";
        return s1;
    };
}
function le(e1) {
    return function(r1) {
        if (!r1.root) {
            if (r1 = r1.return) e1(r1);
        }
    };
}
function ve(c1, s1, u1, i1) {
    if (!c1.return) switch(c1.type){
        case t:
            c1.return = ue(c1.value, c1.length);
            break;
        case p:
            return ie([
                I(y(c1.value, "@", "@" + a), c1, "")
            ], i1);
        case n:
            if (c1.length) return S(c1.props, function(n1) {
                switch(x(n1, /(::plac\w+|:read-\w+)/)){
                    case ":read-only":
                    case ":read-write":
                        return ie([
                            I(y(n1, /:(read-\w+)/, ":" + r + "$1"), c1, "")
                        ], i1);
                    case "::placeholder":
                        return ie([
                            I(y(n1, /:(plac\w+)/, ":" + a + "input-$1"), c1, ""),
                            I(y(n1, /:(plac\w+)/, ":" + r + "$1"), c1, ""),
                            I(y(n1, /:(plac\w+)/, e + "input-$1"), c1, "")
                        ], i1);
                }
                return "";
            });
    }
}
function he(e1) {
    switch(e1.type){
        case n:
            e1.props = e1.props.map(function(r1) {
                return S(W(r1), function(r2, a1, c1) {
                    switch(z(r2, 0)){
                        case 12:
                            return C(r2, 1, A(r2));
                        case 0:
                        case 40:
                        case 43:
                        case 62:
                        case 126:
                            return r2;
                        case 58:
                            if (c1[++a1] === "global") c1[a1] = "", c1[++a1] = "\f" + C(c1[a1], a1 = 1, -1);
                        case 32:
                            return a1 === 1 ? "" : r2;
                        default:
                            switch(a1){
                                case 0:
                                    e1 = r2;
                                    return M(c1) > 1 ? "" : r2;
                                case a1 = M(c1) - 1:
                                case 2:
                                    return a1 === 2 ? r2 + e1 + e1 : r2 + e1;
                                default:
                                    return r2;
                            }
                    }
                });
            });
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hyJa4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var weakMemoize = function weakMemoize1(func) {
    // $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps
    var cache = new WeakMap();
    return function(arg) {
        if (cache.has(arg)) // $FlowFixMe
        return cache.get(arg);
        var ret = func(arg);
        cache.set(arg, ret);
        return ret;
    };
};
exports.default = weakMemoize;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cGn4a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "C", ()=>CacheProvider
);
parcelHelpers.export(exports, "E", ()=>Emotion
);
parcelHelpers.export(exports, "T", ()=>ThemeContext
);
parcelHelpers.export(exports, "_", ()=>__unsafe_useEmotionCache
);
parcelHelpers.export(exports, "a", ()=>ThemeProvider
);
parcelHelpers.export(exports, "b", ()=>withTheme
);
parcelHelpers.export(exports, "c", ()=>createEmotionProps
);
parcelHelpers.export(exports, "h", ()=>hasOwnProperty
);
parcelHelpers.export(exports, "u", ()=>useTheme
);
parcelHelpers.export(exports, "w", ()=>withEmotionCache
);
var _react = require("react");
var _cache = require("@emotion/cache");
var _cacheDefault = parcelHelpers.interopDefault(_cache);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _weakMemoize = require("@emotion/weak-memoize");
var _weakMemoizeDefault = parcelHelpers.interopDefault(_weakMemoize);
var _emotionReactIsolatedHoistNonReactStaticsDoNotUseThisInYourCodeBrowserEsmJs = require("../isolated-hoist-non-react-statics-do-not-use-this-in-your-code/dist/emotion-react-isolated-hoist-non-react-statics-do-not-use-this-in-your-code.browser.esm.js");
var _emotionReactIsolatedHoistNonReactStaticsDoNotUseThisInYourCodeBrowserEsmJsDefault = parcelHelpers.interopDefault(_emotionReactIsolatedHoistNonReactStaticsDoNotUseThisInYourCodeBrowserEsmJs);
var _utils = require("@emotion/utils");
var _serialize = require("@emotion/serialize");
var hasOwnProperty = Object.prototype.hasOwnProperty;
var EmotionCacheContext = /* #__PURE__ */ _react.createContext(// because this module is primarily intended for the browser and node
// but it's also required in react native and similar environments sometimes
// and we could have a special build just for that
// but this is much easier and the native packages
// might use a different theme context in the future anyway
typeof HTMLElement !== 'undefined' ? /* #__PURE__ */ _cacheDefault.default({
    key: 'css'
}) : null);
EmotionCacheContext.displayName = 'EmotionCacheContext';
var CacheProvider = EmotionCacheContext.Provider;
var __unsafe_useEmotionCache = function useEmotionCache() {
    return _react.useContext(EmotionCacheContext);
};
var withEmotionCache = function withEmotionCache1(func) {
    // $FlowFixMe
    return(/*#__PURE__*/ _react.forwardRef(function(props, ref) {
        // the cache will never be null in the browser
        var cache = _react.useContext(EmotionCacheContext);
        return func(props, cache, ref);
    }));
};
var ThemeContext = /* #__PURE__ */ _react.createContext({
});
ThemeContext.displayName = 'EmotionThemeContext';
var useTheme = function useTheme1() {
    return _react.useContext(ThemeContext);
};
var getTheme = function getTheme1(outerTheme, theme) {
    if (typeof theme === 'function') {
        var mergedTheme = theme(outerTheme);
        if (mergedTheme == null || typeof mergedTheme !== 'object' || Array.isArray(mergedTheme)) throw new Error('[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!');
        return mergedTheme;
    }
    if (theme == null || typeof theme !== 'object' || Array.isArray(theme)) throw new Error('[ThemeProvider] Please make your theme prop a plain object');
    return _extendsDefault.default({
    }, outerTheme, theme);
};
var createCacheWithTheme = /* #__PURE__ */ _weakMemoizeDefault.default(function(outerTheme) {
    return _weakMemoizeDefault.default(function(theme) {
        return getTheme(outerTheme, theme);
    });
});
var ThemeProvider = function ThemeProvider1(props) {
    var theme = _react.useContext(ThemeContext);
    if (props.theme !== theme) theme = createCacheWithTheme(theme)(props.theme);
    return(/*#__PURE__*/ _react.createElement(ThemeContext.Provider, {
        value: theme
    }, props.children));
};
function withTheme(Component) {
    var componentName = Component.displayName || Component.name || 'Component';
    var render = function render1(props, ref) {
        var theme = _react.useContext(ThemeContext);
        return(/*#__PURE__*/ _react.createElement(Component, _extendsDefault.default({
            theme: theme,
            ref: ref
        }, props)));
    }; // $FlowFixMe
    var WithTheme = /*#__PURE__*/ _react.forwardRef(render);
    WithTheme.displayName = "WithTheme(" + componentName + ")";
    return _emotionReactIsolatedHoistNonReactStaticsDoNotUseThisInYourCodeBrowserEsmJsDefault.default(WithTheme, Component);
}
// thus we only need to replace what is a valid character for JS, but not for CSS
var sanitizeIdentifier = function sanitizeIdentifier1(identifier) {
    return identifier.replace(/\$/g, '-');
};
var typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__';
var labelPropName = '__EMOTION_LABEL_PLEASE_DO_NOT_USE__';
var createEmotionProps = function createEmotionProps1(type, props) {
    if (typeof props.css === 'string' && props.css.indexOf(':') !== -1) throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
    var newProps = {
    };
    for(var key in props)if (hasOwnProperty.call(props, key)) newProps[key] = props[key];
    newProps[typePropName] = type;
    var error = new Error();
    if (error.stack) {
        // chrome
        var match = error.stack.match(/at (?:Object\.|Module\.|)(?:jsx|createEmotionProps).*\n\s+at (?:Object\.|)([A-Z][A-Za-z0-9$]+) /);
        if (!match) // safari and firefox
        match = error.stack.match(/.*\n([A-Z][A-Za-z0-9$]+)@/);
        if (match) newProps[labelPropName] = sanitizeIdentifier(match[1]);
    }
    return newProps;
};
var Emotion = /* #__PURE__ */ withEmotionCache(function(props, cache, ref) {
    var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works
    // not passing the registered cache to serializeStyles because it would
    // make certain babel optimisations not possible
    if (typeof cssProp === 'string' && cache.registered[cssProp] !== undefined) cssProp = cache.registered[cssProp];
    var type = props[typePropName];
    var registeredStyles = [
        cssProp
    ];
    var className = '';
    if (typeof props.className === 'string') className = _utils.getRegisteredStyles(cache.registered, registeredStyles, props.className);
    else if (props.className != null) className = props.className + " ";
    var serialized = _serialize.serializeStyles(registeredStyles, undefined, _react.useContext(ThemeContext));
    if (serialized.name.indexOf('-') === -1) {
        var labelFromStack = props[labelPropName];
        if (labelFromStack) serialized = _serialize.serializeStyles([
            serialized,
            'label:' + labelFromStack + ';'
        ]);
    }
    var rules = _utils.insertStyles(cache, serialized, typeof type === 'string');
    className += cache.key + "-" + serialized.name;
    var newProps = {
    };
    for(var key in props)if (hasOwnProperty.call(props, key) && key !== 'css' && key !== typePropName && key !== labelPropName) newProps[key] = props[key];
    newProps.ref = ref;
    newProps.className = className;
    var ele = /*#__PURE__*/ _react.createElement(type, newProps);
    return ele;
});
Emotion.displayName = 'EmotionCssPropInternal';

},{"react":"6TuXu","@emotion/cache":"7LQaX","@babel/runtime/helpers/esm/extends":"bKAu6","@emotion/weak-memoize":"hyJa4","../isolated-hoist-non-react-statics-do-not-use-this-in-your-code/dist/emotion-react-isolated-hoist-non-react-statics-do-not-use-this-in-your-code.browser.esm.js":"iNiTD","@emotion/utils":"981Zc","@emotion/serialize":"dxONe","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iNiTD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hoistNonReactStatics = require("hoist-non-react-statics");
var _hoistNonReactStaticsDefault = parcelHelpers.interopDefault(_hoistNonReactStatics);
// this file isolates this package that is not tree-shakeable
// and if this module doesn't actually contain any logic of its own
// then Rollup just use 'hoist-non-react-statics' directly in other chunks
var hoistNonReactStatics = function(targetComponent, sourceComponent) {
    return _hoistNonReactStaticsDefault.default(targetComponent, sourceComponent);
};
exports.default = hoistNonReactStatics;

},{"hoist-non-react-statics":"jfzb6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jfzb6":[function(require,module,exports) {
'use strict';
var reactIs = require('react-is');
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */ var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};
var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};
var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
};
var MEMO_STATICS = {
    '$$typeof': true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
};
var TYPE_STATICS = {
};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
function getStatics(component) {
    // React v16.11 and below
    if (reactIs.isMemo(component)) return MEMO_STATICS;
     // React v16.12 and above
    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}
var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components
        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for(var i = 0; i < keys.length; ++i){
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try {
                    // Avoid failures from read-only properties
                    defineProperty(targetComponent, key, descriptor);
                } catch (e) {
                }
            }
        }
    }
    return targetComponent;
}
module.exports = hoistNonReactStatics;

},{"react-is":"ajJdr"}],"ajJdr":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-is.development.js');

},{"./cjs/react-is.development.js":"ccpo1"}],"ccpo1":[function(require,module,exports) {
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 60103;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 60106;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 60107;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 60108;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 60114;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 60109;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 60110; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 60111;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 60111;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 60112;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 60113;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 60120;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 60115;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 60116;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 60121;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 60117;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 60118;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 60119;
    function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }
    function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
            var $$typeof = object.$$typeof;
            switch($$typeof){
                case REACT_ELEMENT_TYPE:
                    var type = object.type;
                    switch(type){
                        case REACT_ASYNC_MODE_TYPE:
                        case REACT_CONCURRENT_MODE_TYPE:
                        case REACT_FRAGMENT_TYPE:
                        case REACT_PROFILER_TYPE:
                        case REACT_STRICT_MODE_TYPE:
                        case REACT_SUSPENSE_TYPE:
                            return type;
                        default:
                            var $$typeofType = type && type.$$typeof;
                            switch($$typeofType){
                                case REACT_CONTEXT_TYPE:
                                case REACT_FORWARD_REF_TYPE:
                                case REACT_LAZY_TYPE:
                                case REACT_MEMO_TYPE:
                                case REACT_PROVIDER_TYPE:
                                    return $$typeofType;
                                default:
                                    return $$typeof;
                            }
                    }
                case REACT_PORTAL_TYPE:
                    return $$typeof;
            }
        }
        return undefined;
    } // AsyncMode is deprecated along with isAsyncMode
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element1 = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated
    function isAsyncMode(object) {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
            console['warn']("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element1;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
})();

},{}],"981Zc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getRegisteredStyles", ()=>getRegisteredStyles
);
parcelHelpers.export(exports, "insertStyles", ()=>insertStyles
);
var isBrowser = true;
function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = '';
    classNames.split(' ').forEach(function(className) {
        if (registered[className] !== undefined) registeredStyles.push(registered[className] + ";");
        else rawClassName += className + " ";
    });
    return rawClassName;
}
var insertStyles = function insertStyles1(cache, serialized, isStringTag) {
    var className = cache.key + "-" + serialized.name;
    if (// class name could be used further down
    // the tree but if it's a string tag, we know it won't
    // so we don't have to add it to registered cache.
    // this improves memory usage since we can avoid storing the whole style string
    (isStringTag === false || // in node since emotion-server relies on whether a style is in
    // the registered cache to know whether a style is global or not
    // also, note that this check will be dead code eliminated in the browser
    isBrowser === false) && cache.registered[className] === undefined) cache.registered[className] = serialized.styles;
    if (cache.inserted[serialized.name] === undefined) {
        var current = serialized;
        do {
            var maybeStyles = cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);
            current = current.next;
        }while (current !== undefined)
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dxONe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "serializeStyles", ()=>serializeStyles
);
var _hash = require("@emotion/hash");
var _hashDefault = parcelHelpers.interopDefault(_hash);
var _unitless = require("@emotion/unitless");
var _unitlessDefault = parcelHelpers.interopDefault(_unitless);
var _memoize = require("@emotion/memoize");
var _memoizeDefault = parcelHelpers.interopDefault(_memoize);
var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
var isCustomProperty = function isCustomProperty1(property) {
    return property.charCodeAt(1) === 45;
};
var isProcessableValue = function isProcessableValue1(value) {
    return value != null && typeof value !== 'boolean';
};
var processStyleName = /* #__PURE__ */ _memoizeDefault.default(function(styleName) {
    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
});
var processStyleValue = function processStyleValue1(key, value) {
    switch(key){
        case 'animation':
        case 'animationName':
            if (typeof value === 'string') return value.replace(animationRegex, function(match, p1, p2) {
                cursor = {
                    name: p1,
                    styles: p2,
                    next: cursor
                };
                return p1;
            });
    }
    if (_unitlessDefault.default[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) return value + 'px';
    return value;
};
var contentValuePattern = /(attr|counters?|url|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
var contentValues = [
    'normal',
    'none',
    'initial',
    'inherit',
    'unset'
];
var oldProcessStyleValue = processStyleValue;
var msPattern = /^-ms-/;
var hyphenPattern = /-(.)/g;
var hyphenatedCache = {
};
processStyleValue = function processStyleValue2(key, value) {
    if (key === 'content') {
        if (typeof value !== 'string' || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
    }
    var processed = oldProcessStyleValue(key, value);
    if (processed !== '' && !isCustomProperty(key) && key.indexOf('-') !== -1 && hyphenatedCache[key] === undefined) {
        hyphenatedCache[key] = true;
        console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, 'ms-').replace(hyphenPattern, function(str, _char) {
            return _char.toUpperCase();
        }) + "?");
    }
    return processed;
};
function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) return '';
    if (interpolation.__emotion_styles !== undefined) {
        if (interpolation.toString() === 'NO_COMPONENT_SELECTOR') throw new Error('Component selectors can only be used in conjunction with @emotion/babel-plugin.');
        return interpolation;
    }
    switch(typeof interpolation){
        case 'boolean':
            return '';
        case 'object':
            if (interpolation.anim === 1) {
                cursor = {
                    name: interpolation.name,
                    styles: interpolation.styles,
                    next: cursor
                };
                return interpolation.name;
            }
            if (interpolation.styles !== undefined) {
                var next = interpolation.next;
                if (next !== undefined) // not the most efficient thing ever but this is a pretty rare case
                // and there will be very few iterations of this generally
                while(next !== undefined){
                    cursor = {
                        name: next.name,
                        styles: next.styles,
                        next: cursor
                    };
                    next = next.next;
                }
                var styles = interpolation.styles + ";";
                if (interpolation.map !== undefined) styles += interpolation.map;
                return styles;
            }
            return createStringFromObject(mergedProps, registered, interpolation);
        case 'function':
            if (mergedProps !== undefined) {
                var previousCursor = cursor;
                var result = interpolation(mergedProps);
                cursor = previousCursor;
                return handleInterpolation(mergedProps, registered, result);
            } else console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
            break;
        case 'string':
            var matched = [];
            var replaced = interpolation.replace(animationRegex, function(match, p1, p2) {
                var fakeVarName = "animation" + matched.length;
                matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, '') + "`");
                return "${" + fakeVarName + "}";
            });
            if (matched.length) console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, [
                "`" + replaced + "`"
            ]).join('\n') + '\n\nYou should wrap it with `css` like this:\n\n' + ("css`" + replaced + "`"));
            break;
    } // finalize string values (regular strings and functions interpolated into css calls)
    if (registered == null) return interpolation;
    var cached = registered[interpolation];
    return cached !== undefined ? cached : interpolation;
}
function createStringFromObject(mergedProps, registered, obj) {
    var string = '';
    if (Array.isArray(obj)) for(var i = 0; i < obj.length; i++)string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
    else for(var _key in obj){
        var value = obj[_key];
        if (typeof value !== 'object') {
            if (registered != null && registered[value] !== undefined) string += _key + "{" + registered[value] + "}";
            else if (isProcessableValue(value)) string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
        } else {
            if (_key === 'NO_COMPONENT_SELECTOR' && true) throw new Error('Component selectors can only be used in conjunction with @emotion/babel-plugin.');
            if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
                for(var _i = 0; _i < value.length; _i++)if (isProcessableValue(value[_i])) string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
            } else {
                var interpolated = handleInterpolation(mergedProps, registered, value);
                switch(_key){
                    case 'animation':
                    case 'animationName':
                        string += processStyleName(_key) + ":" + interpolated + ";";
                        break;
                    default:
                        if (_key === 'undefined') console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                        string += _key + "{" + interpolated + "}";
                }
            }
        }
    }
    return string;
}
var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
var sourceMapPattern;
sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
// keyframes are stored on the SerializedStyles object as a linked list
var cursor;
var serializeStyles = function serializeStyles1(args, registered, mergedProps) {
    if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) return args[0];
    var stringMode = true;
    var styles = '';
    cursor = undefined;
    var strings = args[0];
    if (strings == null || strings.raw === undefined) {
        stringMode = false;
        styles += handleInterpolation(mergedProps, registered, strings);
    } else {
        if (strings[0] === undefined) console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
        styles += strings[0];
    } // we start at 1 since we've already handled the first arg
    for(var i = 1; i < args.length; i++){
        styles += handleInterpolation(mergedProps, registered, args[i]);
        if (stringMode) {
            if (strings[i] === undefined) console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            styles += strings[i];
        }
    }
    var sourceMap;
    styles = styles.replace(sourceMapPattern, function(match) {
        sourceMap = match;
        return '';
    });
    labelPattern.lastIndex = 0;
    var identifierName = '';
    var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5
    while((match = labelPattern.exec(styles)) !== null)identifierName += '-' + match[1];
    var name = _hashDefault.default(styles) + identifierName;
    // $FlowFixMe SerializedStyles type doesn't have toString property (and we don't want to add it)
    return {
        name: name,
        styles: styles,
        map: sourceMap,
        next: cursor,
        toString: function toString() {
            return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
        }
    };
};

},{"@emotion/hash":"5mt1j","@emotion/unitless":"kXMxY","@emotion/memoize":"8uMtf","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5mt1j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* eslint-disable */ // Inspired by https://github.com/garycourt/murmurhash-js
// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
function murmur2(str) {
    // 'm' and 'r' are mixing constants generated offline.
    // They're not really 'magic', they just happen to work well.
    // const m = 0x5bd1e995;
    // const r = 24;
    // Initialize the hash
    var h = 0; // Mix 4 bytes at a time into the hash
    var k, i = 0, len = str.length;
    for(; len >= 4; ++i, len -= 4){
        k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
        k = /* Math.imul(k, m): */ (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
        k ^= /* k >>> r: */ k >>> 24;
        h = /* Math.imul(k, m): */ (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */ (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    } // Handle the last few bytes of the input array
    switch(len){
        case 3:
            h ^= (str.charCodeAt(i + 2) & 255) << 16;
        case 2:
            h ^= (str.charCodeAt(i + 1) & 255) << 8;
        case 1:
            h ^= str.charCodeAt(i) & 255;
            h = /* Math.imul(h, m): */ (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    } // Do a few final mixes of the hash to ensure the last few
    // bytes are well-incorporated.
    h ^= h >>> 13;
    h = /* Math.imul(h, m): */ (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
}
exports.default = murmur2;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kXMxY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var unitlessKeys = {
    animationIterationCount: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    // SVG-related properties
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
};
exports.default = unitlessKeys;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fSTCy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_styledEngineProviderDefault.default
);
var _styledEngineProvider = require("./StyledEngineProvider");
var _styledEngineProviderDefault = parcelHelpers.interopDefault(_styledEngineProvider);

},{"./StyledEngineProvider":"g8Hlc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"g8Hlc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react1 = require("@emotion/react");
var _cache = require("@emotion/cache"); // Cache with option to prepend emotion's style tag
var _cacheDefault = parcelHelpers.interopDefault(_cache);
var _jsxRuntime = require("react/jsx-runtime");
const cache = _cacheDefault.default({
    key: 'css',
    prepend: true
});
function StyledEngineProvider(props) {
    const { injectFirst , children  } = props;
    return injectFirst ? /*#__PURE__*/ _jsxRuntime.jsx(_react1.CacheProvider, {
        value: cache,
        children: children
    }) : children;
}
exports.default = StyledEngineProvider;
StyledEngineProvider.propTypes = {
    /**
   * Your component tree.
   */ children: _propTypesDefault.default.node,
    /**
   * By default, the styles are injected last in the <head> element of the page.
   * As a result, they gain more specificity than any other style sheet.
   * If you want to override MUI's styles, set this prop.
   */ injectFirst: _propTypesDefault.default.bool
};

},{"react":"6TuXu","prop-types":"1tgq3","@emotion/react":"7kZV1","@emotion/cache":"7LQaX","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5nCS4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_globalStylesDefault.default
);
var _globalStyles = require("./GlobalStyles");
var _globalStylesDefault = parcelHelpers.interopDefault(_globalStyles);

},{"./GlobalStyles":"kot5k","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kot5k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react1 = require("@emotion/react");
var _jsxRuntime = require("react/jsx-runtime");
function isEmpty(obj) {
    return obj === undefined || obj === null || Object.keys(obj).length === 0;
}
function GlobalStyles(props) {
    const { styles , defaultTheme ={
    }  } = props;
    const globalStyles = typeof styles === 'function' ? (themeInput)=>styles(isEmpty(themeInput) ? defaultTheme : themeInput)
     : styles;
    return(/*#__PURE__*/ _jsxRuntime.jsx(_react1.Global, {
        styles: globalStyles
    }));
}
exports.default = GlobalStyles;
GlobalStyles.propTypes = {
    defaultTheme: _propTypesDefault.default.object,
    styles: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.string,
        _propTypesDefault.default.object,
        _propTypesDefault.default.func
    ])
};

},{"react":"6TuXu","prop-types":"1tgq3","@emotion/react":"7kZV1","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4nAEn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "border", ()=>border
);
parcelHelpers.export(exports, "borderTop", ()=>borderTop
);
parcelHelpers.export(exports, "borderRight", ()=>borderRight
);
parcelHelpers.export(exports, "borderBottom", ()=>borderBottom
);
parcelHelpers.export(exports, "borderLeft", ()=>borderLeft
);
parcelHelpers.export(exports, "borderColor", ()=>borderColor
);
parcelHelpers.export(exports, "borderTopColor", ()=>borderTopColor
);
parcelHelpers.export(exports, "borderRightColor", ()=>borderRightColor
);
parcelHelpers.export(exports, "borderBottomColor", ()=>borderBottomColor
);
parcelHelpers.export(exports, "borderLeftColor", ()=>borderLeftColor
);
parcelHelpers.export(exports, "borderRadius", ()=>borderRadius
);
var _responsivePropType = require("./responsivePropType");
var _responsivePropTypeDefault = parcelHelpers.interopDefault(_responsivePropType);
var _style = require("./style");
var _styleDefault = parcelHelpers.interopDefault(_style);
var _compose = require("./compose");
var _composeDefault = parcelHelpers.interopDefault(_compose);
var _spacing = require("./spacing");
var _breakpoints = require("./breakpoints");
function getBorder(value) {
    if (typeof value !== 'number') return value;
    return `${value}px solid`;
}
const border = _styleDefault.default({
    prop: 'border',
    themeKey: 'borders',
    transform: getBorder
});
const borderTop = _styleDefault.default({
    prop: 'borderTop',
    themeKey: 'borders',
    transform: getBorder
});
const borderRight = _styleDefault.default({
    prop: 'borderRight',
    themeKey: 'borders',
    transform: getBorder
});
const borderBottom = _styleDefault.default({
    prop: 'borderBottom',
    themeKey: 'borders',
    transform: getBorder
});
const borderLeft = _styleDefault.default({
    prop: 'borderLeft',
    themeKey: 'borders',
    transform: getBorder
});
const borderColor = _styleDefault.default({
    prop: 'borderColor',
    themeKey: 'palette'
});
const borderTopColor = _styleDefault.default({
    prop: 'borderTopColor',
    themeKey: 'palette'
});
const borderRightColor = _styleDefault.default({
    prop: 'borderRightColor',
    themeKey: 'palette'
});
const borderBottomColor = _styleDefault.default({
    prop: 'borderBottomColor',
    themeKey: 'palette'
});
const borderLeftColor = _styleDefault.default({
    prop: 'borderLeftColor',
    themeKey: 'palette'
});
const borderRadius = (props)=>{
    if (props.borderRadius !== undefined && props.borderRadius !== null) {
        const transformer = _spacing.createUnaryUnit(props.theme, 'shape.borderRadius', 4, 'borderRadius');
        const styleFromPropValue = (propValue)=>({
                borderRadius: _spacing.getValue(transformer, propValue)
            })
        ;
        return _breakpoints.handleBreakpoints(props, props.borderRadius, styleFromPropValue);
    }
    return null;
};
borderRadius.propTypes = {
    borderRadius: _responsivePropTypeDefault.default
};
borderRadius.filterProps = [
    'borderRadius'
];
const borders = _composeDefault.default(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);
exports.default = borders;

},{"./responsivePropType":"1l0hw","./style":"1RuK7","./compose":"8zDWu","./spacing":"foZEo","./breakpoints":"6bEk8","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1l0hw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
const responsivePropType = _propTypesDefault.default.oneOfType([
    _propTypesDefault.default.number,
    _propTypesDefault.default.string,
    _propTypesDefault.default.object,
    _propTypesDefault.default.array
]);
exports.default = responsivePropType;

},{"prop-types":"1tgq3","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1RuK7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getPath", ()=>getPath
);
var _utils = require("@mui/utils");
var _responsivePropType = require("./responsivePropType");
var _responsivePropTypeDefault = parcelHelpers.interopDefault(_responsivePropType);
var _breakpoints = require("./breakpoints");
function getPath(obj, path) {
    if (!path || typeof path !== 'string') return null;
    return path.split('.').reduce((acc, item)=>acc && acc[item] ? acc[item] : null
    , obj);
}
function getValue(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
    let value;
    if (typeof themeMapping === 'function') value = themeMapping(propValueFinal);
    else if (Array.isArray(themeMapping)) value = themeMapping[propValueFinal] || userValue;
    else value = getPath(themeMapping, propValueFinal) || userValue;
    if (transform) value = transform(value);
    return value;
}
function style(options) {
    const { prop , cssProperty =options.prop , themeKey , transform  } = options;
    const fn = (props)=>{
        if (props[prop] == null) return null;
        const propValue = props[prop];
        const theme = props.theme;
        const themeMapping = getPath(theme, themeKey) || {
        };
        const styleFromPropValue = (propValueFinal)=>{
            let value = getValue(themeMapping, transform, propValueFinal);
            if (propValueFinal === value && typeof propValueFinal === 'string') // Haven't found value
            value = getValue(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : _utils.unstable_capitalize(propValueFinal)}`, propValueFinal);
            if (cssProperty === false) return value;
            return {
                [cssProperty]: value
            };
        };
        return _breakpoints.handleBreakpoints(props, propValue, styleFromPropValue);
    };
    fn.propTypes = {
        [prop]: _responsivePropTypeDefault.default
    };
    fn.filterProps = [
        prop
    ];
    return fn;
}
exports.default = style;

},{"@mui/utils":"9YmNw","./responsivePropType":"1l0hw","./breakpoints":"6bEk8","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6bEk8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "values", ()=>values
);
parcelHelpers.export(exports, "handleBreakpoints", ()=>handleBreakpoints
);
parcelHelpers.export(exports, "createEmptyBreakpointObject", ()=>createEmptyBreakpointObject
);
parcelHelpers.export(exports, "removeUnusedBreakpoints", ()=>removeUnusedBreakpoints
);
parcelHelpers.export(exports, "mergeBreakpointsInOrder", ()=>mergeBreakpointsInOrder
);
parcelHelpers.export(exports, "resolveBreakpointValues", ()=>resolveBreakpointValues
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _utils = require("@mui/utils");
var _merge = require("./merge"); // The breakpoint **start** at this value.
var _mergeDefault = parcelHelpers.interopDefault(_merge);
const values = {
    xs: 0,
    // phone
    sm: 600,
    // tablets
    md: 900,
    // small laptop
    lg: 1200,
    // desktop
    xl: 1536 // large screens
};
const defaultBreakpoints = {
    // Sorted ASC by size. That's important.
    // It can't be configured as it's used statically for propTypes.
    keys: [
        'xs',
        'sm',
        'md',
        'lg',
        'xl'
    ],
    up: (key)=>`@media (min-width:${values[key]}px)`
};
function handleBreakpoints(props, propValue, styleFromPropValue) {
    const theme = props.theme || {
    };
    if (Array.isArray(propValue)) {
        const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
        return propValue.reduce((acc, item, index)=>{
            acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
            return acc;
        }, {
        });
    }
    if (typeof propValue === 'object') {
        const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
        return Object.keys(propValue).reduce((acc, breakpoint)=>{
            // key is breakpoint
            if (Object.keys(themeBreakpoints.values || values).indexOf(breakpoint) !== -1) {
                const mediaKey = themeBreakpoints.up(breakpoint);
                acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
            } else {
                const cssKey = breakpoint;
                acc[cssKey] = propValue[cssKey];
            }
            return acc;
        }, {
        });
    }
    const output = styleFromPropValue(propValue);
    return output;
}
function breakpoints(styleFunction) {
    const newStyleFunction = (props)=>{
        const theme = props.theme || {
        };
        const base = styleFunction(props);
        const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
        const extended = themeBreakpoints.keys.reduce((acc, key)=>{
            if (props[key]) {
                acc = acc || {
                };
                acc[themeBreakpoints.up(key)] = styleFunction(_extendsDefault.default({
                    theme
                }, props[key]));
            }
            return acc;
        }, null);
        return _mergeDefault.default(base, extended);
    };
    newStyleFunction.propTypes = _extendsDefault.default({
    }, styleFunction.propTypes, {
        xs: _propTypesDefault.default.object,
        sm: _propTypesDefault.default.object,
        md: _propTypesDefault.default.object,
        lg: _propTypesDefault.default.object,
        xl: _propTypesDefault.default.object
    });
    newStyleFunction.filterProps = [
        'xs',
        'sm',
        'md',
        'lg',
        'xl',
        ...styleFunction.filterProps
    ];
    return newStyleFunction;
}
function createEmptyBreakpointObject(breakpointsInput = {
}) {
    var _breakpointsInput$key;
    const breakpointsInOrder = breakpointsInput == null ? void 0 : (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key)=>{
        const breakpointStyleKey = breakpointsInput.up(key);
        acc[breakpointStyleKey] = {
        };
        return acc;
    }, {
    });
    return breakpointsInOrder || {
    };
}
function removeUnusedBreakpoints(breakpointKeys, style) {
    return breakpointKeys.reduce((acc, key)=>{
        const breakpointOutput = acc[key];
        const isBreakpointUnused = Object.keys(breakpointOutput).length === 0;
        if (isBreakpointUnused) delete acc[key];
        return acc;
    }, style);
}
function mergeBreakpointsInOrder(breakpointsInput, ...styles) {
    const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);
    const mergedOutput = [
        emptyBreakpoints,
        ...styles
    ].reduce((prev, next)=>_utils.deepmerge(prev, next)
    , {
    });
    return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);
}
function resolveBreakpointValues({ values: breakpointValues , base  }) {
    const keys = Object.keys(base);
    if (keys.length === 0) return breakpointValues;
    let previous;
    return keys.reduce((acc, breakpoint)=>{
        if (typeof breakpointValues === 'object') acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
        else acc[breakpoint] = breakpointValues;
        previous = breakpoint;
        return acc;
    }, {
    });
}
exports.default = breakpoints;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","prop-types":"1tgq3","@mui/utils":"9YmNw","./merge":"kAuk8","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kAuk8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
function merge(acc, item) {
    if (!item) return acc;
    return _utils.deepmerge(acc, item, {
        clone: false // No need to clone deep, it's way faster.
    });
}
exports.default = merge;

},{"@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8zDWu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _merge = require("./merge");
var _mergeDefault = parcelHelpers.interopDefault(_merge);
function compose(...styles) {
    const handlers = styles.reduce((acc, style)=>{
        style.filterProps.forEach((prop)=>{
            acc[prop] = style;
        });
        return acc;
    }, {
    });
    const fn = (props)=>{
        return Object.keys(props).reduce((acc, prop)=>{
            if (handlers[prop]) return _mergeDefault.default(acc, handlers[prop](props));
            return acc;
        }, {
        });
    };
    fn.propTypes = styles.reduce((acc, style)=>Object.assign(acc, style.propTypes)
    , {
    });
    fn.filterProps = styles.reduce((acc, style)=>acc.concat(style.filterProps)
    , []);
    return fn;
}
exports.default = compose;

},{"./merge":"kAuk8","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"foZEo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createUnaryUnit", ()=>createUnaryUnit
);
parcelHelpers.export(exports, "createUnarySpacing", ()=>createUnarySpacing
);
parcelHelpers.export(exports, "getValue", ()=>getValue
);
parcelHelpers.export(exports, "getStyleFromPropValue", ()=>getStyleFromPropValue
);
parcelHelpers.export(exports, "margin", ()=>margin
);
parcelHelpers.export(exports, "padding", ()=>padding
);
var _responsivePropType = require("./responsivePropType");
var _responsivePropTypeDefault = parcelHelpers.interopDefault(_responsivePropType);
var _breakpoints = require("./breakpoints");
var _style = require("./style");
var _merge = require("./merge");
var _mergeDefault = parcelHelpers.interopDefault(_merge);
var _memoize = require("./memoize");
var _memoizeDefault = parcelHelpers.interopDefault(_memoize);
const properties = {
    m: 'margin',
    p: 'padding'
};
const directions = {
    t: 'Top',
    r: 'Right',
    b: 'Bottom',
    l: 'Left',
    x: [
        'Left',
        'Right'
    ],
    y: [
        'Top',
        'Bottom'
    ]
};
const aliases = {
    marginX: 'mx',
    marginY: 'my',
    paddingX: 'px',
    paddingY: 'py'
}; // memoize() impact:
// From 300,000 ops/sec
// To 350,000 ops/sec
const getCssProperties = _memoizeDefault.default((prop)=>{
    // It's not a shorthand notation.
    if (prop.length > 2) {
        if (aliases[prop]) prop = aliases[prop];
        else return [
            prop
        ];
    }
    const [a, b] = prop.split('');
    const property = properties[a];
    const direction = directions[b] || '';
    return Array.isArray(direction) ? direction.map((dir)=>property + dir
    ) : [
        property + direction
    ];
});
const marginKeys = [
    'm',
    'mt',
    'mr',
    'mb',
    'ml',
    'mx',
    'my',
    'margin',
    'marginTop',
    'marginRight',
    'marginBottom',
    'marginLeft',
    'marginX',
    'marginY',
    'marginInline',
    'marginInlineStart',
    'marginInlineEnd',
    'marginBlock',
    'marginBlockStart',
    'marginBlockEnd'
];
const paddingKeys = [
    'p',
    'pt',
    'pr',
    'pb',
    'pl',
    'px',
    'py',
    'padding',
    'paddingTop',
    'paddingRight',
    'paddingBottom',
    'paddingLeft',
    'paddingX',
    'paddingY',
    'paddingInline',
    'paddingInlineStart',
    'paddingInlineEnd',
    'paddingBlock',
    'paddingBlockStart',
    'paddingBlockEnd'
];
const spacingKeys = [
    ...marginKeys,
    ...paddingKeys
];
function createUnaryUnit(theme, themeKey, defaultValue, propName) {
    const themeSpacing = _style.getPath(theme, themeKey) || defaultValue;
    if (typeof themeSpacing === 'number') return (abs)=>{
        if (typeof abs === 'string') return abs;
        if (typeof abs !== 'number') console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs}.`);
        return themeSpacing * abs;
    };
    if (Array.isArray(themeSpacing)) return (abs)=>{
        if (typeof abs === 'string') return abs;
        if (!Number.isInteger(abs)) console.error([
            `MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.` + `You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`
        ].join('\n'));
        else if (abs > themeSpacing.length - 1) console.error([
            `MUI: The value provided (${abs}) overflows.`,
            `The supported values are: ${JSON.stringify(themeSpacing)}.`,
            `${abs} > ${themeSpacing.length - 1}, you need to add the missing values.`
        ].join('\n'));
        return themeSpacing[abs];
    };
    if (typeof themeSpacing === 'function') return themeSpacing;
    console.error([
        `MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`,
        'It should be a number, an array or a function.'
    ].join('\n'));
    return ()=>undefined
    ;
}
function createUnarySpacing(theme) {
    return createUnaryUnit(theme, 'spacing', 8, 'spacing');
}
function getValue(transformer, propValue) {
    if (typeof propValue === 'string' || propValue == null) return propValue;
    const abs = Math.abs(propValue);
    const transformed = transformer(abs);
    if (propValue >= 0) return transformed;
    if (typeof transformed === 'number') return -transformed;
    return `-${transformed}`;
}
function getStyleFromPropValue(cssProperties, transformer) {
    return (propValue)=>cssProperties.reduce((acc, cssProperty)=>{
            acc[cssProperty] = getValue(transformer, propValue);
            return acc;
        }, {
        })
    ;
}
function resolveCssProperty(props, keys, prop, transformer) {
    // Using a hash computation over an array iteration could be faster, but with only 28 items,
    // it's doesn't worth the bundle size.
    if (keys.indexOf(prop) === -1) return null;
    const cssProperties = getCssProperties(prop);
    const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
    const propValue = props[prop];
    return _breakpoints.handleBreakpoints(props, propValue, styleFromPropValue);
}
function style(props, keys) {
    const transformer = createUnarySpacing(props.theme);
    return Object.keys(props).map((prop)=>resolveCssProperty(props, keys, prop, transformer)
    ).reduce(_mergeDefault.default, {
    });
}
function margin(props) {
    return style(props, marginKeys);
}
margin.propTypes = marginKeys.reduce((obj, key)=>{
    obj[key] = _responsivePropTypeDefault.default;
    return obj;
}, {
});
margin.filterProps = marginKeys;
function padding(props) {
    return style(props, paddingKeys);
}
padding.propTypes = paddingKeys.reduce((obj, key)=>{
    obj[key] = _responsivePropTypeDefault.default;
    return obj;
}, {
});
padding.filterProps = paddingKeys;
function spacing(props) {
    return style(props, spacingKeys);
}
spacing.propTypes = spacingKeys.reduce((obj, key)=>{
    obj[key] = _responsivePropTypeDefault.default;
    return obj;
}, {
});
spacing.filterProps = spacingKeys;
exports.default = spacing;

},{"./responsivePropType":"1l0hw","./breakpoints":"6bEk8","./style":"1RuK7","./merge":"kAuk8","./memoize":"426Ew","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"426Ew":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function memoize(fn) {
    const cache = {
    };
    return (arg)=>{
        if (cache[arg] === undefined) cache[arg] = fn(arg);
        return cache[arg];
    };
}
exports.default = memoize;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lFxhx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "displayPrint", ()=>displayPrint
);
parcelHelpers.export(exports, "displayRaw", ()=>displayRaw
);
parcelHelpers.export(exports, "overflow", ()=>overflow
);
parcelHelpers.export(exports, "textOverflow", ()=>textOverflow
);
parcelHelpers.export(exports, "visibility", ()=>visibility
);
parcelHelpers.export(exports, "whiteSpace", ()=>whiteSpace
);
var _style = require("./style");
var _styleDefault = parcelHelpers.interopDefault(_style);
var _compose = require("./compose");
var _composeDefault = parcelHelpers.interopDefault(_compose);
const displayPrint = _styleDefault.default({
    prop: 'displayPrint',
    cssProperty: false,
    transform: (value)=>({
            '@media print': {
                display: value
            }
        })
});
const displayRaw = _styleDefault.default({
    prop: 'display'
});
const overflow = _styleDefault.default({
    prop: 'overflow'
});
const textOverflow = _styleDefault.default({
    prop: 'textOverflow'
});
const visibility = _styleDefault.default({
    prop: 'visibility'
});
const whiteSpace = _styleDefault.default({
    prop: 'whiteSpace'
});
exports.default = _composeDefault.default(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);

},{"./style":"1RuK7","./compose":"8zDWu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aHFwp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "flexBasis", ()=>flexBasis
);
parcelHelpers.export(exports, "flexDirection", ()=>flexDirection
);
parcelHelpers.export(exports, "flexWrap", ()=>flexWrap
);
parcelHelpers.export(exports, "justifyContent", ()=>justifyContent
);
parcelHelpers.export(exports, "alignItems", ()=>alignItems
);
parcelHelpers.export(exports, "alignContent", ()=>alignContent
);
parcelHelpers.export(exports, "order", ()=>order
);
parcelHelpers.export(exports, "flex", ()=>flex
);
parcelHelpers.export(exports, "flexGrow", ()=>flexGrow
);
parcelHelpers.export(exports, "flexShrink", ()=>flexShrink
);
parcelHelpers.export(exports, "alignSelf", ()=>alignSelf
);
parcelHelpers.export(exports, "justifyItems", ()=>justifyItems
);
parcelHelpers.export(exports, "justifySelf", ()=>justifySelf
);
var _style = require("./style");
var _styleDefault = parcelHelpers.interopDefault(_style);
var _compose = require("./compose");
var _composeDefault = parcelHelpers.interopDefault(_compose);
const flexBasis = _styleDefault.default({
    prop: 'flexBasis'
});
const flexDirection = _styleDefault.default({
    prop: 'flexDirection'
});
const flexWrap = _styleDefault.default({
    prop: 'flexWrap'
});
const justifyContent = _styleDefault.default({
    prop: 'justifyContent'
});
const alignItems = _styleDefault.default({
    prop: 'alignItems'
});
const alignContent = _styleDefault.default({
    prop: 'alignContent'
});
const order = _styleDefault.default({
    prop: 'order'
});
const flex = _styleDefault.default({
    prop: 'flex'
});
const flexGrow = _styleDefault.default({
    prop: 'flexGrow'
});
const flexShrink = _styleDefault.default({
    prop: 'flexShrink'
});
const alignSelf = _styleDefault.default({
    prop: 'alignSelf'
});
const justifyItems = _styleDefault.default({
    prop: 'justifyItems'
});
const justifySelf = _styleDefault.default({
    prop: 'justifySelf'
});
const flexbox = _composeDefault.default(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
exports.default = flexbox;

},{"./style":"1RuK7","./compose":"8zDWu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"d3mNo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gap", ()=>gap
);
parcelHelpers.export(exports, "columnGap", ()=>columnGap
);
parcelHelpers.export(exports, "rowGap", ()=>rowGap
);
parcelHelpers.export(exports, "gridColumn", ()=>gridColumn
);
parcelHelpers.export(exports, "gridRow", ()=>gridRow
);
parcelHelpers.export(exports, "gridAutoFlow", ()=>gridAutoFlow
);
parcelHelpers.export(exports, "gridAutoColumns", ()=>gridAutoColumns
);
parcelHelpers.export(exports, "gridAutoRows", ()=>gridAutoRows
);
parcelHelpers.export(exports, "gridTemplateColumns", ()=>gridTemplateColumns
);
parcelHelpers.export(exports, "gridTemplateRows", ()=>gridTemplateRows
);
parcelHelpers.export(exports, "gridTemplateAreas", ()=>gridTemplateAreas
);
parcelHelpers.export(exports, "gridArea", ()=>gridArea
);
var _style = require("./style");
var _styleDefault = parcelHelpers.interopDefault(_style);
var _compose = require("./compose");
var _composeDefault = parcelHelpers.interopDefault(_compose);
var _spacing = require("./spacing");
var _breakpoints = require("./breakpoints");
var _responsivePropType = require("./responsivePropType");
var _responsivePropTypeDefault = parcelHelpers.interopDefault(_responsivePropType);
const gap = (props)=>{
    if (props.gap !== undefined && props.gap !== null) {
        const transformer = _spacing.createUnaryUnit(props.theme, 'spacing', 8, 'gap');
        const styleFromPropValue = (propValue)=>({
                gap: _spacing.getValue(transformer, propValue)
            })
        ;
        return _breakpoints.handleBreakpoints(props, props.gap, styleFromPropValue);
    }
    return null;
};
gap.propTypes = {
    gap: _responsivePropTypeDefault.default
};
gap.filterProps = [
    'gap'
];
const columnGap = (props)=>{
    if (props.columnGap !== undefined && props.columnGap !== null) {
        const transformer = _spacing.createUnaryUnit(props.theme, 'spacing', 8, 'columnGap');
        const styleFromPropValue = (propValue)=>({
                columnGap: _spacing.getValue(transformer, propValue)
            })
        ;
        return _breakpoints.handleBreakpoints(props, props.columnGap, styleFromPropValue);
    }
    return null;
};
columnGap.propTypes = {
    columnGap: _responsivePropTypeDefault.default
};
columnGap.filterProps = [
    'columnGap'
];
const rowGap = (props)=>{
    if (props.rowGap !== undefined && props.rowGap !== null) {
        const transformer = _spacing.createUnaryUnit(props.theme, 'spacing', 8, 'rowGap');
        const styleFromPropValue = (propValue)=>({
                rowGap: _spacing.getValue(transformer, propValue)
            })
        ;
        return _breakpoints.handleBreakpoints(props, props.rowGap, styleFromPropValue);
    }
    return null;
};
rowGap.propTypes = {
    rowGap: _responsivePropTypeDefault.default
};
rowGap.filterProps = [
    'rowGap'
];
const gridColumn = _styleDefault.default({
    prop: 'gridColumn'
});
const gridRow = _styleDefault.default({
    prop: 'gridRow'
});
const gridAutoFlow = _styleDefault.default({
    prop: 'gridAutoFlow'
});
const gridAutoColumns = _styleDefault.default({
    prop: 'gridAutoColumns'
});
const gridAutoRows = _styleDefault.default({
    prop: 'gridAutoRows'
});
const gridTemplateColumns = _styleDefault.default({
    prop: 'gridTemplateColumns'
});
const gridTemplateRows = _styleDefault.default({
    prop: 'gridTemplateRows'
});
const gridTemplateAreas = _styleDefault.default({
    prop: 'gridTemplateAreas'
});
const gridArea = _styleDefault.default({
    prop: 'gridArea'
});
const grid = _composeDefault.default(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
exports.default = grid;

},{"./style":"1RuK7","./compose":"8zDWu","./spacing":"foZEo","./breakpoints":"6bEk8","./responsivePropType":"1l0hw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kfo3Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "color", ()=>color
);
parcelHelpers.export(exports, "bgcolor", ()=>bgcolor
);
parcelHelpers.export(exports, "backgroundColor", ()=>backgroundColor
);
var _style = require("./style");
var _styleDefault = parcelHelpers.interopDefault(_style);
var _compose = require("./compose");
var _composeDefault = parcelHelpers.interopDefault(_compose);
const color = _styleDefault.default({
    prop: 'color',
    themeKey: 'palette'
});
const bgcolor = _styleDefault.default({
    prop: 'bgcolor',
    cssProperty: 'backgroundColor',
    themeKey: 'palette'
});
const backgroundColor = _styleDefault.default({
    prop: 'backgroundColor',
    themeKey: 'palette'
});
const palette = _composeDefault.default(color, bgcolor, backgroundColor);
exports.default = palette;

},{"./style":"1RuK7","./compose":"8zDWu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9x07Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "position", ()=>position
);
parcelHelpers.export(exports, "zIndex", ()=>zIndex
);
parcelHelpers.export(exports, "top", ()=>top
);
parcelHelpers.export(exports, "right", ()=>right
);
parcelHelpers.export(exports, "bottom", ()=>bottom
);
parcelHelpers.export(exports, "left", ()=>left
);
var _style = require("./style");
var _styleDefault = parcelHelpers.interopDefault(_style);
var _compose = require("./compose");
var _composeDefault = parcelHelpers.interopDefault(_compose);
const position = _styleDefault.default({
    prop: 'position'
});
const zIndex = _styleDefault.default({
    prop: 'zIndex',
    themeKey: 'zIndex'
});
const top = _styleDefault.default({
    prop: 'top'
});
const right = _styleDefault.default({
    prop: 'right'
});
const bottom = _styleDefault.default({
    prop: 'bottom'
});
const left = _styleDefault.default({
    prop: 'left'
});
exports.default = _composeDefault.default(position, zIndex, top, right, bottom, left);

},{"./style":"1RuK7","./compose":"8zDWu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4yp2k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _style = require("./style");
var _styleDefault = parcelHelpers.interopDefault(_style);
const boxShadow = _styleDefault.default({
    prop: 'boxShadow',
    themeKey: 'shadows'
});
exports.default = boxShadow;

},{"./style":"1RuK7","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7tg0K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "width", ()=>width
);
parcelHelpers.export(exports, "maxWidth", ()=>maxWidth
);
parcelHelpers.export(exports, "minWidth", ()=>minWidth
);
parcelHelpers.export(exports, "height", ()=>height
);
parcelHelpers.export(exports, "maxHeight", ()=>maxHeight
);
parcelHelpers.export(exports, "minHeight", ()=>minHeight
);
parcelHelpers.export(exports, "sizeWidth", ()=>sizeWidth
);
parcelHelpers.export(exports, "sizeHeight", ()=>sizeHeight
);
parcelHelpers.export(exports, "boxSizing", ()=>boxSizing
);
var _style = require("./style");
var _styleDefault = parcelHelpers.interopDefault(_style);
var _compose = require("./compose");
var _composeDefault = parcelHelpers.interopDefault(_compose);
var _breakpoints = require("./breakpoints");
function transform(value) {
    return value <= 1 && value !== 0 ? `${value * 100}%` : value;
}
const width = _styleDefault.default({
    prop: 'width',
    transform
});
const maxWidth = (props)=>{
    if (props.maxWidth !== undefined && props.maxWidth !== null) {
        const styleFromPropValue = (propValue)=>{
            var _props$theme, _props$theme$breakpoi, _props$theme$breakpoi2;
            const breakpoint = ((_props$theme = props.theme) == null ? void 0 : (_props$theme$breakpoi = _props$theme.breakpoints) == null ? void 0 : (_props$theme$breakpoi2 = _props$theme$breakpoi.values) == null ? void 0 : _props$theme$breakpoi2[propValue]) || _breakpoints.values[propValue];
            return {
                maxWidth: breakpoint || transform(propValue)
            };
        };
        return _breakpoints.handleBreakpoints(props, props.maxWidth, styleFromPropValue);
    }
    return null;
};
maxWidth.filterProps = [
    'maxWidth'
];
const minWidth = _styleDefault.default({
    prop: 'minWidth',
    transform
});
const height = _styleDefault.default({
    prop: 'height',
    transform
});
const maxHeight = _styleDefault.default({
    prop: 'maxHeight',
    transform
});
const minHeight = _styleDefault.default({
    prop: 'minHeight',
    transform
});
const sizeWidth = _styleDefault.default({
    prop: 'size',
    cssProperty: 'width',
    transform
});
const sizeHeight = _styleDefault.default({
    prop: 'size',
    cssProperty: 'height',
    transform
});
const boxSizing = _styleDefault.default({
    prop: 'boxSizing'
});
const sizing = _composeDefault.default(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
exports.default = sizing;

},{"./style":"1RuK7","./compose":"8zDWu","./breakpoints":"6bEk8","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2WnLr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fontFamily", ()=>fontFamily
);
parcelHelpers.export(exports, "fontSize", ()=>fontSize
);
parcelHelpers.export(exports, "fontStyle", ()=>fontStyle
);
parcelHelpers.export(exports, "fontWeight", ()=>fontWeight
);
parcelHelpers.export(exports, "letterSpacing", ()=>letterSpacing
);
parcelHelpers.export(exports, "lineHeight", ()=>lineHeight
);
parcelHelpers.export(exports, "textAlign", ()=>textAlign
);
parcelHelpers.export(exports, "typographyVariant", ()=>typographyVariant
);
var _style = require("./style");
var _styleDefault = parcelHelpers.interopDefault(_style);
var _compose = require("./compose");
var _composeDefault = parcelHelpers.interopDefault(_compose);
const fontFamily = _styleDefault.default({
    prop: 'fontFamily',
    themeKey: 'typography'
});
const fontSize = _styleDefault.default({
    prop: 'fontSize',
    themeKey: 'typography'
});
const fontStyle = _styleDefault.default({
    prop: 'fontStyle',
    themeKey: 'typography'
});
const fontWeight = _styleDefault.default({
    prop: 'fontWeight',
    themeKey: 'typography'
});
const letterSpacing = _styleDefault.default({
    prop: 'letterSpacing'
});
const lineHeight = _styleDefault.default({
    prop: 'lineHeight'
});
const textAlign = _styleDefault.default({
    prop: 'textAlign'
});
const typographyVariant = _styleDefault.default({
    prop: 'typography',
    cssProperty: false,
    themeKey: 'typography'
});
const typography = _composeDefault.default(typographyVariant, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign);
exports.default = typography;

},{"./style":"1RuK7","./compose":"8zDWu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"j6cET":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_styleFunctionSxDefault.default
);
parcelHelpers.export(exports, "extendSxProp", ()=>_extendSxPropDefault.default
);
var _styleFunctionSx = require("./styleFunctionSx");
var _styleFunctionSxDefault = parcelHelpers.interopDefault(_styleFunctionSx);
var _extendSxProp = require("./extendSxProp");
var _extendSxPropDefault = parcelHelpers.interopDefault(_extendSxProp);

},{"./styleFunctionSx":"KBjkN","./extendSxProp":"kZJb2","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"KBjkN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _merge = require("../merge");
var _mergeDefault = parcelHelpers.interopDefault(_merge);
var _getThemeValue = require("../getThemeValue");
var _getThemeValueDefault = parcelHelpers.interopDefault(_getThemeValue);
var _breakpoints = require("../breakpoints");
function objectsHaveSameKeys(...objects) {
    const allKeys = objects.reduce((keys, object)=>keys.concat(Object.keys(object))
    , []);
    const union = new Set(allKeys);
    return objects.every((object)=>union.size === Object.keys(object).length
    );
}
function callIfFn(maybeFn, arg) {
    return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;
}
function styleFunctionSx(props) {
    const { sx: styles , theme ={
    }  } = props || {
    };
    if (!styles) return null;
    let stylesObject = styles;
    if (typeof styles === 'function') stylesObject = styles(theme);
    else if (typeof styles !== 'object') // value
    return styles;
    const emptyBreakpoints = _breakpoints.createEmptyBreakpointObject(theme.breakpoints);
    const breakpointsKeys = Object.keys(emptyBreakpoints);
    let css = emptyBreakpoints;
    Object.keys(stylesObject).forEach((styleKey)=>{
        const value = callIfFn(stylesObject[styleKey], theme);
        if (typeof value === 'object') {
            if (_getThemeValue.propToStyleFunction[styleKey]) css = _mergeDefault.default(css, _getThemeValueDefault.default(styleKey, value, theme));
            else {
                const breakpointsValues = _breakpoints.handleBreakpoints({
                    theme
                }, value, (x)=>({
                        [styleKey]: x
                    })
                );
                if (objectsHaveSameKeys(breakpointsValues, value)) css[styleKey] = styleFunctionSx({
                    sx: value,
                    theme
                });
                else css = _mergeDefault.default(css, breakpointsValues);
            }
        } else css = _mergeDefault.default(css, _getThemeValueDefault.default(styleKey, value, theme));
    });
    return _breakpoints.removeUnusedBreakpoints(breakpointsKeys, css);
}
styleFunctionSx.filterProps = [
    'sx'
];
exports.default = styleFunctionSx;

},{"../merge":"kAuk8","../getThemeValue":"fJ4vy","../breakpoints":"6bEk8","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fJ4vy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "propToStyleFunction", ()=>propToStyleFunction
);
var _borders = require("./borders");
var _bordersDefault = parcelHelpers.interopDefault(_borders);
var _display = require("./display");
var _displayDefault = parcelHelpers.interopDefault(_display);
var _flexbox = require("./flexbox");
var _flexboxDefault = parcelHelpers.interopDefault(_flexbox);
var _grid = require("./grid");
var _gridDefault = parcelHelpers.interopDefault(_grid);
var _positions = require("./positions");
var _positionsDefault = parcelHelpers.interopDefault(_positions);
var _palette = require("./palette");
var _paletteDefault = parcelHelpers.interopDefault(_palette);
var _shadows = require("./shadows");
var _shadowsDefault = parcelHelpers.interopDefault(_shadows);
var _sizing = require("./sizing");
var _sizingDefault = parcelHelpers.interopDefault(_sizing);
var _spacing = require("./spacing");
var _spacingDefault = parcelHelpers.interopDefault(_spacing);
var _typography = require("./typography");
var _typographyDefault = parcelHelpers.interopDefault(_typography);
const filterPropsMapping = {
    borders: _bordersDefault.default.filterProps,
    display: _displayDefault.default.filterProps,
    flexbox: _flexboxDefault.default.filterProps,
    grid: _gridDefault.default.filterProps,
    positions: _positionsDefault.default.filterProps,
    palette: _paletteDefault.default.filterProps,
    shadows: _shadowsDefault.default.filterProps,
    sizing: _sizingDefault.default.filterProps,
    spacing: _spacingDefault.default.filterProps,
    typography: _typographyDefault.default.filterProps
};
const styleFunctionMapping = {
    borders: _bordersDefault.default,
    display: _displayDefault.default,
    flexbox: _flexboxDefault.default,
    grid: _gridDefault.default,
    positions: _positionsDefault.default,
    palette: _paletteDefault.default,
    shadows: _shadowsDefault.default,
    sizing: _sizingDefault.default,
    spacing: _spacingDefault.default,
    typography: _typographyDefault.default
};
const propToStyleFunction = Object.keys(filterPropsMapping).reduce((acc, styleFnName)=>{
    filterPropsMapping[styleFnName].forEach((propName)=>{
        acc[propName] = styleFunctionMapping[styleFnName];
    });
    return acc;
}, {
});
function getThemeValue(prop, value, theme) {
    const inputProps = {
        [prop]: value,
        theme
    };
    const styleFunction = propToStyleFunction[prop];
    return styleFunction ? styleFunction(inputProps) : {
        [prop]: value
    };
}
exports.default = getThemeValue;

},{"./borders":"4nAEn","./display":"lFxhx","./flexbox":"aHFwp","./grid":"d3mNo","./positions":"9x07Q","./palette":"kfo3Y","./shadows":"4yp2k","./sizing":"7tg0K","./spacing":"foZEo","./typography":"2WnLr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kZJb2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _getThemeValue = require("../getThemeValue");
const _excluded = [
    "sx"
];
const splitProps = (props)=>{
    const result = {
        systemProps: {
        },
        otherProps: {
        }
    };
    Object.keys(props).forEach((prop)=>{
        if (_getThemeValue.propToStyleFunction[prop]) result.systemProps[prop] = props[prop];
        else result.otherProps[prop] = props[prop];
    });
    return result;
};
function extendSxProp(props) {
    const { sx: inSx  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const { systemProps , otherProps  } = splitProps(other);
    return _extendsDefault.default({
    }, otherProps, {
        sx: _extendsDefault.default({
        }, systemProps, inSx)
    });
}
exports.default = extendSxProp;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","../getThemeValue":"fJ4vy","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kKf97":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_boxDefault.default
);
var _box = require("./Box");
var _boxDefault = parcelHelpers.interopDefault(_box);

},{"./Box":"24PxN","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"24PxN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createBox = require("../createBox");
var _createBoxDefault = parcelHelpers.interopDefault(_createBox);
const Box = _createBoxDefault.default();
exports.default = Box;

},{"../createBox":"diE0s","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"diE0s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _styledEngine = require("@mui/styled-engine");
var _styledEngineDefault = parcelHelpers.interopDefault(_styledEngine);
var _styleFunctionSx = require("./styleFunctionSx");
var _styleFunctionSxDefault = parcelHelpers.interopDefault(_styleFunctionSx);
var _useTheme = require("./useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "component"
];
function createBox(options = {
}) {
    const { defaultTheme  } = options;
    const BoxRoot = _styledEngineDefault.default('div')(_styleFunctionSxDefault.default);
    const Box = /*#__PURE__*/ _react.forwardRef(function Box1(inProps, ref) {
        const theme = _useThemeDefault.default(defaultTheme);
        const _extendSxProp = _styleFunctionSx.extendSxProp(inProps), { className , component ='div'  } = _extendSxProp, other = _objectWithoutPropertiesLooseDefault.default(_extendSxProp, _excluded);
        return(/*#__PURE__*/ _jsxRuntime.jsx(BoxRoot, _extendsDefault.default({
            as: component,
            ref: ref,
            className: _clsxDefault.default(className, 'MuiBox-root'),
            theme: theme
        }, other)));
    });
    Box.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit the d.ts file and run "yarn proptypes"     |
        // ----------------------------------------------------------------------
        /**
     * @ignore
     */ children: _propTypesDefault.default.node,
        /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */ component: _propTypesDefault.default.elementType,
        /**
     * @ignore
     */ sx: _propTypesDefault.default.object
    };
    return Box;
}
exports.default = createBox;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","react":"6TuXu","prop-types":"1tgq3","clsx":"eg1He","@mui/styled-engine":"27jsV","./styleFunctionSx":"j6cET","./useTheme":"9fPBO","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9fPBO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "systemDefaultTheme", ()=>systemDefaultTheme
);
var _createTheme = require("./createTheme");
var _createThemeDefault = parcelHelpers.interopDefault(_createTheme);
var _useThemeWithoutDefault = require("./useThemeWithoutDefault");
var _useThemeWithoutDefaultDefault = parcelHelpers.interopDefault(_useThemeWithoutDefault);
const systemDefaultTheme = _createThemeDefault.default();
function useTheme(defaultTheme = systemDefaultTheme) {
    return _useThemeWithoutDefaultDefault.default(defaultTheme);
}
exports.default = useTheme;

},{"./createTheme":"29UYi","./useThemeWithoutDefault":"8fEgR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"29UYi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_createThemeDefault.default
);
var _createTheme = require("./createTheme");
var _createThemeDefault = parcelHelpers.interopDefault(_createTheme);

},{"./createTheme":"98eBz","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"98eBz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _utils = require("@mui/utils");
var _createBreakpoints = require("./createBreakpoints");
var _createBreakpointsDefault = parcelHelpers.interopDefault(_createBreakpoints);
var _shape = require("./shape");
var _shapeDefault = parcelHelpers.interopDefault(_shape);
var _createSpacing = require("./createSpacing");
var _createSpacingDefault = parcelHelpers.interopDefault(_createSpacing);
const _excluded = [
    "breakpoints",
    "palette",
    "spacing",
    "shape"
];
function createTheme(options = {
}, ...args) {
    const { breakpoints: breakpointsInput = {
    } , palette: paletteInput = {
    } , spacing: spacingInput , shape: shapeInput = {
    }  } = options, other = _objectWithoutPropertiesLooseDefault.default(options, _excluded);
    const breakpoints = _createBreakpointsDefault.default(breakpointsInput);
    const spacing = _createSpacingDefault.default(spacingInput);
    let muiTheme = _utils.deepmerge({
        breakpoints,
        direction: 'ltr',
        components: {
        },
        // Inject component definitions.
        palette: _extendsDefault.default({
            mode: 'light'
        }, paletteInput),
        spacing,
        shape: _extendsDefault.default({
        }, _shapeDefault.default, shapeInput)
    }, other);
    muiTheme = args.reduce((acc, argument)=>_utils.deepmerge(acc, argument)
    , muiTheme);
    return muiTheme;
}
exports.default = createTheme;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@mui/utils":"9YmNw","./createBreakpoints":"1g1Yd","./shape":"aRdoq","./createSpacing":"loiOJ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1g1Yd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "breakpointKeys", ()=>breakpointKeys
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
const _excluded = [
    "values",
    "unit",
    "step"
];
const breakpointKeys = [
    'xs',
    'sm',
    'md',
    'lg',
    'xl'
]; // Keep in mind that @media is inclusive by the CSS specification.
function createBreakpoints(breakpoints) {
    const { // The breakpoint **start** at this value.
    // For instance with the first breakpoint xs: [xs, sm).
    values ={
        xs: 0,
        // phone
        sm: 600,
        // tablets
        md: 900,
        // small laptop
        lg: 1200,
        // desktop
        xl: 1536 // large screens
    } , unit ='px' , step =5  } = breakpoints, other = _objectWithoutPropertiesLooseDefault.default(breakpoints, _excluded);
    const keys = Object.keys(values);
    function up(key) {
        const value = typeof values[key] === 'number' ? values[key] : key;
        return `@media (min-width:${value}${unit})`;
    }
    function down(key) {
        const value = typeof values[key] === 'number' ? values[key] : key;
        return `@media (max-width:${value - step / 100}${unit})`;
    }
    function between(start, end) {
        const endIndex = keys.indexOf(end);
        return `@media (min-width:${typeof values[start] === 'number' ? values[start] : start}${unit}) and ` + `(max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === 'number' ? values[keys[endIndex]] : end) - step / 100}${unit})`;
    }
    function only(key) {
        if (keys.indexOf(key) + 1 < keys.length) return between(key, keys[keys.indexOf(key) + 1]);
        return up(key);
    }
    return _extendsDefault.default({
        keys,
        values,
        up,
        down,
        between,
        only,
        unit
    }, other);
}
exports.default = createBreakpoints;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aRdoq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const shape = {
    borderRadius: 4
};
exports.default = shape;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"loiOJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _spacing = require("../spacing");
function createSpacing(spacingInput = 8) {
    // Already transformed.
    if (spacingInput.mui) return spacingInput;
     // Material Design layouts are visually balanced. Most measurements align to an 8dp grid, which aligns both spacing and the overall layout.
    // Smaller components, such as icons, can align to a 4dp grid.
    // https://material.io/design/layout/understanding-layout.html#usage
    const transform = _spacing.createUnarySpacing({
        spacing: spacingInput
    });
    const spacing = (...argsInput)=>{
        if (!(argsInput.length <= 4)) console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
        const args = argsInput.length === 0 ? [
            1
        ] : argsInput;
        return args.map((argument)=>{
            const output = transform(argument);
            return typeof output === 'number' ? `${output}px` : output;
        }).join(' ');
    };
    spacing.mui = true;
    return spacing;
}
exports.default = createSpacing;

},{"../spacing":"foZEo","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8fEgR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _privateTheming = require("@mui/private-theming");
function isObjectEmpty(obj) {
    return Object.keys(obj).length === 0;
}
function useTheme(defaultTheme = null) {
    const contextTheme = _privateTheming.useTheme();
    return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme : contextTheme;
}
exports.default = useTheme;

},{"@mui/private-theming":"hwN8A","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hwN8A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @license MUI v5.0.1
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ parcelHelpers.export(exports, "ThemeProvider", ()=>_themeProviderDefault.default
);
parcelHelpers.export(exports, "useTheme", ()=>_useThemeDefault.default
);
var _themeProvider = require("./ThemeProvider");
var _themeProviderDefault = parcelHelpers.interopDefault(_themeProvider);
parcelHelpers.exportAll(_themeProvider, exports);
var _useTheme = require("./useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);

},{"./ThemeProvider":"ighPr","./useTheme":"3K6hn","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ighPr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_themeProviderDefault.default
);
parcelHelpers.export(exports, "unstable_nested", ()=>_nestedDefault.default
);
var _themeProvider = require("./ThemeProvider");
var _themeProviderDefault = parcelHelpers.interopDefault(_themeProvider);
var _nested = require("./nested");
var _nestedDefault = parcelHelpers.interopDefault(_nested);

},{"./ThemeProvider":"hdqkO","./nested":"lTgyk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hdqkO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _utils = require("@mui/utils");
var _themeContext = require("../useTheme/ThemeContext");
var _themeContextDefault = parcelHelpers.interopDefault(_themeContext);
var _useTheme = require("../useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _nested = require("./nested"); // To support composition of theme.
var _nestedDefault = parcelHelpers.interopDefault(_nested);
var _jsxRuntime = require("react/jsx-runtime");
function mergeOuterLocalTheme(outerTheme, localTheme) {
    if (typeof localTheme === 'function') {
        const mergedTheme = localTheme(outerTheme);
        if (!mergedTheme) console.error([
            'MUI: You should return an object from your theme function, i.e.',
            '<ThemeProvider theme={() => ({})} />'
        ].join('\n'));
        return mergedTheme;
    }
    return _extendsDefault.default({
    }, outerTheme, localTheme);
}
/**
 * This component takes a `theme` prop.
 * It makes the `theme` available down the React tree thanks to React context.
 * This component should preferably be used at **the root of your component tree**.
 */ function ThemeProvider(props) {
    const { children , theme: localTheme  } = props;
    const outerTheme = _useThemeDefault.default();
    if (outerTheme === null && typeof localTheme === 'function') console.error([
        'MUI: You are providing a theme function prop to the ThemeProvider component:',
        '<ThemeProvider theme={outerTheme => outerTheme} />',
        '',
        'However, no outer theme is present.',
        "Make sure a theme is already injected higher in the React tree or provide a theme object."
    ].join('\n'));
    const theme = _react.useMemo(()=>{
        const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);
        if (output != null) output[_nestedDefault.default] = outerTheme !== null;
        return output;
    }, [
        localTheme,
        outerTheme
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_themeContextDefault.default.Provider, {
        value: theme,
        children: children
    }));
}
ThemeProvider.propTypes = {
    /**
   * Your component tree.
   */ children: _propTypesDefault.default.node,
    /**
   * A theme object. You can provide a function to extend the outer theme.
   */ theme: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.object,
        _propTypesDefault.default.func
    ]).isRequired
};
ThemeProvider.propTypes = _utils.exactProp(ThemeProvider.propTypes);
exports.default = ThemeProvider;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","react":"6TuXu","prop-types":"1tgq3","@mui/utils":"9YmNw","../useTheme/ThemeContext":"2CaPt","../useTheme":"3K6hn","./nested":"lTgyk","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2CaPt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
const ThemeContext = /*#__PURE__*/ _react.createContext(null);
ThemeContext.displayName = 'ThemeContext';
exports.default = ThemeContext;

},{"react":"6TuXu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3K6hn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_useThemeDefault.default
);
var _useTheme = require("./useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);

},{"./useTheme":"tiNls","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"tiNls":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _themeContext = require("./ThemeContext");
var _themeContextDefault = parcelHelpers.interopDefault(_themeContext);
function useTheme() {
    const theme = _react.useContext(_themeContextDefault.default);
    // eslint-disable-next-line react-hooks/rules-of-hooks
    _react.useDebugValue(theme);
    return theme;
}
exports.default = useTheme;

},{"react":"6TuXu","./ThemeContext":"2CaPt","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lTgyk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const hasSymbol = typeof Symbol === 'function' && Symbol.for;
exports.default = hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bBHKf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "shouldForwardProp", ()=>shouldForwardProp
);
parcelHelpers.export(exports, "systemDefaultTheme", ()=>systemDefaultTheme
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _styledEngine = require("@mui/styled-engine");
var _styledEngineDefault = parcelHelpers.interopDefault(_styledEngine);
var _utils = require("@mui/utils");
var _createTheme = require("./createTheme");
var _createThemeDefault = parcelHelpers.interopDefault(_createTheme);
var _styleFunctionSx = require("./styleFunctionSx");
var _styleFunctionSxDefault = parcelHelpers.interopDefault(_styleFunctionSx);
var _propsToClassKey = require("./propsToClassKey");
var _propsToClassKeyDefault = parcelHelpers.interopDefault(_propsToClassKey);
const _excluded = [
    "name",
    "slot",
    "skipVariantsResolver",
    "skipSx",
    "overridesResolver"
], _excluded2 = [
    "theme"
], _excluded3 = [
    "theme"
];
function isEmpty(obj) {
    return Object.keys(obj).length === 0;
}
const getStyleOverrides = (name, theme)=>{
    if (theme.components && theme.components[name] && theme.components[name].styleOverrides) return theme.components[name].styleOverrides;
    return null;
};
const getVariantStyles = (name, theme)=>{
    let variants = [];
    if (theme && theme.components && theme.components[name] && theme.components[name].variants) variants = theme.components[name].variants;
    const variantsStyles = {
    };
    variants.forEach((definition)=>{
        const key = _propsToClassKeyDefault.default(definition.props);
        variantsStyles[key] = definition.style;
    });
    return variantsStyles;
};
const variantsResolver = (props, styles, theme, name)=>{
    var _theme$components, _theme$components$nam;
    const { ownerState ={
    }  } = props;
    const variantsStyles = [];
    const themeVariants = theme == null ? void 0 : (_theme$components = theme.components) == null ? void 0 : (_theme$components$nam = _theme$components[name]) == null ? void 0 : _theme$components$nam.variants;
    if (themeVariants) themeVariants.forEach((themeVariant)=>{
        let isMatch = true;
        Object.keys(themeVariant.props).forEach((key)=>{
            if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) isMatch = false;
        });
        if (isMatch) variantsStyles.push(styles[_propsToClassKeyDefault.default(themeVariant.props)]);
    });
    return variantsStyles;
};
function shouldForwardProp(prop) {
    return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
}
const systemDefaultTheme = _createThemeDefault.default();
const lowercaseFirstLetter = (string)=>{
    return string.charAt(0).toLowerCase() + string.slice(1);
};
function createStyled(input = {
}) {
    const { defaultTheme =systemDefaultTheme , rootShouldForwardProp =shouldForwardProp , slotShouldForwardProp =shouldForwardProp  } = input;
    return (tag, inputOptions = {
    })=>{
        const { name: componentName , slot: componentSlot , skipVariantsResolver: inputSkipVariantsResolver , skipSx: inputSkipSx , overridesResolver  } = inputOptions, options = _objectWithoutPropertiesLooseDefault.default(inputOptions, _excluded); // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
        const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver : componentSlot && componentSlot !== 'Root' || false;
        const skipSx = inputSkipSx || false;
        let label;
        if (componentName) label = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;
        let shouldForwardPropOption = shouldForwardProp;
        if (componentSlot === 'Root') shouldForwardPropOption = rootShouldForwardProp;
        else if (componentSlot) // any other slot specified
        shouldForwardPropOption = slotShouldForwardProp;
        const defaultStyledResolver = _styledEngineDefault.default(tag, _extendsDefault.default({
            shouldForwardProp: shouldForwardPropOption,
            label
        }, options));
        const muiStyledResolver = (styleArg, ...expressions)=>{
            const expressionsWithDefaultTheme = expressions ? expressions.map((stylesArg)=>{
                return typeof stylesArg === 'function' ? (_ref)=>{
                    let { theme: themeInput  } = _ref, other = _objectWithoutPropertiesLooseDefault.default(_ref, _excluded2);
                    return stylesArg(_extendsDefault.default({
                        theme: isEmpty(themeInput) ? defaultTheme : themeInput
                    }, other));
                } : stylesArg;
            }) : [];
            let transformedStyleArg = styleArg;
            if (componentName && overridesResolver) expressionsWithDefaultTheme.push((props)=>{
                const theme = isEmpty(props.theme) ? defaultTheme : props.theme;
                const styleOverrides = getStyleOverrides(componentName, theme);
                if (styleOverrides) return overridesResolver(props, styleOverrides);
                return null;
            });
            if (componentName && !skipVariantsResolver) expressionsWithDefaultTheme.push((props)=>{
                const theme = isEmpty(props.theme) ? defaultTheme : props.theme;
                return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
            });
            if (!skipSx) expressionsWithDefaultTheme.push((props)=>{
                const theme = isEmpty(props.theme) ? defaultTheme : props.theme;
                return _styleFunctionSxDefault.default(_extendsDefault.default({
                }, props, {
                    theme
                }));
            });
            const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
            if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
                const placeholders = new Array(numOfCustomFnsApplied).fill(''); // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.
                transformedStyleArg = [
                    ...styleArg,
                    ...placeholders
                ];
                transformedStyleArg.raw = [
                    ...styleArg.raw,
                    ...placeholders
                ];
            } else if (typeof styleArg === 'function') // If the type is function, we need to define the default theme.
            transformedStyleArg = (_ref2)=>{
                let { theme: themeInput  } = _ref2, other = _objectWithoutPropertiesLooseDefault.default(_ref2, _excluded3);
                return styleArg(_extendsDefault.default({
                    theme: isEmpty(themeInput) ? defaultTheme : themeInput
                }, other));
            };
            const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
            {
                let displayName;
                if (componentName) displayName = `${componentName}${componentSlot || ''}`;
                if (displayName === undefined) displayName = `Styled(${_utils.getDisplayName(tag)})`;
                Component.displayName = displayName;
            }
            return Component;
        };
        return muiStyledResolver;
    };
}
exports.default = createStyled;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@mui/styled-engine":"27jsV","@mui/utils":"9YmNw","./createTheme":"29UYi","./styleFunctionSx":"j6cET","./propsToClassKey":"5Eamb","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5Eamb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _utils = require("@mui/utils");
const _excluded = [
    "variant"
];
function isEmpty(string) {
    return string.length === 0;
}
function propsToClassKey(props) {
    const { variant  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    let classKey = variant || '';
    Object.keys(other).sort().forEach((key)=>{
        if (key === 'color') classKey += isEmpty(classKey) ? props[key] : _utils.unstable_capitalize(props[key]);
        else classKey += `${isEmpty(classKey) ? key : _utils.unstable_capitalize(key)}${_utils.unstable_capitalize(props[key].toString())}`;
    });
    return classKey;
}
exports.default = propsToClassKey;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fvfDp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createStyled = require("./createStyled");
var _createStyledDefault = parcelHelpers.interopDefault(_createStyled);
const styled = _createStyledDefault.default();
exports.default = styled;

},{"./createStyled":"bBHKf","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5KLc0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_useThemePropsDefault.default
);
parcelHelpers.export(exports, "getThemeProps", ()=>_getThemePropsDefault.default
);
var _useThemeProps = require("./useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _getThemeProps = require("./getThemeProps");
var _getThemePropsDefault = parcelHelpers.interopDefault(_getThemeProps);

},{"./useThemeProps":"kkigX","./getThemeProps":"dgeQY","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kkigX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getThemeProps = require("./getThemeProps");
var _getThemePropsDefault = parcelHelpers.interopDefault(_getThemeProps);
var _useTheme = require("../useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
function useThemeProps({ props , name , defaultTheme  }) {
    const theme = _useThemeDefault.default(defaultTheme);
    const mergedProps = _getThemePropsDefault.default({
        theme,
        name,
        props
    });
    return mergedProps;
}
exports.default = useThemeProps;

},{"./getThemeProps":"dgeQY","../useTheme":"9fPBO","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dgeQY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
function getThemeProps(params) {
    const { theme , name , props  } = params;
    if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) return props;
    const output = _extendsDefault.default({
    }, props); // Resolve default props, code borrow from React source.
    // https://github.com/facebook/react/blob/15a8f031838a553e41c0b66eb1bcf1da8448104d/packages/react/src/ReactElement.js#L221
    const defaultProps = theme.components[name].defaultProps;
    let propName;
    for(propName in defaultProps)if (output[propName] === undefined) output[propName] = defaultProps[propName];
    return output;
}
exports.default = getThemeProps;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ahaKg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Converts a color from CSS hex format to CSS rgb format.
 * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
 * @returns {string} A CSS rgb color string
 */ parcelHelpers.export(exports, "hexToRgb", ()=>hexToRgb
);
/**
 * Returns an object with the type and values of a color.
 *
 * Note: Does not support rgb % values.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {object} - A MUI color object: {type: string, values: number[]}
 */ parcelHelpers.export(exports, "decomposeColor", ()=>decomposeColor
);
/**
 * Converts a color object with type and values to a string.
 * @param {object} color - Decomposed color
 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'
 * @param {array} color.values - [n,n,n] or [n,n,n,n]
 * @returns {string} A CSS color string
 */ parcelHelpers.export(exports, "recomposeColor", ()=>recomposeColor
);
/**
 * Converts a color from CSS rgb format to CSS hex format.
 * @param {string} color - RGB color, i.e. rgb(n, n, n)
 * @returns {string} A CSS rgb color string, i.e. #nnnnnn
 */ parcelHelpers.export(exports, "rgbToHex", ()=>rgbToHex
);
/**
 * Converts a color from hsl format to rgb format.
 * @param {string} color - HSL color values
 * @returns {string} rgb color values
 */ parcelHelpers.export(exports, "hslToRgb", ()=>hslToRgb
);
/**
 * The relative brightness of any point in a color space,
 * normalized to 0 for darkest black and 1 for lightest white.
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @returns {number} The relative brightness of the color in the range 0 - 1
 */ parcelHelpers.export(exports, "getLuminance", ()=>getLuminance
);
/**
 * Calculates the contrast ratio between two colors.
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {number} A contrast ratio value in the range 0 - 21.
 */ parcelHelpers.export(exports, "getContrastRatio", ()=>getContrastRatio
);
/**
 * Sets the absolute transparency of a color.
 * Any existing alpha values are overwritten.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} value - value to set the alpha channel to in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */ parcelHelpers.export(exports, "alpha", ()=>alpha
);
/**
 * Darkens a color.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} coefficient - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */ parcelHelpers.export(exports, "darken", ()=>darken
);
/**
 * Lightens a color.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} coefficient - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */ parcelHelpers.export(exports, "lighten", ()=>lighten
);
/**
 * Darken or lighten a color, depending on its luminance.
 * Light colors are darkened, dark colors are lightened.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */ parcelHelpers.export(exports, "emphasize", ()=>emphasize
);
var _utils = require("@mui/utils");
/**
 * Returns a number whose value is limited to the given range.
 * @param {number} value The value to be clamped
 * @param {number} min The lower boundary of the output range
 * @param {number} max The upper boundary of the output range
 * @returns {number} A number in the range [min, max]
 */ function clamp(value, min = 0, max = 1) {
    if (value < min || value > max) console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);
    return Math.min(Math.max(min, value), max);
}
function hexToRgb(color) {
    color = color.substr(1);
    const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');
    let colors = color.match(re);
    if (colors && colors[0].length === 1) colors = colors.map((n)=>n + n
    );
    return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index)=>{
        return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
    }).join(', ')})` : '';
}
function intToHex(int) {
    const hex = int.toString(16);
    return hex.length === 1 ? `0${hex}` : hex;
}
function decomposeColor(color) {
    // Idempotent
    if (color.type) return color;
    if (color.charAt(0) === '#') return decomposeColor(hexToRgb(color));
    const marker = color.indexOf('(');
    const type = color.substring(0, marker);
    if ([
        'rgb',
        'rgba',
        'hsl',
        'hsla',
        'color'
    ].indexOf(type) === -1) throw new Error(`MUI: Unsupported \`${color}\` color.\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().`);
    let values = color.substring(marker + 1, color.length - 1);
    let colorSpace;
    if (type === 'color') {
        values = values.split(' ');
        colorSpace = values.shift();
        if (values.length === 4 && values[3].charAt(0) === '/') values[3] = values[3].substr(1);
        if ([
            'srgb',
            'display-p3',
            'a98-rgb',
            'prophoto-rgb',
            'rec-2020'
        ].indexOf(colorSpace) === -1) throw new Error(`MUI: unsupported \`${colorSpace}\` color space.\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.`);
    } else values = values.split(',');
    values = values.map((value)=>parseFloat(value)
    );
    return {
        type,
        values,
        colorSpace
    };
}
function recomposeColor(color) {
    const { type , colorSpace  } = color;
    let { values  } = color;
    if (type.indexOf('rgb') !== -1) // Only convert the first 3 values to int (i.e. not alpha)
    values = values.map((n, i)=>i < 3 ? parseInt(n, 10) : n
    );
    else if (type.indexOf('hsl') !== -1) {
        values[1] = `${values[1]}%`;
        values[2] = `${values[2]}%`;
    }
    if (type.indexOf('color') !== -1) values = `${colorSpace} ${values.join(' ')}`;
    else values = `${values.join(', ')}`;
    return `${type}(${values})`;
}
function rgbToHex(color) {
    // Idempotent
    if (color.indexOf('#') === 0) return color;
    const { values  } = decomposeColor(color);
    return `#${values.map((n, i)=>intToHex(i === 3 ? Math.round(255 * n) : n)
    ).join('')}`;
}
function hslToRgb(color) {
    color = decomposeColor(color);
    const { values  } = color;
    const h = values[0];
    const s = values[1] / 100;
    const l = values[2] / 100;
    const a = s * Math.min(l, 1 - l);
    const f = (n, k = (n + h / 30) % 12)=>l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1)
    ;
    let type = 'rgb';
    const rgb = [
        Math.round(f(0) * 255),
        Math.round(f(8) * 255),
        Math.round(f(4) * 255)
    ];
    if (color.type === 'hsla') {
        type += 'a';
        rgb.push(values[3]);
    }
    return recomposeColor({
        type,
        values: rgb
    });
}
function getLuminance(color) {
    color = decomposeColor(color);
    let rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;
    rgb = rgb.map((val)=>{
        if (color.type !== 'color') val /= 255; // normalized
        return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
    }); // Truncate at 3 digits
    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
}
function getContrastRatio(foreground, background) {
    const lumA = getLuminance(foreground);
    const lumB = getLuminance(background);
    return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
}
function alpha(color, value) {
    color = decomposeColor(color);
    value = clamp(value);
    if (color.type === 'rgb' || color.type === 'hsl') color.type += 'a';
    if (color.type === 'color') color.values[3] = `/${value}`;
    else color.values[3] = value;
    return recomposeColor(color);
}
function darken(color, coefficient) {
    color = decomposeColor(color);
    coefficient = clamp(coefficient);
    if (color.type.indexOf('hsl') !== -1) color.values[2] *= 1 - coefficient;
    else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) for(let i = 0; i < 3; i += 1)color.values[i] *= 1 - coefficient;
    return recomposeColor(color);
}
function lighten(color, coefficient) {
    color = decomposeColor(color);
    coefficient = clamp(coefficient);
    if (color.type.indexOf('hsl') !== -1) color.values[2] += (100 - color.values[2]) * coefficient;
    else if (color.type.indexOf('rgb') !== -1) for(let i = 0; i < 3; i += 1)color.values[i] += (255 - color.values[i]) * coefficient;
    else if (color.type.indexOf('color') !== -1) for(let i1 = 0; i1 < 3; i1 += 1)color.values[i1] += (1 - color.values[i1]) * coefficient;
    return recomposeColor(color);
}
function emphasize(color, coefficient = 0.15) {
    return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
}

},{"@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5IhpQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_themeProviderDefault.default
);
var _themeProvider = require("./ThemeProvider");
var _themeProviderDefault = parcelHelpers.interopDefault(_themeProvider);

},{"./ThemeProvider":"7G3Gu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7G3Gu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _privateTheming = require("@mui/private-theming");
var _utils = require("@mui/utils");
var _styledEngine = require("@mui/styled-engine");
var _useTheme = require("../useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _jsxRuntime = require("react/jsx-runtime");
function InnerThemeProvider(props) {
    const theme = _useThemeDefault.default();
    return(/*#__PURE__*/ _jsxRuntime.jsx(_styledEngine.ThemeContext.Provider, {
        value: typeof theme === 'object' ? theme : {
        },
        children: props.children
    }));
}
InnerThemeProvider.propTypes = {
    /**
   * Your component tree.
   */ children: _propTypesDefault.default.node
};
/**
 * This component makes the `theme` available down the React tree.
 * It should preferably be used at **the root of your component tree**.
 */ function ThemeProvider(props) {
    const { children , theme: localTheme  } = props;
    return(/*#__PURE__*/ _jsxRuntime.jsx(_privateTheming.ThemeProvider, {
        theme: localTheme,
        children: /*#__PURE__*/ _jsxRuntime.jsx(InnerThemeProvider, {
            children: children
        })
    }));
}
ThemeProvider.propTypes = {
    /**
   * Your component tree.
   */ children: _propTypesDefault.default.node,
    /**
   * A theme object. You can provide a function to extend the outer theme.
   */ theme: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.object,
        _propTypesDefault.default.func
    ]).isRequired
};
ThemeProvider.propTypes = _utils.exactProp(ThemeProvider.propTypes);
exports.default = ThemeProvider;

},{"react":"6TuXu","prop-types":"1tgq3","@mui/private-theming":"hwN8A","@mui/utils":"9YmNw","@mui/styled-engine":"27jsV","../useTheme":"9fPBO","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hCaw2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _utils = require("@mui/utils");
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _styledEngine = require("@mui/styled-engine");
var _cssVarsParser = require("./cssVarsParser");
var _cssVarsParserDefault = parcelHelpers.interopDefault(_cssVarsParser);
var _getInitColorSchemeScript = require("./getInitColorSchemeScript");
var _getInitColorSchemeScriptDefault = parcelHelpers.interopDefault(_getInitColorSchemeScript);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "colorSchemes"
], _excluded2 = [
    "colorSchemes"
];
const resolveMode = (key, fallback, supportedColorSchemes)=>{
    if (typeof window === 'undefined') return undefined;
    let value;
    try {
        value = localStorage.getItem(key) || undefined;
        if (!supportedColorSchemes.includes(value)) value = undefined;
    } catch (e) {
    }
    return value || fallback;
};
function createCssVarsProvider(ThemeContext, options) {
    const { theme: baseTheme = {
    } , defaultColorScheme: designSystemColorScheme , prefix: designSystemPrefix = ''  } = options;
    if (!baseTheme.colorSchemes || !baseTheme.colorSchemes[designSystemColorScheme]) console.error(`MUI: \`${designSystemColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
    const ColorSchemeContext = /*#__PURE__*/ _react.createContext(undefined);
    const useColorScheme = ()=>{
        const value = _react.useContext(ColorSchemeContext);
        if (!value) throw new Error(`MUI: \`useColorScheme\` must be called under <CssVarsProvider />`);
        return value;
    };
    function CssVarsProvider({ children , theme: themeProp = {
    } , prefix =designSystemPrefix , storageKey =_getInitColorSchemeScript.DEFAULT_STORAGE_KEY , attribute =_getInitColorSchemeScript.DEFAULT_ATTRIBUTE , defaultColorScheme =designSystemColorScheme  }) {
        const { colorSchemes: baseColorSchemes = {
        }  } = baseTheme, restBaseTheme = _objectWithoutPropertiesLooseDefault.default(baseTheme, _excluded);
        const { colorSchemes: colorSchemesProp = {
        }  } = themeProp, restThemeProp = _objectWithoutPropertiesLooseDefault.default(themeProp, _excluded2);
        let mergedTheme = _utils.deepmerge(restBaseTheme, restThemeProp);
        const colorSchemes = _utils.deepmerge(baseColorSchemes, colorSchemesProp);
        const allColorSchemes = Object.keys(colorSchemes);
        const joinedColorSchemes = allColorSchemes.join(',');
        const [colorScheme, setColorScheme] = _react.useState(()=>resolveMode(storageKey, defaultColorScheme, allColorSchemes)
        );
        const resolvedColorScheme = colorScheme || defaultColorScheme;
        const { css: rootCss , vars: rootVars  } = _cssVarsParserDefault.default(mergedTheme, {
            prefix
        });
        mergedTheme = _extendsDefault.default({
        }, mergedTheme, colorSchemes[resolvedColorScheme], {
            vars: rootVars
        });
        const styleSheet = {
        };
        Object.entries(colorSchemes).forEach(([key, scheme])=>{
            const { css , vars  } = _cssVarsParserDefault.default(scheme, {
                prefix
            });
            if (key === resolvedColorScheme) mergedTheme.vars = _extendsDefault.default({
            }, mergedTheme.vars, vars);
            if (key === defaultColorScheme) styleSheet[':root'] = _utils.deepmerge(rootCss, css);
            else styleSheet[`[${attribute}="${key}"]`] = css;
        });
        _react.useEffect(()=>{
            if (colorScheme) {
                document.body.setAttribute(attribute, colorScheme);
                localStorage.setItem(storageKey, colorScheme);
            }
        }, [
            colorScheme,
            attribute,
            storageKey
        ]); // local storage modified in the context of another document
        _react.useEffect(()=>{
            const handleStorage = (event)=>{
                const storageColorScheme = event.newValue;
                if (event.key === storageKey && joinedColorSchemes.match(storageColorScheme)) {
                    if (storageColorScheme) setColorScheme(storageColorScheme);
                }
            };
            window.addEventListener('storage', handleStorage);
            return ()=>window.removeEventListener('storage', handleStorage)
            ;
        }, [
            setColorScheme,
            storageKey,
            joinedColorSchemes
        ]);
        const wrappedSetColorScheme = _react.useCallback((val)=>{
            if (typeof val === 'string' && !allColorSchemes.includes(val)) console.error(`\`${val}\` does not exist in \`theme.colorSchemes\`.`);
            else setColorScheme(val);
        }, [
            setColorScheme,
            allColorSchemes
        ]);
        return(/*#__PURE__*/ _jsxRuntime.jsxs(ColorSchemeContext.Provider, {
            value: {
                colorScheme,
                setColorScheme: wrappedSetColorScheme,
                allColorSchemes
            },
            children: [
                /*#__PURE__*/ _jsxRuntime.jsx(_styledEngine.GlobalStyles, {
                    styles: styleSheet
                }),
                /*#__PURE__*/ _jsxRuntime.jsx(ThemeContext.Provider, {
                    value: mergedTheme,
                    children: children
                })
            ]
        }));
    }
    CssVarsProvider.propTypes = {
        /**
     * The body attribute name to attach colorScheme.
     */ attribute: _propTypesDefault.default.string,
        /**
     * Your component tree.
     */ children: _propTypesDefault.default.node,
        /**
     * The initial color scheme used.
     */ defaultColorScheme: _propTypesDefault.default.string,
        /**
     * css variable prefix
     */ prefix: _propTypesDefault.default.string,
        /**
     * The key in the local storage used to store current color scheme.
     */ storageKey: _propTypesDefault.default.string,
        /**
     * The calculated theme object that will be passed through context.
     */ theme: _propTypesDefault.default.object
    };
    return {
        CssVarsProvider,
        useColorScheme,
        getInitColorSchemeScript: _getInitColorSchemeScriptDefault.default
    };
}
exports.default = createCssVarsProvider;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@mui/utils":"9YmNw","react":"6TuXu","prop-types":"1tgq3","@mui/styled-engine":"27jsV","./cssVarsParser":"imAaH","./getInitColorSchemeScript":"3qTkV","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"imAaH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assignNestedKeys", ()=>assignNestedKeys
);
parcelHelpers.export(exports, "walkObjectDeep", ()=>walkObjectDeep
);
const assignNestedKeys = (obj, keys, value)=>{
    let temp = obj;
    keys.forEach((k, index)=>{
        if (index === keys.length - 1) {
            if (temp && typeof temp === 'object') temp[k] = value;
        } else if (temp && typeof temp === 'object') {
            if (!temp[k]) temp[k] = {
            };
            temp = temp[k];
        }
    });
};
const walkObjectDeep = (obj, callback)=>{
    function recurse(object, parentKeys = []) {
        Object.entries(object).forEach(([key, value])=>{
            if (value !== undefined && value !== null) {
                if (typeof value === 'object' && Object.keys(value).length > 0) recurse(value, [
                    ...parentKeys,
                    key
                ]);
                else callback([
                    ...parentKeys,
                    key
                ], value);
            }
        });
    }
    recurse(obj);
};
const getCssValue = (keys, value)=>{
    if (typeof value === 'number') {
        if ([
            'lineHeight',
            'fontWeight',
            'opacity',
            'zIndex'
        ].some((prop)=>keys.includes(prop)
        )) // css property that are unitless
        return value;
        return `${value}px`;
    }
    return value;
};
function cssVarsParser(obj, options) {
    const { prefix  } = options || {
    };
    const css = {
    };
    const vars = {
    };
    walkObjectDeep(obj, (keys, value)=>{
        if (typeof value === 'string' || typeof value === 'number') {
            const cssVar = `--${prefix ? `${prefix}-` : ''}${keys.join('-')}`;
            Object.assign(css, {
                [cssVar]: getCssValue(keys, value)
            });
            assignNestedKeys(vars, keys, `var(${cssVar})`);
        }
    });
    return {
        css,
        vars
    };
}
exports.default = cssVarsParser;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3qTkV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_STORAGE_KEY", ()=>DEFAULT_STORAGE_KEY
);
parcelHelpers.export(exports, "DEFAULT_ATTRIBUTE", ()=>DEFAULT_ATTRIBUTE
);
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
const DEFAULT_STORAGE_KEY = 'mui-color-scheme';
const DEFAULT_ATTRIBUTE = 'data-mui-color-scheme';
function getInitColorSchemeScript(options) {
    const { storageKey =DEFAULT_STORAGE_KEY , attribute =DEFAULT_ATTRIBUTE  } = options || {
    };
    return(/*#__PURE__*/ _jsxRuntime.jsx("script", {
        // eslint-disable-next-line react/no-danger
        dangerouslySetInnerHTML: {
            __html: `(function() { try {\n        var colorScheme = localStorage.getItem('${storageKey}');\n        if (colorScheme) {\n          document.body.setAttribute('${attribute}', colorScheme);\n        }\n      } catch (e) {} })();`
        }
    }));
}
exports.default = getInitColorSchemeScript;

},{"react":"6TuXu","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ePjUz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "popperGenerator", ()=>_createPopperJs.popperGenerator
) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "detectOverflow", ()=>_createPopperJs.detectOverflow
);
parcelHelpers.export(exports, "createPopperBase", ()=>_createPopperJs.createPopper
);
parcelHelpers.export(exports, "createPopper", ()=>_popperJs.createPopper
) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "createPopperLite", ()=>_popperLiteJs.createPopper
);
var _enumsJs = require("./enums.js");
parcelHelpers.exportAll(_enumsJs, exports);
var _indexJs = require("./modifiers/index.js"); // eslint-disable-next-line import/no-unused-modules
parcelHelpers.exportAll(_indexJs, exports);
var _createPopperJs = require("./createPopper.js");
var _popperJs = require("./popper.js");
var _popperLiteJs = require("./popper-lite.js");

},{"./enums.js":"kBo2A","./modifiers/index.js":"gybOm","./createPopper.js":"eWRl5","./popper.js":"eUg1f","./popper-lite.js":"jTF4s","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kBo2A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "top", ()=>top
);
parcelHelpers.export(exports, "bottom", ()=>bottom
);
parcelHelpers.export(exports, "right", ()=>right
);
parcelHelpers.export(exports, "left", ()=>left
);
parcelHelpers.export(exports, "auto", ()=>auto
);
parcelHelpers.export(exports, "basePlacements", ()=>basePlacements
);
parcelHelpers.export(exports, "start", ()=>start
);
parcelHelpers.export(exports, "end", ()=>end
);
parcelHelpers.export(exports, "clippingParents", ()=>clippingParents
);
parcelHelpers.export(exports, "viewport", ()=>viewport
);
parcelHelpers.export(exports, "popper", ()=>popper
);
parcelHelpers.export(exports, "reference", ()=>reference
);
parcelHelpers.export(exports, "variationPlacements", ()=>variationPlacements
);
parcelHelpers.export(exports, "placements", ()=>placements
);
parcelHelpers.export(exports, "beforeRead", ()=>beforeRead
);
parcelHelpers.export(exports, "read", ()=>read
);
parcelHelpers.export(exports, "afterRead", ()=>afterRead
);
parcelHelpers.export(exports, "beforeMain", ()=>beforeMain
);
parcelHelpers.export(exports, "main", ()=>main
);
parcelHelpers.export(exports, "afterMain", ()=>afterMain
);
parcelHelpers.export(exports, "beforeWrite", ()=>beforeWrite
);
parcelHelpers.export(exports, "write", ()=>write
);
parcelHelpers.export(exports, "afterWrite", ()=>afterWrite
);
parcelHelpers.export(exports, "modifierPhases", ()=>modifierPhases
);
var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [
    top,
    bottom,
    right,
    left
];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/ basePlacements.reduce(function(acc, placement) {
    return acc.concat([
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []);
var placements = /*#__PURE__*/ [].concat(basePlacements, [
    auto
]).reduce(function(acc, placement) {
    return acc.concat([
        placement,
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []); // modifiers that need to read the DOM
var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers
var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)
var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [
    beforeRead,
    read,
    afterRead,
    beforeMain,
    main,
    afterMain,
    beforeWrite,
    write,
    afterWrite
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gybOm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "applyStyles", ()=>_applyStylesJsDefault.default
);
parcelHelpers.export(exports, "arrow", ()=>_arrowJsDefault.default
);
parcelHelpers.export(exports, "computeStyles", ()=>_computeStylesJsDefault.default
);
parcelHelpers.export(exports, "eventListeners", ()=>_eventListenersJsDefault.default
);
parcelHelpers.export(exports, "flip", ()=>_flipJsDefault.default
);
parcelHelpers.export(exports, "hide", ()=>_hideJsDefault.default
);
parcelHelpers.export(exports, "offset", ()=>_offsetJsDefault.default
);
parcelHelpers.export(exports, "popperOffsets", ()=>_popperOffsetsJsDefault.default
);
parcelHelpers.export(exports, "preventOverflow", ()=>_preventOverflowJsDefault.default
);
var _applyStylesJs = require("./applyStyles.js");
var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
var _arrowJs = require("./arrow.js");
var _arrowJsDefault = parcelHelpers.interopDefault(_arrowJs);
var _computeStylesJs = require("./computeStyles.js");
var _computeStylesJsDefault = parcelHelpers.interopDefault(_computeStylesJs);
var _eventListenersJs = require("./eventListeners.js");
var _eventListenersJsDefault = parcelHelpers.interopDefault(_eventListenersJs);
var _flipJs = require("./flip.js");
var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
var _hideJs = require("./hide.js");
var _hideJsDefault = parcelHelpers.interopDefault(_hideJs);
var _offsetJs = require("./offset.js");
var _offsetJsDefault = parcelHelpers.interopDefault(_offsetJs);
var _popperOffsetsJs = require("./popperOffsets.js");
var _popperOffsetsJsDefault = parcelHelpers.interopDefault(_popperOffsetsJs);
var _preventOverflowJs = require("./preventOverflow.js");
var _preventOverflowJsDefault = parcelHelpers.interopDefault(_preventOverflowJs);

},{"./applyStyles.js":"iCp47","./arrow.js":"3VSHy","./computeStyles.js":"eNeWb","./eventListeners.js":"gK2qK","./flip.js":"c3Yfj","./hide.js":"i5BM6","./offset.js":"5eukw","./popperOffsets.js":"767Ci","./preventOverflow.js":"2sJvj","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iCp47":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNodeNameJs = require("../dom-utils/getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("../dom-utils/instanceOf.js"); // This modifier takes the styles prepared by the `computeStyles` modifier
// and applies them to the HTMLElements such as popper and arrow
function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
        var style = state.styles[name] || {
        };
        var attributes = state.attributes[name] || {
        };
        var element = state.elements[name]; // arrow is optional + virtual elements
        if (!_instanceOfJs.isHTMLElement(element) || !_getNodeNameJsDefault.default(element)) return;
         // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe[cannot-write]
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function(name1) {
            var value = attributes[name1];
            if (value === false) element.removeAttribute(name1);
            else element.setAttribute(name1, value === true ? '' : value);
        });
    });
}
function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
        popper: {
            position: state.options.strategy,
            left: '0',
            top: '0',
            margin: '0'
        },
        arrow: {
            position: 'absolute'
        },
        reference: {
        }
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) Object.assign(state.elements.arrow.style, initialStyles.arrow);
    return function() {
        Object.keys(state.elements).forEach(function(name) {
            var element = state.elements[name];
            var attributes = state.attributes[name] || {
            };
            var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them
            var style = styleProperties.reduce(function(style1, property) {
                style1[property] = '';
                return style1;
            }, {
            }); // arrow is optional + virtual elements
            if (!_instanceOfJs.isHTMLElement(element) || !_getNodeNameJsDefault.default(element)) return;
            Object.assign(element.style, style);
            Object.keys(attributes).forEach(function(attribute) {
                element.removeAttribute(attribute);
            });
        });
    };
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect,
    requires: [
        'computeStyles'
    ]
};

},{"../dom-utils/getNodeName.js":"EprJN","../dom-utils/instanceOf.js":"5XVaZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"EprJN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
}
exports.default = getNodeName;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5XVaZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isElement", ()=>isElement
);
parcelHelpers.export(exports, "isHTMLElement", ()=>isHTMLElement
);
parcelHelpers.export(exports, "isShadowRoot", ()=>isShadowRoot
);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function isElement(node) {
    var OwnElement = _getWindowJsDefault.default(node).Element;
    return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
    var OwnElement = _getWindowJsDefault.default(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') return false;
    var OwnElement = _getWindowJsDefault.default(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
}

},{"./getWindow.js":"MkPcb","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"MkPcb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getWindow(node) {
    if (node == null) return window;
    if (node.toString() !== '[object Window]') {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
}
exports.default = getWindow;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3VSHy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getLayoutRectJs = require("../dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _containsJs = require("../dom-utils/contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getMainAxisFromPlacementJs = require("../utils/getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _withinJs = require("../utils/within.js");
var _withinJsDefault = parcelHelpers.interopDefault(_withinJs);
var _mergePaddingObjectJs = require("../utils/mergePaddingObject.js");
var _mergePaddingObjectJsDefault = parcelHelpers.interopDefault(_mergePaddingObjectJs);
var _expandToHashMapJs = require("../utils/expandToHashMap.js");
var _expandToHashMapJsDefault = parcelHelpers.interopDefault(_expandToHashMapJs);
var _enumsJs = require("../enums.js");
var _instanceOfJs = require("../dom-utils/instanceOf.js"); // eslint-disable-next-line import/no-unused-modules
var toPaddingObject = function toPaddingObject1(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({
    }, state.rects, {
        placement: state.placement
    })) : padding;
    return _mergePaddingObjectJsDefault.default(typeof padding !== 'number' ? padding : _expandToHashMapJsDefault.default(padding, _enumsJs.basePlacements));
};
function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = _getBasePlacementJsDefault.default(state.placement);
    var axis = _getMainAxisFromPlacementJsDefault.default(basePlacement);
    var isVertical = [_enumsJs.left, _enumsJs.right].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';
    if (!arrowElement || !popperOffsets) return;
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = _getLayoutRectJsDefault.default(arrowElement);
    var minProp = axis === 'y' ? _enumsJs.top : _enumsJs.left;
    var maxProp = axis === 'y' ? _enumsJs.bottom : _enumsJs.right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = _getOffsetParentJsDefault.default(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds
    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = _withinJsDefault.default(min, center, max); // Prevents breaking syntax highlighting...
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {
    }, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}
function effect(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;
    if (arrowElement == null) return;
     // CSS selector
    if (typeof arrowElement === 'string') {
        arrowElement = state.elements.popper.querySelector(arrowElement);
        if (!arrowElement) return;
    }
    if (!_instanceOfJs.isHTMLElement(arrowElement)) console.error([
        'Popper: "arrow" element must be an HTMLElement (not an SVGElement).',
        'To use an SVG arrow, wrap it in an HTMLElement that will be used as',
        'the arrow.'
    ].join(' '));
    if (!_containsJsDefault.default(state.elements.popper, arrowElement)) {
        console.error([
            'Popper: "arrow" modifier\'s `element` must be a child of the popper',
            'element.'
        ].join(' '));
        return;
    }
    state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect,
    requires: [
        'popperOffsets'
    ],
    requiresIfExists: [
        'preventOverflow'
    ]
};

},{"../utils/getBasePlacement.js":"uyzYw","../dom-utils/getLayoutRect.js":"jbNRU","../dom-utils/contains.js":"44CRG","../dom-utils/getOffsetParent.js":"h282o","../utils/getMainAxisFromPlacement.js":"3RRs0","../utils/within.js":"baM3C","../utils/mergePaddingObject.js":"kGOSi","../utils/expandToHashMap.js":"gAvCE","../enums.js":"kBo2A","../dom-utils/instanceOf.js":"5XVaZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"uyzYw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
function getBasePlacement(placement) {
    return placement.split('-')[0];
}
exports.default = getBasePlacement;

},{"../enums.js":"kBo2A","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jbNRU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js"); // Returns the layout rect of an element relative to its offsetParent. Layout
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
function getLayoutRect(element) {
    var clientRect = _getBoundingClientRectJsDefault.default(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) width = clientRect.width;
    if (Math.abs(clientRect.height - height) <= 1) height = clientRect.height;
    return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width,
        height: height
    };
}
exports.default = getLayoutRect;

},{"./getBoundingClientRect.js":"a0UQf","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"a0UQf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getBoundingClientRect(element, includeScale) {
    if (includeScale === void 0) includeScale = false;
    var rect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1; // FIXME:
    // `offsetWidth` returns an integer while `getBoundingClientRect`
    // returns a float. This results in `scaleX` or `scaleY` being
    // non-1 when it should be for elements that aren't a full pixel in
    // width or height.
    // if (isHTMLElement(element) && includeScale) {
    //   const offsetHeight = element.offsetHeight;
    //   const offsetWidth = element.offsetWidth;
    //   // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
    //   // Fallback to 1 in case both values are `0`
    //   if (offsetWidth > 0) {
    //     scaleX = rect.width / offsetWidth || 1;
    //   }
    //   if (offsetHeight > 0) {
    //     scaleY = rect.height / offsetHeight || 1;
    //   }
    // }
    return {
        width: rect.width / scaleX,
        height: rect.height / scaleY,
        top: rect.top / scaleY,
        right: rect.right / scaleX,
        bottom: rect.bottom / scaleY,
        left: rect.left / scaleX,
        x: rect.left / scaleX,
        y: rect.top / scaleY
    };
}
exports.default = getBoundingClientRect;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"44CRG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _instanceOfJs = require("./instanceOf.js");
function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method
    if (parent.contains(child)) return true;
    else if (rootNode && _instanceOfJs.isShadowRoot(rootNode)) {
        var next = child;
        do {
            if (next && parent.isSameNode(next)) return true;
             // $FlowFixMe[prop-missing]: need a better way to handle this...
            next = next.parentNode || next.host;
        }while (next)
    } // Give up, the result is false
    return false;
}
exports.default = contains;

},{"./instanceOf.js":"5XVaZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"h282o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _instanceOfJs = require("./instanceOf.js");
var _isTableElementJs = require("./isTableElement.js");
var _isTableElementJsDefault = parcelHelpers.interopDefault(_isTableElementJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
function getTrueOffsetParent(element) {
    if (!_instanceOfJs.isHTMLElement(element) || _getComputedStyleJsDefault.default(element).position === 'fixed') return null;
    return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block
function getContainingBlock(element) {
    var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
    var isIE = navigator.userAgent.indexOf('Trident') !== -1;
    if (isIE && _instanceOfJs.isHTMLElement(element)) {
        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
        var elementCss = _getComputedStyleJsDefault.default(element);
        if (elementCss.position === 'fixed') return null;
    }
    var currentNode = _getParentNodeJsDefault.default(element);
    while(_instanceOfJs.isHTMLElement(currentNode) && [
        'html',
        'body'
    ].indexOf(_getNodeNameJsDefault.default(currentNode)) < 0){
        var css = _getComputedStyleJsDefault.default(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
        if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || [
            'transform',
            'perspective'
        ].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') return currentNode;
        else currentNode = currentNode.parentNode;
    }
    return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
function getOffsetParent(element) {
    var window = _getWindowJsDefault.default(element);
    var offsetParent = getTrueOffsetParent(element);
    while(offsetParent && _isTableElementJsDefault.default(offsetParent) && _getComputedStyleJsDefault.default(offsetParent).position === 'static')offsetParent = getTrueOffsetParent(offsetParent);
    if (offsetParent && (_getNodeNameJsDefault.default(offsetParent) === 'html' || _getNodeNameJsDefault.default(offsetParent) === 'body' && _getComputedStyleJsDefault.default(offsetParent).position === 'static')) return window;
    return offsetParent || getContainingBlock(element) || window;
}
exports.default = getOffsetParent;

},{"./getWindow.js":"MkPcb","./getNodeName.js":"EprJN","./getComputedStyle.js":"cn2q5","./instanceOf.js":"5XVaZ","./isTableElement.js":"a0fpP","./getParentNode.js":"lehUS","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cn2q5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function getComputedStyle(element) {
    return _getWindowJsDefault.default(element).getComputedStyle(element);
}
exports.default = getComputedStyle;

},{"./getWindow.js":"MkPcb","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"a0fpP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
function isTableElement(element) {
    return [
        'table',
        'td',
        'th'
    ].indexOf(_getNodeNameJsDefault.default(element)) >= 0;
}
exports.default = isTableElement;

},{"./getNodeName.js":"EprJN","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lehUS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _instanceOfJs = require("./instanceOf.js");
function getParentNode(element) {
    if (_getNodeNameJsDefault.default(element) === 'html') return element;
    return(// $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || element.parentNode || (_instanceOfJs.isShadowRoot(element) ? element.host : null) || // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    _getDocumentElementJsDefault.default(element) // fallback
    );
}
exports.default = getParentNode;

},{"./getNodeName.js":"EprJN","./getDocumentElement.js":"jaH6y","./instanceOf.js":"5XVaZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jaH6y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _instanceOfJs = require("./instanceOf.js");
function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((_instanceOfJs.isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}
exports.default = getDocumentElement;

},{"./instanceOf.js":"5XVaZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3RRs0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getMainAxisFromPlacement(placement) {
    return [
        'top',
        'bottom'
    ].indexOf(placement) >= 0 ? 'x' : 'y';
}
exports.default = getMainAxisFromPlacement;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"baM3C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("./math.js");
function within(min, value, max) {
    return _mathJs.max(min, _mathJs.min(value, max));
}
exports.default = within;

},{"./math.js":"gyDDZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gyDDZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "max", ()=>max
);
parcelHelpers.export(exports, "min", ()=>min
);
parcelHelpers.export(exports, "round", ()=>round
);
var max = Math.max;
var min = Math.min;
var round = Math.round;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kGOSi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getFreshSideObjectJs = require("./getFreshSideObject.js");
var _getFreshSideObjectJsDefault = parcelHelpers.interopDefault(_getFreshSideObjectJs);
function mergePaddingObject(paddingObject) {
    return Object.assign({
    }, _getFreshSideObjectJsDefault.default(), paddingObject);
}
exports.default = mergePaddingObject;

},{"./getFreshSideObject.js":"6Lmzs","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6Lmzs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getFreshSideObject() {
    return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    };
}
exports.default = getFreshSideObject;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gAvCE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
        hashMap[key] = value;
        return hashMap;
    }, {
    });
}
exports.default = expandToHashMap;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eNeWb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mapToStyles", ()=>mapToStyles
);
var _enumsJs = require("../enums.js");
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getWindowJs = require("../dom-utils/getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getDocumentElementJs = require("../dom-utils/getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("../dom-utils/getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getVariationJs = require("../utils/getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _mathJs = require("../utils/math.js"); // eslint-disable-next-line import/no-unused-modules
var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.
function roundOffsetsByDPR(_ref) {
    var x = _ref.x, y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
        x: _mathJs.round(_mathJs.round(x * dpr) / dpr) || 0,
        y: _mathJs.round(_mathJs.round(y * dpr) / dpr) || 0
    };
}
function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets;
    var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === 'function' ? roundOffsets(offsets) : offsets, _ref3$x = _ref3.x, x = _ref3$x === void 0 ? 0 : _ref3$x, _ref3$y = _ref3.y, y = _ref3$y === void 0 ? 0 : _ref3$y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = _enumsJs.left;
    var sideY = _enumsJs.top;
    var win = window;
    if (adaptive) {
        var offsetParent = _getOffsetParentJsDefault.default(popper);
        var heightProp = 'clientHeight';
        var widthProp = 'clientWidth';
        if (offsetParent === _getWindowJsDefault.default(popper)) {
            offsetParent = _getDocumentElementJsDefault.default(popper);
            if (_getComputedStyleJsDefault.default(offsetParent).position !== 'static' && position === 'absolute') {
                heightProp = 'scrollHeight';
                widthProp = 'scrollWidth';
            }
        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it
        if (placement === _enumsJs.top || (placement === _enumsJs.left || placement === _enumsJs.right) && variation === _enumsJs.end) {
            sideY = _enumsJs.bottom; // $FlowFixMe[prop-missing]
            y -= offsetParent[heightProp] - popperRect.height;
            y *= gpuAcceleration ? 1 : -1;
        }
        if (placement === _enumsJs.left || (placement === _enumsJs.top || placement === _enumsJs.bottom) && variation === _enumsJs.end) {
            sideX = _enumsJs.right; // $FlowFixMe[prop-missing]
            x -= offsetParent[widthProp] - popperRect.width;
            x *= gpuAcceleration ? 1 : -1;
        }
    }
    var commonStyles = Object.assign({
        position: position
    }, adaptive && unsetSides);
    if (gpuAcceleration) {
        var _Object$assign;
        return Object.assign({
        }, commonStyles, (_Object$assign = {
        }, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({
    }, commonStyles, (_Object$assign2 = {
    }, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}
function computeStyles(_ref4) {
    var state = _ref4.state, options = _ref4.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var transitionProperty = _getComputedStyleJsDefault.default(state.elements.popper).transitionProperty || '';
    if (adaptive && [
        'transform',
        'top',
        'right',
        'bottom',
        'left'
    ].some(function(property) {
        return transitionProperty.indexOf(property) >= 0;
    })) console.warn([
        'Popper: Detected CSS transitions on at least one of the following',
        'CSS properties: "transform", "top", "right", "bottom", "left".',
        '\n\n',
        'Disable the "computeStyles" modifier\'s `adaptive` option to allow',
        'for smooth transitions, or remove these properties from the CSS',
        'transition declaration on the popper element if only transitioning',
        'opacity or background-color for example.',
        '\n\n',
        'We recommend using the popper element as a wrapper around an inner',
        'element that can have any CSS property transitioned for animations.'
    ].join(' '));
    var commonStyles = {
        placement: _getBasePlacementJsDefault.default(state.placement),
        variation: _getVariationJsDefault.default(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration
    };
    if (state.modifiersData.popperOffsets != null) state.styles.popper = Object.assign({
    }, state.styles.popper, mapToStyles(Object.assign({
    }, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
    })));
    if (state.modifiersData.arrow != null) state.styles.arrow = Object.assign({
    }, state.styles.arrow, mapToStyles(Object.assign({
    }, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
    })));
    state.attributes.popper = Object.assign({
    }, state.attributes.popper, {
        'data-popper-placement': state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {
    }
};

},{"../enums.js":"kBo2A","../dom-utils/getOffsetParent.js":"h282o","../dom-utils/getWindow.js":"MkPcb","../dom-utils/getDocumentElement.js":"jaH6y","../dom-utils/getComputedStyle.js":"cn2q5","../utils/getBasePlacement.js":"uyzYw","../utils/getVariation.js":"e7Opv","../utils/math.js":"gyDDZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"e7Opv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getVariation(placement) {
    return placement.split('-')[1];
}
exports.default = getVariation;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gK2qK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("../dom-utils/getWindow.js"); // eslint-disable-next-line import/no-unused-modules
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var passive = {
    passive: true
};
function effect(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window = _getWindowJsDefault.default(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
    });
    if (resize) window.addEventListener('resize', instance.update, passive);
    return function() {
        if (scroll) scrollParents.forEach(function(scrollParent) {
            scrollParent.removeEventListener('scroll', instance.update, passive);
        });
        if (resize) window.removeEventListener('resize', instance.update, passive);
    };
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {
    },
    effect: effect,
    data: {
    }
};

},{"../dom-utils/getWindow.js":"MkPcb","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"c3Yfj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getOppositePlacementJs = require("../utils/getOppositePlacement.js");
var _getOppositePlacementJsDefault = parcelHelpers.interopDefault(_getOppositePlacementJs);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getOppositeVariationPlacementJs = require("../utils/getOppositeVariationPlacement.js");
var _getOppositeVariationPlacementJsDefault = parcelHelpers.interopDefault(_getOppositeVariationPlacementJs);
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _computeAutoPlacementJs = require("../utils/computeAutoPlacement.js");
var _computeAutoPlacementJsDefault = parcelHelpers.interopDefault(_computeAutoPlacementJs);
var _enumsJs = require("../enums.js");
var _getVariationJs = require("../utils/getVariation.js"); // eslint-disable-next-line import/no-unused-modules
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
function getExpandedFallbackPlacements(placement) {
    if (_getBasePlacementJsDefault.default(placement) === _enumsJs.auto) return [];
    var oppositePlacement = _getOppositePlacementJsDefault.default(placement);
    return [
        _getOppositeVariationPlacementJsDefault.default(placement),
        oppositePlacement,
        _getOppositeVariationPlacementJsDefault.default(oppositePlacement)
    ];
}
function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) return;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = _getBasePlacementJsDefault.default(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [
        _getOppositePlacementJsDefault.default(preferredPlacement)
    ] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [
        preferredPlacement
    ].concat(fallbackPlacements).reduce(function(acc, placement) {
        return acc.concat(_getBasePlacementJsDefault.default(placement) === _enumsJs.auto ? _computeAutoPlacementJsDefault.default(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding,
            flipVariations: flipVariations,
            allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];
    for(var i = 0; i < placements.length; i++){
        var placement = placements[i];
        var _basePlacement = _getBasePlacementJsDefault.default(placement);
        var isStartVariation = _getVariationJsDefault.default(placement) === _enumsJs.start;
        var isVertical = [_enumsJs.top, _enumsJs.bottom].indexOf(_basePlacement) >= 0;
        var len = isVertical ? 'width' : 'height';
        var overflow = _detectOverflowJsDefault.default(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            altBoundary: altBoundary,
            padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? _enumsJs.right : _enumsJs.left : isStartVariation ? _enumsJs.bottom : _enumsJs.top;
        if (referenceRect[len] > popperRect[len]) mainVariationSide = _getOppositePlacementJsDefault.default(mainVariationSide);
        var altVariationSide = _getOppositePlacementJsDefault.default(mainVariationSide);
        var checks = [];
        if (checkMainAxis) checks.push(overflow[_basePlacement] <= 0);
        if (checkAltAxis) checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        if (checks.every(function(check) {
            return check;
        })) {
            firstFittingPlacement = placement;
            makeFallbackChecks = false;
            break;
        }
        checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
        // `2` may be desired in some cases – research later
        var numberOfChecks = flipVariations ? 3 : 1;
        var _loop = function _loop1(_i) {
            var fittingPlacement = placements.find(function(placement) {
                var checks = checksMap.get(placement);
                if (checks) return checks.slice(0, _i).every(function(check) {
                    return check;
                });
            });
            if (fittingPlacement) {
                firstFittingPlacement = fittingPlacement;
                return "break";
            }
        };
        for(var _i = numberOfChecks; _i > 0; _i--){
            var _ret = _loop(_i);
            if (_ret === "break") break;
        }
    }
    if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
    }
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: [
        'offset'
    ],
    data: {
        _skip: false
    }
};

},{"../utils/getOppositePlacement.js":"1nfXR","../utils/getBasePlacement.js":"uyzYw","../utils/getOppositeVariationPlacement.js":"iPlb1","../utils/detectOverflow.js":"8uw8g","../utils/computeAutoPlacement.js":"5gagL","../enums.js":"kBo2A","../utils/getVariation.js":"e7Opv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1nfXR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var hash = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
};
function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
        return hash[matched];
    });
}
exports.default = getOppositePlacement;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iPlb1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var hash = {
    start: 'end',
    end: 'start'
};
function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
        return hash[matched];
    });
}
exports.default = getOppositeVariationPlacement;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8uw8g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getClippingRectJs = require("../dom-utils/getClippingRect.js");
var _getClippingRectJsDefault = parcelHelpers.interopDefault(_getClippingRectJs);
var _getDocumentElementJs = require("../dom-utils/getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getBoundingClientRectJs = require("../dom-utils/getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _computeOffsetsJs = require("./computeOffsets.js");
var _computeOffsetsJsDefault = parcelHelpers.interopDefault(_computeOffsetsJs);
var _rectToClientRectJs = require("./rectToClientRect.js");
var _rectToClientRectJsDefault = parcelHelpers.interopDefault(_rectToClientRectJs);
var _enumsJs = require("../enums.js");
var _instanceOfJs = require("../dom-utils/instanceOf.js");
var _mergePaddingObjectJs = require("./mergePaddingObject.js");
var _mergePaddingObjectJsDefault = parcelHelpers.interopDefault(_mergePaddingObjectJs);
var _expandToHashMapJs = require("./expandToHashMap.js"); // eslint-disable-next-line import/no-unused-modules
var _expandToHashMapJsDefault = parcelHelpers.interopDefault(_expandToHashMapJs);
function detectOverflow(state, options) {
    if (options === void 0) options = {
    };
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? _enumsJs.clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? _enumsJs.viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? _enumsJs.popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = _mergePaddingObjectJsDefault.default(typeof padding !== 'number' ? padding : _expandToHashMapJsDefault.default(padding, _enumsJs.basePlacements));
    var altContext = elementContext === _enumsJs.popper ? _enumsJs.reference : _enumsJs.popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = _getClippingRectJsDefault.default(_instanceOfJs.isElement(element) ? element : element.contextElement || _getDocumentElementJsDefault.default(state.elements.popper), boundary, rootBoundary);
    var referenceClientRect = _getBoundingClientRectJsDefault.default(state.elements.reference);
    var popperOffsets = _computeOffsetsJsDefault.default({
        reference: referenceClientRect,
        element: popperRect,
        strategy: 'absolute',
        placement: placement
    });
    var popperClientRect = _rectToClientRectJsDefault.default(Object.assign({
    }, popperRect, popperOffsets));
    var elementClientRect = elementContext === _enumsJs.popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect
    var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element
    if (elementContext === _enumsJs.popper && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function(key) {
            var multiply = [_enumsJs.right, _enumsJs.bottom].indexOf(key) >= 0 ? 1 : -1;
            var axis = [_enumsJs.top, _enumsJs.bottom].indexOf(key) >= 0 ? 'y' : 'x';
            overflowOffsets[key] += offset[axis] * multiply;
        });
    }
    return overflowOffsets;
}
exports.default = detectOverflow;

},{"../dom-utils/getClippingRect.js":"7EeZI","../dom-utils/getDocumentElement.js":"jaH6y","../dom-utils/getBoundingClientRect.js":"a0UQf","./computeOffsets.js":"wx3b2","./rectToClientRect.js":"3oP12","../enums.js":"kBo2A","../dom-utils/instanceOf.js":"5XVaZ","./mergePaddingObject.js":"kGOSi","./expandToHashMap.js":"gAvCE","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7EeZI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _getViewportRectJs = require("./getViewportRect.js");
var _getViewportRectJsDefault = parcelHelpers.interopDefault(_getViewportRectJs);
var _getDocumentRectJs = require("./getDocumentRect.js");
var _getDocumentRectJsDefault = parcelHelpers.interopDefault(_getDocumentRectJs);
var _listScrollParentsJs = require("./listScrollParents.js");
var _listScrollParentsJsDefault = parcelHelpers.interopDefault(_listScrollParentsJs);
var _getOffsetParentJs = require("./getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _instanceOfJs = require("./instanceOf.js");
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _containsJs = require("./contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _rectToClientRectJs = require("../utils/rectToClientRect.js");
var _rectToClientRectJsDefault = parcelHelpers.interopDefault(_rectToClientRectJs);
var _mathJs = require("../utils/math.js");
function getInnerBoundingClientRect(element) {
    var rect = _getBoundingClientRectJsDefault.default(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
}
function getClientRectFromMixedType(element, clippingParent) {
    return clippingParent === _enumsJs.viewport ? _rectToClientRectJsDefault.default(_getViewportRectJsDefault.default(element)) : _instanceOfJs.isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : _rectToClientRectJsDefault.default(_getDocumentRectJsDefault.default(_getDocumentElementJsDefault.default(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`
function getClippingParents(element) {
    var clippingParents = _listScrollParentsJsDefault.default(_getParentNodeJsDefault.default(element));
    var canEscapeClipping = [
        'absolute',
        'fixed'
    ].indexOf(_getComputedStyleJsDefault.default(element).position) >= 0;
    var clipperElement = canEscapeClipping && _instanceOfJs.isHTMLElement(element) ? _getOffsetParentJsDefault.default(element) : element;
    if (!_instanceOfJs.isElement(clipperElement)) return [];
     // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414
    return clippingParents.filter(function(clippingParent) {
        return _instanceOfJs.isElement(clippingParent) && _containsJsDefault.default(clippingParent, clipperElement) && _getNodeNameJsDefault.default(clippingParent) !== 'body';
    });
} // Gets the maximum area that the element is visible in due to any number of
function getClippingRect(element, boundary, rootBoundary) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [
        rootBoundary
    ]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function(accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent);
        accRect.top = _mathJs.max(rect.top, accRect.top);
        accRect.right = _mathJs.min(rect.right, accRect.right);
        accRect.bottom = _mathJs.min(rect.bottom, accRect.bottom);
        accRect.left = _mathJs.max(rect.left, accRect.left);
        return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
}
exports.default = getClippingRect;

},{"../enums.js":"kBo2A","./getViewportRect.js":"8kLIR","./getDocumentRect.js":"73Bm7","./listScrollParents.js":"1NLKz","./getOffsetParent.js":"h282o","./getDocumentElement.js":"jaH6y","./getComputedStyle.js":"cn2q5","./instanceOf.js":"5XVaZ","./getBoundingClientRect.js":"a0UQf","./getParentNode.js":"lehUS","./contains.js":"44CRG","./getNodeName.js":"EprJN","../utils/rectToClientRect.js":"3oP12","../utils/math.js":"gyDDZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8kLIR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
function getViewportRect(element) {
    var win = _getWindowJsDefault.default(element);
    var html = _getDocumentElementJsDefault.default(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
    // can be obscured underneath it.
    // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
    // if it isn't open, so if this isn't available, the popper will be detected
    // to overflow the bottom of the screen too early.
    if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
        // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
        // errors due to floating point numbers, so we need to check precision.
        // Safari returns a number <= 0, usually < -1 when pinch-zoomed
        // Feature detection fails in mobile emulation mode in Chrome.
        // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
        // 0.001
        // Fallback here: "Not Safari" userAgent
        if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
            x = visualViewport.offsetLeft;
            y = visualViewport.offsetTop;
        }
    }
    return {
        width: width,
        height: height,
        x: x + _getWindowScrollBarXJsDefault.default(element),
        y: y
    };
}
exports.default = getViewportRect;

},{"./getWindow.js":"MkPcb","./getDocumentElement.js":"jaH6y","./getWindowScrollBarX.js":"4PVKs","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4PVKs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return _getBoundingClientRectJsDefault.default(_getDocumentElementJsDefault.default(element)).left + _getWindowScrollJsDefault.default(element).scrollLeft;
}
exports.default = getWindowScrollBarX;

},{"./getBoundingClientRect.js":"a0UQf","./getDocumentElement.js":"jaH6y","./getWindowScroll.js":"3t560","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3t560":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function getWindowScroll(node) {
    var win = _getWindowJsDefault.default(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
    };
}
exports.default = getWindowScroll;

},{"./getWindow.js":"MkPcb","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"73Bm7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
var _mathJs = require("../utils/math.js"); // Gets the entire size of the scrollable document area, even extending outside
function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = _getDocumentElementJsDefault.default(element);
    var winScroll = _getWindowScrollJsDefault.default(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = _mathJs.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = _mathJs.max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + _getWindowScrollBarXJsDefault.default(element);
    var y = -winScroll.scrollTop;
    if (_getComputedStyleJsDefault.default(body || html).direction === 'rtl') x += _mathJs.max(html.clientWidth, body ? body.clientWidth : 0) - width;
    return {
        width: width,
        height: height,
        x: x,
        y: y
    };
}
exports.default = getDocumentRect;

},{"./getDocumentElement.js":"jaH6y","./getComputedStyle.js":"cn2q5","./getWindowScrollBarX.js":"4PVKs","./getWindowScroll.js":"3t560","../utils/math.js":"gyDDZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1NLKz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getScrollParentJs = require("./getScrollParent.js");
var _getScrollParentJsDefault = parcelHelpers.interopDefault(_getScrollParentJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) list = [];
    var scrollParent = _getScrollParentJsDefault.default(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = _getWindowJsDefault.default(scrollParent);
    var target = isBody ? [
        win
    ].concat(win.visualViewport || [], _isScrollParentJsDefault.default(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : updatedList.concat(listScrollParents(_getParentNodeJsDefault.default(target)));
}
exports.default = listScrollParents;

},{"./getScrollParent.js":"lcaNR","./getParentNode.js":"lehUS","./getWindow.js":"MkPcb","./isScrollParent.js":"kZX4x","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lcaNR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("./instanceOf.js");
function getScrollParent(node) {
    if ([
        'html',
        'body',
        '#document'
    ].indexOf(_getNodeNameJsDefault.default(node)) >= 0) // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
    if (_instanceOfJs.isHTMLElement(node) && _isScrollParentJsDefault.default(node)) return node;
    return getScrollParent(_getParentNodeJsDefault.default(node));
}
exports.default = getScrollParent;

},{"./getParentNode.js":"lehUS","./isScrollParent.js":"kZX4x","./getNodeName.js":"EprJN","./instanceOf.js":"5XVaZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kZX4x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = _getComputedStyleJsDefault.default(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
exports.default = isScrollParent;

},{"./getComputedStyle.js":"cn2q5","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3oP12":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function rectToClientRect(rect) {
    return Object.assign({
    }, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
    });
}
exports.default = rectToClientRect;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"wx3b2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBasePlacementJs = require("./getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getVariationJs = require("./getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _getMainAxisFromPlacementJs = require("./getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _enumsJs = require("../enums.js");
function computeOffsets(_ref) {
    var reference = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? _getBasePlacementJsDefault.default(placement) : null;
    var variation = placement ? _getVariationJsDefault.default(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;
    switch(basePlacement){
        case _enumsJs.top:
            offsets = {
                x: commonX,
                y: reference.y - element.height
            };
            break;
        case _enumsJs.bottom:
            offsets = {
                x: commonX,
                y: reference.y + reference.height
            };
            break;
        case _enumsJs.right:
            offsets = {
                x: reference.x + reference.width,
                y: commonY
            };
            break;
        case _enumsJs.left:
            offsets = {
                x: reference.x - element.width,
                y: commonY
            };
            break;
        default:
            offsets = {
                x: reference.x,
                y: reference.y
            };
    }
    var mainAxis = basePlacement ? _getMainAxisFromPlacementJsDefault.default(basePlacement) : null;
    if (mainAxis != null) {
        var len = mainAxis === 'y' ? 'height' : 'width';
        switch(variation){
            case _enumsJs.start:
                offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
                break;
            case _enumsJs.end:
                offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
                break;
            default:
        }
    }
    return offsets;
}
exports.default = computeOffsets;

},{"./getBasePlacement.js":"uyzYw","./getVariation.js":"e7Opv","./getMainAxisFromPlacement.js":"3RRs0","../enums.js":"kBo2A","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5gagL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getVariationJs = require("./getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _enumsJs = require("../enums.js");
var _detectOverflowJs = require("./detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _getBasePlacementJs = require("./getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
function computeAutoPlacement(state, options) {
    if (options === void 0) options = {
    };
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? _enumsJs.placements : _options$allowedAutoP;
    var variation = _getVariationJsDefault.default(placement);
    var placements = variation ? flipVariations ? _enumsJs.variationPlacements : _enumsJs.variationPlacements.filter(function(placement1) {
        return _getVariationJsDefault.default(placement1) === variation;
    }) : _enumsJs.basePlacements;
    var allowedPlacements = placements.filter(function(placement1) {
        return allowedAutoPlacements.indexOf(placement1) >= 0;
    });
    if (allowedPlacements.length === 0) {
        allowedPlacements = placements;
        console.error([
            'Popper: The `allowedAutoPlacements` option did not allow any',
            'placements. Ensure the `placement` option matches the variation',
            'of the allowed placements.',
            'For example, "auto" cannot be used to allow "bottom-start".',
            'Use "auto-start" instead.'
        ].join(' '));
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...
    var overflows = allowedPlacements.reduce(function(acc, placement1) {
        acc[placement1] = _detectOverflowJsDefault.default(state, {
            placement: placement1,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding
        })[_getBasePlacementJsDefault.default(placement1)];
        return acc;
    }, {
    });
    return Object.keys(overflows).sort(function(a, b) {
        return overflows[a] - overflows[b];
    });
}
exports.default = computeAutoPlacement;

},{"./getVariation.js":"e7Opv","../enums.js":"kBo2A","./detectOverflow.js":"8uw8g","./getBasePlacement.js":"uyzYw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"i5BM6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) preventedOffsets = {
        x: 0,
        y: 0
    };
    return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
    };
}
function isAnySideFullyClipped(overflow) {
    return [_enumsJs.top, _enumsJs.right, _enumsJs.bottom, _enumsJs.left].some(function(side) {
        return overflow[side] >= 0;
    });
}
function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = _detectOverflowJsDefault.default(state, {
        elementContext: 'reference'
    });
    var popperAltOverflow = _detectOverflowJsDefault.default(state, {
        altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
        referenceClippingOffsets: referenceClippingOffsets,
        popperEscapeOffsets: popperEscapeOffsets,
        isReferenceHidden: isReferenceHidden,
        hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({
    }, state.attributes.popper, {
        'data-popper-reference-hidden': isReferenceHidden,
        'data-popper-escaped': hasPopperEscaped
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: [
        'preventOverflow'
    ],
    fn: hide
};

},{"../enums.js":"kBo2A","../utils/detectOverflow.js":"8uw8g","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5eukw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "distanceAndSkiddingToXY", ()=>distanceAndSkiddingToXY
);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _enumsJs = require("../enums.js");
function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = _getBasePlacementJsDefault.default(placement);
    var invertDistance = [_enumsJs.left, _enumsJs.top].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset === 'function' ? offset(Object.assign({
    }, rects, {
        placement: placement
    })) : offset, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [_enumsJs.left, _enumsJs.right].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
    } : {
        x: skidding,
        y: distance
    };
}
function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset1 = _options$offset === void 0 ? [
        0,
        0
    ] : _options$offset;
    var data = _enumsJs.placements.reduce(function(acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset1);
        return acc;
    }, {
    });
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: [
        'popperOffsets'
    ],
    fn: offset
};

},{"../utils/getBasePlacement.js":"uyzYw","../enums.js":"kBo2A","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"767Ci":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _computeOffsetsJs = require("../utils/computeOffsets.js");
var _computeOffsetsJsDefault = parcelHelpers.interopDefault(_computeOffsetsJs);
function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = _computeOffsetsJsDefault.default({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: 'absolute',
        placement: state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {
    }
};

},{"../utils/computeOffsets.js":"wx3b2","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2sJvj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getMainAxisFromPlacementJs = require("../utils/getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _getAltAxisJs = require("../utils/getAltAxis.js");
var _getAltAxisJsDefault = parcelHelpers.interopDefault(_getAltAxisJs);
var _withinJs = require("../utils/within.js");
var _withinJsDefault = parcelHelpers.interopDefault(_withinJs);
var _getLayoutRectJs = require("../dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _getVariationJs = require("../utils/getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _getFreshSideObjectJs = require("../utils/getFreshSideObject.js");
var _getFreshSideObjectJsDefault = parcelHelpers.interopDefault(_getFreshSideObjectJs);
var _mathJs = require("../utils/math.js");
function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = _detectOverflowJsDefault.default(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
    });
    var basePlacement = _getBasePlacementJsDefault.default(state.placement);
    var variation = _getVariationJsDefault.default(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = _getMainAxisFromPlacementJsDefault.default(basePlacement);
    var altAxis = _getAltAxisJsDefault.default(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({
    }, state.rects, {
        placement: state.placement
    })) : tetherOffset;
    var data = {
        x: 0,
        y: 0
    };
    if (!popperOffsets) return;
    if (checkMainAxis || checkAltAxis) {
        var mainSide = mainAxis === 'y' ? _enumsJs.top : _enumsJs.left;
        var altSide = mainAxis === 'y' ? _enumsJs.bottom : _enumsJs.right;
        var len = mainAxis === 'y' ? 'height' : 'width';
        var offset = popperOffsets[mainAxis];
        var min = popperOffsets[mainAxis] + overflow[mainSide];
        var max = popperOffsets[mainAxis] - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === _enumsJs.start ? referenceRect[len] : popperRect[len];
        var maxLen = variation === _enumsJs.start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds
        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? _getLayoutRectJsDefault.default(arrowElement) : {
            width: 0,
            height: 0
        };
        var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : _getFreshSideObjectJsDefault.default();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)
        var arrowLen = _withinJsDefault.default(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
        var arrowOffsetParent = state.elements.arrow && _getOffsetParentJsDefault.default(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
        var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;
        if (checkMainAxis) {
            var preventedOffset = _withinJsDefault.default(tether ? _mathJs.min(min, tetherMin) : min, offset, tether ? _mathJs.max(max, tetherMax) : max);
            popperOffsets[mainAxis] = preventedOffset;
            data[mainAxis] = preventedOffset - offset;
        }
        if (checkAltAxis) {
            var _mainSide = mainAxis === 'x' ? _enumsJs.top : _enumsJs.left;
            var _altSide = mainAxis === 'x' ? _enumsJs.bottom : _enumsJs.right;
            var _offset = popperOffsets[altAxis];
            var _min = _offset + overflow[_mainSide];
            var _max = _offset - overflow[_altSide];
            var _preventedOffset = _withinJsDefault.default(tether ? _mathJs.min(_min, tetherMin) : _min, _offset, tether ? _mathJs.max(_max, tetherMax) : _max);
            popperOffsets[altAxis] = _preventedOffset;
            data[altAxis] = _preventedOffset - _offset;
        }
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: [
        'offset'
    ]
};

},{"../enums.js":"kBo2A","../utils/getBasePlacement.js":"uyzYw","../utils/getMainAxisFromPlacement.js":"3RRs0","../utils/getAltAxis.js":"6I2bo","../utils/within.js":"baM3C","../dom-utils/getLayoutRect.js":"jbNRU","../dom-utils/getOffsetParent.js":"h282o","../utils/detectOverflow.js":"8uw8g","../utils/getVariation.js":"e7Opv","../utils/getFreshSideObject.js":"6Lmzs","../utils/math.js":"gyDDZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6I2bo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
}
exports.default = getAltAxis;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eWRl5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "popperGenerator", ()=>popperGenerator
);
parcelHelpers.export(exports, "createPopper", ()=>createPopper
);
parcelHelpers.export(exports, "detectOverflow", ()=>_detectOverflowJsDefault.default
);
var _getCompositeRectJs = require("./dom-utils/getCompositeRect.js");
var _getCompositeRectJsDefault = parcelHelpers.interopDefault(_getCompositeRectJs);
var _getLayoutRectJs = require("./dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _listScrollParentsJs = require("./dom-utils/listScrollParents.js");
var _listScrollParentsJsDefault = parcelHelpers.interopDefault(_listScrollParentsJs);
var _getOffsetParentJs = require("./dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getComputedStyleJs = require("./dom-utils/getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _orderModifiersJs = require("./utils/orderModifiers.js");
var _orderModifiersJsDefault = parcelHelpers.interopDefault(_orderModifiersJs);
var _debounceJs = require("./utils/debounce.js");
var _debounceJsDefault = parcelHelpers.interopDefault(_debounceJs);
var _validateModifiersJs = require("./utils/validateModifiers.js");
var _validateModifiersJsDefault = parcelHelpers.interopDefault(_validateModifiersJs);
var _uniqueByJs = require("./utils/uniqueBy.js");
var _uniqueByJsDefault = parcelHelpers.interopDefault(_uniqueByJs);
var _getBasePlacementJs = require("./utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _mergeByNameJs = require("./utils/mergeByName.js");
var _mergeByNameJsDefault = parcelHelpers.interopDefault(_mergeByNameJs);
var _detectOverflowJs = require("./utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _instanceOfJs = require("./dom-utils/instanceOf.js");
var _enumsJs = require("./enums.js");
var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
};
function areValidElements() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    return !args.some(function(element) {
        return !(element && typeof element.getBoundingClientRect === 'function');
    });
}
function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) generatorOptions = {
    };
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
        if (options === void 0) options = defaultOptions;
        var state = {
            placement: 'bottom',
            orderedModifiers: [],
            options: Object.assign({
            }, DEFAULT_OPTIONS, defaultOptions),
            modifiersData: {
            },
            elements: {
                reference: reference,
                popper: popper
            },
            attributes: {
            },
            styles: {
            }
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
            state: state,
            setOptions: function setOptions(setOptionsAction) {
                var options1 = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
                cleanupModifierEffects();
                state.options = Object.assign({
                }, defaultOptions, state.options, options1);
                state.scrollParents = {
                    reference: _instanceOfJs.isElement(reference) ? _listScrollParentsJsDefault.default(reference) : reference.contextElement ? _listScrollParentsJsDefault.default(reference.contextElement) : [],
                    popper: _listScrollParentsJsDefault.default(popper)
                }; // Orders the modifiers based on their dependencies and `phase`
                // properties
                var orderedModifiers = _orderModifiersJsDefault.default(_mergeByNameJsDefault.default([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers
                state.orderedModifiers = orderedModifiers.filter(function(m) {
                    return m.enabled;
                }); // Validate the provided modifiers so that the consumer will get warned
                var modifiers = _uniqueByJsDefault.default([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
                    var name = _ref.name;
                    return name;
                });
                _validateModifiersJsDefault.default(modifiers);
                if (_getBasePlacementJsDefault.default(state.options.placement) === _enumsJs.auto) {
                    var flipModifier = state.orderedModifiers.find(function(_ref2) {
                        var name = _ref2.name;
                        return name === 'flip';
                    });
                    if (!flipModifier) console.error([
                        'Popper: "auto" placements require the "flip" modifier be',
                        'present and enabled to work.'
                    ].join(' '));
                }
                var _getComputedStyle = _getComputedStyleJsDefault.default(popper), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
                // cause bugs with positioning, so we'll warn the consumer
                if ([
                    marginTop,
                    marginRight,
                    marginBottom,
                    marginLeft
                ].some(function(margin) {
                    return parseFloat(margin);
                })) console.warn([
                    'Popper: CSS "margin" styles cannot be used to apply padding',
                    'between the popper and its reference element or boundary.',
                    'To replicate margin, use the `offset` modifier, as well as',
                    'the `padding` option in the `preventOverflow` and `flip`',
                    'modifiers.'
                ].join(' '));
                runModifierEffects();
                return instance.update();
            },
            // Sync update – it will always be executed, even if not necessary. This
            // is useful for low frequency updates where sync behavior simplifies the
            // logic.
            // For high frequency updates (e.g. `resize` and `scroll` events), always
            // prefer the async Popper#update method
            forceUpdate: function forceUpdate() {
                if (isDestroyed) return;
                var _state$elements = state.elements, reference1 = _state$elements.reference, popper1 = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
                // anymore
                if (!areValidElements(reference1, popper1)) {
                    console.error(INVALID_ELEMENT_ERROR);
                    return;
                } // Store the reference and popper rects to be read by modifiers
                state.rects = {
                    reference: _getCompositeRectJsDefault.default(reference1, _getOffsetParentJsDefault.default(popper1), state.options.strategy === 'fixed'),
                    popper: _getLayoutRectJsDefault.default(popper1)
                }; // Modifiers have the ability to reset the current update cycle. The
                // most common use case for this is the `flip` modifier changing the
                // placement, which then needs to re-run all the modifiers, because the
                // logic was previously ran for the previous placement and is therefore
                // stale/incorrect
                state.reset = false;
                state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
                // is filled with the initial data specified by the modifier. This means
                // it doesn't persist and is fresh on each update.
                // To ensure persistent data, use `${name}#persistent`
                state.orderedModifiers.forEach(function(modifier) {
                    return state.modifiersData[modifier.name] = Object.assign({
                    }, modifier.data);
                });
                var __debug_loops__ = 0;
                for(var index = 0; index < state.orderedModifiers.length; index++){
                    __debug_loops__ += 1;
                    if (__debug_loops__ > 100) {
                        console.error(INFINITE_LOOP_ERROR);
                        break;
                    }
                    if (state.reset === true) {
                        state.reset = false;
                        index = -1;
                        continue;
                    }
                    var _state$orderedModifie = state.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {
                    } : _state$orderedModifie2, name = _state$orderedModifie.name;
                    if (typeof fn === 'function') state = fn({
                        state: state,
                        options: _options,
                        name: name,
                        instance: instance
                    }) || state;
                }
            },
            // Async and optimistically optimized update – it will not be executed if
            // not necessary (debounced to run at most once-per-tick)
            update: _debounceJsDefault.default(function() {
                return new Promise(function(resolve) {
                    instance.forceUpdate();
                    resolve(state);
                });
            }),
            destroy: function destroy() {
                cleanupModifierEffects();
                isDestroyed = true;
            }
        };
        if (!areValidElements(reference, popper)) {
            console.error(INVALID_ELEMENT_ERROR);
            return instance;
        }
        instance.setOptions(options).then(function(state1) {
            if (!isDestroyed && options.onFirstUpdate) options.onFirstUpdate(state1);
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.
        function runModifierEffects() {
            state.orderedModifiers.forEach(function(_ref3) {
                var name = _ref3.name, _ref3$options = _ref3.options, options1 = _ref3$options === void 0 ? {
                } : _ref3$options, effect = _ref3.effect;
                if (typeof effect === 'function') {
                    var cleanupFn = effect({
                        state: state,
                        name: name,
                        instance: instance,
                        options: options1
                    });
                    var noopFn = function noopFn1() {
                    };
                    effectCleanupFns.push(cleanupFn || noopFn);
                }
            });
        }
        function cleanupModifierEffects() {
            effectCleanupFns.forEach(function(fn) {
                return fn();
            });
            effectCleanupFns = [];
        }
        return instance;
    };
}
var createPopper = /*#__PURE__*/ popperGenerator(); // eslint-disable-next-line import/no-unused-modules

},{"./dom-utils/getCompositeRect.js":"5CDEN","./dom-utils/getLayoutRect.js":"jbNRU","./dom-utils/listScrollParents.js":"1NLKz","./dom-utils/getOffsetParent.js":"h282o","./dom-utils/getComputedStyle.js":"cn2q5","./utils/orderModifiers.js":"V76xq","./utils/debounce.js":"8uhlj","./utils/validateModifiers.js":"c5soS","./utils/uniqueBy.js":"dlAtE","./utils/getBasePlacement.js":"uyzYw","./utils/mergeByName.js":"jINbK","./utils/detectOverflow.js":"8uw8g","./dom-utils/instanceOf.js":"5XVaZ","./enums.js":"kBo2A","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5CDEN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getNodeScrollJs = require("./getNodeScroll.js");
var _getNodeScrollJsDefault = parcelHelpers.interopDefault(_getNodeScrollJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("./instanceOf.js");
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = rect.width / element.offsetWidth || 1;
    var scaleY = rect.height / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) isFixed = false;
    var isOffsetParentAnElement = _instanceOfJs.isHTMLElement(offsetParent);
    var offsetParentIsScaled = _instanceOfJs.isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = _getDocumentElementJsDefault.default(offsetParent);
    var rect = _getBoundingClientRectJsDefault.default(elementOrVirtualElement, offsetParentIsScaled);
    var scroll = {
        scrollLeft: 0,
        scrollTop: 0
    };
    var offsets = {
        x: 0,
        y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (_getNodeNameJsDefault.default(offsetParent) !== 'body' || _isScrollParentJsDefault.default(documentElement)) scroll = _getNodeScrollJsDefault.default(offsetParent);
        if (_instanceOfJs.isHTMLElement(offsetParent)) {
            offsets = _getBoundingClientRectJsDefault.default(offsetParent, true);
            offsets.x += offsetParent.clientLeft;
            offsets.y += offsetParent.clientTop;
        } else if (documentElement) offsets.x = _getWindowScrollBarXJsDefault.default(documentElement);
    }
    return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
    };
}
exports.default = getCompositeRect;

},{"./getBoundingClientRect.js":"a0UQf","./getNodeScroll.js":"5rSe9","./getNodeName.js":"EprJN","./instanceOf.js":"5XVaZ","./getWindowScrollBarX.js":"4PVKs","./getDocumentElement.js":"jaH6y","./isScrollParent.js":"kZX4x","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5rSe9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _instanceOfJs = require("./instanceOf.js");
var _getHTMLElementScrollJs = require("./getHTMLElementScroll.js");
var _getHTMLElementScrollJsDefault = parcelHelpers.interopDefault(_getHTMLElementScrollJs);
function getNodeScroll(node) {
    if (node === _getWindowJsDefault.default(node) || !_instanceOfJs.isHTMLElement(node)) return _getWindowScrollJsDefault.default(node);
    else return _getHTMLElementScrollJsDefault.default(node);
}
exports.default = getNodeScroll;

},{"./getWindowScroll.js":"3t560","./getWindow.js":"MkPcb","./instanceOf.js":"5XVaZ","./getHTMLElementScroll.js":"2nQJU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2nQJU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getHTMLElementScroll(element) {
    return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
    };
}
exports.default = getHTMLElementScroll;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"V76xq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js"); // source: https://stackoverflow.com/questions/49875255
function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
        map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively
    function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function(dep) {
            if (!visited.has(dep)) {
                var depModifier = map.get(dep);
                if (depModifier) sort(depModifier);
            }
        });
        result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
        if (!visited.has(modifier.name)) // check for visited object
        sort(modifier);
    });
    return result;
}
function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase
    return _enumsJs.modifierPhases.reduce(function(acc, phase) {
        return acc.concat(orderedModifiers.filter(function(modifier) {
            return modifier.phase === phase;
        }));
    }, []);
}
exports.default = orderModifiers;

},{"../enums.js":"kBo2A","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8uhlj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function debounce(fn) {
    var pending;
    return function() {
        if (!pending) pending = new Promise(function(resolve) {
            Promise.resolve().then(function() {
                pending = undefined;
                resolve(fn());
            });
        });
        return pending;
    };
}
exports.default = debounce;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"c5soS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _formatJs = require("./format.js");
var _formatJsDefault = parcelHelpers.interopDefault(_formatJs);
var _enumsJs = require("../enums.js");
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = [
    'name',
    'enabled',
    'phase',
    'fn',
    'effect',
    'requires',
    'options'
];
function validateModifiers(modifiers) {
    modifiers.forEach(function(modifier) {
        [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
        .filter(function(value, index, self) {
            return self.indexOf(value) === index;
        }).forEach(function(key) {
            switch(key){
                case 'name':
                    if (typeof modifier.name !== 'string') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
                    break;
                case 'enabled':
                    if (typeof modifier.enabled !== 'boolean') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
                    break;
                case 'phase':
                    if (_enumsJs.modifierPhases.indexOf(modifier.phase) < 0) console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + _enumsJs.modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
                    break;
                case 'fn':
                    if (typeof modifier.fn !== 'function') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
                    break;
                case 'effect':
                    if (modifier.effect != null && typeof modifier.effect !== 'function') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
                    break;
                case 'requires':
                    if (modifier.requires != null && !Array.isArray(modifier.requires)) console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
                    break;
                case 'requiresIfExists':
                    if (!Array.isArray(modifier.requiresIfExists)) console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
                    break;
                case 'options':
                case 'data':
                    break;
                default:
                    console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function(s) {
                        return "\"" + s + "\"";
                    }).join(', ') + "; but \"" + key + "\" was provided.");
            }
            modifier.requires && modifier.requires.forEach(function(requirement) {
                if (modifiers.find(function(mod) {
                    return mod.name === requirement;
                }) == null) console.error(_formatJsDefault.default(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
            });
        });
    });
}
exports.default = validateModifiers;

},{"./format.js":"ivHBY","../enums.js":"kBo2A","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ivHBY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function format(str) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
    return [].concat(args).reduce(function(p, c) {
        return p.replace(/%s/, c);
    }, str);
}
exports.default = format;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dlAtE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function uniqueBy(arr, fn) {
    var identifiers = new Set();
    return arr.filter(function(item) {
        var identifier = fn(item);
        if (!identifiers.has(identifier)) {
            identifiers.add(identifier);
            return true;
        }
    });
}
exports.default = uniqueBy;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jINbK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged1, current) {
        var existing = merged1[current.name];
        merged1[current.name] = existing ? Object.assign({
        }, existing, current, {
            options: Object.assign({
            }, existing.options, current.options),
            data: Object.assign({
            }, existing.data, current.data)
        }) : current;
        return merged1;
    }, {
    }); // IE11 does not support Object.values
    return Object.keys(merged).map(function(key) {
        return merged[key];
    });
}
exports.default = mergeByName;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eUg1f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createPopper", ()=>createPopper
) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "popperGenerator", ()=>_createPopperJs.popperGenerator
);
parcelHelpers.export(exports, "defaultModifiers", ()=>defaultModifiers
);
parcelHelpers.export(exports, "detectOverflow", ()=>_createPopperJs.detectOverflow
);
parcelHelpers.export(exports, "createPopperLite", ()=>_popperLiteJs.createPopper
) // eslint-disable-next-line import/no-unused-modules
;
var _createPopperJs = require("./createPopper.js");
var _eventListenersJs = require("./modifiers/eventListeners.js");
var _eventListenersJsDefault = parcelHelpers.interopDefault(_eventListenersJs);
var _popperOffsetsJs = require("./modifiers/popperOffsets.js");
var _popperOffsetsJsDefault = parcelHelpers.interopDefault(_popperOffsetsJs);
var _computeStylesJs = require("./modifiers/computeStyles.js");
var _computeStylesJsDefault = parcelHelpers.interopDefault(_computeStylesJs);
var _applyStylesJs = require("./modifiers/applyStyles.js");
var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
var _offsetJs = require("./modifiers/offset.js");
var _offsetJsDefault = parcelHelpers.interopDefault(_offsetJs);
var _flipJs = require("./modifiers/flip.js");
var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
var _preventOverflowJs = require("./modifiers/preventOverflow.js");
var _preventOverflowJsDefault = parcelHelpers.interopDefault(_preventOverflowJs);
var _arrowJs = require("./modifiers/arrow.js");
var _arrowJsDefault = parcelHelpers.interopDefault(_arrowJs);
var _hideJs = require("./modifiers/hide.js");
var _hideJsDefault = parcelHelpers.interopDefault(_hideJs);
var _popperLiteJs = require("./popper-lite.js");
var _indexJs = require("./modifiers/index.js");
parcelHelpers.exportAll(_indexJs, exports);
var defaultModifiers = [_eventListenersJsDefault.default, _popperOffsetsJsDefault.default, _computeStylesJsDefault.default, _applyStylesJsDefault.default, _offsetJsDefault.default, _flipJsDefault.default, _preventOverflowJsDefault.default, _arrowJsDefault.default, _hideJsDefault.default];
var createPopper = /*#__PURE__*/ _createPopperJs.popperGenerator({
    defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

},{"./createPopper.js":"eWRl5","./modifiers/eventListeners.js":"gK2qK","./modifiers/popperOffsets.js":"767Ci","./modifiers/computeStyles.js":"eNeWb","./modifiers/applyStyles.js":"iCp47","./modifiers/offset.js":"5eukw","./modifiers/flip.js":"c3Yfj","./modifiers/preventOverflow.js":"2sJvj","./modifiers/arrow.js":"3VSHy","./modifiers/hide.js":"i5BM6","./popper-lite.js":"jTF4s","./modifiers/index.js":"gybOm","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jTF4s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createPopper", ()=>createPopper
);
parcelHelpers.export(exports, "popperGenerator", ()=>_createPopperJs.popperGenerator
);
parcelHelpers.export(exports, "defaultModifiers", ()=>defaultModifiers
);
parcelHelpers.export(exports, "detectOverflow", ()=>_createPopperJs.detectOverflow
);
var _createPopperJs = require("./createPopper.js");
var _eventListenersJs = require("./modifiers/eventListeners.js");
var _eventListenersJsDefault = parcelHelpers.interopDefault(_eventListenersJs);
var _popperOffsetsJs = require("./modifiers/popperOffsets.js");
var _popperOffsetsJsDefault = parcelHelpers.interopDefault(_popperOffsetsJs);
var _computeStylesJs = require("./modifiers/computeStyles.js");
var _computeStylesJsDefault = parcelHelpers.interopDefault(_computeStylesJs);
var _applyStylesJs = require("./modifiers/applyStyles.js");
var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
var defaultModifiers = [_eventListenersJsDefault.default, _popperOffsetsJsDefault.default, _computeStylesJsDefault.default, _applyStylesJsDefault.default];
var createPopper = /*#__PURE__*/ _createPopperJs.popperGenerator({
    defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

},{"./createPopper.js":"eWRl5","./modifiers/eventListeners.js":"gK2qK","./modifiers/popperOffsets.js":"767Ci","./modifiers/computeStyles.js":"eNeWb","./modifiers/applyStyles.js":"iCp47","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bfWtF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_sliderUnstyledDefault.default
);
parcelHelpers.export(exports, "SliderValueLabelUnstyled", ()=>_sliderValueLabelUnstyledDefault.default
);
parcelHelpers.export(exports, "sliderUnstyledClasses", ()=>_sliderUnstyledClassesDefault.default
);
var _sliderUnstyled = require("./SliderUnstyled");
var _sliderUnstyledDefault = parcelHelpers.interopDefault(_sliderUnstyled);
var _sliderValueLabelUnstyled = require("./SliderValueLabelUnstyled");
var _sliderValueLabelUnstyledDefault = parcelHelpers.interopDefault(_sliderValueLabelUnstyled);
var _sliderUnstyledClasses = require("./sliderUnstyledClasses");
var _sliderUnstyledClassesDefault = parcelHelpers.interopDefault(_sliderUnstyledClasses);
parcelHelpers.exportAll(_sliderUnstyledClasses, exports);

},{"./SliderUnstyled":"6GeZW","./SliderValueLabelUnstyled":"e0Vxx","./sliderUnstyledClasses":"9YQFM","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6GeZW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _isHostComponent = require("../utils/isHostComponent");
var _isHostComponentDefault = parcelHelpers.interopDefault(_isHostComponent);
var _composeClasses = require("../composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _sliderUnstyledClasses = require("./sliderUnstyledClasses");
var _sliderValueLabelUnstyled = require("./SliderValueLabelUnstyled");
var _sliderValueLabelUnstyledDefault = parcelHelpers.interopDefault(_sliderValueLabelUnstyled);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "aria-label",
    "aria-labelledby",
    "aria-valuetext",
    "className",
    "component",
    "classes",
    "defaultValue",
    "disableSwap",
    "disabled",
    "getAriaLabel",
    "getAriaValueText",
    "marks",
    "max",
    "min",
    "name",
    "onChange",
    "onChangeCommitted",
    "onMouseDown",
    "orientation",
    "scale",
    "step",
    "tabIndex",
    "track",
    "value",
    "valueLabelDisplay",
    "valueLabelFormat",
    "isRtl",
    "components",
    "componentsProps"
];
const INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;
function asc(a, b) {
    return a - b;
}
function clamp(value, min, max) {
    if (value == null) return min;
    return Math.min(Math.max(min, value), max);
}
function findClosest(values, currentValue) {
    const { index: closestIndex  } = values.reduce((acc, value, index)=>{
        const distance = Math.abs(currentValue - value);
        if (acc === null || distance < acc.distance || distance === acc.distance) return {
            distance,
            index
        };
        return acc;
    }, null);
    return closestIndex;
}
function trackFinger(event, touchId) {
    if (touchId.current !== undefined && event.changedTouches) {
        for(let i = 0; i < event.changedTouches.length; i += 1){
            const touch = event.changedTouches[i];
            if (touch.identifier === touchId.current) return {
                x: touch.clientX,
                y: touch.clientY
            };
        }
        return false;
    }
    return {
        x: event.clientX,
        y: event.clientY
    };
}
function valueToPercent(value, min, max) {
    return (value - min) * 100 / (max - min);
}
function percentToValue(percent, min, max) {
    return (max - min) * percent + min;
}
function getDecimalPrecision(num) {
    // This handles the case when num is very small (0.00000001), js will turn this into 1e-8.
    // When num is bigger than 1 or less than -1 it won't get converted to this notation so it's fine.
    if (Math.abs(num) < 1) {
        const parts = num.toExponential().split('e-');
        const matissaDecimalPart = parts[0].split('.')[1];
        return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
    }
    const decimalPart = num.toString().split('.')[1];
    return decimalPart ? decimalPart.length : 0;
}
function roundValueToStep(value, step, min) {
    const nearest = Math.round((value - min) / step) * step + min;
    return Number(nearest.toFixed(getDecimalPrecision(step)));
}
function setValueIndex({ values , newValue , index  }) {
    const output = values.slice();
    output[index] = newValue;
    return output.sort(asc);
}
function focusThumb({ sliderRef , activeIndex , setActive  }) {
    const doc = _utils.unstable_ownerDocument(sliderRef.current);
    if (!sliderRef.current.contains(doc.activeElement) || Number(doc.activeElement.getAttribute('data-index')) !== activeIndex) sliderRef.current.querySelector(`[type="range"][data-index="${activeIndex}"]`).focus();
    if (setActive) setActive(activeIndex);
}
const axisProps = {
    horizontal: {
        offset: (percent)=>({
                left: `${percent}%`
            })
        ,
        leap: (percent)=>({
                width: `${percent}%`
            })
    },
    'horizontal-reverse': {
        offset: (percent)=>({
                right: `${percent}%`
            })
        ,
        leap: (percent)=>({
                width: `${percent}%`
            })
    },
    vertical: {
        offset: (percent)=>({
                bottom: `${percent}%`
            })
        ,
        leap: (percent)=>({
                height: `${percent}%`
            })
    }
};
const Identity = (x)=>x
; // TODO: remove support for Safari < 13.
// https://caniuse.com/#search=touch-action
//
// Safari, on iOS, supports touch action since v13.
// Over 80% of the iOS phones are compatible
// in August 2020.
// Utilizing the CSS.supports method to check if touch-action is supported.
// Since CSS.supports is supported on all but Edge@12 and IE and touch-action
// is supported on both Edge@12 and IE if CSS.supports is not available that means that
// touch-action will be supported
let cachedSupportsTouchActionNone;
function doesSupportTouchActionNone() {
    if (cachedSupportsTouchActionNone === undefined) {
        if (typeof CSS !== 'undefined' && typeof CSS.supports === 'function') cachedSupportsTouchActionNone = CSS.supports('touch-action', 'none');
        else cachedSupportsTouchActionNone = true;
    }
    return cachedSupportsTouchActionNone;
}
const useUtilityClasses = (ownerState)=>{
    const { disabled , dragging , marked , orientation , track , classes  } = ownerState;
    const slots = {
        root: [
            'root',
            disabled && 'disabled',
            dragging && 'dragging',
            marked && 'marked',
            orientation === 'vertical' && 'vertical',
            track === 'inverted' && 'trackInverted',
            track === false && 'trackFalse'
        ],
        rail: [
            'rail'
        ],
        track: [
            'track'
        ],
        mark: [
            'mark'
        ],
        markActive: [
            'markActive'
        ],
        markLabel: [
            'markLabel'
        ],
        markLabelActive: [
            'markLabelActive'
        ],
        valueLabel: [
            'valueLabel'
        ],
        thumb: [
            'thumb',
            disabled && 'disabled'
        ],
        active: [
            'active'
        ],
        disabled: [
            'disabled'
        ],
        focusVisible: [
            'focusVisible'
        ]
    };
    return _composeClassesDefault.default(slots, _sliderUnstyledClasses.getSliderUtilityClass, classes);
};
const Forward = ({ children  })=>children
;
const SliderUnstyled = /*#__PURE__*/ _react.forwardRef(function SliderUnstyled1(props, ref) {
    const { 'aria-label': ariaLabel , 'aria-labelledby': ariaLabelledby , 'aria-valuetext': ariaValuetext , className , component ='span' , classes: classesProp , defaultValue , disableSwap =false , disabled =false , getAriaLabel , getAriaValueText , marks: marksProp = false , max =100 , min =0 , name , onChange , onChangeCommitted , onMouseDown , orientation ='horizontal' , scale =Identity , step =1 , tabIndex , track ='normal' , value: valueProp , valueLabelDisplay ='off' , valueLabelFormat =Identity , isRtl =false , components ={
    } , componentsProps ={
    }  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const touchId = _react.useRef(); // We can't use the :active browser pseudo-classes.
    // - The active state isn't triggered when clicking on the rail.
    // - The active state isn't transferred when inversing a range slider.
    const [active, setActive] = _react.useState(-1);
    const [open, setOpen] = _react.useState(-1);
    const [dragging, setDragging] = _react.useState(false);
    const moveCount = _react.useRef(0);
    const [valueDerived, setValueState] = _utils.unstable_useControlled({
        controlled: valueProp,
        default: defaultValue != null ? defaultValue : min,
        name: 'Slider'
    });
    const handleChange = onChange && ((event, value, thumbIndex)=>{
        // Redefine target to allow name and value to be read.
        // This allows seamless integration with the most popular form libraries.
        // https://github.com/mui-org/material-ui/issues/13485#issuecomment-676048492
        // Clone the event to not override `target` of the original event.
        const nativeEvent = event.nativeEvent || event;
        const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
        Object.defineProperty(clonedEvent, 'target', {
            writable: true,
            value: {
                value,
                name
            }
        });
        onChange(clonedEvent, value, thumbIndex);
    });
    const range = Array.isArray(valueDerived);
    let values = range ? valueDerived.slice().sort(asc) : [
        valueDerived
    ];
    values = values.map((value)=>clamp(value, min, max)
    );
    const marks = marksProp === true && step !== null ? [
        ...Array(Math.floor((max - min) / step) + 1)
    ].map((_, index)=>({
            value: min + step * index
        })
    ) : marksProp || [];
    const { isFocusVisibleRef , onBlur: handleBlurVisible , onFocus: handleFocusVisible , ref: focusVisibleRef  } = _utils.unstable_useIsFocusVisible();
    const [focusVisible, setFocusVisible] = _react.useState(-1);
    const sliderRef = _react.useRef();
    const handleFocusRef = _utils.unstable_useForkRef(focusVisibleRef, sliderRef);
    const handleRef = _utils.unstable_useForkRef(ref, handleFocusRef);
    const handleFocus = (event)=>{
        const index = Number(event.currentTarget.getAttribute('data-index'));
        handleFocusVisible(event);
        if (isFocusVisibleRef.current === true) setFocusVisible(index);
        setOpen(index);
    };
    const handleBlur = (event)=>{
        handleBlurVisible(event);
        if (isFocusVisibleRef.current === false) setFocusVisible(-1);
        setOpen(-1);
    };
    const handleMouseOver = _utils.unstable_useEventCallback((event)=>{
        const index = Number(event.currentTarget.getAttribute('data-index'));
        setOpen(index);
    });
    const handleMouseLeave = _utils.unstable_useEventCallback(()=>{
        setOpen(-1);
    });
    _utils.unstable_useEnhancedEffect(()=>{
        if (disabled && sliderRef.current.contains(document.activeElement)) // This is necessary because Firefox and Safari will keep focus
        // on a disabled element:
        // https://codesandbox.io/s/mui-pr-22247-forked-h151h?file=/src/App.js
        document.activeElement.blur();
    }, [
        disabled
    ]);
    if (disabled && active !== -1) setActive(-1);
    if (disabled && focusVisible !== -1) setFocusVisible(-1);
    const handleHiddenInputChange = (event)=>{
        const index = Number(event.currentTarget.getAttribute('data-index'));
        const value = values[index];
        const marksValues = marks.map((mark)=>mark.value
        );
        const marksIndex = marksValues.indexOf(value);
        let newValue = event.target.valueAsNumber;
        if (marks && step == null) newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];
        newValue = clamp(newValue, min, max);
        if (marks && step == null) {
            const markValues = marks.map((mark)=>mark.value
            );
            const currentMarkIndex = markValues.indexOf(values[index]);
            newValue = newValue < values[index] ? markValues[currentMarkIndex - 1] : markValues[currentMarkIndex + 1];
        }
        if (range) {
            // Bound the new value to the thumb's neighbours.
            if (disableSwap) newValue = clamp(newValue, values[index - 1] || -Infinity, values[index + 1] || Infinity);
            const previousValue = newValue;
            newValue = setValueIndex({
                values,
                newValue,
                index
            });
            let activeIndex = index; // Potentially swap the index if needed.
            if (!disableSwap) activeIndex = newValue.indexOf(previousValue);
            focusThumb({
                sliderRef,
                activeIndex
            });
        }
        setValueState(newValue);
        setFocusVisible(index);
        if (handleChange) handleChange(event, newValue, index);
        if (onChangeCommitted) onChangeCommitted(event, newValue);
    };
    const previousIndex = _react.useRef();
    let axis = orientation;
    if (isRtl && orientation !== "vertical") axis += '-reverse';
    const getFingerNewValue = ({ finger , move =false , values: values2  })=>{
        const { current: slider  } = sliderRef;
        const { width , height , bottom , left  } = slider.getBoundingClientRect();
        let percent;
        if (axis.indexOf('vertical') === 0) percent = (bottom - finger.y) / height;
        else percent = (finger.x - left) / width;
        if (axis.indexOf('-reverse') !== -1) percent = 1 - percent;
        let newValue;
        newValue = percentToValue(percent, min, max);
        if (step) newValue = roundValueToStep(newValue, step, min);
        else {
            const marksValues = marks.map((mark)=>mark.value
            );
            const closestIndex = findClosest(marksValues, newValue);
            newValue = marksValues[closestIndex];
        }
        newValue = clamp(newValue, min, max);
        let activeIndex = 0;
        if (range) {
            if (!move) activeIndex = findClosest(values2, newValue);
            else activeIndex = previousIndex.current;
             // Bound the new value to the thumb's neighbours.
            if (disableSwap) newValue = clamp(newValue, values2[activeIndex - 1] || -Infinity, values2[activeIndex + 1] || Infinity);
            const previousValue = newValue;
            newValue = setValueIndex({
                values: values2,
                newValue,
                index: activeIndex
            }); // Potentially swap the index if needed.
            if (!(disableSwap && move)) {
                activeIndex = newValue.indexOf(previousValue);
                previousIndex.current = activeIndex;
            }
        }
        return {
            newValue,
            activeIndex
        };
    };
    const handleTouchMove = _utils.unstable_useEventCallback((nativeEvent)=>{
        const finger = trackFinger(nativeEvent, touchId);
        if (!finger) return;
        moveCount.current += 1; // Cancel move in case some other element consumed a mouseup event and it was not fired.
        if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            handleTouchEnd(nativeEvent);
            return;
        }
        const { newValue , activeIndex  } = getFingerNewValue({
            finger,
            move: true,
            values
        });
        focusThumb({
            sliderRef,
            activeIndex,
            setActive
        });
        setValueState(newValue);
        if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) setDragging(true);
        if (handleChange) handleChange(nativeEvent, newValue, activeIndex);
    });
    const handleTouchEnd = _utils.unstable_useEventCallback((nativeEvent)=>{
        const finger = trackFinger(nativeEvent, touchId);
        setDragging(false);
        if (!finger) return;
        const { newValue  } = getFingerNewValue({
            finger,
            values
        });
        setActive(-1);
        if (nativeEvent.type === 'touchend') setOpen(-1);
        if (onChangeCommitted) onChangeCommitted(nativeEvent, newValue);
        touchId.current = undefined; // eslint-disable-next-line @typescript-eslint/no-use-before-define
        stopListening();
    });
    const handleTouchStart = _utils.unstable_useEventCallback((nativeEvent)=>{
        // If touch-action: none; is not supported we need to prevent the scroll manually.
        if (!doesSupportTouchActionNone()) nativeEvent.preventDefault();
        const touch = nativeEvent.changedTouches[0];
        if (touch != null) // A number that uniquely identifies the current finger in the touch session.
        touchId.current = touch.identifier;
        const finger = trackFinger(nativeEvent, touchId);
        const { newValue , activeIndex  } = getFingerNewValue({
            finger,
            values
        });
        focusThumb({
            sliderRef,
            activeIndex,
            setActive
        });
        setValueState(newValue);
        if (handleChange) handleChange(nativeEvent, newValue, activeIndex);
        moveCount.current = 0;
        const doc = _utils.unstable_ownerDocument(sliderRef.current);
        doc.addEventListener('touchmove', handleTouchMove);
        doc.addEventListener('touchend', handleTouchEnd);
    });
    const stopListening = _react.useCallback(()=>{
        const doc = _utils.unstable_ownerDocument(sliderRef.current);
        doc.removeEventListener('mousemove', handleTouchMove);
        doc.removeEventListener('mouseup', handleTouchEnd);
        doc.removeEventListener('touchmove', handleTouchMove);
        doc.removeEventListener('touchend', handleTouchEnd);
    }, [
        handleTouchEnd,
        handleTouchMove
    ]);
    _react.useEffect(()=>{
        const { current: slider  } = sliderRef;
        slider.addEventListener('touchstart', handleTouchStart, {
            passive: doesSupportTouchActionNone()
        });
        return ()=>{
            slider.removeEventListener('touchstart', handleTouchStart, {
                passive: doesSupportTouchActionNone()
            });
            stopListening();
        };
    }, [
        stopListening,
        handleTouchStart
    ]);
    _react.useEffect(()=>{
        if (disabled) stopListening();
    }, [
        disabled,
        stopListening
    ]);
    const handleMouseDown = _utils.unstable_useEventCallback((event)=>{
        if (onMouseDown) onMouseDown(event);
         // Only handle left clicks
        if (event.button !== 0) return;
         // Avoid text selection
        event.preventDefault();
        const finger = trackFinger(event, touchId);
        const { newValue , activeIndex  } = getFingerNewValue({
            finger,
            values
        });
        focusThumb({
            sliderRef,
            activeIndex,
            setActive
        });
        setValueState(newValue);
        if (handleChange) handleChange(event, newValue, activeIndex);
        moveCount.current = 0;
        const doc = _utils.unstable_ownerDocument(sliderRef.current);
        doc.addEventListener('mousemove', handleTouchMove);
        doc.addEventListener('mouseup', handleTouchEnd);
    });
    const trackOffset = valueToPercent(range ? values[0] : min, min, max);
    const trackLeap = valueToPercent(values[values.length - 1], min, max) - trackOffset;
    const trackStyle = _extendsDefault.default({
    }, axisProps[axis].offset(trackOffset), axisProps[axis].leap(trackLeap));
    const Root = components.Root || component;
    const rootProps = componentsProps.root || {
    };
    const Rail = components.Rail || 'span';
    const railProps = componentsProps.rail || {
    };
    const Track = components.Track || 'span';
    const trackProps = componentsProps.track || {
    };
    const Thumb = components.Thumb || 'span';
    const thumbProps = componentsProps.thumb || {
    };
    const ValueLabel = components.ValueLabel || _sliderValueLabelUnstyledDefault.default;
    const valueLabelProps = componentsProps.valueLabel || {
    };
    const Mark = components.Mark || 'span';
    const markProps = componentsProps.mark || {
    };
    const MarkLabel = components.MarkLabel || 'span';
    const markLabelProps = componentsProps.markLabel || {
    }; // all props with defaults
    // consider extracting to hook an reusing the lint rule for the varints
    const ownerState = _extendsDefault.default({
    }, props, {
        classes: classesProp,
        disabled,
        dragging,
        isRtl,
        marked: marks.length > 0 && marks.some((mark)=>mark.label
        ),
        max,
        min,
        orientation,
        scale,
        step,
        track,
        valueLabelDisplay,
        valueLabelFormat
    });
    const classes = useUtilityClasses(ownerState);
    return(/*#__PURE__*/ _jsxRuntime.jsxs(Root, _extendsDefault.default({
        ref: handleRef,
        onMouseDown: handleMouseDown
    }, rootProps, !_isHostComponentDefault.default(Root) && {
        as: component,
        ownerState: _extendsDefault.default({
        }, ownerState, rootProps.ownerState)
    }, other, {
        className: _clsxDefault.default(classes.root, rootProps.className, className),
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(Rail, _extendsDefault.default({
            }, railProps, !_isHostComponentDefault.default(Rail) && {
                ownerState: _extendsDefault.default({
                }, ownerState, railProps.ownerState)
            }, {
                className: _clsxDefault.default(classes.rail, railProps.className)
            })),
            /*#__PURE__*/ _jsxRuntime.jsx(Track, _extendsDefault.default({
            }, trackProps, !_isHostComponentDefault.default(Track) && {
                ownerState: _extendsDefault.default({
                }, ownerState, trackProps.ownerState)
            }, {
                className: _clsxDefault.default(classes.track, trackProps.className),
                style: _extendsDefault.default({
                }, trackStyle, trackProps.style)
            })),
            marks.map((mark, index)=>{
                const percent = valueToPercent(mark.value, min, max);
                const style = axisProps[axis].offset(percent);
                let markActive;
                if (track === false) markActive = values.indexOf(mark.value) !== -1;
                else markActive = track === 'normal' && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === 'inverted' && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);
                return(/*#__PURE__*/ _jsxRuntime.jsxs(_react.Fragment, {
                    children: [
                        /*#__PURE__*/ _jsxRuntime.jsx(Mark, _extendsDefault.default({
                            "data-index": index
                        }, markProps, !_isHostComponentDefault.default(Mark) && {
                            ownerState: _extendsDefault.default({
                            }, ownerState, markProps.ownerState),
                            markActive
                        }, {
                            style: _extendsDefault.default({
                            }, style, markProps.style),
                            className: _clsxDefault.default(classes.mark, markProps.className, markActive && classes.markActive)
                        })),
                        mark.label != null ? /*#__PURE__*/ _jsxRuntime.jsx(MarkLabel, _extendsDefault.default({
                            "aria-hidden": true,
                            "data-index": index
                        }, markLabelProps, !_isHostComponentDefault.default(MarkLabel) && {
                            ownerState: _extendsDefault.default({
                            }, ownerState, markLabelProps.ownerState)
                        }, {
                            markLabelActive: markActive,
                            style: _extendsDefault.default({
                            }, style, markLabelProps.style),
                            className: _clsxDefault.default(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
                            children: mark.label
                        })) : null
                    ]
                }, mark.value));
            }),
            values.map((value, index)=>{
                const percent = valueToPercent(value, min, max);
                const style = axisProps[axis].offset(percent);
                const ValueLabelComponent = valueLabelDisplay === 'off' ? Forward : ValueLabel;
                return(/*#__PURE__*/ _jsxRuntime.jsx(_react.Fragment, {
                    children: /*#__PURE__*/ _jsxRuntime.jsx(ValueLabelComponent, _extendsDefault.default({
                        valueLabelFormat: valueLabelFormat,
                        valueLabelDisplay: valueLabelDisplay,
                        value: typeof valueLabelFormat === 'function' ? valueLabelFormat(scale(value), index) : valueLabelFormat,
                        index: index,
                        open: open === index || active === index || valueLabelDisplay === 'on',
                        disabled: disabled
                    }, valueLabelProps, {
                        className: _clsxDefault.default(classes.valueLabel, valueLabelProps.className)
                    }, !_isHostComponentDefault.default(ValueLabel) && {
                        ownerState: _extendsDefault.default({
                        }, ownerState, valueLabelProps.ownerState)
                    }, {
                        children: /*#__PURE__*/ _jsxRuntime.jsx(Thumb, _extendsDefault.default({
                            "data-index": index,
                            onMouseOver: handleMouseOver,
                            onMouseLeave: handleMouseLeave
                        }, thumbProps, {
                            className: _clsxDefault.default(classes.thumb, thumbProps.className, active === index && classes.active, focusVisible === index && classes.focusVisible)
                        }, !_isHostComponentDefault.default(Thumb) && {
                            ownerState: _extendsDefault.default({
                            }, ownerState, thumbProps.ownerState)
                        }, {
                            style: _extendsDefault.default({
                            }, style, {
                                pointerEvents: disableSwap && active !== index ? 'none' : undefined
                            }, thumbProps.style),
                            children: /*#__PURE__*/ _jsxRuntime.jsx("input", {
                                tabIndex: tabIndex,
                                "data-index": index,
                                "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
                                "aria-labelledby": ariaLabelledby,
                                "aria-orientation": orientation,
                                "aria-valuemax": scale(max),
                                "aria-valuemin": scale(min),
                                "aria-valuenow": scale(value),
                                "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,
                                onFocus: handleFocus,
                                onBlur: handleBlur,
                                name: name,
                                type: "range",
                                min: props.min,
                                max: props.max,
                                step: props.step,
                                disabled: disabled,
                                value: values[index],
                                onChange: handleHiddenInputChange,
                                style: _extendsDefault.default({
                                }, _utils.visuallyHidden, {
                                    direction: isRtl ? 'rtl' : 'ltr',
                                    // So that VoiceOver's focus indicator matches the thumb's dimensions
                                    width: '100%',
                                    height: '100%'
                                })
                            })
                        }))
                    }))
                }, index));
            })
        ]
    })));
});
SliderUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The label of the slider.
   */ 'aria-label': _utils.chainPropTypes(_propTypesDefault.default.string, (props)=>{
        const range = Array.isArray(props.value || props.defaultValue);
        if (range && props['aria-label'] != null) return new Error('MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.');
        return null;
    }),
    /**
   * The id of the element containing a label for the slider.
   */ 'aria-labelledby': _propTypesDefault.default.string,
    /**
   * A string value that provides a user-friendly name for the current value of the slider.
   */ 'aria-valuetext': _utils.chainPropTypes(_propTypesDefault.default.string, (props)=>{
        const range = Array.isArray(props.value || props.defaultValue);
        if (range && props['aria-valuetext'] != null) return new Error('MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.');
        return null;
    }),
    /**
   * @ignore
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the Slider.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default.shape({
        Mark: _propTypesDefault.default.elementType,
        MarkLabel: _propTypesDefault.default.elementType,
        Rail: _propTypesDefault.default.elementType,
        Root: _propTypesDefault.default.elementType,
        Thumb: _propTypesDefault.default.elementType,
        Track: _propTypesDefault.default.elementType,
        ValueLabel: _propTypesDefault.default.elementType
    }),
    /**
   * The props used for each slot inside the Slider.
   * @default {}
   */ componentsProps: _propTypesDefault.default.object,
    /**
   * The default value. Use when the component is not controlled.
   */ defaultValue: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.number),
        _propTypesDefault.default.number
    ]),
    /**
   * If `true`, the component is disabled.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
   * @default false
   */ disableSwap: _propTypesDefault.default.bool,
    /**
   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
   * This is important for screen reader users.
   * @param {number} index The thumb label's index to format.
   * @returns {string}
   */ getAriaLabel: _propTypesDefault.default.func,
    /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
   * This is important for screen reader users.
   * @param {number} value The thumb label's value to format.
   * @param {number} index The thumb label's index to format.
   * @returns {string}
   */ getAriaValueText: _propTypesDefault.default.func,
    /**
   * Indicates whether the theme context has rtl direction. It is set automatically.
   * @default false
   */ isRtl: _propTypesDefault.default.bool,
    /**
   * Marks indicate predetermined values to which the user can move the slider.
   * If `true` the marks are spaced according the value of the `step` prop.
   * If an array, it should contain objects with `value` and an optional `label` keys.
   * @default false
   */ marks: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.shape({
            label: _propTypesDefault.default.node,
            value: _propTypesDefault.default.number.isRequired
        })),
        _propTypesDefault.default.bool
    ]),
    /**
   * The maximum allowed value of the slider.
   * Should not be equal to min.
   * @default 100
   */ max: _propTypesDefault.default.number,
    /**
   * The minimum allowed value of the slider.
   * Should not be equal to max.
   * @default 0
   */ min: _propTypesDefault.default.number,
    /**
   * Name attribute of the hidden `input` element.
   */ name: _propTypesDefault.default.string,
    /**
   * Callback function that is fired when the slider's value changed.
   *
   * @param {Event} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (any).
   * **Warning**: This is a generic event not a change event.
   * @param {number | number[]} value The new value.
   * @param {number} activeThumb Index of the currently moved thumb.
   */ onChange: _propTypesDefault.default.func,
    /**
   * Callback function that is fired when the `mouseup` is triggered.
   *
   * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
   * @param {number | number[]} value The new value.
   */ onChangeCommitted: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onMouseDown: _propTypesDefault.default.func,
    /**
   * The component orientation.
   * @default 'horizontal'
   */ orientation: _propTypesDefault.default.oneOf([
        'horizontal',
        'vertical'
    ]),
    /**
   * A transformation function, to change the scale of the slider.
   * @default (x) => x
   */ scale: _propTypesDefault.default.func,
    /**
   * The granularity with which the slider can step through values. (A "discrete" slider.)
   * The `min` prop serves as the origin for the valid values.
   * We recommend (max - min) to be evenly divisible by the step.
   *
   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
   * @default 1
   */ step: _propTypesDefault.default.number,
    /**
   * Tab index attribute of the hidden `input` element.
   */ tabIndex: _propTypesDefault.default.number,
    /**
   * The track presentation:
   *
   * - `normal` the track will render a bar representing the slider value.
   * - `inverted` the track will render a bar representing the remaining slider value.
   * - `false` the track will render without a bar.
   * @default 'normal'
   */ track: _propTypesDefault.default.oneOf([
        'inverted',
        'normal',
        false
    ]),
    /**
   * The value of the slider.
   * For ranged sliders, provide an array with two values.
   */ value: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.number),
        _propTypesDefault.default.number
    ]),
    /**
   * Controls when the value label is displayed:
   *
   * - `auto` the value label will display when the thumb is hovered or focused.
   * - `on` will display persistently.
   * - `off` will never display.
   * @default 'off'
   */ valueLabelDisplay: _propTypesDefault.default.oneOf([
        'auto',
        'off',
        'on'
    ]),
    /**
   * The format function the value label's value.
   *
   * When a function is provided, it should have the following signature:
   *
   * - {number} value The value label's value to format
   * - {number} index The value label's index to format
   * @default (x) => x
   */ valueLabelFormat: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func,
        _propTypesDefault.default.string
    ])
};
exports.default = SliderUnstyled;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","react":"6TuXu","prop-types":"1tgq3","clsx":"eg1He","@mui/utils":"9YmNw","../utils/isHostComponent":"dEz9n","../composeClasses":"e4OCP","./sliderUnstyledClasses":"9YQFM","./SliderValueLabelUnstyled":"e0Vxx","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9YQFM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSliderUtilityClass", ()=>getSliderUtilityClass
);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
function getSliderUtilityClass(slot) {
    return _generateUtilityClassDefault.default('MuiSlider', slot);
}
const sliderUnstyledClasses = _generateUtilityClassesDefault.default('MuiSlider', [
    'root',
    'active',
    'focusVisible',
    'disabled',
    'dragging',
    'marked',
    'vertical',
    'trackInverted',
    'trackFalse',
    'rail',
    'track',
    'mark',
    'markActive',
    'markLabel',
    'markLabelActive',
    'thumb',
    'valueLabel',
    'valueLabelOpen',
    'valueLabelCircle',
    'valueLabelLabel'
]);
exports.default = sliderUnstyledClasses;

},{"../generateUtilityClasses":"gmgZV","../generateUtilityClass":"ruAWr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"e0Vxx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _sliderUnstyledClasses = require("./sliderUnstyledClasses");
var _sliderUnstyledClassesDefault = parcelHelpers.interopDefault(_sliderUnstyledClasses);
var _jsxRuntime = require("react/jsx-runtime");
const useValueLabelClasses = (props)=>{
    const { open  } = props;
    const utilityClasses = {
        offset: _clsxDefault.default(open && _sliderUnstyledClassesDefault.default.valueLabelOpen),
        circle: _sliderUnstyledClassesDefault.default.valueLabelCircle,
        label: _sliderUnstyledClassesDefault.default.valueLabelLabel
    };
    return utilityClasses;
};
/**
 * @ignore - internal component.
 */ function SliderValueLabelUnstyled(props) {
    const { children , className , value , theme  } = props;
    const classes = useValueLabelClasses(props);
    return(/*#__PURE__*/ _react.cloneElement(children, {
        className: _clsxDefault.default(children.props.className)
    }, /*#__PURE__*/ _jsxRuntime.jsxs(_react.Fragment, {
        children: [
            children.props.children,
            /*#__PURE__*/ _jsxRuntime.jsx("span", {
                className: _clsxDefault.default(classes.offset, className),
                theme: theme,
                "aria-hidden": true,
                children: /*#__PURE__*/ _jsxRuntime.jsx("span", {
                    className: classes.circle,
                    children: /*#__PURE__*/ _jsxRuntime.jsx("span", {
                        className: classes.label,
                        children: value
                    })
                })
            })
        ]
    })));
}
SliderValueLabelUnstyled.propTypes = {
    children: _propTypesDefault.default.element.isRequired,
    className: _propTypesDefault.default.string,
    theme: _propTypesDefault.default.any,
    value: _propTypesDefault.default.node
};
exports.default = SliderValueLabelUnstyled;

},{"react":"6TuXu","prop-types":"1tgq3","clsx":"eg1He","./sliderUnstyledClasses":"9YQFM","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2pWBb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_switchUnstyledDefault.default
);
parcelHelpers.export(exports, "useSwitch", ()=>_useSwitchDefault.default
);
parcelHelpers.export(exports, "switchUnstyledClasses", ()=>_switchUnstyledClassesDefault.default
);
var _switchUnstyled = require("./SwitchUnstyled");
var _switchUnstyledDefault = parcelHelpers.interopDefault(_switchUnstyled);
parcelHelpers.exportAll(_switchUnstyled, exports);
var _useSwitch = require("./useSwitch");
var _useSwitchDefault = parcelHelpers.interopDefault(_useSwitch);
parcelHelpers.exportAll(_useSwitch, exports);
var _switchUnstyledClasses = require("./switchUnstyledClasses");
var _switchUnstyledClassesDefault = parcelHelpers.interopDefault(_switchUnstyledClasses);
parcelHelpers.exportAll(_switchUnstyledClasses, exports);

},{"./SwitchUnstyled":"evbTz","./useSwitch":"9rmHi","./switchUnstyledClasses":"4LK1q","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"evbTz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _useSwitch = require("./useSwitch");
var _useSwitchDefault = parcelHelpers.interopDefault(_useSwitch);
var _switchUnstyledClasses = require("./switchUnstyledClasses");
var _switchUnstyledClassesDefault = parcelHelpers.interopDefault(_switchUnstyledClasses);
var _appendOwnerState = require("../utils/appendOwnerState");
var _appendOwnerStateDefault = parcelHelpers.interopDefault(_appendOwnerState);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "checked",
    "className",
    "component",
    "components",
    "componentsProps",
    "defaultChecked",
    "disabled",
    "onBlur",
    "onChange",
    "onFocus",
    "onFocusVisible",
    "readOnly",
    "required"
];
/**
 * The foundation for building custom-styled switches.
 *
 * Demos:
 *
 * - [Switches](https://mui.com/components/switches/)
 *
 * API:
 *
 * - [SwitchUnstyled API](https://mui.com/api/switch-unstyled/)
 */ const SwitchUnstyled = /*#__PURE__*/ _react.forwardRef(function SwitchUnstyled1(props, ref) {
    var _ref, _components$Thumb, _componentsProps$thum, _components$Input, _componentsProps$inpu, _components$Track, _componentsProps$trac;
    const { checked: checkedProp , className , component , components ={
    } , componentsProps ={
    } , defaultChecked , disabled: disabledProp , onBlur , onChange , onFocus , onFocusVisible , readOnly: readOnlyProp  } = props, otherProps = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const useSwitchProps = {
        checked: checkedProp,
        defaultChecked,
        disabled: disabledProp,
        onBlur,
        onChange,
        onFocus,
        onFocusVisible,
        readOnly: readOnlyProp
    };
    const { getInputProps , checked , disabled , focusVisible , readOnly  } = _useSwitchDefault.default(useSwitchProps);
    const ownerState = _extendsDefault.default({
    }, props, {
        checked,
        disabled,
        focusVisible,
        readOnly
    });
    const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'span';
    const rootProps = _appendOwnerStateDefault.default(Root, _extendsDefault.default({
    }, otherProps, componentsProps.root), ownerState);
    const Thumb = (_components$Thumb = components.Thumb) != null ? _components$Thumb : 'span';
    const thumbProps = _appendOwnerStateDefault.default(Thumb, (_componentsProps$thum = componentsProps.thumb) != null ? _componentsProps$thum : {
    }, ownerState);
    const Input = (_components$Input = components.Input) != null ? _components$Input : 'input';
    const inputProps = _appendOwnerStateDefault.default(Input, (_componentsProps$inpu = componentsProps.input) != null ? _componentsProps$inpu : {
    }, ownerState);
    const Track = components.Track === null ? ()=>null
     : (_components$Track = components.Track) != null ? _components$Track : 'span';
    const trackProps = _appendOwnerStateDefault.default(Track, (_componentsProps$trac = componentsProps.track) != null ? _componentsProps$trac : {
    }, ownerState);
    const stateClasses = _clsxDefault.default(checked && _switchUnstyledClassesDefault.default.checked, disabled && _switchUnstyledClassesDefault.default.disabled, focusVisible && _switchUnstyledClassesDefault.default.focusVisible, readOnly && _switchUnstyledClassesDefault.default.readOnly);
    return(/*#__PURE__*/ _jsxRuntime.jsxs(Root, _extendsDefault.default({
        ref: ref
    }, rootProps, {
        className: _clsxDefault.default(_switchUnstyledClassesDefault.default.root, stateClasses, className, rootProps == null ? void 0 : rootProps.className),
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(Track, _extendsDefault.default({
            }, trackProps, {
                className: _clsxDefault.default(_switchUnstyledClassesDefault.default.track, trackProps == null ? void 0 : trackProps.className)
            })),
            /*#__PURE__*/ _jsxRuntime.jsx(Thumb, _extendsDefault.default({
            }, thumbProps, {
                className: _clsxDefault.default(_switchUnstyledClassesDefault.default.thumb, thumbProps == null ? void 0 : thumbProps.className)
            })),
            /*#__PURE__*/ _jsxRuntime.jsx(Input, _extendsDefault.default({
            }, getInputProps(inputProps), {
                className: _clsxDefault.default(_switchUnstyledClassesDefault.default.input, inputProps == null ? void 0 : inputProps.className)
            }))
        ]
    })));
});
SwitchUnstyled.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
   * If `true`, the component is checked.
   */ checked: _propTypesDefault.default.bool,
    /**
   * Class name applied to the root element.
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the Root slot.
   * Either a string to use a HTML element or a component.
   * This is equivalent to `components.Root`. If both are provided, the `component` is used.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The components used for each slot inside the Switch.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ components: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .shape({
        Input: _propTypesDefault.default.elementType,
        Root: _propTypesDefault.default.elementType,
        Thumb: _propTypesDefault.default.elementType,
        Track: _propTypesDefault.default.oneOfType([
            _propTypesDefault.default.elementType,
            _propTypesDefault.default.oneOf([
                null
            ])
        ])
    }),
    /**
   * The props used for each slot inside the Switch.
   * @default {}
   */ componentsProps: _propTypesDefault.default.object,
    /**
   * The default checked state. Use when the component is not controlled.
   */ defaultChecked: _propTypesDefault.default.bool,
    /**
   * If `true`, the component is disabled.
   */ disabled: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ onBlur: _propTypesDefault.default.func,
    /**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */ onChange: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onFocus: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onFocusVisible: _propTypesDefault.default.func,
    /**
   * If `true`, the component is read only.
   */ readOnly: _propTypesDefault.default.bool,
    /**
   * If `true`, the `input` element is required.
   */ required: _propTypesDefault.default.bool
};
exports.default = SwitchUnstyled;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","react":"6TuXu","prop-types":"1tgq3","clsx":"eg1He","./useSwitch":"9rmHi","./switchUnstyledClasses":"4LK1q","../utils/appendOwnerState":"cXRHn","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9rmHi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _utils = require("@mui/utils");
function useSwitch(props) {
    const { checked: checkedProp , defaultChecked , disabled , onBlur , onChange , onFocus , onFocusVisible , readOnly , required  } = props;
    const [checked, setCheckedState] = _utils.unstable_useControlled({
        controlled: checkedProp,
        default: Boolean(defaultChecked),
        name: 'Switch',
        state: 'checked'
    });
    const handleInputChange = (event, otherHandler)=>{
        // Workaround for https://github.com/facebook/react/issues/9023
        if (event.nativeEvent.defaultPrevented) return;
        setCheckedState(event.target.checked);
        onChange == null || onChange(event);
        otherHandler == null || otherHandler(event);
    };
    const { isFocusVisibleRef , onBlur: handleBlurVisible , onFocus: handleFocusVisible , ref: focusVisibleRef  } = _utils.unstable_useIsFocusVisible();
    const [focusVisible, setFocusVisible] = _react.useState(false);
    if (disabled && focusVisible) setFocusVisible(false);
    _react.useEffect(()=>{
        isFocusVisibleRef.current = focusVisible;
    }, [
        focusVisible,
        isFocusVisibleRef
    ]);
    const inputRef = _react.useRef(null);
    const handleFocus = (event, otherHandler)=>{
        // Fix for https://github.com/facebook/react/issues/7769
        if (!inputRef.current) inputRef.current = event.currentTarget;
        handleFocusVisible(event);
        if (isFocusVisibleRef.current === true) {
            setFocusVisible(true);
            onFocusVisible == null || onFocusVisible(event);
        }
        onFocus == null || onFocus(event);
        otherHandler == null || otherHandler(event);
    };
    const handleBlur = (event, otherHandler)=>{
        handleBlurVisible(event);
        if (isFocusVisibleRef.current === false) setFocusVisible(false);
        onBlur == null || onBlur(event);
        otherHandler == null || otherHandler(event);
    };
    const handleRefChange = _utils.unstable_useForkRef(focusVisibleRef, inputRef);
    const getInputProps = (otherProps = {
    })=>_extendsDefault.default({
            checked: checkedProp,
            defaultChecked,
            disabled,
            readOnly,
            required,
            type: 'checkbox'
        }, otherProps, {
            onChange: (event)=>handleInputChange(event, otherProps.onChange)
            ,
            onFocus: (event)=>handleFocus(event, otherProps.onFocus)
            ,
            onBlur: (event)=>handleBlur(event, otherProps.onBlur)
            ,
            ref: handleRefChange
        })
    ;
    return {
        checked,
        disabled: Boolean(disabled),
        focusVisible,
        getInputProps,
        readOnly: Boolean(readOnly)
    };
}
exports.default = useSwitch;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","react":"6TuXu","@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4LK1q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSwitchUnstyledUtilityClass", ()=>getSwitchUnstyledUtilityClass
);
var _generateUtilityClass = require("../generateUtilityClass");
var _generateUtilityClassDefault = parcelHelpers.interopDefault(_generateUtilityClass);
var _generateUtilityClasses = require("../generateUtilityClasses");
var _generateUtilityClassesDefault = parcelHelpers.interopDefault(_generateUtilityClasses);
function getSwitchUnstyledUtilityClass(slot) {
    return _generateUtilityClassDefault.default('MuiSwitch', slot);
}
const switchUnstyledClasses = _generateUtilityClassesDefault.default('MuiSwitch', [
    'root',
    'input',
    'track',
    'thumb',
    'checked',
    'disabled',
    'focusVisible',
    'readOnly'
]);
exports.default = switchUnstyledClasses;

},{"../generateUtilityClass":"ruAWr","../generateUtilityClasses":"gmgZV","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5Fmol":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_textareaAutosizeDefault.default
);
var _textareaAutosize = require("./TextareaAutosize");
var _textareaAutosizeDefault = parcelHelpers.interopDefault(_textareaAutosize);

},{"./TextareaAutosize":"15Qnv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"15Qnv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _utils = require("@mui/utils");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "onChange",
    "maxRows",
    "minRows",
    "style",
    "value"
];
function getStyleValue(computedStyle, property) {
    return parseInt(computedStyle[property], 10) || 0;
}
const styles = {
    shadow: {
        // Visibility needed to hide the extra text area on iPads
        visibility: 'hidden',
        // Remove from the content flow
        position: 'absolute',
        // Ignore the scrollbar width
        overflow: 'hidden',
        height: 0,
        top: 0,
        left: 0,
        // Create a new layer, increase the isolation of the computed values
        transform: 'translateZ(0)'
    }
};
const TextareaAutosize = /*#__PURE__*/ _react.forwardRef(function TextareaAutosize1(props, ref) {
    const { onChange , maxRows , minRows =1 , style , value  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const { current: isControlled  } = _react.useRef(value != null);
    const inputRef = _react.useRef(null);
    const handleRef = _utils.unstable_useForkRef(ref, inputRef);
    const shadowRef = _react.useRef(null);
    const renders = _react.useRef(0);
    const [state, setState] = _react.useState({
    });
    const syncHeight = _react.useCallback(()=>{
        const input = inputRef.current;
        const containerWindow = _utils.unstable_ownerWindow(input);
        const computedStyle = containerWindow.getComputedStyle(input); // If input's width is shrunk and it's not visible, don't sync height.
        if (computedStyle.width === '0px') return;
        const inputShallow = shadowRef.current;
        inputShallow.style.width = computedStyle.width;
        inputShallow.value = input.value || props.placeholder || 'x';
        if (inputShallow.value.slice(-1) === '\n') // Certain fonts which overflow the line height will cause the textarea
        // to report a different scrollHeight depending on whether the last line
        // is empty. Make it non-empty to avoid this issue.
        inputShallow.value += ' ';
        const boxSizing = computedStyle['box-sizing'];
        const padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');
        const border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width'); // The height of the inner content
        const innerHeight = inputShallow.scrollHeight; // Measure height of a textarea with a single row
        inputShallow.value = 'x';
        const singleRowHeight = inputShallow.scrollHeight; // The height of the outer content
        let outerHeight = innerHeight;
        if (minRows) outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
        if (maxRows) outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
        outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.
        const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);
        const overflow = Math.abs(outerHeight - innerHeight) <= 1;
        setState((prevState)=>{
            // Need a large enough difference to update the height.
            // This prevents infinite rendering loop.
            if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
                renders.current += 1;
                return {
                    overflow,
                    outerHeightStyle
                };
            }
            if (renders.current === 20) console.error([
                'MUI: Too many re-renders. The layout is unstable.',
                'TextareaAutosize limits the number of renders to prevent an infinite loop.'
            ].join('\n'));
            return prevState;
        });
    }, [
        maxRows,
        minRows,
        props.placeholder
    ]);
    _react.useEffect(()=>{
        const handleResize = _utils.unstable_debounce(()=>{
            renders.current = 0;
            syncHeight();
        });
        const containerWindow = _utils.unstable_ownerWindow(inputRef.current);
        containerWindow.addEventListener('resize', handleResize);
        let resizeObserver;
        if (typeof ResizeObserver !== 'undefined') {
            resizeObserver = new ResizeObserver(handleResize);
            resizeObserver.observe(inputRef.current);
        }
        return ()=>{
            handleResize.clear();
            containerWindow.removeEventListener('resize', handleResize);
            if (resizeObserver) resizeObserver.disconnect();
        };
    }, [
        syncHeight
    ]);
    _utils.unstable_useEnhancedEffect(()=>{
        syncHeight();
    });
    _react.useEffect(()=>{
        renders.current = 0;
    }, [
        value
    ]);
    const handleChange = (event)=>{
        renders.current = 0;
        if (!isControlled) syncHeight();
        if (onChange) onChange(event);
    };
    return(/*#__PURE__*/ _jsxRuntime.jsxs(_react.Fragment, {
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx("textarea", _extendsDefault.default({
                value: value,
                onChange: handleChange,
                ref: handleRef // Apply the rows prop to get a "correct" first SSR paint
                ,
                rows: minRows,
                style: _extendsDefault.default({
                    height: state.outerHeightStyle,
                    // Need a large enough difference to allow scrolling.
                    // This prevents infinite rendering loop.
                    overflow: state.overflow ? 'hidden' : null
                }, style)
            }, other)),
            /*#__PURE__*/ _jsxRuntime.jsx("textarea", {
                "aria-hidden": true,
                className: props.className,
                readOnly: true,
                ref: shadowRef,
                tabIndex: -1,
                style: _extendsDefault.default({
                }, styles.shadow, style, {
                    padding: 0
                })
            })
        ]
    }));
});
TextareaAutosize.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * Maximum number of rows to display.
   */ maxRows: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * Minimum number of rows to display.
   * @default 1
   */ minRows: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * @ignore
   */ onChange: _propTypesDefault.default.func,
    /**
   * @ignore
   */ placeholder: _propTypesDefault.default.string,
    /**
   * @ignore
   */ style: _propTypesDefault.default.object,
    /**
   * @ignore
   */ value: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.string),
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ])
};
exports.default = TextareaAutosize;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","react":"6TuXu","prop-types":"1tgq3","@mui/utils":"9YmNw","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5qo13":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "appendOwnerState", ()=>_appendOwnerStateDefault.default
);
parcelHelpers.export(exports, "extractEventHandlers", ()=>_extractEventHandlersDefault.default
);
parcelHelpers.export(exports, "isHostComponent", ()=>_isHostComponentDefault.default
);
var _appendOwnerState = require("./appendOwnerState");
var _appendOwnerStateDefault = parcelHelpers.interopDefault(_appendOwnerState);
var _extractEventHandlers = require("./extractEventHandlers");
var _extractEventHandlersDefault = parcelHelpers.interopDefault(_extractEventHandlers);
var _isHostComponent = require("./isHostComponent");
var _isHostComponentDefault = parcelHelpers.interopDefault(_isHostComponent);

},{"./appendOwnerState":"cXRHn","./extractEventHandlers":"4J6Ye","./isHostComponent":"dEz9n","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gqLeX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rootShouldForwardProp", ()=>rootShouldForwardProp
);
parcelHelpers.export(exports, "slotShouldForwardProp", ()=>slotShouldForwardProp
);
var _system = require("@mui/system");
var _defaultTheme = require("./defaultTheme");
var _defaultThemeDefault = parcelHelpers.interopDefault(_defaultTheme);
const rootShouldForwardProp = (prop)=>_system.shouldForwardProp(prop) && prop !== 'classes'
;
const slotShouldForwardProp = _system.shouldForwardProp;
const styled = _system.createStyled({
    defaultTheme: _defaultThemeDefault.default,
    rootShouldForwardProp
});
exports.default = styled;

},{"@mui/system":"ccIuz","./defaultTheme":"CkZTD","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"CkZTD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createTheme = require("./createTheme");
var _createThemeDefault = parcelHelpers.interopDefault(_createTheme);
const defaultTheme = _createThemeDefault.default();
exports.default = defaultTheme;

},{"./createTheme":"iDLxa","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iDLxa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMuiTheme", ()=>createMuiTheme
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _utils = require("@mui/utils");
var _core = require("@mui/core");
var _system = require("@mui/system");
var _createMixins = require("./createMixins");
var _createMixinsDefault = parcelHelpers.interopDefault(_createMixins);
var _createPalette = require("./createPalette");
var _createPaletteDefault = parcelHelpers.interopDefault(_createPalette);
var _createTypography = require("./createTypography");
var _createTypographyDefault = parcelHelpers.interopDefault(_createTypography);
var _shadows = require("./shadows");
var _shadowsDefault = parcelHelpers.interopDefault(_shadows);
var _createTransitions = require("./createTransitions");
var _createTransitionsDefault = parcelHelpers.interopDefault(_createTransitions);
var _zIndex = require("./zIndex");
var _zIndexDefault = parcelHelpers.interopDefault(_zIndex);
const _excluded = [
    "breakpoints",
    "mixins",
    "spacing",
    "palette",
    "transitions",
    "typography",
    "shape"
];
function createTheme(options = {
}, ...args) {
    const { mixins: mixinsInput = {
    } , palette: paletteInput = {
    } , transitions: transitionsInput = {
    } , typography: typographyInput = {
    }  } = options, other = _objectWithoutPropertiesLooseDefault.default(options, _excluded);
    const palette = _createPaletteDefault.default(paletteInput);
    const systemTheme = _system.createTheme(options);
    let muiTheme = _utils.deepmerge(systemTheme, {
        mixins: _createMixinsDefault.default(systemTheme.breakpoints, systemTheme.spacing, mixinsInput),
        palette,
        // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
        shadows: _shadowsDefault.default.slice(),
        typography: _createTypographyDefault.default(palette, typographyInput),
        transitions: _createTransitionsDefault.default(transitionsInput),
        zIndex: _extendsDefault.default({
        }, _zIndexDefault.default)
    });
    muiTheme = _utils.deepmerge(muiTheme, other);
    muiTheme = args.reduce((acc, argument)=>_utils.deepmerge(acc, argument)
    , muiTheme);
    {
        const stateClasses = [
            'active',
            'checked',
            'completed',
            'disabled',
            'error',
            'expanded',
            'focused',
            'focusVisible',
            'required',
            'selected'
        ];
        const traverse = (node, component)=>{
            let key; // eslint-disable-next-line guard-for-in, no-restricted-syntax
            for(key in node){
                const child = node[key];
                if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
                    {
                        const stateClass = _core.generateUtilityClass('', key);
                        console.error([
                            `MUI: The \`${component}\` component increases ` + `the CSS specificity of the \`${key}\` internal state.`,
                            'You can not override it like this: ',
                            JSON.stringify(node, null, 2),
                            '',
                            `Instead, you need to use the '&.${stateClass}' syntax:`,
                            JSON.stringify({
                                root: {
                                    [`&.${stateClass}`]: child
                                }
                            }, null, 2),
                            '',
                            'https://mui.com/r/state-classes-guide'
                        ].join('\n'));
                    }
                    node[key] = {
                    };
                }
            }
        };
        Object.keys(muiTheme.components).forEach((component)=>{
            const styleOverrides = muiTheme.components[component].styleOverrides;
            if (styleOverrides && component.indexOf('Mui') === 0) traverse(styleOverrides, component);
        });
    }
    return muiTheme;
}
let warnedOnce = false;
function createMuiTheme(...args) {
    if (!warnedOnce) {
        warnedOnce = true;
        console.error([
            'MUI: the createMuiTheme function was renamed to createTheme.',
            '',
            "You should use `import { createTheme } from '@mui/material/styles'`"
        ].join('\n'));
    }
    return createTheme(...args);
}
exports.default = createTheme;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@mui/utils":"9YmNw","@mui/core":"9b2I1","@mui/system":"ccIuz","./createMixins":"kmhj3","./createPalette":"l7Gro","./createTypography":"a0npU","./shadows":"6rGBO","./createTransitions":"468ig","./zIndex":"k8ZHG","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kmhj3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
function createMixins(breakpoints, spacing, mixins) {
    return _extendsDefault.default({
        toolbar: {
            minHeight: 56,
            [`${breakpoints.up('xs')} and (orientation: landscape)`]: {
                minHeight: 48
            },
            [breakpoints.up('sm')]: {
                minHeight: 64
            }
        }
    }, mixins);
}
exports.default = createMixins;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"l7Gro":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "light", ()=>light
);
parcelHelpers.export(exports, "dark", ()=>dark
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _utils = require("@mui/utils");
var _system = require("@mui/system");
var _common = require("../colors/common");
var _commonDefault = parcelHelpers.interopDefault(_common);
var _grey = require("../colors/grey");
var _greyDefault = parcelHelpers.interopDefault(_grey);
var _purple = require("../colors/purple");
var _purpleDefault = parcelHelpers.interopDefault(_purple);
var _red = require("../colors/red");
var _redDefault = parcelHelpers.interopDefault(_red);
var _orange = require("../colors/orange");
var _orangeDefault = parcelHelpers.interopDefault(_orange);
var _blue = require("../colors/blue");
var _blueDefault = parcelHelpers.interopDefault(_blue);
var _lightBlue = require("../colors/lightBlue");
var _lightBlueDefault = parcelHelpers.interopDefault(_lightBlue);
var _green = require("../colors/green");
var _greenDefault = parcelHelpers.interopDefault(_green);
const _excluded = [
    "mode",
    "contrastThreshold",
    "tonalOffset"
];
const light = {
    // The colors used to style the text.
    text: {
        // The most important text.
        primary: 'rgba(0, 0, 0, 0.87)',
        // Secondary text.
        secondary: 'rgba(0, 0, 0, 0.6)',
        // Disabled text have even lower visual prominence.
        disabled: 'rgba(0, 0, 0, 0.38)'
    },
    // The color used to divide different elements.
    divider: 'rgba(0, 0, 0, 0.12)',
    // The background colors used to style the surfaces.
    // Consistency between these values is important.
    background: {
        paper: _commonDefault.default.white,
        default: _commonDefault.default.white
    },
    // The colors used to style the action elements.
    action: {
        // The color of an active action like an icon button.
        active: 'rgba(0, 0, 0, 0.54)',
        // The color of an hovered action.
        hover: 'rgba(0, 0, 0, 0.04)',
        hoverOpacity: 0.04,
        // The color of a selected action.
        selected: 'rgba(0, 0, 0, 0.08)',
        selectedOpacity: 0.08,
        // The color of a disabled action.
        disabled: 'rgba(0, 0, 0, 0.26)',
        // The background color of a disabled action.
        disabledBackground: 'rgba(0, 0, 0, 0.12)',
        disabledOpacity: 0.38,
        focus: 'rgba(0, 0, 0, 0.12)',
        focusOpacity: 0.12,
        activatedOpacity: 0.12
    }
};
const dark = {
    text: {
        primary: _commonDefault.default.white,
        secondary: 'rgba(255, 255, 255, 0.7)',
        disabled: 'rgba(255, 255, 255, 0.5)',
        icon: 'rgba(255, 255, 255, 0.5)'
    },
    divider: 'rgba(255, 255, 255, 0.12)',
    background: {
        paper: '#121212',
        default: '#121212'
    },
    action: {
        active: _commonDefault.default.white,
        hover: 'rgba(255, 255, 255, 0.08)',
        hoverOpacity: 0.08,
        selected: 'rgba(255, 255, 255, 0.16)',
        selectedOpacity: 0.16,
        disabled: 'rgba(255, 255, 255, 0.3)',
        disabledBackground: 'rgba(255, 255, 255, 0.12)',
        disabledOpacity: 0.38,
        focus: 'rgba(255, 255, 255, 0.12)',
        focusOpacity: 0.12,
        activatedOpacity: 0.24
    }
};
function addLightOrDark(intent, direction, shade, tonalOffset) {
    const tonalOffsetLight = tonalOffset.light || tonalOffset;
    const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
    if (!intent[direction]) {
        if (intent.hasOwnProperty(shade)) intent[direction] = intent[shade];
        else if (direction === 'light') intent.light = _system.lighten(intent.main, tonalOffsetLight);
        else if (direction === 'dark') intent.dark = _system.darken(intent.main, tonalOffsetDark);
    }
}
function getDefaultPrimary(mode = 'light') {
    if (mode === 'dark') return {
        main: _blueDefault.default[200],
        light: _blueDefault.default[50],
        dark: _blueDefault.default[400]
    };
    return {
        main: _blueDefault.default[700],
        light: _blueDefault.default[400],
        dark: _blueDefault.default[800]
    };
}
function getDefaultSecondary(mode = 'light') {
    if (mode === 'dark') return {
        main: _purpleDefault.default[200],
        light: _purpleDefault.default[50],
        dark: _purpleDefault.default[400]
    };
    return {
        main: _purpleDefault.default[500],
        light: _purpleDefault.default[300],
        dark: _purpleDefault.default[700]
    };
}
function getDefaultError(mode = 'light') {
    if (mode === 'dark') return {
        main: _redDefault.default[500],
        light: _redDefault.default[300],
        dark: _redDefault.default[700]
    };
    return {
        main: _redDefault.default[700],
        light: _redDefault.default[400],
        dark: _redDefault.default[800]
    };
}
function getDefaultInfo(mode = 'light') {
    if (mode === 'dark') return {
        main: _lightBlueDefault.default[400],
        light: _lightBlueDefault.default[300],
        dark: _lightBlueDefault.default[700]
    };
    return {
        main: _lightBlueDefault.default[700],
        light: _lightBlueDefault.default[500],
        dark: _lightBlueDefault.default[900]
    };
}
function getDefaultSuccess(mode = 'light') {
    if (mode === 'dark') return {
        main: _greenDefault.default[400],
        light: _greenDefault.default[300],
        dark: _greenDefault.default[700]
    };
    return {
        main: _greenDefault.default[800],
        light: _greenDefault.default[500],
        dark: _greenDefault.default[900]
    };
}
function getDefaultWarning(mode = 'light') {
    if (mode === 'dark') return {
        main: _orangeDefault.default[400],
        light: _orangeDefault.default[300],
        dark: _orangeDefault.default[700]
    };
    return {
        main: '#ED6C02',
        // closest to orange[800] that pass 3:1.
        light: _orangeDefault.default[500],
        dark: _orangeDefault.default[900]
    };
}
function createPalette(palette) {
    const { mode ='light' , contrastThreshold =3 , tonalOffset =0.2  } = palette, other = _objectWithoutPropertiesLooseDefault.default(palette, _excluded);
    const primary = palette.primary || getDefaultPrimary(mode);
    const secondary = palette.secondary || getDefaultSecondary(mode);
    const error = palette.error || getDefaultError(mode);
    const info = palette.info || getDefaultInfo(mode);
    const success = palette.success || getDefaultSuccess(mode);
    const warning = palette.warning || getDefaultWarning(mode); // Use the same logic as
    // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
    // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54
    function getContrastText(background) {
        const contrastText = _system.getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
        {
            const contrast = _system.getContrastRatio(background, contrastText);
            if (contrast < 3) console.error([
                `MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`,
                'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.',
                'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'
            ].join('\n'));
        }
        return contrastText;
    }
    const augmentColor = ({ color , name , mainShade =500 , lightShade =300 , darkShade =700  })=>{
        color = _extendsDefault.default({
        }, color);
        if (!color.main && color[mainShade]) color.main = color[mainShade];
        if (!color.hasOwnProperty('main')) throw new Error(`MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.\nThe color object needs to have a \`main\` property or a \`${mainShade}\` property.`);
        if (typeof color.main !== 'string') throw new Error(`MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.\n\`color.main\` should be a string, but \`${JSON.stringify(color.main)}\` was provided instead.\n\nDid you intend to use one of the following approaches?\n\nimport { green } from "@mui/material/colors";\n\nconst theme1 = createTheme({ palette: {\n  primary: green,\n} });\n\nconst theme2 = createTheme({ palette: {\n  primary: { main: green[500] },\n} });`);
        addLightOrDark(color, 'light', lightShade, tonalOffset);
        addLightOrDark(color, 'dark', darkShade, tonalOffset);
        if (!color.contrastText) color.contrastText = getContrastText(color.main);
        return color;
    };
    const modes = {
        dark,
        light
    };
    if (!modes[mode]) console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
    const paletteOutput = _utils.deepmerge(_extendsDefault.default({
        common: // A collection of common colors.
        _commonDefault.default,
        // The palette mode, can be light or dark.
        mode,
        // The colors used to represent primary interface elements for a user.
        primary: augmentColor({
            color: primary,
            name: 'primary'
        }),
        // The colors used to represent secondary interface elements for a user.
        secondary: augmentColor({
            color: secondary,
            name: 'secondary',
            mainShade: 'A400',
            lightShade: 'A200',
            darkShade: 'A700'
        }),
        // The colors used to represent interface elements that the user should be made aware of.
        error: augmentColor({
            color: error,
            name: 'error'
        }),
        // The colors used to represent potentially dangerous actions or important messages.
        warning: augmentColor({
            color: warning,
            name: 'warning'
        }),
        // The colors used to present information to the user that is neutral and not necessarily important.
        info: augmentColor({
            color: info,
            name: 'info'
        }),
        // The colors used to indicate the successful completion of an action that user triggered.
        success: augmentColor({
            color: success,
            name: 'success'
        }),
        grey: // The grey colors.
        _greyDefault.default,
        // Used by `getContrastText()` to maximize the contrast between
        // the background and the text.
        contrastThreshold,
        // Takes a background color and returns the text color that maximizes the contrast.
        getContrastText,
        // Generate a rich color object.
        augmentColor,
        // Used by the functions below to shift a color's luminance by approximately
        // two indexes within its tonal palette.
        // E.g., shift from Red 500 to Red 300 or Red 700.
        tonalOffset
    }, modes[mode]), other);
    return paletteOutput;
}
exports.default = createPalette;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@mui/utils":"9YmNw","@mui/system":"ccIuz","../colors/common":"98neT","../colors/grey":"fE63U","../colors/purple":"5f9TA","../colors/red":"hvEcb","../colors/orange":"j6QAz","../colors/blue":"kQrym","../colors/lightBlue":"9SxRL","../colors/green":"hzYAk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"98neT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const common = {
    black: '#000',
    white: '#fff'
};
exports.default = common;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fE63U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const grey = {
    50: '#fafafa',
    100: '#f5f5f5',
    200: '#eeeeee',
    300: '#e0e0e0',
    400: '#bdbdbd',
    500: '#9e9e9e',
    600: '#757575',
    700: '#616161',
    800: '#424242',
    900: '#212121',
    A100: '#f5f5f5',
    A200: '#eeeeee',
    A400: '#bdbdbd',
    A700: '#616161'
};
exports.default = grey;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5f9TA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const purple = {
    50: '#f3e5f5',
    100: '#e1bee7',
    200: '#ce93d8',
    300: '#ba68c8',
    400: '#ab47bc',
    500: '#9c27b0',
    600: '#8e24aa',
    700: '#7b1fa2',
    800: '#6a1b9a',
    900: '#4a148c',
    A100: '#ea80fc',
    A200: '#e040fb',
    A400: '#d500f9',
    A700: '#aa00ff'
};
exports.default = purple;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hvEcb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const red = {
    50: '#ffebee',
    100: '#ffcdd2',
    200: '#ef9a9a',
    300: '#e57373',
    400: '#ef5350',
    500: '#f44336',
    600: '#e53935',
    700: '#d32f2f',
    800: '#c62828',
    900: '#b71c1c',
    A100: '#ff8a80',
    A200: '#ff5252',
    A400: '#ff1744',
    A700: '#d50000'
};
exports.default = red;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"j6QAz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const orange = {
    50: '#fff3e0',
    100: '#ffe0b2',
    200: '#ffcc80',
    300: '#ffb74d',
    400: '#ffa726',
    500: '#ff9800',
    600: '#fb8c00',
    700: '#f57c00',
    800: '#ef6c00',
    900: '#e65100',
    A100: '#ffd180',
    A200: '#ffab40',
    A400: '#ff9100',
    A700: '#ff6d00'
};
exports.default = orange;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kQrym":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const blue = {
    50: '#e3f2fd',
    100: '#bbdefb',
    200: '#90caf9',
    300: '#64b5f6',
    400: '#42a5f5',
    500: '#2196f3',
    600: '#1e88e5',
    700: '#1976d2',
    800: '#1565c0',
    900: '#0d47a1',
    A100: '#82b1ff',
    A200: '#448aff',
    A400: '#2979ff',
    A700: '#2962ff'
};
exports.default = blue;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9SxRL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const lightBlue = {
    50: '#e1f5fe',
    100: '#b3e5fc',
    200: '#81d4fa',
    300: '#4fc3f7',
    400: '#29b6f6',
    500: '#03a9f4',
    600: '#039be5',
    700: '#0288d1',
    800: '#0277bd',
    900: '#01579b',
    A100: '#80d8ff',
    A200: '#40c4ff',
    A400: '#00b0ff',
    A700: '#0091ea'
};
exports.default = lightBlue;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hzYAk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const green = {
    50: '#e8f5e9',
    100: '#c8e6c9',
    200: '#a5d6a7',
    300: '#81c784',
    400: '#66bb6a',
    500: '#4caf50',
    600: '#43a047',
    700: '#388e3c',
    800: '#2e7d32',
    900: '#1b5e20',
    A100: '#b9f6ca',
    A200: '#69f0ae',
    A400: '#00e676',
    A700: '#00c853'
};
exports.default = green;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"a0npU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _utils = require("@mui/utils");
const _excluded = [
    "fontFamily",
    "fontSize",
    "fontWeightLight",
    "fontWeightRegular",
    "fontWeightMedium",
    "fontWeightBold",
    "htmlFontSize",
    "allVariants",
    "pxToRem"
];
function round(value) {
    return Math.round(value * 100000) / 100000;
}
const caseAllCaps = {
    textTransform: 'uppercase'
};
const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
function createTypography(palette, typography) {
    const _ref = typeof typography === 'function' ? typography(palette) : typography, { fontFamily =defaultFontFamily , // The default font size of the Material Specification.
    fontSize =14 , // px
    fontWeightLight =300 , fontWeightRegular =400 , fontWeightMedium =500 , fontWeightBold =700 , // Tell MUI what's the font-size on the html element.
    // 16px is the default font-size used by browsers.
    htmlFontSize =16 , // Apply the CSS properties to all the variants.
    allVariants , pxToRem: pxToRem2  } = _ref, other = _objectWithoutPropertiesLooseDefault.default(_ref, _excluded);
    if (typeof fontSize !== 'number') console.error('MUI: `fontSize` is required to be a number.');
    if (typeof htmlFontSize !== 'number') console.error('MUI: `htmlFontSize` is required to be a number.');
    const coef = fontSize / 14;
    const pxToRem = pxToRem2 || ((size)=>`${size / htmlFontSize * coef}rem`
    );
    const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing)=>_extendsDefault.default({
            fontFamily,
            fontWeight,
            fontSize: pxToRem(size),
            // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
            lineHeight
        }, fontFamily === defaultFontFamily ? {
            letterSpacing: `${round(letterSpacing / size)}em`
        } : {
        }, casing, allVariants)
    ;
    const variants = {
        h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
        h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
        h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
        h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
        h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
        h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
        subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
        subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
        body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
        body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
        button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
        caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
        overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
    };
    return _utils.deepmerge(_extendsDefault.default({
        htmlFontSize,
        pxToRem,
        fontFamily,
        fontSize,
        fontWeightLight,
        fontWeightRegular,
        fontWeightMedium,
        fontWeightBold
    }, variants), other, {
        clone: false // No need to clone deep
    });
}
exports.default = createTypography;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6rGBO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const shadowKeyUmbraOpacity = 0.2;
const shadowKeyPenumbraOpacity = 0.14;
const shadowAmbientShadowOpacity = 0.12;
function createShadow(...px) {
    return [
        `${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`,
        `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`,
        `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`
    ].join(',');
} // Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss
const shadows = [
    'none',
    createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0),
    createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0),
    createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0),
    createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0),
    createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0),
    createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0),
    createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1),
    createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2),
    createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2),
    createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3),
    createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3),
    createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4),
    createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4),
    createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4),
    createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5),
    createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5),
    createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5),
    createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6),
    createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6),
    createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7),
    createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7),
    createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7),
    createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8),
    createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)
];
exports.default = shadows;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"468ig":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "easing", ()=>easing
);
parcelHelpers.export(exports, "duration", ()=>duration
);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
const _excluded = [
    "duration",
    "easing",
    "delay"
];
const easing = {
    // This is the most common easing curve.
    easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
    // Objects enter the screen at full velocity from off-screen and
    // slowly decelerate to a resting point.
    easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
    // Objects leave the screen at full velocity. They do not decelerate when off-screen.
    easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
    // The sharp curve is used by objects that may return to the screen at any time.
    sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
}; // Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
const duration = {
    shortest: 150,
    shorter: 200,
    short: 250,
    // most basic recommended timing
    standard: 300,
    // this is to be used in complex animations
    complex: 375,
    // recommended when something is entering screen
    enteringScreen: 225,
    // recommended when something is leaving screen
    leavingScreen: 195
};
function formatMs(milliseconds) {
    return `${Math.round(milliseconds)}ms`;
}
function getAutoHeightDuration(height) {
    if (!height) return 0;
    const constant = height / 36; // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10
    return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
}
function createTransitions(inputTransitions) {
    const mergedEasing = _extendsDefault.default({
    }, easing, inputTransitions.easing);
    const mergedDuration = _extendsDefault.default({
    }, duration, inputTransitions.duration);
    const create = (props = [
        'all'
    ], options = {
    })=>{
        const { duration: durationOption = mergedDuration.standard , easing: easingOption = mergedEasing.easeInOut , delay =0  } = options, other = _objectWithoutPropertiesLooseDefault.default(options, _excluded);
        {
            const isString = (value)=>typeof value === 'string'
            ; // IE11 support, replace with Number.isNaN
            // eslint-disable-next-line no-restricted-globals
            const isNumber = (value)=>!isNaN(parseFloat(value))
            ;
            if (!isString(props) && !Array.isArray(props)) console.error('MUI: Argument "props" must be a string or Array.');
            if (!isNumber(durationOption) && !isString(durationOption)) console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
            if (!isString(easingOption)) console.error('MUI: Argument "easing" must be a string.');
            if (!isNumber(delay) && !isString(delay)) console.error('MUI: Argument "delay" must be a number or a string.');
            if (Object.keys(other).length !== 0) console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(',')}].`);
        }
        return (Array.isArray(props) ? props : [
            props
        ]).map((animatedProp)=>`${animatedProp} ${typeof durationOption === 'string' ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`
        ).join(',');
    };
    return _extendsDefault.default({
        getAutoHeightDuration,
        create
    }, inputTransitions, {
        easing: mergedEasing,
        duration: mergedDuration
    });
}
exports.default = createTransitions;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@babel/runtime/helpers/esm/extends":"bKAu6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"k8ZHG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// We need to centralize the zIndex definitions as they work
// like global values in the browser.
const zIndex = {
    mobileStepper: 1000,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
};
exports.default = zIndex;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1cdc1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _system = require("@mui/system");
var _defaultTheme = require("./defaultTheme");
var _defaultThemeDefault = parcelHelpers.interopDefault(_defaultTheme);
function useThemeProps({ props , name  }) {
    return _system.useThemeProps({
        props,
        name,
        defaultTheme: _defaultThemeDefault.default
    });
}
exports.default = useThemeProps;

},{"@mui/system":"ccIuz","./defaultTheme":"CkZTD","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3YJ7J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_capitalize;

},{"@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"63BCT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_paperDefault.default
);
parcelHelpers.export(exports, "paperClasses", ()=>_paperClassesDefault.default
);
var _paper = require("./Paper");
var _paperDefault = parcelHelpers.interopDefault(_paper);
var _paperClasses = require("./paperClasses");
var _paperClassesDefault = parcelHelpers.interopDefault(_paperClasses);
parcelHelpers.exportAll(_paperClasses, exports);

},{"./Paper":"hn6Z5","./paperClasses":"cAD1Y","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hn6Z5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _core = require("@mui/core");
var _system = require("@mui/system");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _useTheme = require("../styles/useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _paperClasses = require("./paperClasses"); // Inspired by https://github.com/material-components/material-components-ios/blob/bca36107405594d5b7b16265a5b0ed698f85a5ee/components/Elevation/src/UIColor%2BMaterialElevation.m#L61
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "component",
    "elevation",
    "square",
    "variant"
];
const getOverlayAlpha = (elevation)=>{
    let alphaValue;
    if (elevation < 1) alphaValue = 5.11916 * elevation ** 2;
    else alphaValue = 4.5 * Math.log(elevation + 1) + 2;
    return (alphaValue / 100).toFixed(2);
};
const useUtilityClasses = (ownerState)=>{
    const { square , elevation , variant , classes  } = ownerState;
    const slots = {
        root: [
            'root',
            variant,
            !square && 'rounded',
            variant === 'elevation' && `elevation${elevation}`
        ]
    };
    return _core.unstable_composeClasses(slots, _paperClasses.getPaperUtilityClass, classes);
};
const PaperRoot = _styledDefault.default('div', {
    name: 'MuiPaper',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            styles[ownerState.variant],
            !ownerState.square && styles.rounded,
            ownerState.variant === 'elevation' && styles[`elevation${ownerState.elevation}`]
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        backgroundColor: theme.palette.background.paper,
        color: theme.palette.text.primary,
        transition: theme.transitions.create('box-shadow')
    }, !ownerState.square && {
        borderRadius: theme.shape.borderRadius
    }, ownerState.variant === 'outlined' && {
        border: `1px solid ${theme.palette.divider}`
    }, ownerState.variant === 'elevation' && _extendsDefault.default({
        boxShadow: theme.shadows[ownerState.elevation]
    }, theme.palette.mode === 'dark' && {
        backgroundImage: `linear-gradient(${_system.alpha('#fff', getOverlayAlpha(ownerState.elevation))}, ${_system.alpha('#fff', getOverlayAlpha(ownerState.elevation))})`
    }))
);
const Paper = /*#__PURE__*/ _react.forwardRef(function Paper1(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiPaper'
    });
    const { className , component ='div' , elevation =1 , square =false , variant ='elevation'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({
    }, props, {
        component,
        elevation,
        square,
        variant
    });
    const classes = useUtilityClasses(ownerState);
    {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        const theme = _useThemeDefault.default();
        if (theme.shadows[elevation] === undefined) console.error([
            `MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`,
            `Please make sure that \`theme.shadows[${elevation}]\` is defined.`
        ].join('\n'));
    }
    return(/*#__PURE__*/ _jsxRuntime.jsx(PaperRoot, _extendsDefault.default({
        as: component,
        ownerState: ownerState,
        className: _clsxDefault.default(classes.root, className),
        ref: ref
    }, other)));
});
Paper.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * Shadow depth, corresponds to `dp` in the spec.
   * It accepts values between 0 and 24 inclusive.
   * @default 1
   */ elevation: _utils.chainPropTypes(_utils.integerPropType, (props)=>{
        const { elevation , variant  } = props;
        if (elevation > 0 && variant === 'outlined') return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
        return null;
    }),
    /**
   * If `true`, rounded corners are disabled.
   * @default false
   */ square: _propTypesDefault.default.bool,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The variant to use.
   * @default 'elevation'
   */ variant: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'elevation',
            'outlined'
        ]),
        _propTypesDefault.default.string
    ])
};
exports.default = Paper;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@babel/runtime/helpers/esm/extends":"bKAu6","react":"6TuXu","prop-types":"1tgq3","clsx":"eg1He","@mui/utils":"9YmNw","@mui/core":"9b2I1","@mui/system":"ccIuz","../styles/styled":"gqLeX","../styles/useThemeProps":"1cdc1","../styles/useTheme":"i6YeU","./paperClasses":"cAD1Y","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"i6YeU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _system = require("@mui/system");
var _defaultTheme = require("./defaultTheme");
var _defaultThemeDefault = parcelHelpers.interopDefault(_defaultTheme);
function useTheme() {
    const theme = _system.useTheme(_defaultThemeDefault.default);
    // eslint-disable-next-line react-hooks/rules-of-hooks
    _react.useDebugValue(theme);
    return theme;
}
exports.default = useTheme;

},{"react":"6TuXu","@mui/system":"ccIuz","./defaultTheme":"CkZTD","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cAD1Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getPaperUtilityClass", ()=>getPaperUtilityClass
);
var _core = require("@mui/core");
function getPaperUtilityClass(slot) {
    return _core.generateUtilityClass('MuiPaper', slot);
}
const paperClasses = _core.generateUtilityClasses('MuiPaper', [
    'root',
    'rounded',
    'outlined',
    'elevation',
    'elevation0',
    'elevation1',
    'elevation2',
    'elevation3',
    'elevation4',
    'elevation5',
    'elevation6',
    'elevation7',
    'elevation8',
    'elevation9',
    'elevation10',
    'elevation11',
    'elevation12',
    'elevation13',
    'elevation14',
    'elevation15',
    'elevation16',
    'elevation17',
    'elevation18',
    'elevation19',
    'elevation20',
    'elevation21',
    'elevation22',
    'elevation23',
    'elevation24'
]);
exports.default = paperClasses;

},{"@mui/core":"9b2I1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3Bs8o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAppBarUtilityClass", ()=>getAppBarUtilityClass
);
var _core = require("@mui/core");
function getAppBarUtilityClass(slot) {
    return _core.generateUtilityClass('MuiAppBar', slot);
}
const appBarClasses = _core.generateUtilityClasses('MuiAppBar', [
    'root',
    'positionFixed',
    'positionAbsolute',
    'positionSticky',
    'positionStatic',
    'positionRelative',
    'colorDefault',
    'colorPrimary',
    'colorSecondary',
    'colorInherit',
    'colorTransparent'
]);
exports.default = appBarClasses;

},{"@mui/core":"9b2I1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5mtHf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_containerDefault.default
);
parcelHelpers.export(exports, "containerClasses", ()=>_containerClassesDefault.default
);
var _container = require("./Container");
var _containerDefault = parcelHelpers.interopDefault(_container);
var _containerClasses = require("./containerClasses");
var _containerClassesDefault = parcelHelpers.interopDefault(_containerClasses);
parcelHelpers.exportAll(_containerClasses, exports);

},{"./Container":"1MUcD","./containerClasses":"4v17D","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1MUcD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _core = require("@mui/core");
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _containerClasses = require("./containerClasses");
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "component",
    "disableGutters",
    "fixed",
    "maxWidth"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , fixed , disableGutters , maxWidth  } = ownerState;
    const slots = {
        root: [
            'root',
            maxWidth && `maxWidth${_capitalizeDefault.default(String(maxWidth))}`,
            fixed && 'fixed',
            disableGutters && 'disableGutters'
        ]
    };
    return _core.unstable_composeClasses(slots, _containerClasses.getContainerUtilityClass, classes);
};
const ContainerRoot = _styledDefault.default('div', {
    name: 'MuiContainer',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            styles[`maxWidth${_capitalizeDefault.default(String(ownerState.maxWidth))}`],
            ownerState.fixed && styles.fixed,
            ownerState.disableGutters && styles.disableGutters
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        width: '100%',
        marginLeft: 'auto',
        boxSizing: 'border-box',
        marginRight: 'auto',
        display: 'block'
    }, !ownerState.disableGutters && {
        paddingLeft: theme.spacing(2),
        paddingRight: theme.spacing(2),
        [theme.breakpoints.up('sm')]: {
            paddingLeft: theme.spacing(3),
            paddingRight: theme.spacing(3)
        }
    })
, ({ theme , ownerState  })=>ownerState.fixed && Object.keys(theme.breakpoints.values).reduce((acc, breakpoint)=>{
        const value = theme.breakpoints.values[breakpoint];
        if (value !== 0) acc[theme.breakpoints.up(breakpoint)] = {
            maxWidth: `${value}${theme.breakpoints.unit}`
        };
        return acc;
    }, {
    })
, ({ theme , ownerState  })=>_extendsDefault.default({
    }, ownerState.maxWidth === 'xs' && {
        [theme.breakpoints.up('xs')]: {
            maxWidth: Math.max(theme.breakpoints.values.xs, 444)
        }
    }, ownerState.maxWidth && ownerState.maxWidth !== 'xs' && {
        [theme.breakpoints.up(ownerState.maxWidth)]: {
            maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`
        }
    })
);
const Container = /*#__PURE__*/ _react.forwardRef(function Container1(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiContainer'
    });
    const { className , component ='div' , disableGutters =false , fixed =false , maxWidth ='lg'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({
    }, props, {
        component,
        disableGutters,
        fixed,
        maxWidth
    });
    const classes = useUtilityClasses(ownerState);
    return(/*#__PURE__*/ _jsxRuntime.jsx(ContainerRoot, _extendsDefault.default({
        as: component,
        ownerState: ownerState,
        className: _clsxDefault.default(classes.root, className),
        ref: ref
    }, other)));
});
Container.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * @ignore
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * If `true`, the left and right padding is removed.
   * @default false
   */ disableGutters: _propTypesDefault.default.bool,
    /**
   * Set the max-width to match the min-width of the current breakpoint.
   * This is useful if you'd prefer to design for a fixed set of sizes
   * instead of trying to accommodate a fully fluid viewport.
   * It's fluid by default.
   * @default false
   */ fixed: _propTypesDefault.default.bool,
    /**
   * Determine the max-width of the container.
   * The container width grows with the size of the screen.
   * Set to `false` to disable `maxWidth`.
   * @default 'lg'
   */ maxWidth: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'xs',
            'sm',
            'md',
            'lg',
            'xl',
            false
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
exports.default = Container;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@babel/runtime/helpers/esm/extends":"bKAu6","react":"6TuXu","prop-types":"1tgq3","clsx":"eg1He","@mui/core":"9b2I1","../styles/useThemeProps":"1cdc1","../styles/styled":"gqLeX","./containerClasses":"4v17D","../utils/capitalize":"3YJ7J","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4v17D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getContainerUtilityClass", ()=>getContainerUtilityClass
);
var _core = require("@mui/core");
function getContainerUtilityClass(slot) {
    return _core.generateUtilityClass('MuiContainer', slot);
}
const containerClasses = _core.generateUtilityClasses('MuiContainer', [
    'root',
    'disableGutters',
    'fixed',
    'maxWidthXs',
    'maxWidthSm',
    'maxWidthMd',
    'maxWidthLg',
    'maxWidthXl'
]);
exports.default = containerClasses;

},{"@mui/core":"9b2I1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cZQ6o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_toolbarDefault.default
);
parcelHelpers.export(exports, "toolbarClasses", ()=>_toolbarClassesDefault.default
);
var _toolbar = require("./Toolbar");
var _toolbarDefault = parcelHelpers.interopDefault(_toolbar);
var _toolbarClasses = require("./toolbarClasses");
var _toolbarClassesDefault = parcelHelpers.interopDefault(_toolbarClasses);
parcelHelpers.exportAll(_toolbarClasses, exports);

},{"./Toolbar":"fVdUS","./toolbarClasses":"8j9XT","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fVdUS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _core = require("@mui/core");
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _toolbarClasses = require("./toolbarClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "component",
    "disableGutters",
    "variant"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , disableGutters , variant  } = ownerState;
    const slots = {
        root: [
            'root',
            !disableGutters && 'gutters',
            variant
        ]
    };
    return _core.unstable_composeClasses(slots, _toolbarClasses.getToolbarUtilityClass, classes);
};
const ToolbarRoot = _styledDefault.default('div', {
    name: 'MuiToolbar',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            !ownerState.disableGutters && styles.gutters,
            styles[ownerState.variant]
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        position: 'relative',
        display: 'flex',
        alignItems: 'center'
    }, !ownerState.disableGutters && {
        paddingLeft: theme.spacing(2),
        paddingRight: theme.spacing(2),
        [theme.breakpoints.up('sm')]: {
            paddingLeft: theme.spacing(3),
            paddingRight: theme.spacing(3)
        }
    }, ownerState.variant === 'dense' && {
        minHeight: 48
    })
, ({ theme , ownerState  })=>ownerState.variant === 'regular' && theme.mixins.toolbar
);
const Toolbar = /*#__PURE__*/ _react.forwardRef(function Toolbar1(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiToolbar'
    });
    const { className , component ='div' , disableGutters =false , variant ='regular'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({
    }, props, {
        component,
        disableGutters,
        variant
    });
    const classes = useUtilityClasses(ownerState);
    return(/*#__PURE__*/ _jsxRuntime.jsx(ToolbarRoot, _extendsDefault.default({
        as: component,
        className: _clsxDefault.default(classes.root, className),
        ref: ref,
        ownerState: ownerState
    }, other)));
});
Toolbar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.
   * The Toolbar is a flex container, allowing flex item properites to be used to lay out the children.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * If `true`, disables gutter padding.
   * @default false
   */ disableGutters: _propTypesDefault.default.bool,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The variant to use.
   * @default 'regular'
   */ variant: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'dense',
            'regular'
        ]),
        _propTypesDefault.default.string
    ])
};
exports.default = Toolbar;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@babel/runtime/helpers/esm/extends":"bKAu6","react":"6TuXu","prop-types":"1tgq3","clsx":"eg1He","@mui/core":"9b2I1","../styles/useThemeProps":"1cdc1","../styles/styled":"gqLeX","./toolbarClasses":"8j9XT","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8j9XT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getToolbarUtilityClass", ()=>getToolbarUtilityClass
);
var _core = require("@mui/core");
function getToolbarUtilityClass(slot) {
    return _core.generateUtilityClass('MuiToolbar', slot);
}
const toolbarClasses = _core.generateUtilityClasses('MuiToolbar', [
    'root',
    'gutters',
    'regular',
    'dense'
]);
exports.default = toolbarClasses;

},{"@mui/core":"9b2I1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ewG8k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_typographyDefault.default
);
parcelHelpers.export(exports, "typographyClasses", ()=>_typographyClassesDefault.default
);
var _typography = require("./Typography");
var _typographyDefault = parcelHelpers.interopDefault(_typography);
var _typographyClasses = require("./typographyClasses");
var _typographyClassesDefault = parcelHelpers.interopDefault(_typographyClasses);
parcelHelpers.exportAll(_typographyClasses, exports);

},{"./Typography":"54H70","./typographyClasses":"dUBBH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"54H70":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TypographyRoot", ()=>TypographyRoot
);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _system = require("@mui/system");
var _core = require("@mui/core");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _typographyClasses = require("./typographyClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "align",
    "className",
    "component",
    "gutterBottom",
    "noWrap",
    "paragraph",
    "variant",
    "variantMapping"
];
const useUtilityClasses = (ownerState)=>{
    const { align , gutterBottom , noWrap , paragraph , variant , classes  } = ownerState;
    const slots = {
        root: [
            'root',
            variant,
            ownerState.align !== 'inherit' && `align${_capitalizeDefault.default(align)}`,
            gutterBottom && 'gutterBottom',
            noWrap && 'noWrap',
            paragraph && 'paragraph'
        ]
    };
    return _core.unstable_composeClasses(slots, _typographyClasses.getTypographyUtilityClass, classes);
};
const TypographyRoot = _styledDefault.default('span', {
    name: 'MuiTypography',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            ownerState.variant && styles[ownerState.variant],
            ownerState.align !== 'inherit' && styles[`align${_capitalizeDefault.default(ownerState.align)}`],
            ownerState.noWrap && styles.noWrap,
            ownerState.gutterBottom && styles.gutterBottom,
            ownerState.paragraph && styles.paragraph
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        margin: 0
    }, ownerState.variant && theme.typography[ownerState.variant], ownerState.align !== 'inherit' && {
        textAlign: ownerState.align
    }, ownerState.noWrap && {
        overflow: 'hidden',
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap'
    }, ownerState.gutterBottom && {
        marginBottom: '0.35em'
    }, ownerState.paragraph && {
        marginBottom: 16
    })
);
const defaultVariantMapping = {
    h1: 'h1',
    h2: 'h2',
    h3: 'h3',
    h4: 'h4',
    h5: 'h5',
    h6: 'h6',
    subtitle1: 'h6',
    subtitle2: 'h6',
    body1: 'p',
    body2: 'p',
    inherit: 'p'
}; // TODO v6: deprecate these color values in v5.x and remove the transformation in v6
const colorTransformations = {
    primary: 'primary.main',
    textPrimary: 'text.primary',
    secondary: 'secondary.main',
    textSecondary: 'text.secondary',
    error: 'error.main'
};
const transformDeprecatedColors = (color)=>{
    return colorTransformations[color] || color;
};
const Typography = /*#__PURE__*/ _react.forwardRef(function Typography1(inProps, ref) {
    const themeProps = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiTypography'
    });
    const color = transformDeprecatedColors(themeProps.color);
    const props = _system.unstable_extendSxProp(_extendsDefault.default({
    }, themeProps, {
        color
    }));
    const { align ='inherit' , className , component , gutterBottom =false , noWrap =false , paragraph =false , variant ='body1' , variantMapping =defaultVariantMapping  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({
    }, props, {
        align,
        color,
        className,
        component,
        gutterBottom,
        noWrap,
        paragraph,
        variant,
        variantMapping
    });
    const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';
    const classes = useUtilityClasses(ownerState);
    return(/*#__PURE__*/ _jsxRuntime.jsx(TypographyRoot, _extendsDefault.default({
        as: Component,
        ref: ref,
        ownerState: ownerState,
        className: _clsxDefault.default(classes.root, className)
    }, other)));
});
Typography.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * Set the text-align on the component.
   * @default 'inherit'
   */ align: _propTypesDefault.default.oneOf([
        'center',
        'inherit',
        'justify',
        'left',
        'right'
    ]),
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * If `true`, the text will have a bottom margin.
   * @default false
   */ gutterBottom: _propTypesDefault.default.bool,
    /**
   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
   *
   * Note that text overflow can only happen with block or inline-block level elements
   * (the element needs to have a width in order to overflow).
   * @default false
   */ noWrap: _propTypesDefault.default.bool,
    /**
   * If `true`, the element will be a paragraph element.
   * @default false
   */ paragraph: _propTypesDefault.default.bool,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * Applies the theme typography styles.
   * @default 'body1'
   */ variant: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'body1',
            'body2',
            'button',
            'caption',
            'h1',
            'h2',
            'h3',
            'h4',
            'h5',
            'h6',
            'inherit',
            'overline',
            'subtitle1',
            'subtitle2'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The component maps the variant prop to a range of different HTML element types.
   * For instance, subtitle1 to `<h6>`.
   * If you wish to change that mapping, you can provide your own.
   * Alternatively, you can use the `component` prop.
   * @default {
   *   h1: 'h1',
   *   h2: 'h2',
   *   h3: 'h3',
   *   h4: 'h4',
   *   h5: 'h5',
   *   h6: 'h6',
   *   subtitle1: 'h6',
   *   subtitle2: 'h6',
   *   body1: 'p',
   *   body2: 'p',
   *   inherit: 'p',
   * }
   */ variantMapping: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .object
};
exports.default = Typography;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@babel/runtime/helpers/esm/extends":"bKAu6","react":"6TuXu","prop-types":"1tgq3","clsx":"eg1He","@mui/system":"ccIuz","@mui/core":"9b2I1","../styles/styled":"gqLeX","../styles/useThemeProps":"1cdc1","../utils/capitalize":"3YJ7J","./typographyClasses":"dUBBH","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dUBBH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTypographyUtilityClass", ()=>getTypographyUtilityClass
);
var _core = require("@mui/core");
function getTypographyUtilityClass(slot) {
    return _core.generateUtilityClass('MuiTypography', slot);
}
const typographyClasses = _core.generateUtilityClasses('MuiTypography', [
    'root',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'subtitle1',
    'subtitle2',
    'body1',
    'body2',
    'inherit',
    'button',
    'caption',
    'overline',
    'alignLeft',
    'alignRight',
    'alignCenter',
    'alignJustify',
    'noWrap',
    'gutterBottom',
    'paragraph'
]);
exports.default = typographyClasses;

},{"@mui/core":"9b2I1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"l0WhW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_buttonDefault.default
);
parcelHelpers.export(exports, "buttonClasses", ()=>_buttonClassesDefault.default
);
var _button = require("./Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _buttonClasses = require("./buttonClasses");
var _buttonClassesDefault = parcelHelpers.interopDefault(_buttonClasses);
parcelHelpers.exportAll(_buttonClasses, exports);

},{"./Button":"3oXez","./buttonClasses":"lAtaw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3oXez":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _core = require("@mui/core");
var _system = require("@mui/system");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _buttonBase = require("../ButtonBase");
var _buttonBaseDefault = parcelHelpers.interopDefault(_buttonBase);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _buttonClasses = require("./buttonClasses");
var _buttonClassesDefault = parcelHelpers.interopDefault(_buttonClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "children",
    "color",
    "component",
    "disabled",
    "disableElevation",
    "disableFocusRipple",
    "endIcon",
    "focusVisibleClassName",
    "fullWidth",
    "size",
    "startIcon",
    "type",
    "variant"
];
const useUtilityClasses = (ownerState)=>{
    const { color , disableElevation , fullWidth , size , variant , classes  } = ownerState;
    const slots = {
        root: [
            'root',
            variant,
            `${variant}${_capitalizeDefault.default(color)}`,
            `size${_capitalizeDefault.default(size)}`,
            `${variant}Size${_capitalizeDefault.default(size)}`,
            color === 'inherit' && 'colorInherit',
            disableElevation && 'disableElevation',
            fullWidth && 'fullWidth'
        ],
        label: [
            'label'
        ],
        startIcon: [
            'startIcon',
            `iconSize${_capitalizeDefault.default(size)}`
        ],
        endIcon: [
            'endIcon',
            `iconSize${_capitalizeDefault.default(size)}`
        ]
    };
    const composedClasses = _core.unstable_composeClasses(slots, _buttonClasses.getButtonUtilityClass, classes);
    return _extendsDefault.default({
    }, classes, composedClasses);
};
const commonIconStyles = (ownerState)=>_extendsDefault.default({
    }, ownerState.size === 'small' && {
        '& > *:nth-of-type(1)': {
            fontSize: 18
        }
    }, ownerState.size === 'medium' && {
        '& > *:nth-of-type(1)': {
            fontSize: 20
        }
    }, ownerState.size === 'large' && {
        '& > *:nth-of-type(1)': {
            fontSize: 22
        }
    })
;
const ButtonRoot = _styledDefault.default(_buttonBaseDefault.default, {
    shouldForwardProp: (prop)=>_styled.rootShouldForwardProp(prop) || prop === 'classes'
    ,
    name: 'MuiButton',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            styles[ownerState.variant],
            styles[`${ownerState.variant}${_capitalizeDefault.default(ownerState.color)}`],
            styles[`size${_capitalizeDefault.default(ownerState.size)}`],
            styles[`${ownerState.variant}Size${_capitalizeDefault.default(ownerState.size)}`],
            ownerState.color === 'inherit' && styles.colorInherit,
            ownerState.disableElevation && styles.disableElevation,
            ownerState.fullWidth && styles.fullWidth
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
    }, theme.typography.button, {
        minWidth: 64,
        padding: '6px 16px',
        borderRadius: theme.shape.borderRadius,
        transition: theme.transitions.create([
            'background-color',
            'box-shadow',
            'border-color',
            'color'
        ], {
            duration: theme.transitions.duration.short
        }),
        '&:hover': _extendsDefault.default({
            textDecoration: 'none',
            backgroundColor: _system.alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                backgroundColor: 'transparent'
            }
        }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
            backgroundColor: _system.alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                backgroundColor: 'transparent'
            }
        }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
            border: `1px solid ${theme.palette[ownerState.color].main}`,
            backgroundColor: _system.alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                backgroundColor: 'transparent'
            }
        }, ownerState.variant === 'contained' && {
            backgroundColor: theme.palette.grey.A100,
            boxShadow: theme.shadows[4],
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                boxShadow: theme.shadows[2],
                backgroundColor: theme.palette.grey[300]
            }
        }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
            backgroundColor: theme.palette[ownerState.color].dark,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                backgroundColor: theme.palette[ownerState.color].main
            }
        }),
        '&:active': _extendsDefault.default({
        }, ownerState.variant === 'contained' && {
            boxShadow: theme.shadows[8]
        }),
        [`&.${_buttonClassesDefault.default.focusVisible}`]: _extendsDefault.default({
        }, ownerState.variant === 'contained' && {
            boxShadow: theme.shadows[6]
        }),
        [`&.${_buttonClassesDefault.default.disabled}`]: _extendsDefault.default({
            color: theme.palette.action.disabled
        }, ownerState.variant === 'outlined' && {
            border: `1px solid ${theme.palette.action.disabledBackground}`
        }, ownerState.variant === 'outlined' && ownerState.color === 'secondary' && {
            border: `1px solid ${theme.palette.action.disabled}`
        }, ownerState.variant === 'contained' && {
            color: theme.palette.action.disabled,
            boxShadow: theme.shadows[0],
            backgroundColor: theme.palette.action.disabledBackground
        })
    }, ownerState.variant === 'text' && {
        padding: '6px 8px'
    }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
        color: theme.palette[ownerState.color].main
    }, ownerState.variant === 'outlined' && {
        padding: '5px 15px',
        border: `1px solid ${theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'}`
    }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
        color: theme.palette[ownerState.color].main,
        border: `1px solid ${_system.alpha(theme.palette[ownerState.color].main, 0.5)}`
    }, ownerState.variant === 'contained' && {
        color: theme.palette.getContrastText(theme.palette.grey[300]),
        backgroundColor: theme.palette.grey[300],
        boxShadow: theme.shadows[2]
    }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
        color: theme.palette[ownerState.color].contrastText,
        backgroundColor: theme.palette[ownerState.color].main
    }, ownerState.color === 'inherit' && {
        color: 'inherit',
        borderColor: 'currentColor'
    }, ownerState.size === 'small' && ownerState.variant === 'text' && {
        padding: '4px 5px',
        fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === 'large' && ownerState.variant === 'text' && {
        padding: '8px 11px',
        fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === 'small' && ownerState.variant === 'outlined' && {
        padding: '3px 9px',
        fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === 'large' && ownerState.variant === 'outlined' && {
        padding: '7px 21px',
        fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === 'small' && ownerState.variant === 'contained' && {
        padding: '4px 10px',
        fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === 'large' && ownerState.variant === 'contained' && {
        padding: '8px 22px',
        fontSize: theme.typography.pxToRem(15)
    }, ownerState.fullWidth && {
        width: '100%'
    })
, ({ ownerState  })=>ownerState.disableElevation && {
        boxShadow: 'none',
        '&:hover': {
            boxShadow: 'none'
        },
        [`&.${_buttonClassesDefault.default.focusVisible}`]: {
            boxShadow: 'none'
        },
        '&:active': {
            boxShadow: 'none'
        },
        [`&.${_buttonClassesDefault.default.disabled}`]: {
            boxShadow: 'none'
        }
    }
);
const ButtonStartIcon = _styledDefault.default('span', {
    name: 'MuiButton',
    slot: 'StartIcon',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.startIcon,
            styles[`iconSize${_capitalizeDefault.default(ownerState.size)}`]
        ];
    }
})(({ ownerState  })=>_extendsDefault.default({
        display: 'inherit',
        marginRight: 8,
        marginLeft: -4
    }, ownerState.size === 'small' && {
        marginLeft: -2
    }, commonIconStyles(ownerState))
);
const ButtonEndIcon = _styledDefault.default('span', {
    name: 'MuiButton',
    slot: 'EndIcon',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.endIcon,
            styles[`iconSize${_capitalizeDefault.default(ownerState.size)}`]
        ];
    }
})(({ ownerState  })=>_extendsDefault.default({
        display: 'inherit',
        marginRight: -4,
        marginLeft: 8
    }, ownerState.size === 'small' && {
        marginRight: -2
    }, commonIconStyles(ownerState))
);
const Button = /*#__PURE__*/ _react.forwardRef(function Button1(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiButton'
    });
    const { children , color ='primary' , component ='button' , disabled =false , disableElevation =false , disableFocusRipple =false , endIcon: endIconProp , focusVisibleClassName , fullWidth =false , size ='medium' , startIcon: startIconProp , type , variant ='text'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({
    }, props, {
        color,
        component,
        disabled,
        disableElevation,
        disableFocusRipple,
        fullWidth,
        size,
        type,
        variant
    });
    const classes = useUtilityClasses(ownerState);
    const startIcon = startIconProp && /*#__PURE__*/ _jsxRuntime.jsx(ButtonStartIcon, {
        className: classes.startIcon,
        ownerState: ownerState,
        children: startIconProp
    });
    const endIcon = endIconProp && /*#__PURE__*/ _jsxRuntime.jsx(ButtonEndIcon, {
        className: classes.endIcon,
        ownerState: ownerState,
        children: endIconProp
    });
    return(/*#__PURE__*/ _jsxRuntime.jsxs(ButtonRoot, _extendsDefault.default({
        ownerState: ownerState,
        component: component,
        disabled: disabled,
        focusRipple: !disableFocusRipple,
        focusVisibleClassName: _clsxDefault.default(classes.focusVisible, focusVisibleClassName),
        ref: ref,
        type: type
    }, other, {
        classes: classes,
        children: [
            startIcon,
            children,
            endIcon
        ]
    })));
});
Button.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'inherit',
            'primary',
            'secondary',
            'success',
            'error',
            'info',
            'warning'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * If `true`, the component is disabled.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, no elevation is used.
   * @default false
   */ disableElevation: _propTypesDefault.default.bool,
    /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */ disableFocusRipple: _propTypesDefault.default.bool,
    /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */ disableRipple: _propTypesDefault.default.bool,
    /**
   * Element placed after the children.
   */ endIcon: _propTypesDefault.default.node,
    /**
   * @ignore
   */ focusVisibleClassName: _propTypesDefault.default.string,
    /**
   * If `true`, the button will take up the full width of its container.
   * @default false
   */ fullWidth: _propTypesDefault.default.bool,
    /**
   * The URL to link to when the button is clicked.
   * If defined, an `a` element will be used as the root node.
   */ href: _propTypesDefault.default.string,
    /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'medium'
   */ size: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'small',
            'medium',
            'large'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * Element placed before the children.
   */ startIcon: _propTypesDefault.default.node,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * @ignore
   */ type: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.oneOf([
            'button',
            'reset',
            'submit'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The variant to use.
   * @default 'text'
   */ variant: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'contained',
            'outlined',
            'text'
        ]),
        _propTypesDefault.default.string
    ])
};
exports.default = Button;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@babel/runtime/helpers/esm/extends":"bKAu6","react":"6TuXu","prop-types":"1tgq3","clsx":"eg1He","@mui/core":"9b2I1","@mui/system":"ccIuz","../styles/styled":"gqLeX","../styles/useThemeProps":"1cdc1","../ButtonBase":"lbA1L","../utils/capitalize":"3YJ7J","./buttonClasses":"lAtaw","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lbA1L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_buttonBaseDefault.default
);
parcelHelpers.export(exports, "buttonBaseClasses", ()=>_buttonBaseClassesDefault.default
);
parcelHelpers.export(exports, "touchRippleClasses", ()=>_touchRippleClassesDefault.default
);
var _buttonBase = require("./ButtonBase");
var _buttonBaseDefault = parcelHelpers.interopDefault(_buttonBase);
var _buttonBaseClasses = require("./buttonBaseClasses");
var _buttonBaseClassesDefault = parcelHelpers.interopDefault(_buttonBaseClasses);
parcelHelpers.exportAll(_buttonBaseClasses, exports);
var _touchRippleClasses = require("./touchRippleClasses");
var _touchRippleClassesDefault = parcelHelpers.interopDefault(_touchRippleClasses);
parcelHelpers.exportAll(_touchRippleClasses, exports);

},{"./ButtonBase":"j8hxA","./buttonBaseClasses":"cjf8r","./touchRippleClasses":"jHogD","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"j8hxA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ButtonBaseRoot", ()=>ButtonBaseRoot
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _composeClasses = require("@mui/core/composeClasses");
var _composeClassesDefault = parcelHelpers.interopDefault(_composeClasses);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _useForkRef = require("../utils/useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _useEventCallback = require("../utils/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _useIsFocusVisible = require("../utils/useIsFocusVisible");
var _useIsFocusVisibleDefault = parcelHelpers.interopDefault(_useIsFocusVisible);
var _touchRipple = require("./TouchRipple");
var _touchRippleDefault = parcelHelpers.interopDefault(_touchRipple);
var _buttonBaseClasses = require("./buttonBaseClasses");
var _buttonBaseClassesDefault = parcelHelpers.interopDefault(_buttonBaseClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "action",
    "centerRipple",
    "children",
    "className",
    "component",
    "disabled",
    "disableRipple",
    "disableTouchRipple",
    "focusRipple",
    "focusVisibleClassName",
    "LinkComponent",
    "onBlur",
    "onClick",
    "onContextMenu",
    "onDragLeave",
    "onFocus",
    "onFocusVisible",
    "onKeyDown",
    "onKeyUp",
    "onMouseDown",
    "onMouseLeave",
    "onMouseUp",
    "onTouchEnd",
    "onTouchMove",
    "onTouchStart",
    "tabIndex",
    "TouchRippleProps",
    "type"
];
const useUtilityClasses = (ownerState)=>{
    const { disabled , focusVisible , focusVisibleClassName , classes  } = ownerState;
    const slots = {
        root: [
            'root',
            disabled && 'disabled',
            focusVisible && 'focusVisible'
        ]
    };
    const composedClasses = _composeClassesDefault.default(slots, _buttonBaseClasses.getButtonBaseUtilityClass, classes);
    if (focusVisible && focusVisibleClassName) composedClasses.root += ` ${focusVisibleClassName}`;
    return composedClasses;
};
const ButtonBaseRoot = _styledDefault.default('button', {
    name: 'MuiButtonBase',
    slot: 'Root',
    overridesResolver: (props, styles)=>styles.root
})({
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative',
    boxSizing: 'border-box',
    WebkitTapHighlightColor: 'transparent',
    backgroundColor: 'transparent',
    // Reset default value
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    border: 0,
    margin: 0,
    // Remove the margin in Safari
    borderRadius: 0,
    padding: 0,
    // Remove the padding in Firefox
    cursor: 'pointer',
    userSelect: 'none',
    verticalAlign: 'middle',
    MozAppearance: 'none',
    // Reset
    WebkitAppearance: 'none',
    // Reset
    textDecoration: 'none',
    // So we take precedent over the style of a native <a /> element.
    color: 'inherit',
    '&::-moz-focus-inner': {
        borderStyle: 'none' // Remove Firefox dotted outline.
    },
    [`&.${_buttonBaseClassesDefault.default.disabled}`]: {
        pointerEvents: 'none',
        // Disable link interactions
        cursor: 'default'
    },
    '@media print': {
        colorAdjust: 'exact'
    }
});
/**
 * `ButtonBase` contains as few styles as possible.
 * It aims to be a simple building block for creating a button.
 * It contains a load of style reset and some focus/ripple logic.
 */ const ButtonBase = /*#__PURE__*/ _react.forwardRef(function ButtonBase1(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiButtonBase'
    });
    const { action , centerRipple =false , children , className , component ='button' , disabled =false , disableRipple =false , disableTouchRipple =false , focusRipple =false , LinkComponent ='a' , onBlur , onClick , onContextMenu , onDragLeave , onFocus , onFocusVisible , onKeyDown , onKeyUp , onMouseDown , onMouseLeave , onMouseUp , onTouchEnd , onTouchMove , onTouchStart , tabIndex =0 , TouchRippleProps , type  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const buttonRef = _react.useRef(null);
    const rippleRef = _react.useRef(null);
    const { isFocusVisibleRef , onFocus: handleFocusVisible , onBlur: handleBlurVisible , ref: focusVisibleRef  } = _useIsFocusVisibleDefault.default();
    const [focusVisible, setFocusVisible] = _react.useState(false);
    if (disabled && focusVisible) setFocusVisible(false);
    _react.useImperativeHandle(action, ()=>({
            focusVisible: ()=>{
                setFocusVisible(true);
                buttonRef.current.focus();
            }
        })
    , []);
    _react.useEffect(()=>{
        if (focusVisible && focusRipple && !disableRipple) rippleRef.current.pulsate();
    }, [
        disableRipple,
        focusRipple,
        focusVisible
    ]);
    function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
        return _useEventCallbackDefault.default((event)=>{
            if (eventCallback) eventCallback(event);
            const ignore = skipRippleAction;
            if (!ignore && rippleRef.current) rippleRef.current[rippleAction](event);
            return true;
        });
    }
    const handleMouseDown = useRippleHandler('start', onMouseDown);
    const handleContextMenu = useRippleHandler('stop', onContextMenu);
    const handleDragLeave = useRippleHandler('stop', onDragLeave);
    const handleMouseUp = useRippleHandler('stop', onMouseUp);
    const handleMouseLeave = useRippleHandler('stop', (event)=>{
        if (focusVisible) event.preventDefault();
        if (onMouseLeave) onMouseLeave(event);
    });
    const handleTouchStart = useRippleHandler('start', onTouchStart);
    const handleTouchEnd = useRippleHandler('stop', onTouchEnd);
    const handleTouchMove = useRippleHandler('stop', onTouchMove);
    const handleBlur = useRippleHandler('stop', (event)=>{
        handleBlurVisible(event);
        if (isFocusVisibleRef.current === false) setFocusVisible(false);
        if (onBlur) onBlur(event);
    }, false);
    const handleFocus = _useEventCallbackDefault.default((event)=>{
        // Fix for https://github.com/facebook/react/issues/7769
        if (!buttonRef.current) buttonRef.current = event.currentTarget;
        handleFocusVisible(event);
        if (isFocusVisibleRef.current === true) {
            setFocusVisible(true);
            if (onFocusVisible) onFocusVisible(event);
        }
        if (onFocus) onFocus(event);
    });
    const isNonNativeButton = ()=>{
        const button = buttonRef.current;
        return component && component !== 'button' && !(button.tagName === 'A' && button.href);
    };
    /**
   * IE11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat
   */ const keydownRef = _react.useRef(false);
    const handleKeyDown = _useEventCallbackDefault.default((event)=>{
        // Check if key is already down to avoid repeats being counted as multiple activations
        if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {
            keydownRef.current = true;
            rippleRef.current.stop(event, ()=>{
                rippleRef.current.start(event);
            });
        }
        if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') event.preventDefault();
        if (onKeyDown) onKeyDown(event);
         // Keyboard accessibility for non interactive elements
        if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
            event.preventDefault();
            if (onClick) onClick(event);
        }
    });
    const handleKeyUp = _useEventCallbackDefault.default((event)=>{
        // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
        // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
        if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {
            keydownRef.current = false;
            rippleRef.current.stop(event, ()=>{
                rippleRef.current.pulsate(event);
            });
        }
        if (onKeyUp) onKeyUp(event);
         // Keyboard accessibility for non interactive elements
        if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) onClick(event);
    });
    let ComponentProp = component;
    if (ComponentProp === 'button' && (other.href || other.to)) ComponentProp = LinkComponent;
    const buttonProps = {
    };
    if (ComponentProp === 'button') {
        buttonProps.type = type === undefined ? 'button' : type;
        buttonProps.disabled = disabled;
    } else {
        if (!other.href && !other.to) buttonProps.role = 'button';
        if (disabled) buttonProps['aria-disabled'] = disabled;
    }
    const handleOwnRef = _useForkRefDefault.default(focusVisibleRef, buttonRef);
    const handleRef = _useForkRefDefault.default(ref, handleOwnRef);
    const [mountedState, setMountedState] = _react.useState(false);
    _react.useEffect(()=>{
        setMountedState(true);
    }, []);
    const enableTouchRipple = mountedState && !disableRipple && !disabled;
    // eslint-disable-next-line react-hooks/rules-of-hooks
    _react.useEffect(()=>{
        if (enableTouchRipple && !rippleRef.current) console.error([
            'MUI: The `component` prop provided to ButtonBase is invalid.',
            'Please make sure the children prop is rendered in this custom component.'
        ].join('\n'));
    }, [
        enableTouchRipple
    ]);
    const ownerState = _extendsDefault.default({
    }, props, {
        centerRipple,
        component,
        disabled,
        disableRipple,
        disableTouchRipple,
        focusRipple,
        tabIndex,
        focusVisible
    });
    const classes = useUtilityClasses(ownerState);
    return(/*#__PURE__*/ _jsxRuntime.jsxs(ButtonBaseRoot, _extendsDefault.default({
        as: ComponentProp,
        className: _clsxDefault.default(classes.root, className),
        ownerState: ownerState,
        onBlur: handleBlur,
        onClick: onClick,
        onContextMenu: handleContextMenu,
        onFocus: handleFocus,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp,
        onMouseDown: handleMouseDown,
        onMouseLeave: handleMouseLeave,
        onMouseUp: handleMouseUp,
        onDragLeave: handleDragLeave,
        onTouchEnd: handleTouchEnd,
        onTouchMove: handleTouchMove,
        onTouchStart: handleTouchStart,
        ref: handleRef,
        tabIndex: disabled ? -1 : tabIndex,
        type: type
    }, buttonProps, other, {
        children: [
            children,
            enableTouchRipple ? /*#__PURE__*/ /* TouchRipple is only needed client-side, x2 boost on the server. */ _jsxRuntime.jsx(_touchRippleDefault.default, _extendsDefault.default({
                ref: rippleRef,
                center: centerRipple
            }, TouchRippleProps)) : null
        ]
    })));
});
ButtonBase.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * A ref for imperative actions.
   * It currently only supports `focusVisible()` action.
   */ action: _utils.refType,
    /**
   * If `true`, the ripples are centered.
   * They won't start at the cursor interaction position.
   * @default false
   */ centerRipple: _propTypesDefault.default.bool,
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _utils.elementTypeAcceptingRef,
    /**
   * If `true`, the component is disabled.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */ disableRipple: _propTypesDefault.default.bool,
    /**
   * If `true`, the touch ripple effect is disabled.
   * @default false
   */ disableTouchRipple: _propTypesDefault.default.bool,
    /**
   * If `true`, the base button will have a keyboard focus ripple.
   * @default false
   */ focusRipple: _propTypesDefault.default.bool,
    /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */ focusVisibleClassName: _propTypesDefault.default.string,
    /**
   * @ignore
   */ href: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .any,
    /**
   * The component used to render a link when the `href` prop is provided.
   * @default 'a'
   */ LinkComponent: _propTypesDefault.default.elementType,
    /**
   * @ignore
   */ onBlur: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onClick: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onContextMenu: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onDragLeave: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onFocus: _propTypesDefault.default.func,
    /**
   * Callback fired when the component is focused with a keyboard.
   * We trigger a `onFocus` callback too.
   */ onFocusVisible: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onKeyDown: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onKeyUp: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onMouseDown: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onMouseLeave: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onMouseUp: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onTouchEnd: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onTouchMove: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onTouchStart: _propTypesDefault.default.func,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * @default 0
   */ tabIndex: _propTypesDefault.default.number,
    /**
   * Props applied to the `TouchRipple` element.
   */ TouchRippleProps: _propTypesDefault.default.object,
    /**
   * @ignore
   */ type: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.oneOf([
            'button',
            'reset',
            'submit'
        ]),
        _propTypesDefault.default.string
    ])
};
exports.default = ButtonBase;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","react":"6TuXu","prop-types":"1tgq3","clsx":"eg1He","@mui/utils":"9YmNw","@mui/core/composeClasses":"e4OCP","../styles/styled":"gqLeX","../styles/useThemeProps":"1cdc1","../utils/useForkRef":"8iBvK","../utils/useEventCallback":"6YYQf","../utils/useIsFocusVisible":"gcCNK","./TouchRipple":"gRrBe","./buttonBaseClasses":"cjf8r","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8iBvK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_useForkRef;

},{"@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6YYQf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_useEventCallback;

},{"@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gcCNK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_useIsFocusVisible;

},{"@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gRrBe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DELAY_RIPPLE", ()=>DELAY_RIPPLE
);
parcelHelpers.export(exports, "TouchRippleRoot", ()=>TouchRippleRoot
);
parcelHelpers.export(exports, "TouchRippleRipple", ()=>TouchRippleRipple
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _reactTransitionGroup = require("react-transition-group");
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _system = require("@mui/system");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _ripple = require("./Ripple");
var _rippleDefault = parcelHelpers.interopDefault(_ripple);
var _touchRippleClasses = require("./touchRippleClasses");
var _touchRippleClassesDefault = parcelHelpers.interopDefault(_touchRippleClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "center",
    "classes",
    "className"
];
let _ = (t)=>t
, _t, _t2, _t3, _t4;
const DURATION = 550;
const DELAY_RIPPLE = 80;
const enterKeyframe = _system.keyframes(_t || (_t = _`\n  0% {\n    transform: scale(0);\n    opacity: 0.1;\n  }\n\n  100% {\n    transform: scale(1);\n    opacity: 0.3;\n  }\n`));
const exitKeyframe = _system.keyframes(_t2 || (_t2 = _`\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n  }\n`));
const pulsateKeyframe = _system.keyframes(_t3 || (_t3 = _`\n  0% {\n    transform: scale(1);\n  }\n\n  50% {\n    transform: scale(0.92);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n`));
const TouchRippleRoot = _styledDefault.default('span', {
    name: 'MuiTouchRipple',
    slot: 'Root',
    skipSx: true
})({
    overflow: 'hidden',
    pointerEvents: 'none',
    position: 'absolute',
    zIndex: 0,
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    borderRadius: 'inherit'
}); // This `styled()` function invokes keyframes. `styled-components` only supports keyframes
const TouchRippleRipple = _styledDefault.default(_rippleDefault.default, {
    name: 'MuiTouchRipple',
    slot: 'Ripple'
})(_t4 || (_t4 = _`\n  opacity: 0;\n  position: absolute;\n\n  &.${0} {\n    opacity: 0.3;\n    transform: scale(1);\n    animation-name: ${0};\n    animation-duration: ${0}ms;\n    animation-timing-function: ${0};\n  }\n\n  &.${0} {\n    animation-duration: ${0}ms;\n  }\n\n  & .${0} {\n    opacity: 1;\n    display: block;\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n    background-color: currentColor;\n  }\n\n  & .${0} {\n    opacity: 0;\n    animation-name: ${0};\n    animation-duration: ${0}ms;\n    animation-timing-function: ${0};\n  }\n\n  & .${0} {\n    position: absolute;\n    /* @noflip */\n    left: 0px;\n    top: 0;\n    animation-name: ${0};\n    animation-duration: 2500ms;\n    animation-timing-function: ${0};\n    animation-iteration-count: infinite;\n    animation-delay: 200ms;\n  }\n`), _touchRippleClassesDefault.default.rippleVisible, enterKeyframe, DURATION, ({ theme  })=>theme.transitions.easing.easeInOut
, _touchRippleClassesDefault.default.ripplePulsate, ({ theme  })=>theme.transitions.duration.shorter
, _touchRippleClassesDefault.default.child, _touchRippleClassesDefault.default.childLeaving, exitKeyframe, DURATION, ({ theme  })=>theme.transitions.easing.easeInOut
, _touchRippleClassesDefault.default.childPulsate, pulsateKeyframe, ({ theme  })=>theme.transitions.easing.easeInOut
);
/**
 * @ignore - internal component.
 *
 * TODO v5: Make private
 */ const TouchRipple = /*#__PURE__*/ _react.forwardRef(function TouchRipple1(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiTouchRipple'
    });
    const { center: centerProp = false , classes ={
    } , className  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const [ripples, setRipples] = _react.useState([]);
    const nextKey = _react.useRef(0);
    const rippleCallback = _react.useRef(null);
    _react.useEffect(()=>{
        if (rippleCallback.current) {
            rippleCallback.current();
            rippleCallback.current = null;
        }
    }, [
        ripples
    ]); // Used to filter out mouse emulated events on mobile.
    const ignoringMouseDown = _react.useRef(false); // We use a timer in order to only show the ripples for touch "click" like events.
    // We don't want to display the ripple for touch scroll events.
    const startTimer = _react.useRef(null); // This is the hook called once the previous timeout is ready.
    const startTimerCommit = _react.useRef(null);
    const container = _react.useRef(null);
    _react.useEffect(()=>{
        return ()=>{
            clearTimeout(startTimer.current);
        };
    }, []);
    const startCommit = _react.useCallback((params)=>{
        const { pulsate , rippleX , rippleY , rippleSize , cb  } = params;
        setRipples((oldRipples)=>[
                ...oldRipples,
                /*#__PURE__*/ _jsxRuntime.jsx(TouchRippleRipple, {
                    classes: {
                        ripple: _clsxDefault.default(classes.ripple, _touchRippleClassesDefault.default.ripple),
                        rippleVisible: _clsxDefault.default(classes.rippleVisible, _touchRippleClassesDefault.default.rippleVisible),
                        ripplePulsate: _clsxDefault.default(classes.ripplePulsate, _touchRippleClassesDefault.default.ripplePulsate),
                        child: _clsxDefault.default(classes.child, _touchRippleClassesDefault.default.child),
                        childLeaving: _clsxDefault.default(classes.childLeaving, _touchRippleClassesDefault.default.childLeaving),
                        childPulsate: _clsxDefault.default(classes.childPulsate, _touchRippleClassesDefault.default.childPulsate)
                    },
                    timeout: DURATION,
                    pulsate: pulsate,
                    rippleX: rippleX,
                    rippleY: rippleY,
                    rippleSize: rippleSize
                }, nextKey.current)
            ]
        );
        nextKey.current += 1;
        rippleCallback.current = cb;
    }, [
        classes
    ]);
    const start = _react.useCallback((event = {
    }, options = {
    }, cb)=>{
        const { pulsate =false , center =centerProp || options.pulsate , fakeElement =false // For test purposes
          } = options;
        if (event.type === 'mousedown' && ignoringMouseDown.current) {
            ignoringMouseDown.current = false;
            return;
        }
        if (event.type === 'touchstart') ignoringMouseDown.current = true;
        const element = fakeElement ? null : container.current;
        const rect = element ? element.getBoundingClientRect() : {
            width: 0,
            height: 0,
            left: 0,
            top: 0
        }; // Get the size of the ripple
        let rippleX;
        let rippleY;
        let rippleSize;
        if (center || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
            rippleX = Math.round(rect.width / 2);
            rippleY = Math.round(rect.height / 2);
        } else {
            const { clientX , clientY  } = event.touches ? event.touches[0] : event;
            rippleX = Math.round(clientX - rect.left);
            rippleY = Math.round(clientY - rect.top);
        }
        if (center) {
            rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3); // For some reason the animation is broken on Mobile Chrome if the size is even.
            if (rippleSize % 2 === 0) rippleSize += 1;
        } else {
            const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
            const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
            rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
        } // Touche devices
        if (event.touches) // check that this isn't another touchstart due to multitouch
        // otherwise we will only clear a single timer when unmounting while two
        // are running
        {
            if (startTimerCommit.current === null) {
                // Prepare the ripple effect.
                startTimerCommit.current = ()=>{
                    startCommit({
                        pulsate,
                        rippleX,
                        rippleY,
                        rippleSize,
                        cb
                    });
                }; // Delay the execution of the ripple effect.
                startTimer.current = setTimeout(()=>{
                    if (startTimerCommit.current) {
                        startTimerCommit.current();
                        startTimerCommit.current = null;
                    }
                }, DELAY_RIPPLE); // We have to make a tradeoff with this value.
            }
        } else startCommit({
            pulsate,
            rippleX,
            rippleY,
            rippleSize,
            cb
        });
    }, [
        centerProp,
        startCommit
    ]);
    const pulsate = _react.useCallback(()=>{
        start({
        }, {
            pulsate: true
        });
    }, [
        start
    ]);
    const stop = _react.useCallback((event, cb)=>{
        clearTimeout(startTimer.current); // The touch interaction occurs too quickly.
        // We still want to show ripple effect.
        if (event.type === 'touchend' && startTimerCommit.current) {
            startTimerCommit.current();
            startTimerCommit.current = null;
            startTimer.current = setTimeout(()=>{
                stop(event, cb);
            });
            return;
        }
        startTimerCommit.current = null;
        setRipples((oldRipples)=>{
            if (oldRipples.length > 0) return oldRipples.slice(1);
            return oldRipples;
        });
        rippleCallback.current = cb;
    }, []);
    _react.useImperativeHandle(ref, ()=>({
            pulsate,
            start,
            stop
        })
    , [
        pulsate,
        start,
        stop
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(TouchRippleRoot, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, _touchRippleClassesDefault.default.root, className),
        ref: container
    }, other, {
        children: /*#__PURE__*/ _jsxRuntime.jsx(_reactTransitionGroup.TransitionGroup, {
            component: null,
            exit: true,
            children: ripples
        })
    })));
});
TouchRipple.propTypes = {
    /**
   * If `true`, the ripple starts at the center of the component
   * rather than at the point of interaction.
   */ center: _propTypesDefault.default.bool,
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string
};
exports.default = TouchRipple;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","react":"6TuXu","prop-types":"1tgq3","react-transition-group":"gQu97","clsx":"eg1He","@mui/system":"ccIuz","../styles/styled":"gqLeX","../styles/useThemeProps":"1cdc1","./Ripple":"lyQib","./touchRippleClasses":"jHogD","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gQu97":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CSSTransition", ()=>_csstransitionDefault.default
);
parcelHelpers.export(exports, "ReplaceTransition", ()=>_replaceTransitionDefault.default
);
parcelHelpers.export(exports, "SwitchTransition", ()=>_switchTransitionDefault.default
);
parcelHelpers.export(exports, "TransitionGroup", ()=>_transitionGroupDefault.default
);
parcelHelpers.export(exports, "Transition", ()=>_transitionDefault.default
);
parcelHelpers.export(exports, "config", ()=>_configDefault.default
);
var _csstransition = require("./CSSTransition");
var _csstransitionDefault = parcelHelpers.interopDefault(_csstransition);
var _replaceTransition = require("./ReplaceTransition");
var _replaceTransitionDefault = parcelHelpers.interopDefault(_replaceTransition);
var _switchTransition = require("./SwitchTransition");
var _switchTransitionDefault = parcelHelpers.interopDefault(_switchTransition);
var _transitionGroup = require("./TransitionGroup");
var _transitionGroupDefault = parcelHelpers.interopDefault(_transitionGroup);
var _transition = require("./Transition");
var _transitionDefault = parcelHelpers.interopDefault(_transition);
var _config = require("./config");
var _configDefault = parcelHelpers.interopDefault(_config);

},{"./CSSTransition":"echQq","./ReplaceTransition":"8sH79","./SwitchTransition":"2WsGH","./TransitionGroup":"lIDMU","./Transition":"6qqDo","./config":"eRNqr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"echQq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _inheritsLoose = require("@babel/runtime/helpers/esm/inheritsLoose");
var _inheritsLooseDefault = parcelHelpers.interopDefault(_inheritsLoose);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _addClass = require("dom-helpers/addClass");
var _addClassDefault = parcelHelpers.interopDefault(_addClass);
var _removeClass = require("dom-helpers/removeClass");
var _removeClassDefault = parcelHelpers.interopDefault(_removeClass);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _transition = require("./Transition");
var _transitionDefault = parcelHelpers.interopDefault(_transition);
var _propTypes1 = require("./utils/PropTypes");
var _addClass1 = function addClass(node, classes) {
    return node && classes && classes.split(' ').forEach(function(c) {
        return _addClassDefault.default(node, c);
    });
};
var removeClass = function removeClass1(node, classes) {
    return node && classes && classes.split(' ').forEach(function(c) {
        return _removeClassDefault.default(node, c);
    });
};
/**
 * A transition component inspired by the excellent
 * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should
 * use it if you're using CSS transitions or animations. It's built upon the
 * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
 * component, so it inherits all of its props.
 *
 * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
 * and `exit` states of the transition. The first class is applied and then a
 * second `*-active` class in order to activate the CSS transition. After the
 * transition, matching `*-done` class names are applied to persist the
 * transition state.
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
 *         <div>
 *           {"I'll receive my-node-* classes"}
 *         </div>
 *       </CSSTransition>
 *       <button type="button" onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the `in` prop is set to `true`, the child component will first receive
 * the class `example-enter`, then the `example-enter-active` will be added in
 * the next tick. `CSSTransition` [forces a
 * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
 * between before adding the `example-enter-active`. This is an important trick
 * because it allows us to transition between `example-enter` and
 * `example-enter-active` even though they were added immediately one after
 * another. Most notably, this is what makes it possible for us to animate
 * _appearance_.
 *
 * ```css
 * .my-node-enter {
 *   opacity: 0;
 * }
 * .my-node-enter-active {
 *   opacity: 1;
 *   transition: opacity 200ms;
 * }
 * .my-node-exit {
 *   opacity: 1;
 * }
 * .my-node-exit-active {
 *   opacity: 0;
 *   transition: opacity 200ms;
 * }
 * ```
 *
 * `*-active` classes represent which styles you want to animate **to**, so it's
 * important to add `transition` declaration only to them, otherwise transitions
 * might not behave as intended! This might not be obvious when the transitions
 * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in
 * the example above (minus `transition`), but it becomes apparent in more
 * complex transitions.
 *
 * **Note**: If you're using the
 * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)
 * prop, make sure to define styles for `.appear-*` classes as well.
 */ var CSSTransition1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLooseDefault.default(CSSTransition2, _React$Component);
    function CSSTransition2() {
        var _this;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        _this = _React$Component.call.apply(_React$Component, [
            this
        ].concat(args)) || this;
        _this.appliedClasses = {
            appear: {
            },
            enter: {
            },
            exit: {
            }
        };
        _this.onEnter = function(maybeNode, maybeAppearing) {
            var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument[0], appearing = _this$resolveArgument[1];
            _this.removeClasses(node, 'exit');
            _this.addClass(node, appearing ? 'appear' : 'enter', 'base');
            if (_this.props.onEnter) _this.props.onEnter(maybeNode, maybeAppearing);
        };
        _this.onEntering = function(maybeNode, maybeAppearing) {
            var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument2[0], appearing = _this$resolveArgument2[1];
            var type = appearing ? 'appear' : 'enter';
            _this.addClass(node, type, 'active');
            if (_this.props.onEntering) _this.props.onEntering(maybeNode, maybeAppearing);
        };
        _this.onEntered = function(maybeNode, maybeAppearing) {
            var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument3[0], appearing = _this$resolveArgument3[1];
            var type = appearing ? 'appear' : 'enter';
            _this.removeClasses(node, type);
            _this.addClass(node, type, 'done');
            if (_this.props.onEntered) _this.props.onEntered(maybeNode, maybeAppearing);
        };
        _this.onExit = function(maybeNode) {
            var _this$resolveArgument4 = _this.resolveArguments(maybeNode), node = _this$resolveArgument4[0];
            _this.removeClasses(node, 'appear');
            _this.removeClasses(node, 'enter');
            _this.addClass(node, 'exit', 'base');
            if (_this.props.onExit) _this.props.onExit(maybeNode);
        };
        _this.onExiting = function(maybeNode) {
            var _this$resolveArgument5 = _this.resolveArguments(maybeNode), node = _this$resolveArgument5[0];
            _this.addClass(node, 'exit', 'active');
            if (_this.props.onExiting) _this.props.onExiting(maybeNode);
        };
        _this.onExited = function(maybeNode) {
            var _this$resolveArgument6 = _this.resolveArguments(maybeNode), node = _this$resolveArgument6[0];
            _this.removeClasses(node, 'exit');
            _this.addClass(node, 'exit', 'done');
            if (_this.props.onExited) _this.props.onExited(maybeNode);
        };
        _this.resolveArguments = function(maybeNode, maybeAppearing) {
            return _this.props.nodeRef ? [
                _this.props.nodeRef.current,
                maybeNode
            ] // here `maybeNode` is actually `appearing`
             : [
                maybeNode,
                maybeAppearing
            ];
        };
        _this.getClassNames = function(type) {
            var classNames = _this.props.classNames;
            var isStringClassNames = typeof classNames === 'string';
            var prefix = isStringClassNames && classNames ? classNames + "-" : '';
            var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];
            var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
            var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
            return {
                baseClassName: baseClassName,
                activeClassName: activeClassName,
                doneClassName: doneClassName
            };
        };
        return _this;
    }
    var _proto = CSSTransition2.prototype;
    _proto.addClass = function addClass1(node, type, phase) {
        var className = this.getClassNames(type)[phase + "ClassName"];
        var _this$getClassNames = this.getClassNames('enter'), doneClassName = _this$getClassNames.doneClassName;
        if (type === 'appear' && phase === 'done' && doneClassName) className += " " + doneClassName;
         // This is to force a repaint,
        // which is necessary in order to transition styles when adding a class name.
        if (phase === 'active') /* eslint-disable no-unused-expressions */ node && node.scrollTop;
        if (className) {
            this.appliedClasses[type][phase] = className;
            _addClass1(node, className);
        }
    };
    _proto.removeClasses = function removeClasses(node, type) {
        var _this$appliedClasses$ = this.appliedClasses[type], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active, doneClassName = _this$appliedClasses$.done;
        this.appliedClasses[type] = {
        };
        if (baseClassName) removeClass(node, baseClassName);
        if (activeClassName) removeClass(node, activeClassName);
        if (doneClassName) removeClass(node, doneClassName);
    };
    _proto.render = function render() {
        var _this$props = this.props, _ = _this$props.classNames, props = _objectWithoutPropertiesLooseDefault.default(_this$props, [
            "classNames"
        ]);
        return(/*#__PURE__*/ _reactDefault.default.createElement(_transitionDefault.default, _extendsDefault.default({
        }, props, {
            onEnter: this.onEnter,
            onEntered: this.onEntered,
            onEntering: this.onEntering,
            onExit: this.onExit,
            onExiting: this.onExiting,
            onExited: this.onExited
        })));
    };
    return CSSTransition2;
}(_reactDefault.default.Component);
CSSTransition1.defaultProps = {
    classNames: ''
};
CSSTransition1.propTypes = _extendsDefault.default({
}, _transitionDefault.default.propTypes, {
    /**
   * The animation classNames applied to the component as it appears, enters,
   * exits or has finished the transition. A single name can be provided, which
   * will be suffixed for each stage, e.g. `classNames="fade"` applies:
   *
   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
   *
   * A few details to note about how these classes are applied:
   *
   * 1. They are _joined_ with the ones that are already defined on the child
   *    component, so if you want to add some base styles, you can use
   *    `className` without worrying that it will be overridden.
   *
   * 2. If the transition component mounts with `in={false}`, no classes are
   *    applied yet. You might be expecting `*-exit-done`, but if you think
   *    about it, a component cannot finish exiting if it hasn't entered yet.
   *
   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
   *    allows you to define different behavior for when appearing is done and
   *    when regular entering is done, using selectors like
   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
   *    an epic entrance animation when element first appears in the DOM using
   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
   *    simply use `fade-enter-done` for defining both cases.
   *
   * Each individual classNames can also be specified independently like:
   *
   * ```js
   * classNames={{
   *  appear: 'my-appear',
   *  appearActive: 'my-active-appear',
   *  appearDone: 'my-done-appear',
   *  enter: 'my-enter',
   *  enterActive: 'my-active-enter',
   *  enterDone: 'my-done-enter',
   *  exit: 'my-exit',
   *  exitActive: 'my-active-exit',
   *  exitDone: 'my-done-exit',
   * }}
   * ```
   *
   * If you want to set these classes using CSS Modules:
   *
   * ```js
   * import styles from './styles.css';
   * ```
   *
   * you might want to use camelCase in your CSS file, that way could simply
   * spread them instead of listing them one by one:
   *
   * ```js
   * classNames={{ ...styles }}
   * ```
   *
   * @type {string | {
   *  appear?: string,
   *  appearActive?: string,
   *  appearDone?: string,
   *  enter?: string,
   *  enterActive?: string,
   *  enterDone?: string,
   *  exit?: string,
   *  exitActive?: string,
   *  exitDone?: string,
   * }}
   */ classNames: _propTypes1.classNamesShape,
    /**
   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
   * applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */ onEnter: _propTypesDefault.default.func,
    /**
   * A `<Transition>` callback fired immediately after the 'enter-active' or
   * 'appear-active' class is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */ onEntering: _propTypesDefault.default.func,
    /**
   * A `<Transition>` callback fired immediately after the 'enter' or
   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */ onEntered: _propTypesDefault.default.func,
    /**
   * A `<Transition>` callback fired immediately after the 'exit' class is
   * applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */ onExit: _propTypesDefault.default.func,
    /**
   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */ onExiting: _propTypesDefault.default.func,
    /**
   * A `<Transition>` callback fired immediately after the 'exit' classes
   * are **removed** and the `exit-done` class is added to the DOM node.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */ onExited: _propTypesDefault.default.func
});
exports.default = CSSTransition1;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@babel/runtime/helpers/esm/inheritsLoose":"eO0be","prop-types":"1tgq3","dom-helpers/addClass":"72Fep","dom-helpers/removeClass":"i3BZq","react":"6TuXu","./Transition":"6qqDo","./utils/PropTypes":"da2hb","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eO0be":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setPrototypeOfJs = require("./setPrototypeOf.js");
var _setPrototypeOfJsDefault = parcelHelpers.interopDefault(_setPrototypeOfJs);
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOfJsDefault.default(subClass, superClass);
}
exports.default = _inheritsLoose;

},{"./setPrototypeOf.js":"83cMx","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"83cMx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf1(o1, p1) {
        o1.__proto__ = p1;
        return o1;
    };
    return _setPrototypeOf(o, p);
}
exports.default = _setPrototypeOf;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"72Fep":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hasClass = require("./hasClass");
var _hasClassDefault = parcelHelpers.interopDefault(_hasClass);
function addClass(element, className) {
    if (element.classList) element.classList.add(className);
    else if (!_hasClassDefault.default(element, className)) {
        if (typeof element.className === 'string') element.className = element.className + " " + className;
        else element.setAttribute('class', (element.className && element.className.baseVal || '') + " " + className);
    }
}
exports.default = addClass;

},{"./hasClass":"jjbyQ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jjbyQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function hasClass(element, className) {
    if (element.classList) return !!className && element.classList.contains(className);
    return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
}
exports.default = hasClass;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"i3BZq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function replaceClassName(origClass, classToRemove) {
    return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
}
function removeClass(element, className) {
    if (element.classList) element.classList.remove(className);
    else if (typeof element.className === 'string') element.className = replaceClassName(element.className, className);
    else element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
}
exports.default = removeClass;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6qqDo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UNMOUNTED", ()=>UNMOUNTED
);
parcelHelpers.export(exports, "EXITED", ()=>EXITED
);
parcelHelpers.export(exports, "ENTERING", ()=>ENTERING
);
parcelHelpers.export(exports, "ENTERED", ()=>ENTERED
);
parcelHelpers.export(exports, "EXITING", ()=>EXITING
);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _inheritsLoose = require("@babel/runtime/helpers/esm/inheritsLoose");
var _inheritsLooseDefault = parcelHelpers.interopDefault(_inheritsLoose);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
var _config = require("./config");
var _configDefault = parcelHelpers.interopDefault(_config);
var _propTypes1 = require("./utils/PropTypes");
var _transitionGroupContext = require("./TransitionGroupContext");
var _transitionGroupContextDefault = parcelHelpers.interopDefault(_transitionGroupContext);
var UNMOUNTED = 'unmounted';
var EXITED = 'exited';
var ENTERING = 'entering';
var ENTERED = 'entered';
var EXITING = 'exiting';
/**
 * The Transition component lets you describe a transition from one component
 * state to another _over time_ with a simple declarative API. Most commonly
 * it's used to animate the mounting and unmounting of a component, but can also
 * be used to describe in-place transition states as well.
 *
 * ---
 *
 * **Note**: `Transition` is a platform-agnostic base component. If you're using
 * transitions in CSS, you'll probably want to use
 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
 * instead. It inherits all the features of `Transition`, but contains
 * additional features necessary to play nice with CSS transitions (hence the
 * name of the component).
 *
 * ---
 *
 * By default the `Transition` component does not alter the behavior of the
 * component it renders, it only tracks "enter" and "exit" states for the
 * components. It's up to you to give meaning and effect to those states. For
 * example we can add styles to a component when it enters or exits:
 *
 * ```jsx
 * import { Transition } from 'react-transition-group';
 *
 * const duration = 300;
 *
 * const defaultStyle = {
 *   transition: `opacity ${duration}ms ease-in-out`,
 *   opacity: 0,
 * }
 *
 * const transitionStyles = {
 *   entering: { opacity: 1 },
 *   entered:  { opacity: 1 },
 *   exiting:  { opacity: 0 },
 *   exited:  { opacity: 0 },
 * };
 *
 * const Fade = ({ in: inProp }) => (
 *   <Transition in={inProp} timeout={duration}>
 *     {state => (
 *       <div style={{
 *         ...defaultStyle,
 *         ...transitionStyles[state]
 *       }}>
 *         I'm a fade Transition!
 *       </div>
 *     )}
 *   </Transition>
 * );
 * ```
 *
 * There are 4 main states a Transition can be in:
 *  - `'entering'`
 *  - `'entered'`
 *  - `'exiting'`
 *  - `'exited'`
 *
 * Transition state is toggled via the `in` prop. When `true` the component
 * begins the "Enter" stage. During this stage, the component will shift from
 * its current transition state, to `'entering'` for the duration of the
 * transition and then to the `'entered'` stage once it's complete. Let's take
 * the following example (we'll use the
 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <Transition in={inProp} timeout={500}>
 *         {state => (
 *           // ...
 *         )}
 *       </Transition>
 *       <button onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the button is clicked the component will shift to the `'entering'` state
 * and stay there for 500ms (the value of `timeout`) before it finally switches
 * to `'entered'`.
 *
 * When `in` is `false` the same thing happens except the state moves from
 * `'exiting'` to `'exited'`.
 */ var Transition1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLooseDefault.default(Transition2, _React$Component);
    function Transition2(props, context) {
        var _this;
        _this = _React$Component.call(this, props, context) || this;
        var parentGroup = context; // In the context of a TransitionGroup all enters are really appears
        var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
        var initialStatus;
        _this.appearStatus = null;
        if (props.in) {
            if (appear) {
                initialStatus = EXITED;
                _this.appearStatus = ENTERING;
            } else initialStatus = ENTERED;
        } else if (props.unmountOnExit || props.mountOnEnter) initialStatus = UNMOUNTED;
        else initialStatus = EXITED;
        _this.state = {
            status: initialStatus
        };
        _this.nextCallback = null;
        return _this;
    }
    Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
        var nextIn = _ref.in;
        if (nextIn && prevState.status === UNMOUNTED) return {
            status: EXITED
        };
        return null;
    } // getSnapshotBeforeUpdate(prevProps) {
    ;
    var _proto = Transition2.prototype;
    _proto.componentDidMount = function componentDidMount() {
        this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        var nextStatus = null;
        if (prevProps !== this.props) {
            var status = this.state.status;
            if (this.props.in) {
                if (status !== ENTERING && status !== ENTERED) nextStatus = ENTERING;
            } else if (status === ENTERING || status === ENTERED) nextStatus = EXITING;
        }
        this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
        var timeout = this.props.timeout;
        var exit, enter, appear;
        exit = enter = appear = timeout;
        if (timeout != null && typeof timeout !== 'number') {
            exit = timeout.exit;
            enter = timeout.enter; // TODO: remove fallback for next major
            appear = timeout.appear !== undefined ? timeout.appear : enter;
        }
        return {
            exit: exit,
            enter: enter,
            appear: appear
        };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
        if (mounting === void 0) mounting = false;
        if (nextStatus !== null) {
            // nextStatus will always be ENTERING or EXITING.
            this.cancelNextCallback();
            if (nextStatus === ENTERING) this.performEnter(mounting);
            else this.performExit();
        } else if (this.props.unmountOnExit && this.state.status === EXITED) this.setState({
            status: UNMOUNTED
        });
    };
    _proto.performEnter = function performEnter(mounting) {
        var _this2 = this;
        var enter = this.props.enter;
        var appearing = this.context ? this.context.isMounting : mounting;
        var _ref2 = this.props.nodeRef ? [
            appearing
        ] : [
            _reactDomDefault.default.findDOMNode(this),
            appearing
        ], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
        var timeouts = this.getTimeouts();
        var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
        // if we are mounting and running this it means appear _must_ be set
        if (!mounting && !enter || _configDefault.default.disabled) {
            this.safeSetState({
                status: ENTERED
            }, function() {
                _this2.props.onEntered(maybeNode);
            });
            return;
        }
        this.props.onEnter(maybeNode, maybeAppearing);
        this.safeSetState({
            status: ENTERING
        }, function() {
            _this2.props.onEntering(maybeNode, maybeAppearing);
            _this2.onTransitionEnd(enterTimeout, function() {
                _this2.safeSetState({
                    status: ENTERED
                }, function() {
                    _this2.props.onEntered(maybeNode, maybeAppearing);
                });
            });
        });
    };
    _proto.performExit = function performExit() {
        var _this3 = this;
        var exit = this.props.exit;
        var timeouts = this.getTimeouts();
        var maybeNode = this.props.nodeRef ? undefined : _reactDomDefault.default.findDOMNode(this); // no exit animation skip right to EXITED
        if (!exit || _configDefault.default.disabled) {
            this.safeSetState({
                status: EXITED
            }, function() {
                _this3.props.onExited(maybeNode);
            });
            return;
        }
        this.props.onExit(maybeNode);
        this.safeSetState({
            status: EXITING
        }, function() {
            _this3.props.onExiting(maybeNode);
            _this3.onTransitionEnd(timeouts.exit, function() {
                _this3.safeSetState({
                    status: EXITED
                }, function() {
                    _this3.props.onExited(maybeNode);
                });
            });
        });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
        if (this.nextCallback !== null) {
            this.nextCallback.cancel();
            this.nextCallback = null;
        }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
        // This shouldn't be necessary, but there are weird race conditions with
        // setState callbacks and unmounting in testing, so always make sure that
        // we can cancel any pending setState callbacks after we unmount.
        callback = this.setNextCallback(callback);
        this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
        var _this4 = this;
        var active = true;
        this.nextCallback = function(event) {
            if (active) {
                active = false;
                _this4.nextCallback = null;
                callback(event);
            }
        };
        this.nextCallback.cancel = function() {
            active = false;
        };
        return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
        this.setNextCallback(handler);
        var node = this.props.nodeRef ? this.props.nodeRef.current : _reactDomDefault.default.findDOMNode(this);
        var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
        if (!node || doesNotHaveTimeoutOrListener) {
            setTimeout(this.nextCallback, 0);
            return;
        }
        if (this.props.addEndListener) {
            var _ref3 = this.props.nodeRef ? [
                this.nextCallback
            ] : [
                node,
                this.nextCallback
            ], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
            this.props.addEndListener(maybeNode, maybeNextCallback);
        }
        if (timeout != null) setTimeout(this.nextCallback, timeout);
    };
    _proto.render = function render() {
        var status = this.state.status;
        if (status === UNMOUNTED) return null;
        var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLooseDefault.default(_this$props, [
            "children",
            "in",
            "mountOnEnter",
            "unmountOnExit",
            "appear",
            "enter",
            "exit",
            "timeout",
            "addEndListener",
            "onEnter",
            "onEntering",
            "onEntered",
            "onExit",
            "onExiting",
            "onExited",
            "nodeRef"
        ]);
        return(/*#__PURE__*/ // allows for nested Transitions
        _reactDefault.default.createElement(_transitionGroupContextDefault.default.Provider, {
            value: null
        }, typeof children === 'function' ? children(status, childProps) : _reactDefault.default.cloneElement(_reactDefault.default.Children.only(children), childProps)));
    };
    return Transition2;
}(_reactDefault.default.Component);
Transition1.contextType = _transitionGroupContextDefault.default;
Transition1.propTypes = {
    /**
   * A React reference to DOM element that need to transition:
   * https://stackoverflow.com/a/51127130/4671932
   *
   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
   *      (e.g. `onEnter`) because user already has direct access to the node.
   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
   *     (see
   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
   */ nodeRef: _propTypesDefault.default.shape({
        current: typeof Element === 'undefined' ? _propTypesDefault.default.any : function(propValue, key, componentName, location, propFullName, secret) {
            var value = propValue[key];
            return _propTypesDefault.default.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
        }
    }),
    /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */ children: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func.isRequired,
        _propTypesDefault.default.element.isRequired
    ]).isRequired,
    /**
   * Show the component; triggers the enter or exit states
   */ in: _propTypesDefault.default.bool,
    /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */ mountOnEnter: _propTypesDefault.default.bool,
    /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */ unmountOnExit: _propTypesDefault.default.bool,
    /**
   * By default the child component does not perform the enter transition when
   * it first mounts, regardless of the value of `in`. If you want this
   * behavior, set both `appear` and `in` to `true`.
   *
   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
   * > only adds an additional enter transition. However, in the
   * > `<CSSTransition>` component that first enter transition does result in
   * > additional `.appear-*` classes, that way you can choose to style it
   * > differently.
   */ appear: _propTypesDefault.default.bool,
    /**
   * Enable or disable enter transitions.
   */ enter: _propTypesDefault.default.bool,
    /**
   * Enable or disable exit transitions.
   */ exit: _propTypesDefault.default.bool,
    /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */ timeout: function timeout(props) {
        var pt = _propTypes1.timeoutsShape;
        if (!props.addEndListener) pt = pt.isRequired;
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        return pt.apply(void 0, [
            props
        ].concat(args));
    },
    /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. Timeouts are still used as a fallback if provided.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */ addEndListener: _propTypesDefault.default.func,
    /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */ onEnter: _propTypesDefault.default.func,
    /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */ onEntering: _propTypesDefault.default.func,
    /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */ onEntered: _propTypesDefault.default.func,
    /**
   * Callback fired before the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */ onExit: _propTypesDefault.default.func,
    /**
   * Callback fired after the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */ onExiting: _propTypesDefault.default.func,
    /**
   * Callback fired after the "exited" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement) -> void
   */ onExited: _propTypesDefault.default.func
}; // Name the function so it is clearer in the documentation
function noop() {
}
Transition1.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop,
    onEntering: noop,
    onEntered: noop,
    onExit: noop,
    onExiting: noop,
    onExited: noop
};
Transition1.UNMOUNTED = UNMOUNTED;
Transition1.EXITED = EXITED;
Transition1.ENTERING = ENTERING;
Transition1.ENTERED = ENTERED;
Transition1.EXITING = EXITING;
exports.default = Transition1;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@babel/runtime/helpers/esm/inheritsLoose":"eO0be","prop-types":"1tgq3","react":"6TuXu","react-dom":"gkWJK","./config":"eRNqr","./utils/PropTypes":"da2hb","./TransitionGroupContext":"7XbAv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eRNqr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    disabled: false
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"da2hb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "timeoutsShape", ()=>timeoutsShape
);
parcelHelpers.export(exports, "classNamesShape", ()=>classNamesShape
);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var timeoutsShape = _propTypesDefault.default.oneOfType([
    _propTypesDefault.default.number,
    _propTypesDefault.default.shape({
        enter: _propTypesDefault.default.number,
        exit: _propTypesDefault.default.number,
        appear: _propTypesDefault.default.number
    }).isRequired
]);
var classNamesShape = _propTypesDefault.default.oneOfType([
    _propTypesDefault.default.string,
    _propTypesDefault.default.shape({
        enter: _propTypesDefault.default.string,
        exit: _propTypesDefault.default.string,
        active: _propTypesDefault.default.string
    }),
    _propTypesDefault.default.shape({
        enter: _propTypesDefault.default.string,
        enterDone: _propTypesDefault.default.string,
        enterActive: _propTypesDefault.default.string,
        exit: _propTypesDefault.default.string,
        exitDone: _propTypesDefault.default.string,
        exitActive: _propTypesDefault.default.string
    })
]);

},{"prop-types":"1tgq3","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7XbAv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
exports.default = _reactDefault.default.createContext(null);

},{"react":"6TuXu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8sH79":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _inheritsLoose = require("@babel/runtime/helpers/esm/inheritsLoose");
var _inheritsLooseDefault = parcelHelpers.interopDefault(_inheritsLoose);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
var _transitionGroup = require("./TransitionGroup");
var _transitionGroupDefault = parcelHelpers.interopDefault(_transitionGroup);
/**
 * The `<ReplaceTransition>` component is a specialized `Transition` component
 * that animates between two children.
 *
 * ```jsx
 * <ReplaceTransition in>
 *   <Fade><div>I appear first</div></Fade>
 *   <Fade><div>I replace the above</div></Fade>
 * </ReplaceTransition>
 * ```
 */ var ReplaceTransition1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLooseDefault.default(ReplaceTransition2, _React$Component);
    function ReplaceTransition2() {
        var _this;
        for(var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++)_args[_key] = arguments[_key];
        _this = _React$Component.call.apply(_React$Component, [
            this
        ].concat(_args)) || this;
        _this.handleEnter = function() {
            for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
            return _this.handleLifecycle('onEnter', 0, args);
        };
        _this.handleEntering = function() {
            for(var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++)args[_key3] = arguments[_key3];
            return _this.handleLifecycle('onEntering', 0, args);
        };
        _this.handleEntered = function() {
            for(var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++)args[_key4] = arguments[_key4];
            return _this.handleLifecycle('onEntered', 0, args);
        };
        _this.handleExit = function() {
            for(var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++)args[_key5] = arguments[_key5];
            return _this.handleLifecycle('onExit', 1, args);
        };
        _this.handleExiting = function() {
            for(var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++)args[_key6] = arguments[_key6];
            return _this.handleLifecycle('onExiting', 1, args);
        };
        _this.handleExited = function() {
            for(var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++)args[_key7] = arguments[_key7];
            return _this.handleLifecycle('onExited', 1, args);
        };
        return _this;
    }
    var _proto = ReplaceTransition2.prototype;
    _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
        var _child$props;
        var children = this.props.children;
        var child = _reactDefault.default.Children.toArray(children)[idx];
        if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);
        if (this.props[handler]) {
            var maybeNode = child.props.nodeRef ? undefined : _reactDomDefault.default.findDOMNode(this);
            this.props[handler](maybeNode);
        }
    };
    _proto.render = function render() {
        var _this$props = this.props, children = _this$props.children, inProp = _this$props.in, props = _objectWithoutPropertiesLooseDefault.default(_this$props, [
            "children",
            "in"
        ]);
        var _React$Children$toArr = _reactDefault.default.Children.toArray(children), first = _React$Children$toArr[0], second = _React$Children$toArr[1];
        delete props.onEnter;
        delete props.onEntering;
        delete props.onEntered;
        delete props.onExit;
        delete props.onExiting;
        delete props.onExited;
        return(/*#__PURE__*/ _reactDefault.default.createElement(_transitionGroupDefault.default, props, inProp ? _reactDefault.default.cloneElement(first, {
            key: 'first',
            onEnter: this.handleEnter,
            onEntering: this.handleEntering,
            onEntered: this.handleEntered
        }) : _reactDefault.default.cloneElement(second, {
            key: 'second',
            onEnter: this.handleExit,
            onEntering: this.handleExiting,
            onEntered: this.handleExited
        })));
    };
    return ReplaceTransition2;
}(_reactDefault.default.Component);
ReplaceTransition1.propTypes = {
    in: _propTypesDefault.default.bool.isRequired,
    children: function children(props, propName) {
        if (_reactDefault.default.Children.count(props[propName]) !== 2) return new Error("\"" + propName + "\" must be exactly two transition components.");
        return null;
    }
};
exports.default = ReplaceTransition1;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@babel/runtime/helpers/esm/inheritsLoose":"eO0be","prop-types":"1tgq3","react":"6TuXu","react-dom":"gkWJK","./TransitionGroup":"lIDMU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lIDMU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _assertThisInitialized = require("@babel/runtime/helpers/esm/assertThisInitialized");
var _assertThisInitializedDefault = parcelHelpers.interopDefault(_assertThisInitialized);
var _inheritsLoose = require("@babel/runtime/helpers/esm/inheritsLoose");
var _inheritsLooseDefault = parcelHelpers.interopDefault(_inheritsLoose);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _transitionGroupContext = require("./TransitionGroupContext");
var _transitionGroupContextDefault = parcelHelpers.interopDefault(_transitionGroupContext);
var _childMapping = require("./utils/ChildMapping");
var values = Object.values || function(obj) {
    return Object.keys(obj).map(function(k) {
        return obj[k];
    });
};
var defaultProps = {
    component: 'div',
    childFactory: function childFactory(child) {
        return child;
    }
};
/**
 * The `<TransitionGroup>` component manages a set of transition components
 * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
 * components, `<TransitionGroup>` is a state machine for managing the mounting
 * and unmounting of components over time.
 *
 * Consider the example below. As items are removed or added to the TodoList the
 * `in` prop is toggled automatically by the `<TransitionGroup>`.
 *
 * Note that `<TransitionGroup>`  does not define any animation behavior!
 * Exactly _how_ a list item animates is up to the individual transition
 * component. This means you can mix and match animations across different list
 * items.
 */ var TransitionGroup1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLooseDefault.default(TransitionGroup2, _React$Component);
    function TransitionGroup2(props, context) {
        var _this;
        _this = _React$Component.call(this, props, context) || this;
        var handleExited = _this.handleExited.bind(_assertThisInitializedDefault.default(_this)); // Initial children should all be entering, dependent on appear
        _this.state = {
            contextValue: {
                isMounting: true
            },
            handleExited: handleExited,
            firstRender: true
        };
        return _this;
    }
    var _proto = TransitionGroup2.prototype;
    _proto.componentDidMount = function componentDidMount() {
        this.mounted = true;
        this.setState({
            contextValue: {
                isMounting: false
            }
        });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        this.mounted = false;
    };
    TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
        var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
        return {
            children: firstRender ? _childMapping.getInitialChildMapping(nextProps, handleExited) : _childMapping.getNextChildMapping(nextProps, prevChildMapping, handleExited),
            firstRender: false
        };
    } // node is `undefined` when user provided `nodeRef` prop
    ;
    _proto.handleExited = function handleExited(child, node) {
        var currentChildMapping = _childMapping.getChildMapping(this.props.children);
        if (child.key in currentChildMapping) return;
        if (child.props.onExited) child.props.onExited(node);
        if (this.mounted) this.setState(function(state) {
            var children = _extendsDefault.default({
            }, state.children);
            delete children[child.key];
            return {
                children: children
            };
        });
    };
    _proto.render = function render() {
        var _this$props = this.props, Component = _this$props.component, childFactory = _this$props.childFactory, props = _objectWithoutPropertiesLooseDefault.default(_this$props, [
            "component",
            "childFactory"
        ]);
        var contextValue = this.state.contextValue;
        var children = values(this.state.children).map(childFactory);
        delete props.appear;
        delete props.enter;
        delete props.exit;
        if (Component === null) return(/*#__PURE__*/ _reactDefault.default.createElement(_transitionGroupContextDefault.default.Provider, {
            value: contextValue
        }, children));
        return(/*#__PURE__*/ _reactDefault.default.createElement(_transitionGroupContextDefault.default.Provider, {
            value: contextValue
        }, /*#__PURE__*/ _reactDefault.default.createElement(Component, props, children)));
    };
    return TransitionGroup2;
}(_reactDefault.default.Component);
TransitionGroup1.propTypes = {
    /**
   * `<TransitionGroup>` renders a `<div>` by default. You can change this
   * behavior by providing a `component` prop.
   * If you use React v16+ and would like to avoid a wrapping `<div>` element
   * you can pass in `component={null}`. This is useful if the wrapping div
   * borks your css styles.
   */ component: _propTypesDefault.default.any,
    /**
   * A set of `<Transition>` components, that are toggled `in` and out as they
   * leave. the `<TransitionGroup>` will inject specific transition props, so
   * remember to spread them through if you are wrapping the `<Transition>` as
   * with our `<Fade>` example.
   *
   * While this component is meant for multiple `Transition` or `CSSTransition`
   * children, sometimes you may want to have a single transition child with
   * content that you want to be transitioned out and in when you change it
   * (e.g. routes, images etc.) In that case you can change the `key` prop of
   * the transition child as you change its content, this will cause
   * `TransitionGroup` to transition the child out and back in.
   */ children: _propTypesDefault.default.node,
    /**
   * A convenience prop that enables or disables appear animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */ appear: _propTypesDefault.default.bool,
    /**
   * A convenience prop that enables or disables enter animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */ enter: _propTypesDefault.default.bool,
    /**
   * A convenience prop that enables or disables exit animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */ exit: _propTypesDefault.default.bool,
    /**
   * You may need to apply reactive updates to a child as it is exiting.
   * This is generally done by using `cloneElement` however in the case of an exiting
   * child the element has already been removed and not accessible to the consumer.
   *
   * If you do need to update a child as it leaves you can provide a `childFactory`
   * to wrap every child, even the ones that are leaving.
   *
   * @type Function(child: ReactElement) -> ReactElement
   */ childFactory: _propTypesDefault.default.func
};
TransitionGroup1.defaultProps = defaultProps;
exports.default = TransitionGroup1;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/assertThisInitialized":"iOcza","@babel/runtime/helpers/esm/inheritsLoose":"eO0be","prop-types":"1tgq3","react":"6TuXu","./TransitionGroupContext":"7XbAv","./utils/ChildMapping":"iBXKH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iOcza":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
exports.default = _assertThisInitialized;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iBXKH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */ parcelHelpers.export(exports, "getChildMapping", ()=>getChildMapping
);
/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */ parcelHelpers.export(exports, "mergeChildMappings", ()=>mergeChildMappings
);
parcelHelpers.export(exports, "getInitialChildMapping", ()=>getInitialChildMapping
);
parcelHelpers.export(exports, "getNextChildMapping", ()=>getNextChildMapping
);
var _react = require("react");
function getChildMapping(children, mapFn) {
    var mapper = function mapper1(child) {
        return mapFn && _react.isValidElement(child) ? mapFn(child) : child;
    };
    var result = Object.create(null);
    if (children) _react.Children.map(children, function(c) {
        return c;
    }).forEach(function(child) {
        // run the map function here instead so that the key is the computed one
        result[child.key] = mapper(child);
    });
    return result;
}
function mergeChildMappings(prev, next) {
    prev = prev || {
    };
    next = next || {
    };
    function getValueForKey(key) {
        return key in next ? next[key] : prev[key];
    } // For each key of `next`, the list of keys to insert before that key in
    // the combined list
    var nextKeysPending = Object.create(null);
    var pendingKeys = [];
    for(var prevKey in prev){
        if (prevKey in next) {
            if (pendingKeys.length) {
                nextKeysPending[prevKey] = pendingKeys;
                pendingKeys = [];
            }
        } else pendingKeys.push(prevKey);
    }
    var i;
    var childMapping = {
    };
    for(var nextKey in next){
        if (nextKeysPending[nextKey]) for(i = 0; i < nextKeysPending[nextKey].length; i++){
            var pendingNextKey = nextKeysPending[nextKey][i];
            childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
        childMapping[nextKey] = getValueForKey(nextKey);
    } // Finally, add the keys which didn't appear before any key in `next`
    for(i = 0; i < pendingKeys.length; i++)childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    return childMapping;
}
function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
}
function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function(child) {
        return _react.cloneElement(child, {
            onExited: onExited.bind(null, child),
            in: true,
            appear: getProp(child, 'appear', props),
            enter: getProp(child, 'enter', props),
            exit: getProp(child, 'exit', props)
        });
    });
}
function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function(key) {
        var child = children[key];
        if (!_react.isValidElement(child)) return;
        var hasPrev = key in prevChildMapping;
        var hasNext = key in nextChildMapping;
        var prevChild = prevChildMapping[key];
        var isLeaving = _react.isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)
        if (hasNext && (!hasPrev || isLeaving)) // console.log('entering', key)
        children[key] = _react.cloneElement(child, {
            onExited: onExited.bind(null, child),
            in: true,
            exit: getProp(child, 'exit', nextProps),
            enter: getProp(child, 'enter', nextProps)
        });
        else if (!hasNext && hasPrev && !isLeaving) // item is old (exiting)
        // console.log('leaving', key)
        children[key] = _react.cloneElement(child, {
            in: false
        });
        else if (hasNext && hasPrev && _react.isValidElement(prevChild)) // item hasn't changed transition states
        // copy over the last transition props;
        // console.log('unchanged', key)
        children[key] = _react.cloneElement(child, {
            onExited: onExited.bind(null, child),
            in: prevChild.props.in,
            exit: getProp(child, 'exit', nextProps),
            enter: getProp(child, 'enter', nextProps)
        });
    });
    return children;
}

},{"react":"6TuXu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2WsGH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "modes", ()=>modes
);
var _inheritsLoose = require("@babel/runtime/helpers/esm/inheritsLoose");
var _inheritsLooseDefault = parcelHelpers.interopDefault(_inheritsLoose);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _transition = require("./Transition");
var _transitionGroupContext = require("./TransitionGroupContext");
var _transitionGroupContextDefault = parcelHelpers.interopDefault(_transitionGroupContext);
var _leaveRenders, _enterRenders;
function areChildrenDifferent(oldChildren, newChildren) {
    if (oldChildren === newChildren) return false;
    if (_reactDefault.default.isValidElement(oldChildren) && _reactDefault.default.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) return false;
    return true;
}
var modes = {
    out: 'out-in',
    in: 'in-out'
};
var callHook = function callHook1(element, name, cb) {
    return function() {
        var _element$props;
        element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);
        cb();
    };
};
var leaveRenders = (_leaveRenders = {
}, _leaveRenders[modes.out] = function(_ref) {
    var current = _ref.current, changeState = _ref.changeState;
    return _reactDefault.default.cloneElement(current, {
        in: false,
        onExited: callHook(current, 'onExited', function() {
            changeState(_transition.ENTERING, null);
        })
    });
}, _leaveRenders[modes.in] = function(_ref2) {
    var current = _ref2.current, changeState = _ref2.changeState, children = _ref2.children;
    return [
        current,
        _reactDefault.default.cloneElement(children, {
            in: true,
            onEntered: callHook(children, 'onEntered', function() {
                changeState(_transition.ENTERING);
            })
        })
    ];
}, _leaveRenders);
var enterRenders = (_enterRenders = {
}, _enterRenders[modes.out] = function(_ref3) {
    var children = _ref3.children, changeState = _ref3.changeState;
    return _reactDefault.default.cloneElement(children, {
        in: true,
        onEntered: callHook(children, 'onEntered', function() {
            changeState(_transition.ENTERED, _reactDefault.default.cloneElement(children, {
                in: true
            }));
        })
    });
}, _enterRenders[modes.in] = function(_ref4) {
    var current = _ref4.current, children = _ref4.children, changeState = _ref4.changeState;
    return [
        _reactDefault.default.cloneElement(current, {
            in: false,
            onExited: callHook(current, 'onExited', function() {
                changeState(_transition.ENTERED, _reactDefault.default.cloneElement(children, {
                    in: true
                }));
            })
        }),
        _reactDefault.default.cloneElement(children, {
            in: true
        })
    ];
}, _enterRenders);
/**
 * A transition component inspired by the [vue transition modes](https://vuejs.org/v2/guide/transitions.html#Transition-Modes).
 * You can use it when you want to control the render between state transitions.
 * Based on the selected mode and the child's key which is the `Transition` or `CSSTransition` component, the `SwitchTransition` makes a consistent transition between them.
 *
 * If the `out-in` mode is selected, the `SwitchTransition` waits until the old child leaves and then inserts a new child.
 * If the `in-out` mode is selected, the `SwitchTransition` inserts a new child first, waits for the new child to enter and then removes the old child.
 *
 * **Note**: If you want the animation to happen simultaneously
 * (that is, to have the old child removed and a new child inserted **at the same time**),
 * you should use
 * [`TransitionGroup`](https://reactcommunity.org/react-transition-group/transition-group)
 * instead.
 *
 * ```jsx
 * function App() {
 *  const [state, setState] = useState(false);
 *  return (
 *    <SwitchTransition>
 *      <CSSTransition
 *        key={state ? "Goodbye, world!" : "Hello, world!"}
 *        addEndListener={(node, done) => node.addEventListener("transitionend", done, false)}
 *        classNames='fade'
 *      >
 *        <button onClick={() => setState(state => !state)}>
 *          {state ? "Goodbye, world!" : "Hello, world!"}
 *        </button>
 *      </CSSTransition>
 *    </SwitchTransition>
 *  );
 * }
 * ```
 *
 * ```css
 * .fade-enter{
 *    opacity: 0;
 * }
 * .fade-exit{
 *    opacity: 1;
 * }
 * .fade-enter-active{
 *    opacity: 1;
 * }
 * .fade-exit-active{
 *    opacity: 0;
 * }
 * .fade-enter-active,
 * .fade-exit-active{
 *    transition: opacity 500ms;
 * }
 * ```
 */ var SwitchTransition1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLooseDefault.default(SwitchTransition2, _React$Component);
    function SwitchTransition2() {
        var _this;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        _this = _React$Component.call.apply(_React$Component, [
            this
        ].concat(args)) || this;
        _this.state = {
            status: _transition.ENTERED,
            current: null
        };
        _this.appeared = false;
        _this.changeState = function(status, current) {
            if (current === void 0) current = _this.state.current;
            _this.setState({
                status: status,
                current: current
            });
        };
        return _this;
    }
    var _proto = SwitchTransition2.prototype;
    _proto.componentDidMount = function componentDidMount() {
        this.appeared = true;
    };
    SwitchTransition2.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
        if (props.children == null) return {
            current: null
        };
        if (state.status === _transition.ENTERING && props.mode === modes.in) return {
            status: _transition.ENTERING
        };
        if (state.current && areChildrenDifferent(state.current, props.children)) return {
            status: _transition.EXITING
        };
        return {
            current: _reactDefault.default.cloneElement(props.children, {
                in: true
            })
        };
    };
    _proto.render = function render() {
        var _this$props = this.props, children = _this$props.children, mode = _this$props.mode, _this$state = this.state, status = _this$state.status, current = _this$state.current;
        var data = {
            children: children,
            current: current,
            changeState: this.changeState,
            status: status
        };
        var component;
        switch(status){
            case _transition.ENTERING:
                component = enterRenders[mode](data);
                break;
            case _transition.EXITING:
                component = leaveRenders[mode](data);
                break;
            case _transition.ENTERED:
                component = current;
        }
        return(/*#__PURE__*/ _reactDefault.default.createElement(_transitionGroupContextDefault.default.Provider, {
            value: {
                isMounting: !this.appeared
            }
        }, component));
    };
    return SwitchTransition2;
}(_reactDefault.default.Component);
SwitchTransition1.propTypes = {
    /**
   * Transition modes.
   * `out-in`: Current element transitions out first, then when complete, the new element transitions in.
   * `in-out`: New element transitions in first, then when complete, the current element transitions out.
   *
   * @type {'out-in'|'in-out'}
   */ mode: _propTypesDefault.default.oneOf([
        modes.in,
        modes.out
    ]),
    /**
   * Any `Transition` or `CSSTransition` component.
   */ children: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.element.isRequired
    ])
};
SwitchTransition1.defaultProps = {
    mode: modes.out
};
exports.default = SwitchTransition1;

},{"@babel/runtime/helpers/esm/inheritsLoose":"eO0be","react":"6TuXu","prop-types":"1tgq3","./Transition":"6qqDo","./TransitionGroupContext":"7XbAv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lyQib":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
/**
 * @ignore - internal component.
 */ var _jsxRuntime = require("react/jsx-runtime");
function Ripple(props) {
    const { className , classes , pulsate =false , rippleX , rippleY , rippleSize , in: inProp , onExited , timeout  } = props;
    const [leaving, setLeaving] = _react.useState(false);
    const rippleClassName = _clsxDefault.default(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
    const rippleStyles = {
        width: rippleSize,
        height: rippleSize,
        top: -(rippleSize / 2) + rippleY,
        left: -(rippleSize / 2) + rippleX
    };
    const childClassName = _clsxDefault.default(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
    if (!inProp && !leaving) setLeaving(true);
    _react.useEffect(()=>{
        if (!inProp && onExited != null) {
            // react-transition-group#onExited
            const timeoutId = setTimeout(onExited, timeout);
            return ()=>{
                clearTimeout(timeoutId);
            };
        }
        return undefined;
    }, [
        onExited,
        inProp,
        timeout
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx("span", {
        className: rippleClassName,
        style: rippleStyles,
        children: /*#__PURE__*/ _jsxRuntime.jsx("span", {
            className: childClassName
        })
    }));
}
Ripple.propTypes = {
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object.isRequired,
    className: _propTypesDefault.default.string,
    /**
   * @ignore - injected from TransitionGroup
   */ in: _propTypesDefault.default.bool,
    /**
   * @ignore - injected from TransitionGroup
   */ onExited: _propTypesDefault.default.func,
    /**
   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
   */ pulsate: _propTypesDefault.default.bool,
    /**
   * Diameter of the ripple.
   */ rippleSize: _propTypesDefault.default.number,
    /**
   * Horizontal position of the ripple center.
   */ rippleX: _propTypesDefault.default.number,
    /**
   * Vertical position of the ripple center.
   */ rippleY: _propTypesDefault.default.number,
    /**
   * exit delay
   */ timeout: _propTypesDefault.default.number.isRequired
};
exports.default = Ripple;

},{"react":"6TuXu","prop-types":"1tgq3","clsx":"eg1He","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jHogD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTouchRippleUtilityClass", ()=>getTouchRippleUtilityClass
);
var _core = require("@mui/core");
function getTouchRippleUtilityClass(slot) {
    return _core.generateUtilityClass('MuiTouchRipple', slot);
}
const touchRippleClasses = _core.generateUtilityClasses('MuiTouchRipple', [
    'root',
    'ripple',
    'rippleVisible',
    'ripplePulsate',
    'child',
    'childLeaving',
    'childPulsate'
]);
exports.default = touchRippleClasses;

},{"@mui/core":"9b2I1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cjf8r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getButtonBaseUtilityClass", ()=>getButtonBaseUtilityClass
);
var _core = require("@mui/core");
function getButtonBaseUtilityClass(slot) {
    return _core.generateUtilityClass('MuiButtonBase', slot);
}
const buttonBaseClasses = _core.generateUtilityClasses('MuiButtonBase', [
    'root',
    'disabled',
    'focusVisible'
]);
exports.default = buttonBaseClasses;

},{"@mui/core":"9b2I1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lAtaw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getButtonUtilityClass", ()=>getButtonUtilityClass
);
var _core = require("@mui/core");
function getButtonUtilityClass(slot) {
    return _core.generateUtilityClass('MuiButton', slot);
}
const buttonClasses = _core.generateUtilityClasses('MuiButton', [
    'root',
    'text',
    'textInherit',
    'textPrimary',
    'textSecondary',
    'outlined',
    'outlinedInherit',
    'outlinedPrimary',
    'outlinedSecondary',
    'contained',
    'containedInherit',
    'containedPrimary',
    'containedSecondary',
    'disableElevation',
    'focusVisible',
    'disabled',
    'colorInherit',
    'textSizeSmall',
    'textSizeMedium',
    'textSizeLarge',
    'outlinedSizeSmall',
    'outlinedSizeMedium',
    'outlinedSizeLarge',
    'containedSizeSmall',
    'containedSizeMedium',
    'containedSizeLarge',
    'sizeMedium',
    'sizeSmall',
    'sizeLarge',
    'fullWidth',
    'startIcon',
    'endIcon',
    'iconSizeSmall',
    'iconSizeMedium',
    'iconSizeLarge'
]);
exports.default = buttonClasses;

},{"@mui/core":"9b2I1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4bDNl":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));
var _jsxRuntime = require("react/jsx-runtime");
var _default = _createSvgIcon.default(/*#__PURE__*/ _jsxRuntime.jsx("path", {
    d: "M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"
}), 'Create');
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"eigyQ","./utils/createSvgIcon":"9J0CW","react/jsx-runtime":"8xIwr"}],"eigyQ":[function(require,module,exports) {
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
module.exports = _interopRequireDefault;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"9J0CW":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _utils.createSvgIcon;
    }
});
var _utils = require("@mui/material/utils");

},{"@mui/material/utils":"5bjlT"}],"5bjlT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "capitalize", ()=>_capitalizeDefault.default
);
parcelHelpers.export(exports, "createChainedFunction", ()=>_createChainedFunctionDefault.default
);
parcelHelpers.export(exports, "createSvgIcon", ()=>_createSvgIconDefault.default
);
parcelHelpers.export(exports, "debounce", ()=>_debounceDefault.default
);
parcelHelpers.export(exports, "deprecatedPropType", ()=>_deprecatedPropTypeDefault.default
);
parcelHelpers.export(exports, "isMuiElement", ()=>_isMuiElementDefault.default
);
parcelHelpers.export(exports, "ownerDocument", ()=>_ownerDocumentDefault.default
);
parcelHelpers.export(exports, "ownerWindow", ()=>_ownerWindowDefault.default
);
parcelHelpers.export(exports, "requirePropFactory", ()=>_requirePropFactoryDefault.default
);
parcelHelpers.export(exports, "setRef", ()=>_setRefDefault.default
);
parcelHelpers.export(exports, "unstable_useEnhancedEffect", ()=>_useEnhancedEffectDefault.default
);
parcelHelpers.export(exports, "unstable_useId", ()=>_useIdDefault.default
);
parcelHelpers.export(exports, "unsupportedProp", ()=>_unsupportedPropDefault.default
);
parcelHelpers.export(exports, "useControlled", ()=>_useControlledDefault.default
);
parcelHelpers.export(exports, "useEventCallback", ()=>_useEventCallbackDefault.default
);
parcelHelpers.export(exports, "useForkRef", ()=>_useForkRefDefault.default
);
parcelHelpers.export(exports, "useIsFocusVisible", ()=>_useIsFocusVisibleDefault.default
);
parcelHelpers.export(exports, "unstable_ClassNameGenerator", ()=>_core.unstable_ClassNameGenerator
);
var _capitalize = require("./capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _createChainedFunction = require("./createChainedFunction");
var _createChainedFunctionDefault = parcelHelpers.interopDefault(_createChainedFunction);
var _createSvgIcon = require("./createSvgIcon");
var _createSvgIconDefault = parcelHelpers.interopDefault(_createSvgIcon);
var _debounce = require("./debounce");
var _debounceDefault = parcelHelpers.interopDefault(_debounce);
var _deprecatedPropType = require("./deprecatedPropType");
var _deprecatedPropTypeDefault = parcelHelpers.interopDefault(_deprecatedPropType);
var _isMuiElement = require("./isMuiElement");
var _isMuiElementDefault = parcelHelpers.interopDefault(_isMuiElement);
var _ownerDocument = require("./ownerDocument");
var _ownerDocumentDefault = parcelHelpers.interopDefault(_ownerDocument);
var _ownerWindow = require("./ownerWindow");
var _ownerWindowDefault = parcelHelpers.interopDefault(_ownerWindow);
var _requirePropFactory = require("./requirePropFactory");
var _requirePropFactoryDefault = parcelHelpers.interopDefault(_requirePropFactory);
var _setRef = require("./setRef");
var _setRefDefault = parcelHelpers.interopDefault(_setRef);
var _useEnhancedEffect = require("./useEnhancedEffect");
var _useEnhancedEffectDefault = parcelHelpers.interopDefault(_useEnhancedEffect);
var _useId = require("./useId");
var _useIdDefault = parcelHelpers.interopDefault(_useId);
var _unsupportedProp = require("./unsupportedProp");
var _unsupportedPropDefault = parcelHelpers.interopDefault(_unsupportedProp);
var _useControlled = require("./useControlled");
var _useControlledDefault = parcelHelpers.interopDefault(_useControlled);
var _useEventCallback = require("./useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _useForkRef = require("./useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _useIsFocusVisible = require("./useIsFocusVisible");
var _useIsFocusVisibleDefault = parcelHelpers.interopDefault(_useIsFocusVisible);
var _core = require("@mui/core");

},{"./capitalize":"3YJ7J","./createChainedFunction":"8JtJl","./createSvgIcon":"7gACi","./debounce":"elLbK","./deprecatedPropType":"3jQCW","./isMuiElement":"5Un9o","./ownerDocument":"7xVYQ","./ownerWindow":"lRJwX","./requirePropFactory":"59xcd","./setRef":"3Oq2X","./useEnhancedEffect":"1iHWh","./useId":"7g9ma","./unsupportedProp":"1SmHv","./useControlled":"71zQT","./useEventCallback":"6YYQf","./useForkRef":"8iBvK","./useIsFocusVisible":"gcCNK","@mui/core":"9b2I1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8JtJl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_createChainedFunction;

},{"@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7gACi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _svgIcon = require("../SvgIcon");
var _svgIconDefault = parcelHelpers.interopDefault(_svgIcon);
/**
 * Private module reserved for @mui packages.
 */ var _jsxRuntime = require("react/jsx-runtime");
function createSvgIcon(path, displayName) {
    const Component = (props, ref)=>/*#__PURE__*/ _jsxRuntime.jsx(_svgIconDefault.default, _extendsDefault.default({
            "data-testid": `${displayName}Icon`,
            ref: ref
        }, props, {
            children: path
        }))
    ;
    // Need to set `displayName` on the inner component for React.memo.
    // React prior to 16.14 ignores `displayName` on the wrapper.
    Component.displayName = `${displayName}Icon`;
    Component.muiName = _svgIconDefault.default.muiName;
    return(/*#__PURE__*/ _react.memo(/*#__PURE__*/ _react.forwardRef(Component)));
}
exports.default = createSvgIcon;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","react":"6TuXu","../SvgIcon":"hiUuP","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hiUuP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_svgIconDefault.default
);
parcelHelpers.export(exports, "svgIconClasses", ()=>_svgIconClassesDefault.default
);
var _svgIcon = require("./SvgIcon");
var _svgIconDefault = parcelHelpers.interopDefault(_svgIcon);
var _svgIconClasses = require("./svgIconClasses");
var _svgIconClassesDefault = parcelHelpers.interopDefault(_svgIconClasses);
parcelHelpers.exportAll(_svgIconClasses, exports);

},{"./SvgIcon":"1LlCv","./svgIconClasses":"hOxCO","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1LlCv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _core = require("@mui/core");
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _svgIconClasses = require("./svgIconClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "children",
    "className",
    "color",
    "component",
    "fontSize",
    "htmlColor",
    "titleAccess",
    "viewBox"
];
const useUtilityClasses = (ownerState)=>{
    const { color , fontSize , classes  } = ownerState;
    const slots = {
        root: [
            'root',
            color !== 'inherit' && `color${_capitalizeDefault.default(color)}`,
            `fontSize${_capitalizeDefault.default(fontSize)}`
        ]
    };
    return _core.unstable_composeClasses(slots, _svgIconClasses.getSvgIconUtilityClass, classes);
};
const SvgIconRoot = _styledDefault.default('svg', {
    name: 'MuiSvgIcon',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            ownerState.color !== 'inherit' && styles[`color${_capitalizeDefault.default(ownerState.color)}`],
            styles[`fontSize${_capitalizeDefault.default(ownerState.fontSize)}`]
        ];
    }
})(({ theme , ownerState  })=>{
    var _theme$palette$ownerS, _theme$palette$ownerS2;
    return {
        userSelect: 'none',
        width: '1em',
        height: '1em',
        display: 'inline-block',
        fill: 'currentColor',
        flexShrink: 0,
        transition: theme.transitions.create('fill', {
            duration: theme.transitions.duration.shorter
        }),
        fontSize: ({
            inherit: 'inherit',
            small: theme.typography.pxToRem(20),
            medium: theme.typography.pxToRem(24),
            large: theme.typography.pxToRem(35)
        })[ownerState.fontSize],
        // TODO v5 deprecate, v6 remove for sx
        color: (_theme$palette$ownerS = (_theme$palette$ownerS2 = theme.palette[ownerState.color]) == null ? void 0 : _theme$palette$ownerS2.main) != null ? _theme$palette$ownerS : ({
            action: theme.palette.action.active,
            disabled: theme.palette.action.disabled,
            inherit: undefined
        })[ownerState.color]
    };
});
const SvgIcon = /*#__PURE__*/ _react.forwardRef(function SvgIcon1(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiSvgIcon'
    });
    const { children , className , color ='inherit' , component ='svg' , fontSize ='medium' , htmlColor , titleAccess , viewBox ='0 0 24 24'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({
    }, props, {
        color,
        component,
        fontSize,
        viewBox
    });
    const classes = useUtilityClasses(ownerState);
    return(/*#__PURE__*/ _jsxRuntime.jsxs(SvgIconRoot, _extendsDefault.default({
        as: component,
        className: _clsxDefault.default(classes.root, className),
        ownerState: ownerState,
        focusable: "false",
        viewBox: viewBox,
        color: htmlColor,
        "aria-hidden": titleAccess ? undefined : true,
        role: titleAccess ? 'img' : undefined,
        ref: ref
    }, other, {
        children: [
            children,
            titleAccess ? /*#__PURE__*/ _jsxRuntime.jsx("title", {
                children: titleAccess
            }) : null
        ]
    })));
});
SvgIcon.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * Node passed into the SVG element.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
   * @default 'inherit'
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'inherit',
            'action',
            'disabled',
            'primary',
            'secondary',
            'error',
            'info',
            'success',
            'warning'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default.elementType,
    /**
   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
   * @default 'medium'
   */ fontSize: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'inherit',
            'large',
            'medium',
            'small'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * Applies a color attribute to the SVG element.
   */ htmlColor: _propTypesDefault.default.string,
    /**
   * The shape-rendering attribute. The behavior of the different options is described on the
   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
   * If you are having issues with blurry icons you should investigate this prop.
   */ shapeRendering: _propTypesDefault.default.string,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * Provides a human-readable title for the element that contains it.
   * https://www.w3.org/TR/SVG-access/#Equivalent
   */ titleAccess: _propTypesDefault.default.string,
    /**
   * Allows you to redefine what the coordinates without units mean inside an SVG element.
   * For example, if the SVG element is 500 (width) by 200 (height),
   * and you pass viewBox="0 0 50 20",
   * this means that the coordinates inside the SVG will go from the top left corner (0,0)
   * to bottom right (50,20) and each unit will be worth 10px.
   * @default '0 0 24 24'
   */ viewBox: _propTypesDefault.default.string
};
SvgIcon.muiName = 'SvgIcon';
exports.default = SvgIcon;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","react":"6TuXu","prop-types":"1tgq3","clsx":"eg1He","@mui/core":"9b2I1","../utils/capitalize":"3YJ7J","../styles/useThemeProps":"1cdc1","../styles/styled":"gqLeX","./svgIconClasses":"hOxCO","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hOxCO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSvgIconUtilityClass", ()=>getSvgIconUtilityClass
);
var _core = require("@mui/core");
function getSvgIconUtilityClass(slot) {
    return _core.generateUtilityClass('MuiSvgIcon', slot);
}
const svgIconClasses = _core.generateUtilityClasses('MuiSvgIcon', [
    'root',
    'colorPrimary',
    'colorSecondary',
    'colorAction',
    'colorError',
    'colorDisabled',
    'fontSizeInherit',
    'fontSizeSmall',
    'fontSizeMedium',
    'fontSizeLarge'
]);
exports.default = svgIconClasses;

},{"@mui/core":"9b2I1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"elLbK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_debounce;

},{"@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3jQCW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_deprecatedPropType;

},{"@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5Un9o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_isMuiElement;

},{"@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7xVYQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_ownerDocument;

},{"@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lRJwX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_ownerWindow;

},{"@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"59xcd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_requirePropFactory;

},{"@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3Oq2X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_setRef;

},{"@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1iHWh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_useEnhancedEffect;

},{"@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7g9ma":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_useId;

},{"@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1SmHv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_unsupportedProp;

},{"@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"71zQT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
exports.default = _utils.unstable_useControlled;

},{"@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jSdkD":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));
var _jsxRuntime = require("react/jsx-runtime");
var _default = _createSvgIcon.default(/*#__PURE__*/ _jsxRuntime.jsx("path", {
    d: "M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z"
}), 'Share');
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"eigyQ","./utils/createSvgIcon":"9J0CW","react/jsx-runtime":"8xIwr"}],"kDDfm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_linkDefault.default
);
parcelHelpers.export(exports, "linkClasses", ()=>_linkClassesDefault.default
);
var _link = require("./Link");
var _linkDefault = parcelHelpers.interopDefault(_link);
var _linkClasses = require("./linkClasses");
var _linkClassesDefault = parcelHelpers.interopDefault(_linkClasses);
parcelHelpers.exportAll(_linkClasses, exports);

},{"./Link":"1sqGd","./linkClasses":"bq477","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1sqGd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _core = require("@mui/core");
var _system = require("@mui/system");
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _useIsFocusVisible = require("../utils/useIsFocusVisible");
var _useIsFocusVisibleDefault = parcelHelpers.interopDefault(_useIsFocusVisible);
var _useForkRef = require("../utils/useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _typography = require("../Typography");
var _typographyDefault = parcelHelpers.interopDefault(_typography);
var _linkClasses = require("./linkClasses");
var _linkClassesDefault = parcelHelpers.interopDefault(_linkClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "className",
    "color",
    "component",
    "onBlur",
    "onFocus",
    "TypographyClasses",
    "underline",
    "variant"
];
const colorTransformations = {
    primary: 'primary.main',
    textPrimary: 'text.primary',
    secondary: 'secondary.main',
    textSecondary: 'text.secondary',
    error: 'error.main'
};
const transformDeprecatedColors = (color)=>{
    return colorTransformations[color] || color;
};
const useUtilityClasses = (ownerState)=>{
    const { classes , component , focusVisible , underline  } = ownerState;
    const slots = {
        root: [
            'root',
            `underline${_capitalizeDefault.default(underline)}`,
            component === 'button' && 'button',
            focusVisible && 'focusVisible'
        ]
    };
    return _core.unstable_composeClasses(slots, _linkClasses.getLinkUtilityClass, classes);
};
const LinkRoot = _styledDefault.default(_typographyDefault.default, {
    name: 'MuiLink',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            styles[`underline${_capitalizeDefault.default(ownerState.underline)}`],
            ownerState.component === 'button' && styles.button
        ];
    }
})(({ theme , ownerState  })=>{
    const color = _system.getPath(theme, `palette.${transformDeprecatedColors(ownerState.color)}`) || ownerState.color;
    return _extendsDefault.default({
    }, ownerState.underline === 'none' && {
        textDecoration: 'none'
    }, ownerState.underline === 'hover' && {
        textDecoration: 'none',
        '&:hover': {
            textDecoration: 'underline'
        }
    }, ownerState.underline === 'always' && {
        textDecoration: 'underline',
        textDecorationColor: color !== 'inherit' ? _system.alpha(color, 0.4) : undefined,
        '&:hover': {
            textDecorationColor: 'inherit'
        }
    }, ownerState.component === 'button' && {
        position: 'relative',
        WebkitTapHighlightColor: 'transparent',
        backgroundColor: 'transparent',
        // Reset default value
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 0,
        border: 0,
        margin: 0,
        // Remove the margin in Safari
        borderRadius: 0,
        padding: 0,
        // Remove the padding in Firefox
        cursor: 'pointer',
        userSelect: 'none',
        verticalAlign: 'middle',
        MozAppearance: 'none',
        // Reset
        WebkitAppearance: 'none',
        // Reset
        '&::-moz-focus-inner': {
            borderStyle: 'none' // Remove Firefox dotted outline.
        },
        [`&.${_linkClassesDefault.default.focusVisible}`]: {
            outline: 'auto'
        }
    });
});
const Link = /*#__PURE__*/ _react.forwardRef(function Link1(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiLink'
    });
    const { className , color ='primary' , component ='a' , onBlur , onFocus , TypographyClasses , underline ='always' , variant ='inherit'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const { isFocusVisibleRef , onBlur: handleBlurVisible , onFocus: handleFocusVisible , ref: focusVisibleRef  } = _useIsFocusVisibleDefault.default();
    const [focusVisible, setFocusVisible] = _react.useState(false);
    const handlerRef = _useForkRefDefault.default(ref, focusVisibleRef);
    const handleBlur = (event)=>{
        handleBlurVisible(event);
        if (isFocusVisibleRef.current === false) setFocusVisible(false);
        if (onBlur) onBlur(event);
    };
    const handleFocus = (event)=>{
        handleFocusVisible(event);
        if (isFocusVisibleRef.current === true) setFocusVisible(true);
        if (onFocus) onFocus(event);
    };
    const ownerState = _extendsDefault.default({
    }, props, {
        color,
        component,
        focusVisible,
        underline,
        variant
    });
    const classes = useUtilityClasses(ownerState);
    return(/*#__PURE__*/ _jsxRuntime.jsx(LinkRoot, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className),
        classes: TypographyClasses,
        color: color,
        component: component,
        onBlur: handleBlur,
        onFocus: handleFocus,
        ref: handlerRef,
        ownerState: ownerState,
        variant: variant
    }, other)));
});
Link.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The color of the link.
   * @default 'primary'
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .any,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _utils.elementTypeAcceptingRef,
    /**
   * @ignore
   */ onBlur: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onFocus: _propTypesDefault.default.func,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * `classes` prop applied to the [`Typography`](/api/typography/) element.
   */ TypographyClasses: _propTypesDefault.default.object,
    /**
   * Controls when the link should have an underline.
   * @default 'always'
   */ underline: _propTypesDefault.default.oneOf([
        'always',
        'hover',
        'none'
    ]),
    /**
   * Applies the theme typography styles.
   * @default 'inherit'
   */ variant: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'body1',
            'body2',
            'button',
            'caption',
            'h1',
            'h2',
            'h3',
            'h4',
            'h5',
            'h6',
            'inherit',
            'overline',
            'subtitle1',
            'subtitle2'
        ]),
        _propTypesDefault.default.string
    ])
};
exports.default = Link;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@babel/runtime/helpers/esm/extends":"bKAu6","react":"6TuXu","prop-types":"1tgq3","clsx":"eg1He","@mui/utils":"9YmNw","@mui/core":"9b2I1","@mui/system":"ccIuz","../utils/capitalize":"3YJ7J","../styles/styled":"gqLeX","../styles/useThemeProps":"1cdc1","../utils/useIsFocusVisible":"gcCNK","../utils/useForkRef":"8iBvK","../Typography":"ewG8k","./linkClasses":"bq477","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bq477":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getLinkUtilityClass", ()=>getLinkUtilityClass
);
var _core = require("@mui/core");
function getLinkUtilityClass(slot) {
    return _core.generateUtilityClass('MuiLink', slot);
}
const linkClasses = _core.generateUtilityClasses('MuiLink', [
    'root',
    'underlineNone',
    'underlineHover',
    'underlineAlways',
    'button',
    'focusVisible'
]);
exports.default = linkClasses;

},{"@mui/core":"9b2I1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"g0c8r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_iconButtonDefault.default
);
parcelHelpers.export(exports, "iconButtonClasses", ()=>_iconButtonClassesDefault.default
);
var _iconButton = require("./IconButton");
var _iconButtonDefault = parcelHelpers.interopDefault(_iconButton);
var _iconButtonClasses = require("./iconButtonClasses");
var _iconButtonClassesDefault = parcelHelpers.interopDefault(_iconButtonClasses);
parcelHelpers.exportAll(_iconButtonClasses, exports);

},{"./IconButton":"6Euwq","./iconButtonClasses":"ewObX","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6Euwq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@mui/utils");
var _core = require("@mui/core");
var _system = require("@mui/system");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _buttonBase = require("../ButtonBase");
var _buttonBaseDefault = parcelHelpers.interopDefault(_buttonBase);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _iconButtonClasses = require("./iconButtonClasses");
var _iconButtonClassesDefault = parcelHelpers.interopDefault(_iconButtonClasses);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "edge",
    "children",
    "className",
    "color",
    "disabled",
    "disableFocusRipple",
    "size"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , disabled , color , edge , size  } = ownerState;
    const slots = {
        root: [
            'root',
            disabled && 'disabled',
            color !== 'default' && `color${_capitalizeDefault.default(color)}`,
            edge && `edge${_capitalizeDefault.default(edge)}`,
            `size${_capitalizeDefault.default(size)}`
        ]
    };
    return _core.unstable_composeClasses(slots, _iconButtonClasses.getIconButtonUtilityClass, classes);
};
const IconButtonRoot = _styledDefault.default(_buttonBaseDefault.default, {
    name: 'MuiIconButton',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            ownerState.color !== 'default' && styles[`color${_capitalizeDefault.default(ownerState.color)}`],
            ownerState.edge && styles[`edge${_capitalizeDefault.default(ownerState.edge)}`],
            styles[`size${_capitalizeDefault.default(ownerState.size)}`]
        ];
    }
})(({ theme , ownerState  })=>_extendsDefault.default({
        textAlign: 'center',
        flex: '0 0 auto',
        fontSize: theme.typography.pxToRem(24),
        padding: 8,
        borderRadius: '50%',
        overflow: 'visible',
        // Explicitly set the default value to solve a bug on IE11.
        color: theme.palette.action.active,
        transition: theme.transitions.create('background-color', {
            duration: theme.transitions.duration.shortest
        }),
        '&:hover': {
            backgroundColor: _system.alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                backgroundColor: 'transparent'
            }
        }
    }, ownerState.edge === 'start' && {
        marginLeft: ownerState.size === 'small' ? -3 : -12
    }, ownerState.edge === 'end' && {
        marginRight: ownerState.size === 'small' ? -3 : -12
    })
, ({ theme , ownerState  })=>_extendsDefault.default({
    }, ownerState.color === 'inherit' && {
        color: 'inherit'
    }, ownerState.color !== 'inherit' && ownerState.color !== 'default' && {
        color: theme.palette[ownerState.color].main,
        '&:hover': {
            backgroundColor: _system.alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
                backgroundColor: 'transparent'
            }
        }
    }, ownerState.size === 'small' && {
        padding: 5,
        fontSize: theme.typography.pxToRem(18)
    }, ownerState.size === 'large' && {
        padding: 12,
        fontSize: theme.typography.pxToRem(28)
    }, {
        [`&.${_iconButtonClassesDefault.default.disabled}`]: {
            backgroundColor: 'transparent',
            color: theme.palette.action.disabled
        }
    })
);
/**
 * Refer to the [Icons](/components/icons/) section of the documentation
 * regarding the available icon options.
 */ const IconButton = /*#__PURE__*/ _react.forwardRef(function IconButton1(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiIconButton'
    });
    const { edge =false , children , className , color ='default' , disabled =false , disableFocusRipple =false , size ='medium'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = _extendsDefault.default({
    }, props, {
        edge,
        color,
        disabled,
        disableFocusRipple,
        size
    });
    const classes = useUtilityClasses(ownerState);
    return(/*#__PURE__*/ _jsxRuntime.jsx(IconButtonRoot, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className),
        centerRipple: true,
        focusRipple: !disableFocusRipple,
        disabled: disabled,
        ref: ref,
        ownerState: ownerState
    }, other, {
        children: children
    })));
});
IconButton.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The icon to display.
   */ children: _utils.chainPropTypes(_propTypesDefault.default.node, (props)=>{
        const found = _react.Children.toArray(props.children).some((child)=>/*#__PURE__*/ _react.isValidElement(child) && child.props.onClick
        );
        if (found) return new Error([
            'MUI: You are providing an onClick event listener to a child of a button element.',
            'Prefer applying it to the IconButton directly.',
            'This guarantees that the whole <button> will be responsive to click events.'
        ].join('\n'));
        return null;
    }),
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'default'
   */ color: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'inherit',
            'default',
            'primary',
            'secondary',
            'error',
            'info',
            'success',
            'warning'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * If `true`, the component is disabled.
   * @default false
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */ disableFocusRipple: _propTypesDefault.default.bool,
    /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */ disableRipple: _propTypesDefault.default.bool,
    /**
   * If given, uses a negative margin to counteract the padding on one
   * side (this is often helpful for aligning the left or right
   * side of the icon with content above or below, without ruining the border
   * size and shape).
   * @default false
   */ edge: _propTypesDefault.default.oneOf([
        'end',
        'start',
        false
    ]),
    /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'medium'
   */ size: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _propTypesDefault.default.oneOf([
            'small',
            'medium',
            'large'
        ]),
        _propTypesDefault.default.string
    ]),
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
exports.default = IconButton;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@babel/runtime/helpers/esm/extends":"bKAu6","react":"6TuXu","prop-types":"1tgq3","clsx":"eg1He","@mui/utils":"9YmNw","@mui/core":"9b2I1","@mui/system":"ccIuz","../styles/styled":"gqLeX","../styles/useThemeProps":"1cdc1","../ButtonBase":"lbA1L","../utils/capitalize":"3YJ7J","./iconButtonClasses":"ewObX","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ewObX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getIconButtonUtilityClass", ()=>getIconButtonUtilityClass
);
var _core = require("@mui/core");
function getIconButtonUtilityClass(slot) {
    return _core.generateUtilityClass('MuiIconButton', slot);
}
const iconButtonClasses = _core.generateUtilityClasses('MuiIconButton', [
    'root',
    'disabled',
    'colorInherit',
    'colorPrimary',
    'colorSecondary',
    'edgeStart',
    'edgeEnd',
    'sizeSmall',
    'sizeMedium',
    'sizeLarge'
]);
exports.default = iconButtonClasses;

},{"@mui/core":"9b2I1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7qkDb":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _createSvgIcon = _interopRequireDefault(require("./utils/createSvgIcon"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop1) {
        return nodeInterop1 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        default: obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj.default = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var _default = _createSvgIcon.default(/*#__PURE__*/ _jsxRuntime.jsx("path", {
    d: "M12 1.27a11 11 0 00-3.48 21.46c.55.09.73-.28.73-.55v-1.84c-3.03.64-3.67-1.46-3.67-1.46-.55-1.29-1.28-1.65-1.28-1.65-.92-.65.1-.65.1-.65 1.1 0 1.73 1.1 1.73 1.1.92 1.65 2.57 1.2 3.21.92a2 2 0 01.64-1.47c-2.47-.27-5.04-1.19-5.04-5.5 0-1.1.46-2.1 1.2-2.84a3.76 3.76 0 010-2.93s.91-.28 3.11 1.1c1.8-.49 3.7-.49 5.5 0 2.1-1.38 3.02-1.1 3.02-1.1a3.76 3.76 0 010 2.93c.83.74 1.2 1.74 1.2 2.94 0 4.21-2.57 5.13-5.04 5.4.45.37.82.92.82 2.02v3.03c0 .27.1.64.73.55A11 11 0 0012 1.27"
}), 'GitHub');
exports.default = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"eigyQ","react":"6TuXu","./utils/createSvgIcon":"9J0CW","react/jsx-runtime":"8xIwr"}],"cNyaB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "adaptV4Theme", ()=>_adaptV4ThemeDefault.default
);
parcelHelpers.export(exports, "hexToRgb", ()=>_system.hexToRgb
);
parcelHelpers.export(exports, "rgbToHex", ()=>_system.rgbToHex
);
parcelHelpers.export(exports, "hslToRgb", ()=>_system.hslToRgb
);
parcelHelpers.export(exports, "decomposeColor", ()=>_system.decomposeColor
);
parcelHelpers.export(exports, "recomposeColor", ()=>_system.recomposeColor
);
parcelHelpers.export(exports, "getContrastRatio", ()=>_system.getContrastRatio
);
parcelHelpers.export(exports, "getLuminance", ()=>_system.getLuminance
);
parcelHelpers.export(exports, "emphasize", ()=>_system.emphasize
);
parcelHelpers.export(exports, "alpha", ()=>_system.alpha
);
parcelHelpers.export(exports, "darken", ()=>_system.darken
);
parcelHelpers.export(exports, "lighten", ()=>_system.lighten
);
parcelHelpers.export(exports, "css", ()=>_system.css
);
parcelHelpers.export(exports, "keyframes", ()=>_system.keyframes
);
parcelHelpers.export(exports, "createTheme", ()=>_createThemeDefault.default
);
parcelHelpers.export(exports, "createMuiTheme", ()=>_createTheme.createMuiTheme
);
parcelHelpers.export(exports, "unstable_createMuiStrictModeTheme", ()=>_createMuiStrictModeThemeDefault.default
);
parcelHelpers.export(exports, "createStyles", ()=>_createStylesDefault.default
);
parcelHelpers.export(exports, "unstable_getUnit", ()=>_cssUtils.getUnit
);
parcelHelpers.export(exports, "unstable_toUnitless", ()=>_cssUtils.toUnitless
);
parcelHelpers.export(exports, "responsiveFontSizes", ()=>_responsiveFontSizesDefault.default
);
parcelHelpers.export(exports, "duration", ()=>_createTransitions.duration
);
parcelHelpers.export(exports, "easing", ()=>_createTransitions.easing
);
parcelHelpers.export(exports, "useTheme", ()=>_useThemeDefault.default
);
parcelHelpers.export(exports, "useThemeProps", ()=>_useThemePropsDefault.default
);
parcelHelpers.export(exports, "styled", ()=>_styledDefault.default
);
parcelHelpers.export(exports, "experimentalStyled", ()=>_styledDefault.default
);
parcelHelpers.export(exports, "ThemeProvider", ()=>_themeProviderDefault.default
);
parcelHelpers.export(exports, "StyledEngineProvider", ()=>_system.StyledEngineProvider
) // The legacy utilities from @mui/styles
;
// These are just empty functions that throws when invoked
parcelHelpers.export(exports, "makeStyles", ()=>_makeStylesDefault.default
);
parcelHelpers.export(exports, "withStyles", ()=>_withStylesDefault.default
);
parcelHelpers.export(exports, "withTheme", ()=>_withThemeDefault.default
);
var _adaptV4Theme = require("./adaptV4Theme");
var _adaptV4ThemeDefault = parcelHelpers.interopDefault(_adaptV4Theme);
var _system = require("@mui/system");
var _createTheme = require("./createTheme");
var _createThemeDefault = parcelHelpers.interopDefault(_createTheme);
var _createMuiStrictModeTheme = require("./createMuiStrictModeTheme");
var _createMuiStrictModeThemeDefault = parcelHelpers.interopDefault(_createMuiStrictModeTheme);
var _createStyles = require("./createStyles");
var _createStylesDefault = parcelHelpers.interopDefault(_createStyles);
var _cssUtils = require("./cssUtils");
var _responsiveFontSizes = require("./responsiveFontSizes");
var _responsiveFontSizesDefault = parcelHelpers.interopDefault(_responsiveFontSizes);
var _createTransitions = require("./createTransitions");
var _useTheme = require("./useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _useThemeProps = require("./useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _styled = require("./styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _themeProvider = require("./ThemeProvider");
var _themeProviderDefault = parcelHelpers.interopDefault(_themeProvider);
var _makeStyles = require("./makeStyles");
var _makeStylesDefault = parcelHelpers.interopDefault(_makeStyles);
var _withStyles = require("./withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var _withTheme = require("./withTheme");
var _withThemeDefault = parcelHelpers.interopDefault(_withTheme);

},{"./adaptV4Theme":"cDJCc","@mui/system":"ccIuz","./createTheme":"iDLxa","./createMuiStrictModeTheme":"gCS33","./createStyles":"jv7SQ","./cssUtils":"6EVEd","./responsiveFontSizes":"790nx","./createTransitions":"468ig","./useTheme":"i6YeU","./useThemeProps":"1cdc1","./styled":"gqLeX","./ThemeProvider":"4CstZ","./makeStyles":"kOBTd","./withStyles":"dpNSw","./withTheme":"lBMdP","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cDJCc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _system = require("@mui/system");
const _excluded = [
    "defaultProps",
    "mixins",
    "overrides",
    "palette",
    "props",
    "styleOverrides"
], _excluded2 = [
    "type",
    "mode"
];
function adaptV4Theme(inputTheme) {
    console.warn([
        'MUI: adaptV4Theme() is deprecated.',
        'Follow the upgrade guide on https://mui.com/r/migration-v4#theme.'
    ].join('\n'));
    const { defaultProps ={
    } , mixins ={
    } , overrides ={
    } , palette ={
    } , props ={
    } , styleOverrides ={
    }  } = inputTheme, other = _objectWithoutPropertiesLooseDefault.default(inputTheme, _excluded);
    const theme = _extendsDefault.default({
    }, other, {
        components: {
        }
    }); // default props
    Object.keys(defaultProps).forEach((component)=>{
        const componentValue = theme.components[component] || {
        };
        componentValue.defaultProps = defaultProps[component];
        theme.components[component] = componentValue;
    });
    Object.keys(props).forEach((component)=>{
        const componentValue = theme.components[component] || {
        };
        componentValue.defaultProps = props[component];
        theme.components[component] = componentValue;
    }); // css overrides
    Object.keys(styleOverrides).forEach((component)=>{
        const componentValue = theme.components[component] || {
        };
        componentValue.styleOverrides = styleOverrides[component];
        theme.components[component] = componentValue;
    });
    Object.keys(overrides).forEach((component)=>{
        const componentValue = theme.components[component] || {
        };
        componentValue.styleOverrides = overrides[component];
        theme.components[component] = componentValue;
    }); // theme.spacing
    theme.spacing = _system.createSpacing(inputTheme.spacing); // theme.mixins.gutters
    const breakpoints = _system.createBreakpoints(inputTheme.breakpoints || {
    });
    const spacing = theme.spacing;
    theme.mixins = _extendsDefault.default({
        gutters: (styles = {
        })=>{
            return _extendsDefault.default({
                paddingLeft: spacing(2),
                paddingRight: spacing(2)
            }, styles, {
                [breakpoints.up('sm')]: _extendsDefault.default({
                    paddingLeft: spacing(3),
                    paddingRight: spacing(3)
                }, styles[breakpoints.up('sm')])
            });
        }
    }, mixins);
    const { type: typeInput , mode: modeInput  } = palette, paletteRest = _objectWithoutPropertiesLooseDefault.default(palette, _excluded2);
    const finalMode = modeInput || typeInput || 'light';
    theme.palette = _extendsDefault.default({
        // theme.palette.text.hint
        text: {
            hint: finalMode === 'dark' ? 'rgba(255, 255, 255, 0.5)' : 'rgba(0, 0, 0, 0.38)'
        },
        mode: finalMode,
        type: finalMode
    }, paletteRest);
    return theme;
}
exports.default = adaptV4Theme;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@mui/system":"ccIuz","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gCS33":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
var _createTheme = require("./createTheme");
var _createThemeDefault = parcelHelpers.interopDefault(_createTheme);
function createMuiStrictModeTheme(options, ...args) {
    return _createThemeDefault.default(_utils.deepmerge({
        unstable_strictMode: true
    }, options), ...args);
}
exports.default = createMuiStrictModeTheme;

},{"@mui/utils":"9YmNw","./createTheme":"iDLxa","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jv7SQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let warnedOnce = false; // To remove in v6
function createStyles(styles) {
    if (!warnedOnce) {
        console.warn([
            'MUI: createStyles from @mui/material/styles is deprecated.',
            'Please use @mui/styles/createStyles'
        ].join('\n'));
        warnedOnce = true;
    }
    return styles;
}
exports.default = createStyles;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6EVEd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isUnitless", ()=>isUnitless
) // Ported from Compass
;
// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss
// Emulate the sass function "unit"
parcelHelpers.export(exports, "getUnit", ()=>getUnit
) // Emulate the sass function "unitless"
;
parcelHelpers.export(exports, "toUnitless", ()=>toUnitless
) // Convert any CSS <length> or <percentage> value to any another.
;
// From https://github.com/KyleAMathews/convert-css-length
parcelHelpers.export(exports, "convertLength", ()=>convertLength
);
parcelHelpers.export(exports, "alignProperty", ()=>alignProperty
) // fontGrid finds a minimal grid (in rem) for the fontSize values so that the
;
// lineHeight falls under a x pixels grid, 4px in the case of Material Design,
// without changing the relative line height
parcelHelpers.export(exports, "fontGrid", ()=>fontGrid
);
/**
 * generate a responsive version of a given CSS property
 * @example
 * responsiveProperty({
 *   cssProperty: 'fontSize',
 *   min: 15,
 *   max: 20,
 *   unit: 'px',
 *   breakpoints: [300, 600],
 * })
 *
 * // this returns
 *
 * {
 *   fontSize: '15px',
 *   '@media (min-width:300px)': {
 *     fontSize: '17.5px',
 *   },
 *   '@media (min-width:600px)': {
 *     fontSize: '20px',
 *   },
 * }
 * @param {Object} params
 * @param {string} params.cssProperty - The CSS property to be made responsive
 * @param {number} params.min - The smallest value of the CSS property
 * @param {number} params.max - The largest value of the CSS property
 * @param {string} [params.unit] - The unit to be used for the CSS property
 * @param {Array.number} [params.breakpoints]  - An array of breakpoints
 * @param {number} [params.alignStep] - Round scaled value to fall under this grid
 * @returns {Object} responsive styles for {params.cssProperty}
 */ parcelHelpers.export(exports, "responsiveProperty", ()=>responsiveProperty
);
function isUnitless(value) {
    return String(parseFloat(value)).length === String(value).length;
}
function getUnit(input) {
    return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || '';
}
function toUnitless(length) {
    return parseFloat(length);
}
function convertLength(baseFontSize) {
    return (length, toUnit)=>{
        const fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.
        if (fromUnit === toUnit) return length;
         // Convert input length to pixels.
        let pxLength = toUnitless(length);
        if (fromUnit !== 'px') {
            if (fromUnit === 'em') pxLength = toUnitless(length) * toUnitless(baseFontSize);
            else if (fromUnit === 'rem') pxLength = toUnitless(length) * toUnitless(baseFontSize);
        } // Convert length in pixels to the output unit
        let outputLength = pxLength;
        if (toUnit !== 'px') {
            if (toUnit === 'em') outputLength = pxLength / toUnitless(baseFontSize);
            else if (toUnit === 'rem') outputLength = pxLength / toUnitless(baseFontSize);
            else return length;
        }
        return parseFloat(outputLength.toFixed(5)) + toUnit;
    };
}
function alignProperty({ size , grid  }) {
    const sizeBelow = size - size % grid;
    const sizeAbove = sizeBelow + grid;
    return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;
}
function fontGrid({ lineHeight , pixels , htmlFontSize  }) {
    return pixels / (lineHeight * htmlFontSize);
}
function responsiveProperty({ cssProperty , min , max , unit ='rem' , breakpoints =[
    600,
    900,
    1200
] , transform =null  }) {
    const output = {
        [cssProperty]: `${min}${unit}`
    };
    const factor = (max - min) / breakpoints[breakpoints.length - 1];
    breakpoints.forEach((breakpoint)=>{
        let value = min + factor * breakpoint;
        if (transform !== null) value = transform(value);
        output[`@media (min-width:${breakpoint}px)`] = {
            [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`
        };
    });
    return output;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"790nx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _utils = require("@mui/utils");
var _cssUtils = require("./cssUtils");
function responsiveFontSizes(themeInput, options = {
}) {
    const { breakpoints =[
        'sm',
        'md',
        'lg'
    ] , disableAlign =false , factor =2 , variants =[
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'subtitle1',
        'subtitle2',
        'body1',
        'body2',
        'caption',
        'button',
        'overline'
    ]  } = options;
    const theme = _extendsDefault.default({
    }, themeInput);
    theme.typography = _extendsDefault.default({
    }, theme.typography);
    const typography = theme.typography; // Convert between css lengths e.g. em->px or px->rem
    // Set the baseFontSize for your project. Defaults to 16px (also the browser default).
    const convert = _cssUtils.convertLength(typography.htmlFontSize);
    const breakpointValues = breakpoints.map((x)=>theme.breakpoints.values[x]
    );
    variants.forEach((variant)=>{
        const style = typography[variant];
        const remFontSize = parseFloat(convert(style.fontSize, 'rem'));
        if (remFontSize <= 1) return;
        const maxFontSize = remFontSize;
        const minFontSize = 1 + (maxFontSize - 1) / factor;
        let { lineHeight  } = style;
        if (!_cssUtils.isUnitless(lineHeight) && !disableAlign) throw new Error(`MUI: Unsupported non-unitless line height with grid alignment.\nUse unitless line heights instead.`);
        if (!_cssUtils.isUnitless(lineHeight)) // make it unitless
        lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);
        let transform = null;
        if (!disableAlign) transform = (value)=>_cssUtils.alignProperty({
                size: value,
                grid: _cssUtils.fontGrid({
                    pixels: 4,
                    lineHeight,
                    htmlFontSize: typography.htmlFontSize
                })
            })
        ;
        typography[variant] = _extendsDefault.default({
        }, style, _cssUtils.responsiveProperty({
            cssProperty: 'fontSize',
            min: minFontSize,
            max: maxFontSize,
            unit: 'rem',
            breakpoints: breakpointValues,
            transform
        }));
    });
    return theme;
}
exports.default = responsiveFontSizes;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@mui/utils":"9YmNw","./cssUtils":"6EVEd","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4CstZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_system.ThemeProvider
);
var _system = require("@mui/system");

},{"@mui/system":"ccIuz","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kOBTd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
function makeStyles() {
    throw new Error(`MUI: makeStyles is not longer exported from @mui/material/styles.\nYou have to import it from @mui/styles.\nSee https://mui.com/r/migration-v4/#material-ui-core-styles for more details.`);
}
exports.default = makeStyles;

},{"@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dpNSw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
function withStyles() {
    throw new Error(`MUI: withStyles is not longer exported from @mui/material/styles.\nYou have to import it from @mui/styles.\nSee https://mui.com/r/migration-v4/#material-ui-core-styles for more details.`);
}
exports.default = withStyles;

},{"@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lBMdP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("@mui/utils");
function withTheme() {
    throw new Error(`MUI: withTheme is not longer exported from @mui/material/styles.\nYou have to import it from @mui/styles.\nSee https://mui.com/r/migration-v4/#material-ui-core-styles for more details.`);
}
exports.default = withTheme;

},{"@mui/utils":"9YmNw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"e3CjC":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$c9bd = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$c9bd.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _snackbar = require("@mui/material/Snackbar");
var _snackbarDefault = parcelHelpers.interopDefault(_snackbar);
var _s = $RefreshSig$(), _s1 = $RefreshSig$();
const EditorPS = require('../output/Editor');
function Editor(props) {
    _s();
    const lines = props.value.split("\n");
    const [focus, setFocus] = _react.useState({
        line: lines.length - 1,
        offset: lines[lines.length - 1].length
    });
    const setLines = (l)=>{
        const newValue = l.join("\n");
        localStorage.setItem("value", newValue);
        props.setValue(newValue);
    };
    const { highlights , results  } = EditorPS.run(lines);
    const onValueChanged = (e, i)=>{
        const newLines = [
            ...lines
        ];
        const inserted = e.target.value.split("\n");
        newLines.splice(i, 1, ...inserted);
        setLines(newLines);
        // When the editor value changes, each textarea will manage its own focus/selectionStart
        setFocus({
            line: null,
            offset: null
        });
    };
    const onEnter = (i, selectionStart, selectionEnd)=>{
        const first = lines[i].substring(0, selectionStart);
        const second = lines[i].substring(selectionEnd);
        const newLines = [
            ...lines
        ];
        newLines.splice(i, 1, first, second);
        setLines(newLines);
        setFocus({
            line: i + 1,
            offset: 0
        });
    };
    // When the backspace key is pressed at the cursor is at the beginning of the line
    const onBackspace0 = (i)=>{
        if (i == 0) return;
        const newLines = [
            ...lines
        ];
        newLines[i - 1] = newLines[i - 1] + newLines[i];
        newLines.splice(i, 1);
        setLines(newLines);
        setFocus({
            line: i - 1,
            offset: lines[i - 1].length
        });
    };
    // When either the up or down key is pressed
    const onUpDown = (i, up, selectionStart)=>{
        const targetLine = up ? i - 1 : i + 1;
        if (targetLine < 0 || targetLine >= lines.length) return;
        setFocus({
            line: targetLine,
            offset: Math.min(lines[targetLine].length, selectionStart)
        });
    };
    return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
        __source: {
            fileName: "dev/editor.tsx",
            lineNumber: 69
        },
        __self: this
    }, lines.map((line, i)=>/*#__PURE__*/ _reactDefault.default.createElement(Line, {
            i: i,
            onValueChanged: onValueChanged,
            line: line,
            result: results[i],
            key: i,
            focusOffset: focus.line === i ? focus.offset : null,
            highlight: highlights[i],
            onEnter: onEnter,
            onBackspace0: onBackspace0,
            onUpDown: onUpDown,
            __source: {
                fileName: "dev/editor.tsx",
                lineNumber: 71
            },
            __self: this
        })
    )));
}
exports.default = Editor;
_s(Editor, "1uVX8MIGy/6+fbDnXhfFv568dHA=");
_c = Editor;
const KEY_ENTER = 13;
const KEY_BACKSPACE = 8;
const KEY_UP = 38;
const KEY_DOWN = 40;
function Line(props) {
    _s1();
    const [showSnack, setShowSnack] = _react.useState(false);
    let textarea = null;
    const textareaRef = _react.useCallback((node)=>{
        textarea = node;
        if (!textarea || props.focusOffset === null) return;
        textarea.setSelectionRange(props.focusOffset, props.focusOffset);
        textarea.focus();
    });
    const onKeyDown = (e)=>{
        const selectionStart = textarea && textarea.selectionStart || 0;
        const selectionEnd = textarea && textarea.selectionEnd || 0;
        if (e.keyCode == KEY_ENTER) {
            props.onEnter(props.i, selectionStart, selectionEnd);
            e.preventDefault();
        } else if (e.keyCode == KEY_BACKSPACE && selectionStart == 0 && selectionEnd == 0) {
            props.onBackspace0(props.i);
            e.preventDefault();
        } else if (e.keyCode == KEY_UP || e.keyCode == KEY_DOWN) {
            props.onUpDown(props.i, e.keyCode == KEY_UP, selectionStart);
            e.preventDefault();
        }
    };
    const result = (()=>{
        if (props.result.empty) return;
        else if (props.result.success !== undefined) return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
            className: "result success",
            onClick: ()=>{
                navigator.clipboard.writeText(props.result.success);
                setShowSnack(true);
            },
            __source: {
                fileName: "dev/editor.tsx",
                lineNumber: 126
            },
            __self: this
        }, props.result.success));
        else if (props.result.error !== undefined) return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
            className: "result error",
            __source: {
                fileName: "dev/editor.tsx",
                lineNumber: 135
            },
            __self: this
        }, props.result.error));
    })();
    return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "editor-line",
        __source: {
            fileName: "dev/editor.tsx",
            lineNumber: 140
        },
        __self: this
    }, /*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "editable",
        __source: {
            fileName: "dev/editor.tsx",
            lineNumber: 141
        },
        __self: this
    }, /*#__PURE__*/ _reactDefault.default.createElement("textarea", {
        onChange: (e)=>props.onValueChanged(e, props.i)
        ,
        value: props.line,
        ref: textareaRef,
        onKeyDown: onKeyDown,
        __source: {
            fileName: "dev/editor.tsx",
            lineNumber: 142
        },
        __self: this
    }), /*#__PURE__*/ _reactDefault.default.createElement("pre", {
        "ariea-hidden": "true",
        className: "highlight",
        __source: {
            fileName: "dev/editor.tsx",
            lineNumber: 147
        },
        __self: this
    }, props.highlight)), result, /*#__PURE__*/ _reactDefault.default.createElement(_snackbarDefault.default, {
        open: showSnack,
        onClose: ()=>setShowSnack(false)
        ,
        autoHideDuration: 4000,
        message: "Copied to clipboard",
        __source: {
            fileName: "dev/editor.tsx",
            lineNumber: 150
        },
        __self: this
    })));
}
_s1(Line, "pehJwAKjIr6TgacLSsPnicFY8u4=");
_c1 = Line;
var _c, _c1;
$RefreshReg$(_c, "Editor");
$RefreshReg$(_c1, "Line");

  $parcel$ReactRefreshHelpers$c9bd.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"6TuXu","@mui/material/Snackbar":"6GHLy","../output/Editor":"4R5f3","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J"}],"6GHLy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_snackbarDefault.default
);
parcelHelpers.export(exports, "snackbarClasses", ()=>_snackbarClassesDefault.default
);
var _snackbar = require("./Snackbar");
var _snackbarDefault = parcelHelpers.interopDefault(_snackbar);
var _snackbarClasses = require("./snackbarClasses");
var _snackbarClassesDefault = parcelHelpers.interopDefault(_snackbarClasses);
parcelHelpers.exportAll(_snackbarClasses, exports);

},{"./Snackbar":"7HA6i","./snackbarClasses":"81oxV","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7HA6i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _core = require("@mui/core");
var _clickAwayListener = require("@mui/core/ClickAwayListener");
var _clickAwayListenerDefault = parcelHelpers.interopDefault(_clickAwayListener);
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useTheme = require("../styles/useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _createTransitions = require("../styles/createTransitions");
var _useEventCallback = require("../utils/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _grow = require("../Grow");
var _growDefault = parcelHelpers.interopDefault(_grow);
var _snackbarContent = require("../SnackbarContent");
var _snackbarContentDefault = parcelHelpers.interopDefault(_snackbarContent);
var _snackbarClasses = require("./snackbarClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "onEnter",
    "onExited"
], _excluded2 = [
    "action",
    "anchorOrigin",
    "autoHideDuration",
    "children",
    "className",
    "ClickAwayListenerProps",
    "ContentProps",
    "disableWindowBlurListener",
    "message",
    "onClose",
    "onMouseEnter",
    "onMouseLeave",
    "open",
    "resumeHideDuration",
    "TransitionComponent",
    "transitionDuration",
    "TransitionProps"
];
const useUtilityClasses = (ownerState)=>{
    const { classes , anchorOrigin  } = ownerState;
    const slots = {
        root: [
            'root',
            `anchorOrigin${_capitalizeDefault.default(anchorOrigin.vertical)}${_capitalizeDefault.default(anchorOrigin.horizontal)}`
        ]
    };
    return _core.unstable_composeClasses(slots, _snackbarClasses.getSnackbarUtilityClass, classes);
};
const SnackbarRoot = _styledDefault.default('div', {
    name: 'MuiSnackbar',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState  } = props;
        return [
            styles.root,
            styles[`anchorOrigin${_capitalizeDefault.default(ownerState.anchorOrigin.vertical)}${_capitalizeDefault.default(ownerState.anchorOrigin.horizontal)}`]
        ];
    }
})(({ theme , ownerState  })=>{
    const center = _extendsDefault.default({
    }, !ownerState.isRtl && {
        left: '50%',
        right: 'auto',
        transform: 'translateX(-50%)'
    }, ownerState.isRtl && {
        right: '50%',
        left: 'auto',
        transform: 'translateX(50%)'
    });
    return _extendsDefault.default({
        zIndex: theme.zIndex.snackbar,
        position: 'fixed',
        display: 'flex',
        left: 8,
        right: 8,
        justifyContent: 'center',
        alignItems: 'center'
    }, ownerState.anchorOrigin.vertical === 'top' ? {
        top: 8
    } : {
        bottom: 8
    }, ownerState.anchorOrigin.horizontal === 'left' && {
        justifyContent: 'flex-start'
    }, ownerState.anchorOrigin.horizontal === 'right' && {
        justifyContent: 'flex-end'
    }, {
        [theme.breakpoints.up('sm')]: _extendsDefault.default({
        }, ownerState.anchorOrigin.vertical === 'top' ? {
            top: 24
        } : {
            bottom: 24
        }, ownerState.anchorOrigin.horizontal === 'center' && center, ownerState.anchorOrigin.horizontal === 'left' && _extendsDefault.default({
        }, !ownerState.isRtl && {
            left: 24,
            right: 'auto'
        }, ownerState.isRtl && {
            right: 24,
            left: 'auto'
        }), ownerState.anchorOrigin.horizontal === 'right' && _extendsDefault.default({
        }, !ownerState.isRtl && {
            right: 24,
            left: 'auto'
        }, ownerState.isRtl && {
            left: 24,
            right: 'auto'
        }))
    });
});
const Snackbar = /*#__PURE__*/ _react.forwardRef(function Snackbar1(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiSnackbar'
    });
    const { action , anchorOrigin: { vertical , horizontal  } = {
        vertical: 'bottom',
        horizontal: 'left'
    } , autoHideDuration =null , children , className , ClickAwayListenerProps , ContentProps , disableWindowBlurListener =false , message , onClose , onMouseEnter , onMouseLeave , open , resumeHideDuration , TransitionComponent =_growDefault.default , transitionDuration ={
        enter: _createTransitions.duration.enteringScreen,
        exit: _createTransitions.duration.leavingScreen
    } , TransitionProps: { onEnter , onExited  } = {
    }  } = props, TransitionProps = _objectWithoutPropertiesLooseDefault.default(props.TransitionProps, _excluded), other = _objectWithoutPropertiesLooseDefault.default(props, _excluded2);
    const theme = _useThemeDefault.default();
    const isRtl = theme.direction === 'rtl';
    const ownerState = _extendsDefault.default({
    }, props, {
        anchorOrigin: {
            vertical,
            horizontal
        },
        isRtl
    });
    const classes = useUtilityClasses(ownerState);
    const timerAutoHide = _react.useRef();
    const [exited, setExited] = _react.useState(true);
    const handleClose = _useEventCallbackDefault.default((...args)=>{
        if (onClose) onClose(...args);
    });
    const setAutoHideTimer = _useEventCallbackDefault.default((autoHideDurationParam)=>{
        if (!onClose || autoHideDurationParam == null) return;
        clearTimeout(timerAutoHide.current);
        timerAutoHide.current = setTimeout(()=>{
            handleClose(null, 'timeout');
        }, autoHideDurationParam);
    });
    _react.useEffect(()=>{
        if (open) setAutoHideTimer(autoHideDuration);
        return ()=>{
            clearTimeout(timerAutoHide.current);
        };
    }, [
        open,
        autoHideDuration,
        setAutoHideTimer
    ]); // Pause the timer when the user is interacting with the Snackbar
    // or when the user hide the window.
    const handlePause = ()=>{
        clearTimeout(timerAutoHide.current);
    }; // Restart the timer when the user is no longer interacting with the Snackbar
    // or when the window is shown back.
    const handleResume = _react.useCallback(()=>{
        if (autoHideDuration != null) setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);
    }, [
        autoHideDuration,
        resumeHideDuration,
        setAutoHideTimer
    ]);
    const handleMouseEnter = (event)=>{
        if (onMouseEnter) onMouseEnter(event);
        handlePause();
    };
    const handleMouseLeave = (event)=>{
        if (onMouseLeave) onMouseLeave(event);
        handleResume();
    };
    const handleClickAway = (event)=>{
        if (onClose) onClose(event, 'clickaway');
    };
    const handleExited = (node)=>{
        setExited(true);
        if (onExited) onExited(node);
    };
    const handleEnter = (node, isAppearing)=>{
        setExited(false);
        if (onEnter) onEnter(node, isAppearing);
    };
    _react.useEffect(()=>{
        // TODO: window global should be refactored here
        if (!disableWindowBlurListener && open) {
            window.addEventListener('focus', handleResume);
            window.addEventListener('blur', handlePause);
            return ()=>{
                window.removeEventListener('focus', handleResume);
                window.removeEventListener('blur', handlePause);
            };
        }
        return undefined;
    }, [
        disableWindowBlurListener,
        handleResume,
        open
    ]); // So we only render active snackbars.
    if (!open && exited) return null;
    return(/*#__PURE__*/ _jsxRuntime.jsx(_clickAwayListenerDefault.default, _extendsDefault.default({
        onClickAway: handleClickAway
    }, ClickAwayListenerProps, {
        children: /*#__PURE__*/ _jsxRuntime.jsx(SnackbarRoot, _extendsDefault.default({
            className: _clsxDefault.default(classes.root, className),
            onMouseEnter: handleMouseEnter,
            onMouseLeave: handleMouseLeave,
            ownerState: ownerState,
            ref: ref
        }, other, {
            children: /*#__PURE__*/ _jsxRuntime.jsx(TransitionComponent, _extendsDefault.default({
                appear: true,
                in: open,
                timeout: transitionDuration,
                direction: vertical === 'top' ? 'down' : 'up',
                onEnter: handleEnter,
                onExited: handleExited
            }, TransitionProps, {
                children: children || /*#__PURE__*/ _jsxRuntime.jsx(_snackbarContentDefault.default, _extendsDefault.default({
                    message: message,
                    action: action
                }, ContentProps))
            }))
        }))
    })));
});
Snackbar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The action to display. It renders after the message, at the end of the snackbar.
   */ action: _propTypesDefault.default.node,
    /**
   * The anchor of the `Snackbar`.
   * On smaller screens, the component grows to occupy all the available width,
   * the horizontal alignment is ignored.
   * @default { vertical: 'bottom', horizontal: 'left' }
   */ anchorOrigin: _propTypesDefault.default.shape({
        horizontal: _propTypesDefault.default.oneOf([
            'center',
            'left',
            'right'
        ]).isRequired,
        vertical: _propTypesDefault.default.oneOf([
            'bottom',
            'top'
        ]).isRequired
    }),
    /**
   * The number of milliseconds to wait before automatically calling the
   * `onClose` function. `onClose` should then set the state of the `open`
   * prop to hide the Snackbar. This behavior is disabled by default with
   * the `null` value.
   * @default null
   */ autoHideDuration: _propTypesDefault.default.number,
    /**
   * Replace the `SnackbarContent` component.
   */ children: _propTypesDefault.default.element,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * Props applied to the `ClickAwayListener` element.
   */ ClickAwayListenerProps: _propTypesDefault.default.object,
    /**
   * Props applied to the [`SnackbarContent`](/api/snackbar-content/) element.
   */ ContentProps: _propTypesDefault.default.object,
    /**
   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.
   * @default false
   */ disableWindowBlurListener: _propTypesDefault.default.bool,
    /**
   * When displaying multiple consecutive Snackbars from a parent rendering a single
   * <Snackbar/>, add the key prop to ensure independent treatment of each message.
   * e.g. <Snackbar key={message} />, otherwise, the message may update-in-place and
   * features such as autoHideDuration may be canceled.
   */ key: ()=>null
    ,
    /**
   * The message to display.
   */ message: _propTypesDefault.default.node,
    /**
   * Callback fired when the component requests to be closed.
   * Typically `onClose` is used to set state in the parent component,
   * which is used to control the `Snackbar` `open` prop.
   * The `reason` parameter can optionally be used to control the response to `onClose`,
   * for example ignoring `clickaway`.
   *
   * @param {React.SyntheticEvent<any>} event The event source of the callback.
   * @param {string} reason Can be: `"timeout"` (`autoHideDuration` expired), `"clickaway"`.
   */ onClose: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onMouseEnter: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onMouseLeave: _propTypesDefault.default.func,
    /**
   * If `true`, the component is shown.
   */ open: _propTypesDefault.default.bool,
    /**
   * The number of milliseconds to wait before dismissing after user interaction.
   * If `autoHideDuration` prop isn't specified, it does nothing.
   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,
   * we default to `autoHideDuration / 2` ms.
   */ resumeHideDuration: _propTypesDefault.default.number,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ]),
    /**
   * The component used for the transition.
   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Grow
   */ TransitionComponent: _propTypesDefault.default.elementType,
    /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: duration.enteringScreen,
   *   exit: duration.leavingScreen,
   * }
   */ transitionDuration: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.shape({
            appear: _propTypesDefault.default.number,
            enter: _propTypesDefault.default.number,
            exit: _propTypesDefault.default.number
        })
    ]),
    /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition) component.
   * @default {}
   */ TransitionProps: _propTypesDefault.default.object
};
exports.default = Snackbar;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@babel/runtime/helpers/esm/extends":"bKAu6","react":"6TuXu","prop-types":"1tgq3","clsx":"eg1He","@mui/core":"9b2I1","@mui/core/ClickAwayListener":"cjWXt","../styles/styled":"gqLeX","../styles/useTheme":"i6YeU","../styles/useThemeProps":"1cdc1","../styles/createTransitions":"468ig","../utils/useEventCallback":"6YYQf","../utils/capitalize":"3YJ7J","../Grow":"aFCVi","../SnackbarContent":"7f1mH","./snackbarClasses":"81oxV","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cjWXt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_clickAwayListenerDefault.default
);
var _clickAwayListener = require("./ClickAwayListener");
var _clickAwayListenerDefault = parcelHelpers.interopDefault(_clickAwayListener);
parcelHelpers.exportAll(_clickAwayListener, exports);

},{"./ClickAwayListener":"dM2U5","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dM2U5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _utils = require("@mui/utils"); // TODO: return `EventHandlerName extends `on${infer EventName}` ? Lowercase<EventName> : never` once generatePropTypes runs with TS 4.1
var _jsxRuntime = require("react/jsx-runtime");
function mapEventPropToEvent(eventProp) {
    return eventProp.substring(2).toLowerCase();
}
function clickedRootScrollbar(event, doc) {
    return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
}
/**
 * Listen for click events that occur somewhere in the document, outside of the element itself.
 * For instance, if you need to hide a menu when people click anywhere else on your page.
 *
 * Demos:
 *
 * - [Click Away Listener](https://mui.com/components/click-away-listener/)
 * - [Menus](https://mui.com/components/menus/)
 *
 * API:
 *
 * - [ClickAwayListener API](https://mui.com/api/click-away-listener/)
 */ function ClickAwayListener(props) {
    const { children , disableReactTree =false , mouseEvent ='onClick' , onClickAway , touchEvent ='onTouchEnd'  } = props;
    const movedRef = _react.useRef(false);
    const nodeRef = _react.useRef(null);
    const activatedRef = _react.useRef(false);
    const syntheticEventRef = _react.useRef(false);
    _react.useEffect(()=>{
        // Ensure that this component is not "activated" synchronously.
        // https://github.com/facebook/react/issues/20074
        setTimeout(()=>{
            activatedRef.current = true;
        }, 0);
        return ()=>{
            activatedRef.current = false;
        };
    }, []);
    const handleRef = _utils.unstable_useForkRef(children.ref, nodeRef); // The handler doesn't take event.defaultPrevented into account:
    //
    // event.preventDefault() is meant to stop default behaviors like
    // clicking a checkbox to check it, hitting a button to submit a form,
    // and hitting left arrow to move the cursor in a text input etc.
    // Only special HTML elements have these default behaviors.
    const handleClickAway = _utils.unstable_useEventCallback((event)=>{
        // Given developers can stop the propagation of the synthetic event,
        // we can only be confident with a positive value.
        const insideReactTree = syntheticEventRef.current;
        syntheticEventRef.current = false;
        const doc = _utils.unstable_ownerDocument(nodeRef.current); // 1. IE11 support, which trigger the handleClickAway even after the unbind
        // 2. The child might render null.
        // 3. Behave like a blur listener.
        if (!activatedRef.current || !nodeRef.current || 'clientX' in event && clickedRootScrollbar(event, doc)) return;
         // Do not act if user performed touchmove
        if (movedRef.current) {
            movedRef.current = false;
            return;
        }
        let insideDOM; // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js
        if (event.composedPath) insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
        else insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);
        if (!insideDOM && (disableReactTree || !insideReactTree)) onClickAway(event);
    }); // Keep track of mouse/touch events that bubbled up through the portal.
    const createHandleSynthetic = (handlerName)=>(event)=>{
            syntheticEventRef.current = true;
            const childrenPropsHandler = children.props[handlerName];
            if (childrenPropsHandler) childrenPropsHandler(event);
        }
    ;
    const childrenProps = {
        ref: handleRef
    };
    if (touchEvent !== false) childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
    _react.useEffect(()=>{
        if (touchEvent !== false) {
            const mappedTouchEvent = mapEventPropToEvent(touchEvent);
            const doc = _utils.unstable_ownerDocument(nodeRef.current);
            const handleTouchMove = ()=>{
                movedRef.current = true;
            };
            doc.addEventListener(mappedTouchEvent, handleClickAway);
            doc.addEventListener('touchmove', handleTouchMove);
            return ()=>{
                doc.removeEventListener(mappedTouchEvent, handleClickAway);
                doc.removeEventListener('touchmove', handleTouchMove);
            };
        }
        return undefined;
    }, [
        handleClickAway,
        touchEvent
    ]);
    if (mouseEvent !== false) childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
    _react.useEffect(()=>{
        if (mouseEvent !== false) {
            const mappedMouseEvent = mapEventPropToEvent(mouseEvent);
            const doc = _utils.unstable_ownerDocument(nodeRef.current);
            doc.addEventListener(mappedMouseEvent, handleClickAway);
            return ()=>{
                doc.removeEventListener(mappedMouseEvent, handleClickAway);
            };
        }
        return undefined;
    }, [
        handleClickAway,
        mouseEvent
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_react.Fragment, {
        children: /*#__PURE__*/ _react.cloneElement(children, childrenProps)
    }));
}
ClickAwayListener.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
   * The wrapped element.
   */ children: _utils.elementAcceptingRef.isRequired,
    /**
   * If `true`, the React tree is ignored and only the DOM tree is considered.
   * This prop changes how portaled elements are handled.
   * @default false
   */ disableReactTree: _propTypesDefault.default.bool,
    /**
   * The mouse event to listen to. You can disable the listener by providing `false`.
   * @default 'onClick'
   */ mouseEvent: _propTypesDefault.default.oneOf([
        'onClick',
        'onMouseDown',
        'onMouseUp',
        false
    ]),
    /**
   * Callback fired when a "click away" event is detected.
   */ onClickAway: _propTypesDefault.default.func.isRequired,
    /**
   * The touch event to listen to. You can disable the listener by providing `false`.
   * @default 'onTouchEnd'
   */ touchEvent: _propTypesDefault.default.oneOf([
        'onTouchEnd',
        'onTouchStart',
        false
    ])
};
// eslint-disable-next-line
ClickAwayListener['propTypes' + ''] = _utils.exactProp(ClickAwayListener.propTypes);
exports.default = ClickAwayListener;

},{"react":"6TuXu","prop-types":"1tgq3","@mui/utils":"9YmNw","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aFCVi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_growDefault.default
);
var _grow = require("./Grow");
var _growDefault = parcelHelpers.interopDefault(_grow);

},{"./Grow":"gCwe7","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gCwe7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _utils = require("@mui/utils");
var _reactTransitionGroup = require("react-transition-group");
var _useTheme = require("../styles/useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _utils1 = require("../transitions/utils");
var _useForkRef = require("../utils/useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "addEndListener",
    "appear",
    "children",
    "easing",
    "in",
    "onEnter",
    "onEntered",
    "onEntering",
    "onExit",
    "onExited",
    "onExiting",
    "style",
    "timeout",
    "TransitionComponent"
];
function getScale(value) {
    return `scale(${value}, ${value ** 2})`;
}
const styles = {
    entering: {
        opacity: 1,
        transform: getScale(1)
    },
    entered: {
        opacity: 1,
        transform: 'none'
    }
};
/**
 * The Grow transition is used by the [Tooltip](/components/tooltips/) and
 * [Popover](/components/popover/) components.
 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
 */ const Grow = /*#__PURE__*/ _react.forwardRef(function Grow1(props, ref) {
    const { addEndListener , appear =true , children , easing , in: inProp , onEnter , onEntered , onEntering , onExit , onExited , onExiting , style , timeout ='auto' , // eslint-disable-next-line react/prop-types
    TransitionComponent =_reactTransitionGroup.Transition  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const timer = _react.useRef();
    const autoTimeout = _react.useRef();
    const theme = _useThemeDefault.default();
    const nodeRef = _react.useRef(null);
    const foreignRef = _useForkRefDefault.default(children.ref, ref);
    const handleRef = _useForkRefDefault.default(nodeRef, foreignRef);
    const normalizedTransitionCallback = (callback)=>(maybeIsAppearing)=>{
            if (callback) {
                const node = nodeRef.current; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
                if (maybeIsAppearing === undefined) callback(node);
                else callback(node, maybeIsAppearing);
            }
        }
    ;
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node, isAppearing)=>{
        _utils1.reflow(node); // So the animation always start from the start.
        const { duration: transitionDuration , delay , easing: transitionTimingFunction  } = _utils1.getTransitionProps({
            style,
            timeout,
            easing
        }, {
            mode: 'enter'
        });
        let duration;
        if (timeout === 'auto') {
            duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
            autoTimeout.current = duration;
        } else duration = transitionDuration;
        node.style.transition = [
            theme.transitions.create('opacity', {
                duration,
                delay
            }),
            theme.transitions.create('transform', {
                duration: duration * 0.666,
                delay,
                easing: transitionTimingFunction
            })
        ].join(',');
        if (onEnter) onEnter(node, isAppearing);
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node)=>{
        const { duration: transitionDuration , delay , easing: transitionTimingFunction  } = _utils1.getTransitionProps({
            style,
            timeout,
            easing
        }, {
            mode: 'exit'
        });
        let duration;
        if (timeout === 'auto') {
            duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
            autoTimeout.current = duration;
        } else duration = transitionDuration;
        node.style.transition = [
            theme.transitions.create('opacity', {
                duration,
                delay
            }),
            theme.transitions.create('transform', {
                duration: duration * 0.666,
                delay: delay || duration * 0.333,
                easing: transitionTimingFunction
            })
        ].join(',');
        node.style.opacity = '0';
        node.style.transform = getScale(0.75);
        if (onExit) onExit(node);
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next)=>{
        if (timeout === 'auto') timer.current = setTimeout(next, autoTimeout.current || 0);
        if (addEndListener) // Old call signature before `react-transition-group` implemented `nodeRef`
        addEndListener(nodeRef.current, next);
    };
    _react.useEffect(()=>{
        return ()=>{
            clearTimeout(timer.current);
        };
    }, []);
    return(/*#__PURE__*/ _jsxRuntime.jsx(TransitionComponent, _extendsDefault.default({
        appear: appear,
        in: inProp,
        nodeRef: nodeRef,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: handleAddEndListener,
        timeout: timeout === 'auto' ? null : timeout
    }, other, {
        children: (state, childProps)=>{
            return(/*#__PURE__*/ _react.cloneElement(children, _extendsDefault.default({
                style: _extendsDefault.default({
                    opacity: 0,
                    transform: getScale(0.75),
                    visibility: state === 'exited' && !inProp ? 'hidden' : undefined
                }, styles[state], style, children.props.style),
                ref: handleRef
            }, childProps)));
        }
    })));
});
Grow.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */ addEndListener: _propTypesDefault.default.func,
    /**
   * Perform the enter transition when it first mounts if `in` is also `true`.
   * Set this to `false` to disable this behavior.
   * @default true
   */ appear: _propTypesDefault.default.bool,
    /**
   * A single child content element.
   */ children: _utils.elementAcceptingRef.isRequired,
    /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   */ easing: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.shape({
            enter: _propTypesDefault.default.string,
            exit: _propTypesDefault.default.string
        }),
        _propTypesDefault.default.string
    ]),
    /**
   * If `true`, the component will transition in.
   */ in: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ onEnter: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onEntered: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onEntering: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onExit: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onExited: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onExiting: _propTypesDefault.default.func,
    /**
   * @ignore
   */ style: _propTypesDefault.default.object,
    /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   *
   * Set to 'auto' to automatically calculate transition time based on height.
   * @default 'auto'
   */ timeout: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.oneOf([
            'auto'
        ]),
        _propTypesDefault.default.number,
        _propTypesDefault.default.shape({
            appear: _propTypesDefault.default.number,
            enter: _propTypesDefault.default.number,
            exit: _propTypesDefault.default.number
        })
    ])
};
Grow.muiSupportAuto = true;
exports.default = Grow;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","react":"6TuXu","prop-types":"1tgq3","@mui/utils":"9YmNw","react-transition-group":"gQu97","../styles/useTheme":"i6YeU","../transitions/utils":"fojst","../utils/useForkRef":"8iBvK","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fojst":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reflow", ()=>reflow
);
parcelHelpers.export(exports, "getTransitionProps", ()=>getTransitionProps
);
const reflow = (node)=>node.scrollTop
;
function getTransitionProps(props, options) {
    var _style$transitionDura, _style$transitionTimi;
    const { timeout , easing , style ={
    }  } = props;
    return {
        duration: (_style$transitionDura = style.transitionDuration) != null ? _style$transitionDura : typeof timeout === 'number' ? timeout : timeout[options.mode] || 0,
        easing: (_style$transitionTimi = style.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing === 'object' ? easing[options.mode] : easing,
        delay: style.transitionDelay
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7f1mH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_snackbarContentDefault.default
);
parcelHelpers.export(exports, "snackbarContentClasses", ()=>_snackbarContentClassesDefault.default
);
var _snackbarContent = require("./SnackbarContent");
var _snackbarContentDefault = parcelHelpers.interopDefault(_snackbarContent);
var _snackbarContentClasses = require("./snackbarContentClasses");
var _snackbarContentClassesDefault = parcelHelpers.interopDefault(_snackbarContentClasses);
parcelHelpers.exportAll(_snackbarContentClasses, exports);

},{"./SnackbarContent":"bCJZf","./snackbarContentClasses":"7rgu2","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bCJZf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _core = require("@mui/core");
var _system = require("@mui/system");
var _styled = require("../styles/styled");
var _styledDefault = parcelHelpers.interopDefault(_styled);
var _useThemeProps = require("../styles/useThemeProps");
var _useThemePropsDefault = parcelHelpers.interopDefault(_useThemeProps);
var _paper = require("../Paper");
var _paperDefault = parcelHelpers.interopDefault(_paper);
var _snackbarContentClasses = require("./snackbarContentClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "action",
    "className",
    "message",
    "role"
];
const useUtilityClasses = (ownerState)=>{
    const { classes  } = ownerState;
    const slots = {
        root: [
            'root'
        ],
        action: [
            'action'
        ],
        message: [
            'message'
        ]
    };
    return _core.unstable_composeClasses(slots, _snackbarContentClasses.getSnackbarContentUtilityClass, classes);
};
const SnackbarContentRoot = _styledDefault.default(_paperDefault.default, {
    name: 'MuiSnackbarContent',
    slot: 'Root',
    overridesResolver: (props, styles)=>styles.root
})(({ theme  })=>{
    const emphasis = theme.palette.mode === 'light' ? 0.8 : 0.98;
    const backgroundColor = _system.emphasize(theme.palette.background.default, emphasis);
    return _extendsDefault.default({
    }, theme.typography.body2, {
        color: theme.palette.getContrastText(backgroundColor),
        backgroundColor,
        display: 'flex',
        alignItems: 'center',
        flexWrap: 'wrap',
        padding: '6px 16px',
        borderRadius: theme.shape.borderRadius,
        flexGrow: 1,
        [theme.breakpoints.up('sm')]: {
            flexGrow: 'initial',
            minWidth: 288
        }
    });
});
const SnackbarContentMessage = _styledDefault.default('div', {
    name: 'MuiSnackbarContent',
    slot: 'Message',
    overridesResolver: (props, styles)=>styles.message
})({
    padding: '8px 0'
});
const SnackbarContentAction = _styledDefault.default('div', {
    name: 'MuiSnackbarContent',
    slot: 'Action',
    overridesResolver: (props, styles)=>styles.action
})({
    display: 'flex',
    alignItems: 'center',
    marginLeft: 'auto',
    paddingLeft: 16,
    marginRight: -8
});
const SnackbarContent = /*#__PURE__*/ _react.forwardRef(function SnackbarContent1(inProps, ref) {
    const props = _useThemePropsDefault.default({
        props: inProps,
        name: 'MuiSnackbarContent'
    });
    const { action , className , message , role ='alert'  } = props, other = _objectWithoutPropertiesLooseDefault.default(props, _excluded);
    const ownerState = props;
    const classes = useUtilityClasses(ownerState);
    return(/*#__PURE__*/ _jsxRuntime.jsxs(SnackbarContentRoot, _extendsDefault.default({
        role: role,
        square: true,
        elevation: 6,
        className: _clsxDefault.default(classes.root, className),
        ownerState: ownerState,
        ref: ref
    }, other, {
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(SnackbarContentMessage, {
                className: classes.message,
                ownerState: ownerState,
                children: message
            }),
            action ? /*#__PURE__*/ _jsxRuntime.jsx(SnackbarContentAction, {
                className: classes.action,
                ownerState: ownerState,
                children: action
            }) : null
        ]
    })));
});
SnackbarContent.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The action to display. It renders after the message, at the end of the snackbar.
   */ action: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The message to display.
   */ message: _propTypesDefault.default.node,
    /**
   * The ARIA role attribute of the element.
   * @default 'alert'
   */ role: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .string,
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func,
        _propTypesDefault.default.object
    ])
};
exports.default = SnackbarContent;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@babel/runtime/helpers/esm/extends":"bKAu6","react":"6TuXu","prop-types":"1tgq3","clsx":"eg1He","@mui/core":"9b2I1","@mui/system":"ccIuz","../styles/styled":"gqLeX","../styles/useThemeProps":"1cdc1","../Paper":"63BCT","./snackbarContentClasses":"7rgu2","react/jsx-runtime":"8xIwr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7rgu2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSnackbarContentUtilityClass", ()=>getSnackbarContentUtilityClass
);
var _core = require("@mui/core");
function getSnackbarContentUtilityClass(slot) {
    return _core.generateUtilityClass('MuiSnackbarContent', slot);
}
const snackbarContentClasses = _core.generateUtilityClasses('MuiSnackbarContent', [
    'root',
    'message',
    'action'
]);
exports.default = snackbarContentClasses;

},{"@mui/core":"9b2I1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"81oxV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSnackbarUtilityClass", ()=>getSnackbarUtilityClass
);
var _core = require("@mui/core");
function getSnackbarUtilityClass(slot) {
    return _core.generateUtilityClass('MuiSnackbar', slot);
}
const snackbarClasses = _core.generateUtilityClasses('MuiSnackbar', [
    'root',
    'anchorOriginTopCenter',
    'anchorOriginBottomCenter',
    'anchorOriginTopRight',
    'anchorOriginBottomRight',
    'anchorOriginTopLeft',
    'anchorOriginBottomLeft'
]);
exports.default = snackbarClasses;

},{"@mui/core":"9b2I1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4R5f3":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Typelevel_Undefined = require("../Data.Typelevel.Undefined/index.js");
var Expression = require("../Expression/index.js");
var Interpreter = require("../Interpreter/index.js");
var React_Basic_DOM = require("../React.Basic.DOM/index.js");
var React_Basic_DOM_Generated = require("../React.Basic.DOM.Generated/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var TokenParser = require("../TokenParser/index.js");
var Tokenizer = require("../Tokenizer/index.js");
var Utils = require("../Utils/index.js");
var EmptyLine = function() {
    function EmptyLine1() {
    }
    EmptyLine1.value = new EmptyLine1();
    return EmptyLine1;
}();
var SuccessResult = function() {
    function SuccessResult1(value0) {
        this.value0 = value0;
    }
    SuccessResult1.create = function(value0) {
        return new SuccessResult1(value0);
    };
    return SuccessResult1;
}();
var ErrorResult = function() {
    function ErrorResult1(value0) {
        this.value0 = value0;
    }
    ErrorResult1.create = function(value0) {
        return new ErrorResult1(value0);
    };
    return ErrorResult1;
}();
var highlightTokens = function(input) {
    var span = function(className) {
        return function(text) {
            return React_Basic_DOM_Generated.span()({
                className: className,
                children: [
                    React_Basic_DOM.text(text)
                ]
            });
        };
    };
    var convertToken = function(v) {
        if (v instanceof Tokenizer.NewlineTk) return Utils.undefinedLog("Cannot render newlines");
        if (v instanceof Tokenizer.WhitespaceTk) return span("whitespace")(v.value0);
        if (v instanceof Tokenizer.PunctuationTk) return span("punctuation")(Data_Show.show(Tokenizer.showTokenType)(v));
        if (v instanceof Tokenizer.BaseLiteralTk) return span("number")(v.value0);
        if (v instanceof Tokenizer.NumberTk) return span("number")(v.value0);
        if (v instanceof Tokenizer.InfixTk) return span("infix")(v.value0);
        if (v instanceof Tokenizer.ReservedTk) return span("reserved")(Data_Show.show(Tokenizer.showTokenType)(v));
        if (v instanceof Tokenizer.NameTk) return span("name")(v.value0);
        if (v instanceof Tokenizer.CommentTk) return span("comment")(v.value0);
        if (v instanceof Tokenizer.UnknownTk) return span("unknown")(v.value0);
        throw new Error("Failed pattern match at Editor (line 96, column 5 - line 96, column 37): " + [
            v.constructor.name
        ]);
    };
    return Data_Functor.map(Data_Functor.functorArray)(convertToken)(input);
};
var run = function(inputLines) {
    var tokenize = function(input) {
        var v = Tokenizer.tokenize(input);
        if (v instanceof Data_Either.Left) return Utils.undefinedLog("This happens when tokenization fails (should never fail): " + Data_Show.show(Text_Parsing_Parser.showParseError)(v.value0));
        if (v instanceof Data_Either.Right) return v.value0;
        throw new Error("Failed pattern match at Editor (line 36, column 22 - line 38, column 19): " + [
            v.constructor.name
        ]);
    };
    var tokens = Data_Functor.map(Data_Functor.functorArray)(tokenize)(inputLines);
    var findUnknown = function(items) {
        var isUnknown = function(v) {
            if (v instanceof Tokenizer.UnknownTk) return true;
            return false;
        };
        return Data_Array.head(Data_Array.filter(isUnknown)(items));
    };
    var answerToJS = function(v) {
        if (v instanceof EmptyLine) return {
            empty: true
        };
        if (v instanceof SuccessResult) return {
            success: v.value0
        };
        if (v instanceof ErrorResult) return {
            error: v.value0
        };
        throw new Error("Failed pattern match at Editor (line 72, column 5 - line 72, column 60): " + [
            v.constructor.name
        ]);
    };
    var alwaysSucceed = function(couldFail) {
        return function(s) {
            var v = Control_Monad_State_Trans.runStateT(couldFail)(s);
            if (v instanceof Data_Either.Left) return new Data_Either.Right(new Data_Tuple.Tuple(v.value0, s));
            return v;
        };
    };
    var evalLine = function(v) {
        if (v.length === 0) return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(EmptyLine.value);
        if (Data_Maybe.isJust(findUnknown(v))) {
            var v1 = findUnknown(v);
            if (v1 instanceof Data_Maybe.Just) return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(ErrorResult.create("Did not understand \"" + (Data_Show.show(Tokenizer.showTokenType)(v1.value0) + "\"")));
            return Data_Typelevel_Undefined["undefined"];
        }
        if (Data_Boolean.otherwise) {
            var v1 = Text_Parsing_Parser.runParser(v)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(TokenParser.tokenExprParser)(TokenParser.eof(Data_Identity.monadIdentity)));
            if (v1 instanceof Data_Either.Left) return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(ErrorResult.create(Text_Parsing_Parser.parseErrorMessage(v1.value0)));
            if (v1 instanceof Data_Either.Right) return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Either.functorEither))(SuccessResult.create)(alwaysSucceed(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Either.functorEither))(Expression.prettyValue)(Interpreter["eval"](v1.value0))));
            throw new Error("Failed pattern match at Editor (line 67, column 21 - line 69, column 86): " + [
                v1.constructor.name
            ]);
        }
        throw new Error("Failed pattern match at Editor (line 60, column 5 - line 60, column 54): " + [
            v.constructor.name
        ]);
    };
    var results = function() {
        var evalLine$prime = function(t) {
            return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Either.functorEither))(answerToJS)(evalLine(t));
        };
        return Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(evalLine$prime)(Data_Functor.map(Data_Functor.functorArray)(Tokenizer.removeWhitespaceAndComments)(tokens));
    }();
    return {
        highlights: Data_Functor.map(Data_Functor.functorArray)(highlightTokens)(tokens),
        results: (function() {
            var v = Interpreter.runInterpreter(results);
            if (v instanceof Data_Either.Left) return Utils.undefinedLog("Interpreter failed: " + Data_Show.show(Data_Show.showString)(v.value0));
            if (v instanceof Data_Either.Right) return v.value0;
            throw new Error("Failed pattern match at Editor (line 85, column 9 - line 87, column 23): " + [
                v.constructor.name
            ]);
        })()
    };
};
module.exports = {
    EmptyLine: EmptyLine,
    SuccessResult: SuccessResult,
    ErrorResult: ErrorResult,
    run: run,
    highlightTokens: highlightTokens
};

},{"../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Monad.State.Trans/index.js":"3CUYm","../Data.Array/index.js":"7x0bj","../Data.Boolean/index.js":"lv1qw","../Data.Either/index.js":"3WZha","../Data.Functor/index.js":"iy1jO","../Data.Identity/index.js":"3qeSN","../Data.Maybe/index.js":"ePH81","../Data.Show/index.js":"b6tNW","../Data.Traversable/index.js":"i5Kon","../Data.Tuple/index.js":"eOBbM","../Data.Typelevel.Undefined/index.js":"avUSa","../Expression/index.js":"7zFQn","../Interpreter/index.js":"c7UuF","../React.Basic.DOM/index.js":"cBlxQ","../React.Basic.DOM.Generated/index.js":"fCBgr","../Text.Parsing.Parser/index.js":"iVT9M","../TokenParser/index.js":"1A15G","../Tokenizer/index.js":"gfOwV","../Utils/index.js":"liNIM"}],"dG9TO":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Applicative = function(Apply0, pure) {
    this.Apply0 = Apply0;
    this.pure = pure;
};
_c = Applicative;
var pure = function(dict) {
    return dict.pure;
};
var unless = function(dictApplicative) {
    return function(v) {
        return function(v1) {
            if (!v) return v1;
            if (v) return pure(dictApplicative)(Data_Unit.unit);
            throw new Error("Failed pattern match at Control.Applicative (line 62, column 1 - line 62, column 65): " + [
                v.constructor.name,
                v1.constructor.name
            ]);
        };
    };
};
var when = function(dictApplicative) {
    return function(v) {
        return function(v1) {
            if (v) return v1;
            if (!v) return pure(dictApplicative)(Data_Unit.unit);
            throw new Error("Failed pattern match at Control.Applicative (line 57, column 1 - line 57, column 63): " + [
                v.constructor.name,
                v1.constructor.name
            ]);
        };
    };
};
var liftA1 = function(dictApplicative) {
    return function(f) {
        return function(a) {
            return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
        };
    };
};
var applicativeFn = new Applicative(function() {
    return Control_Apply.applyFn;
}, function(x) {
    return function(v) {
        return x;
    };
});
var applicativeArray = new Applicative(function() {
    return Control_Apply.applyArray;
}, function(x) {
    return [
        x
    ];
});
module.exports = {
    Applicative: Applicative,
    pure: pure,
    liftA1: liftA1,
    unless: unless,
    when: when,
    applicativeFn: applicativeFn,
    applicativeArray: applicativeArray
};
var _c;
$RefreshReg$(_c, "Applicative");

},{"../Control.Apply/index.js":"cnlqg","../Data.Unit/index.js":"d7oKp"}],"cnlqg":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Apply = function(Functor0, apply) {
    this.Functor0 = Functor0;
    this.apply = apply;
};
_c = Apply;
var applyFn = new Apply(function() {
    return Data_Functor.functorFn;
}, function(f) {
    return function(g) {
        return function(x) {
            return f(x)(g(x));
        };
    };
});
var applyArray = new Apply(function() {
    return Data_Functor.functorArray;
}, $foreign.arrayApply);
var apply = function(dict) {
    return dict.apply;
};
var applyFirst = function(dictApply) {
    return function(a) {
        return function(b) {
            return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
        };
    };
};
var applySecond = function(dictApply) {
    return function(a) {
        return function(b) {
            return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
        };
    };
};
var lift2 = function(dictApply) {
    return function(f) {
        return function(a) {
            return function(b) {
                return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
            };
        };
    };
};
var lift3 = function(dictApply) {
    return function(f) {
        return function(a) {
            return function(b) {
                return function(c) {
                    return apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c);
                };
            };
        };
    };
};
var lift4 = function(dictApply) {
    return function(f) {
        return function(a) {
            return function(b) {
                return function(c) {
                    return function(d) {
                        return apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d);
                    };
                };
            };
        };
    };
};
var lift5 = function(dictApply) {
    return function(f) {
        return function(a) {
            return function(b) {
                return function(c) {
                    return function(d) {
                        return function(e) {
                            return apply(dictApply)(apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d))(e);
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    Apply: Apply,
    apply: apply,
    applyFirst: applyFirst,
    applySecond: applySecond,
    lift2: lift2,
    lift3: lift3,
    lift4: lift4,
    lift5: lift5,
    applyFn: applyFn,
    applyArray: applyArray
};
var _c;
$RefreshReg$(_c, "Apply");

},{"./foreign.js":"9MX2t","../Control.Category/index.js":"dfcPK","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO"}],"9MX2t":[function(require,module,exports) {
"use strict";
exports.arrayApply = function(fs) {
    return function(xs) {
        var l = fs.length;
        var k = xs.length;
        var result = new Array(l * k);
        var n = 0;
        for(var i = 0; i < l; i++){
            var f = fs[i];
            for(var j = 0; j < k; j++)result[n++] = f(xs[j]);
        }
        return result;
    };
};

},{}],"dfcPK":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Category = function(Semigroupoid0, identity) {
    this.Semigroupoid0 = Semigroupoid0;
    this.identity = identity;
};
_c = Category;
var identity = function(dict) {
    return dict.identity;
};
var categoryFn = new Category(function() {
    return Control_Semigroupoid.semigroupoidFn;
}, function(x) {
    return x;
});
module.exports = {
    Category: Category,
    identity: identity,
    categoryFn: categoryFn
};
var _c;
$RefreshReg$(_c, "Category");

},{"../Control.Semigroupoid/index.js":"fSgEH"}],"fSgEH":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Semigroupoid = function(compose) {
    this.compose = compose;
};
_c = Semigroupoid;
var semigroupoidFn = new Semigroupoid(function(f) {
    return function(g) {
        return function(x) {
            return f(g(x));
        };
    };
});
var compose = function(dict) {
    return dict.compose;
};
var composeFlipped = function(dictSemigroupoid) {
    return function(f) {
        return function(g) {
            return compose(dictSemigroupoid)(g)(f);
        };
    };
};
module.exports = {
    compose: compose,
    Semigroupoid: Semigroupoid,
    composeFlipped: composeFlipped,
    semigroupoidFn: semigroupoidFn
};
var _c;
$RefreshReg$(_c, "Semigroupoid");

},{}],"cuwEt":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var on = function(f) {
    return function(g) {
        return function(x) {
            return function(y) {
                return f(g(x))(g(y));
            };
        };
    };
};
var flip = function(f) {
    return function(b) {
        return function(a) {
            return f(a)(b);
        };
    };
};
var $$const = function(a) {
    return function(v) {
        return a;
    };
};
var applyN = function(f) {
    var go = function($copy_n) {
        return function($copy_acc) {
            var $tco_var_n = $copy_n;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(n, acc) {
                if (n <= 0) {
                    $tco_done = true;
                    return acc;
                }
                if (Data_Boolean.otherwise) {
                    $tco_var_n = n - 1 | 0;
                    $copy_acc = f(acc);
                    return;
                }
                throw new Error("Failed pattern match at Data.Function (line 94, column 3 - line 96, column 37): " + [
                    n.constructor.name,
                    acc.constructor.name
                ]);
            }
            while(!$tco_done)$tco_result = $tco_loop($tco_var_n, $copy_acc);
            return $tco_result;
        };
    };
    return go;
};
var applyFlipped = function(x) {
    return function(f) {
        return f(x);
    };
};
var apply = function(f) {
    return function(x) {
        return f(x);
    };
};
module.exports = {
    flip: flip,
    "const": $$const,
    apply: apply,
    applyFlipped: applyFlipped,
    applyN: applyN,
    on: on
};

},{"../Data.Boolean/index.js":"lv1qw"}],"lv1qw":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var otherwise = true;
module.exports = {
    otherwise: otherwise
};

},{}],"iy1jO":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Functor = function(map) {
    this.map = map;
};
_c = Functor;
var map = function(dict) {
    return dict.map;
};
var mapFlipped = function(dictFunctor) {
    return function(fa) {
        return function(f) {
            return map(dictFunctor)(f)(fa);
        };
    };
};
var $$void = function(dictFunctor) {
    return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
};
var voidLeft = function(dictFunctor) {
    return function(f) {
        return function(x) {
            return map(dictFunctor)(Data_Function["const"](x))(f);
        };
    };
};
var voidRight = function(dictFunctor) {
    return function(x) {
        return map(dictFunctor)(Data_Function["const"](x));
    };
};
var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
var functorArray = new Functor($foreign.arrayMap);
var flap = function(dictFunctor) {
    return function(ff) {
        return function(x) {
            return map(dictFunctor)(function(f) {
                return f(x);
            })(ff);
        };
    };
};
module.exports = {
    Functor: Functor,
    map: map,
    mapFlipped: mapFlipped,
    "void": $$void,
    voidRight: voidRight,
    voidLeft: voidLeft,
    flap: flap,
    functorFn: functorFn,
    functorArray: functorArray
};
var _c;
$RefreshReg$(_c, "Functor");

},{"./foreign.js":"eeIQ2","../Control.Semigroupoid/index.js":"fSgEH","../Data.Function/index.js":"cuwEt","../Data.Unit/index.js":"d7oKp"}],"eeIQ2":[function(require,module,exports) {
"use strict";
exports.arrayMap = function(f) {
    return function(arr) {
        var l = arr.length;
        var result = new Array(l);
        for(var i = 0; i < l; i++)result[i] = f(arr[i]);
        return result;
    };
};

},{}],"d7oKp":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Show = require("../Data.Show/index.js");
var showUnit = new Data_Show.Show(function(v) {
    return "unit";
});
module.exports = {
    showUnit: showUnit,
    unit: $foreign.unit
};

},{"./foreign.js":"lbMuk","../Data.Show/index.js":"b6tNW"}],"lbMuk":[function(require,module,exports) {
"use strict";
exports.unit = {
};

},{}],"b6tNW":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var ShowRecordFields = function(showRecordFields) {
    this.showRecordFields = showRecordFields;
};
_c = ShowRecordFields;
var Show = function(show) {
    this.show = show;
};
_c1 = Show;
var showString = new Show($foreign.showStringImpl);
var showRecordFieldsNil = new ShowRecordFields(function(v) {
    return function(v1) {
        return [];
    };
});
var showRecordFields = function(dict) {
    return dict.showRecordFields;
};
var showRecord = function(dictRowToList) {
    return function(dictShowRecordFields) {
        return new Show(function(record) {
            var v = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
            if (v.length === 0) return "{}";
            return $foreign.join(" ")([
                "{",
                $foreign.join(", ")(v),
                "}"
            ]);
        });
    };
};
var showNumber = new Show($foreign.showNumberImpl);
var showInt = new Show($foreign.showIntImpl);
var showChar = new Show($foreign.showCharImpl);
var showBoolean = new Show(function(v) {
    if (v) return "true";
    if (!v) return "false";
    throw new Error("Failed pattern match at Data.Show (line 20, column 1 - line 22, column 23): " + [
        v.constructor.name
    ]);
});
var show = function(dict) {
    return dict.show;
};
var showArray = function(dictShow) {
    return new Show($foreign.showArrayImpl(show(dictShow)));
};
var showRecordFieldsCons = function(dictIsSymbol) {
    return function(dictShowRecordFields) {
        return function(dictShow) {
            return new ShowRecordFields(function(v) {
                return function(record) {
                    var tail = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                    var focus = Record_Unsafe.unsafeGet(key)(record);
                    return $foreign.cons($foreign.join(": ")([
                        key,
                        show(dictShow)(focus)
                    ]))(tail);
                };
            });
        };
    };
};
module.exports = {
    Show: Show,
    show: show,
    ShowRecordFields: ShowRecordFields,
    showRecordFields: showRecordFields,
    showBoolean: showBoolean,
    showInt: showInt,
    showNumber: showNumber,
    showChar: showChar,
    showString: showString,
    showArray: showArray,
    showRecord: showRecord,
    showRecordFieldsNil: showRecordFieldsNil,
    showRecordFieldsCons: showRecordFieldsCons
};
var _c, _c1;
$RefreshReg$(_c, "ShowRecordFields");
$RefreshReg$(_c1, "Show");

},{"./foreign.js":"jdqMb","../Data.Symbol/index.js":"6s2wm","../Record.Unsafe/index.js":"6NDQI","../Type.Data.RowList/index.js":"2WGhx"}],"jdqMb":[function(require,module,exports) {
"use strict";
exports.showIntImpl = function(n) {
    return n.toString();
};
exports.showNumberImpl = function(n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
};
exports.showCharImpl = function(c) {
    var code = c.charCodeAt(0);
    if (code < 32 || code === 127) {
        switch(c){
            case "\x07":
                return "'\\a'";
            case "\b":
                return "'\\b'";
            case "\f":
                return "'\\f'";
            case "\n":
                return "'\\n'";
            case "\r":
                return "'\\r'";
            case "\t":
                return "'\\t'";
            case "\v":
                return "'\\v'";
        }
        return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
};
exports.showStringImpl = function(s) {
    var l = s.length;
    return "\"" + s.replace(/[\0-\x1F\x7F"\\]/g, function(c, i) {
        switch(c){
            case "\"":
            case "\\":
                return "\\" + c;
            case "\x07":
                return "\\a";
            case "\b":
                return "\\b";
            case "\f":
                return "\\f";
            case "\n":
                return "\\n";
            case "\r":
                return "\\r";
            case "\t":
                return "\\t";
            case "\v":
                return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
    }) + "\"";
};
exports.showArrayImpl = function(f) {
    return function(xs) {
        var ss = [];
        for(var i = 0, l = xs.length; i < l; i++)ss[i] = f(xs[i]);
        return "[" + ss.join(",") + "]";
    };
};
exports.cons = function(head) {
    return function(tail) {
        return [
            head
        ].concat(tail);
    };
};
exports.join = function(separator) {
    return function(xs) {
        return xs.join(separator);
    };
};

},{}],"6s2wm":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var SProxy = function() {
    function SProxy1() {
    }
    SProxy1.value = new SProxy1();
    return SProxy1;
}();
var IsSymbol = function(reflectSymbol) {
    this.reflectSymbol = reflectSymbol;
};
_c = IsSymbol;
var reifySymbol = function(s) {
    return function(f) {
        return $foreign.unsafeCoerce(function(dictIsSymbol) {
            return f(dictIsSymbol);
        })({
            reflectSymbol: function(v) {
                return s;
            }
        })(SProxy.value);
    };
};
var reflectSymbol = function(dict) {
    return dict.reflectSymbol;
};
module.exports = {
    IsSymbol: IsSymbol,
    reflectSymbol: reflectSymbol,
    reifySymbol: reifySymbol,
    SProxy: SProxy
};
var _c;
$RefreshReg$(_c, "IsSymbol");

},{"./foreign.js":"cTDt1"}],"cTDt1":[function(require,module,exports) {
"use strict";
// module Data.Symbol
exports.unsafeCoerce = function(arg) {
    return arg;
};

},{}],"6NDQI":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    unsafeHas: $foreign.unsafeHas,
    unsafeGet: $foreign.unsafeGet,
    unsafeSet: $foreign.unsafeSet,
    unsafeDelete: $foreign.unsafeDelete
};

},{"./foreign.js":"htRCL"}],"htRCL":[function(require,module,exports) {
"use strict";
exports.unsafeHas = function(label) {
    return function(rec) {
        return ({
        }).hasOwnProperty.call(rec, label);
    };
};
exports.unsafeGet = function(label) {
    return function(rec) {
        return rec[label];
    };
};
exports.unsafeSet = function(label) {
    return function(value) {
        return function(rec) {
            var copy = {
            };
            for(var key in rec)if (({
            }).hasOwnProperty.call(rec, key)) copy[key] = rec[key];
            copy[label] = value;
            return copy;
        };
    };
};
exports.unsafeDelete = function(label) {
    return function(rec) {
        var copy = {
        };
        for(var key in rec)if (key !== label && ({
        }).hasOwnProperty.call(rec, key)) copy[key] = rec[key];
        return copy;
    };
};

},{}],"2WGhx":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var RLProxy = function() {
    function RLProxy1() {
    }
    RLProxy1.value = new RLProxy1();
    return RLProxy1;
}();
module.exports = {
    RLProxy: RLProxy
};

},{}],"3CUYm":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var StateT = function(x) {
    return x;
};
_c = StateT;
var withStateT = function(f) {
    return function(v) {
        return function($105) {
            return v(f($105));
        };
    };
};
var runStateT = function(v) {
    return v;
};
var newtypeStateT = new Data_Newtype.Newtype(function(n) {
    return n;
}, StateT);
var monadTransStateT = new Control_Monad_Trans_Class.MonadTrans(function(dictMonad) {
    return function(m) {
        return function(s) {
            return Control_Bind.bind(dictMonad.Bind1())(m)(function(x) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(x, s));
            });
        };
    };
});
var mapStateT = function(f) {
    return function(v) {
        return function($106) {
            return f(v($106));
        };
    };
};
var lazyStateT = new Control_Lazy.Lazy(function(f) {
    return function(s) {
        var v = f(Data_Unit.unit);
        return v(s);
    };
});
var functorStateT = function(dictFunctor) {
    return new Data_Functor.Functor(function(f) {
        return function(v) {
            return function(s) {
                return Data_Functor.map(dictFunctor)(function(v1) {
                    return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                })(v(s));
            };
        };
    });
};
var execStateT = function(dictFunctor) {
    return function(v) {
        return function(s) {
            return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v(s));
        };
    };
};
var evalStateT = function(dictFunctor) {
    return function(v) {
        return function(s) {
            return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
        };
    };
};
var monadStateT = function(dictMonad) {
    return new Control_Monad.Monad(function() {
        return applicativeStateT(dictMonad);
    }, function() {
        return bindStateT(dictMonad);
    });
};
var bindStateT = function(dictMonad) {
    return new Control_Bind.Bind(function() {
        return applyStateT(dictMonad);
    }, function(v) {
        return function(f) {
            return function(s) {
                return Control_Bind.bind(dictMonad.Bind1())(v(s))(function(v1) {
                    var v3 = f(v1.value0);
                    return v3(v1.value1);
                });
            };
        };
    });
};
var applyStateT = function(dictMonad) {
    return new Control_Apply.Apply(function() {
        return functorStateT(dictMonad.Bind1().Apply0().Functor0());
    }, Control_Monad.ap(monadStateT(dictMonad)));
};
var applicativeStateT = function(dictMonad) {
    return new Control_Applicative.Applicative(function() {
        return applyStateT(dictMonad);
    }, function(a) {
        return function(s) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
        };
    });
};
var monadAskStateT = function(dictMonadAsk) {
    return new Control_Monad_Reader_Class.MonadAsk(function() {
        return monadStateT(dictMonadAsk.Monad0());
    }, Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};
var monadReaderStateT = function(dictMonadReader) {
    return new Control_Monad_Reader_Class.MonadReader(function() {
        return monadAskStateT(dictMonadReader.MonadAsk0());
    }, function() {
        var $107 = Control_Monad_Reader_Class.local(dictMonadReader);
        return function($108) {
            return mapStateT($107($108));
        };
    }());
};
var monadContStateT = function(dictMonadCont) {
    return new Control_Monad_Cont_Class.MonadCont(function() {
        return monadStateT(dictMonadCont.Monad0());
    }, function(f) {
        return function(s) {
            return Control_Monad_Cont_Class.callCC(dictMonadCont)(function(c) {
                var v = f(function(a) {
                    return function(s$prime) {
                        return c(new Data_Tuple.Tuple(a, s$prime));
                    };
                });
                return v(s);
            });
        };
    });
};
var monadEffectState = function(dictMonadEffect) {
    return new Effect_Class.MonadEffect(function() {
        return monadStateT(dictMonadEffect.Monad0());
    }, function() {
        var $109 = Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadEffect.Monad0());
        var $110 = Effect_Class.liftEffect(dictMonadEffect);
        return function($111) {
            return $109($110($111));
        };
    }());
};
var monadRecStateT = function(dictMonadRec) {
    return new Control_Monad_Rec_Class.MonadRec(function() {
        return monadStateT(dictMonadRec.Monad0());
    }, function(f) {
        return function(a) {
            var f$prime = function(v) {
                var v1 = f(v.value0);
                return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(v1(v.value1))(function(v2) {
                    return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(function() {
                        if (v2.value0 instanceof Control_Monad_Rec_Class.Loop) return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v2.value0.value0, v2.value1));
                        if (v2.value0 instanceof Control_Monad_Rec_Class.Done) return new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v2.value0.value0, v2.value1));
                        throw new Error("Failed pattern match at Control.Monad.State.Trans (line 87, column 16 - line 89, column 40): " + [
                            v2.value0.constructor.name
                        ]);
                    }());
                });
            };
            return function(s) {
                return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, s));
            };
        };
    });
};
var monadStateStateT = function(dictMonad) {
    return new Control_Monad_State_Class.MonadState(function() {
        return monadStateT(dictMonad);
    }, function(f) {
        return StateT(function() {
            var $112 = Control_Applicative.pure(dictMonad.Applicative0());
            return function($113) {
                return $112(f($113));
            };
        }());
    });
};
var monadTellStateT = function(dictMonadTell) {
    return new Control_Monad_Writer_Class.MonadTell(function() {
        return monadStateT(dictMonadTell.Monad0());
    }, function() {
        var $114 = Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadTell.Monad0());
        var $115 = Control_Monad_Writer_Class.tell(dictMonadTell);
        return function($116) {
            return $114($115($116));
        };
    }());
};
var monadWriterStateT = function(dictMonadWriter) {
    return new Control_Monad_Writer_Class.MonadWriter(function() {
        return monadTellStateT(dictMonadWriter.MonadTell0());
    }, function(m) {
        return function(s) {
            return Control_Bind.bind(dictMonadWriter.MonadTell0().Monad0().Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m(s)))(function(v) {
                return Control_Applicative.pure(dictMonadWriter.MonadTell0().Monad0().Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
            });
        };
    }, function(m) {
        return function(s) {
            return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(dictMonadWriter.MonadTell0().Monad0().Bind1())(m(s))(function(v) {
                return Control_Applicative.pure(dictMonadWriter.MonadTell0().Monad0().Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
            }));
        };
    });
};
var monadThrowStateT = function(dictMonadThrow) {
    return new Control_Monad_Error_Class.MonadThrow(function() {
        return monadStateT(dictMonadThrow.Monad0());
    }, function(e) {
        return Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
    });
};
var monadErrorStateT = function(dictMonadError) {
    return new Control_Monad_Error_Class.MonadError(function() {
        return monadThrowStateT(dictMonadError.MonadThrow0());
    }, function(v) {
        return function(h) {
            return function(s) {
                return Control_Monad_Error_Class.catchError(dictMonadError)(v(s))(function(e) {
                    var v1 = h(e);
                    return v1(s);
                });
            };
        };
    });
};
var altStateT = function(dictMonad) {
    return function(dictAlt) {
        return new Control_Alt.Alt(function() {
            return functorStateT(dictAlt.Functor0());
        }, function(v) {
            return function(v1) {
                return function(s) {
                    return Control_Alt.alt(dictAlt)(v(s))(v1(s));
                };
            };
        });
    };
};
var plusStateT = function(dictMonad) {
    return function(dictPlus) {
        return new Control_Plus.Plus(function() {
            return altStateT(dictMonad)(dictPlus.Alt0());
        }, function(v) {
            return Control_Plus.empty(dictPlus);
        });
    };
};
var alternativeStateT = function(dictMonad) {
    return function(dictAlternative) {
        return new Control_Alternative.Alternative(function() {
            return applicativeStateT(dictMonad);
        }, function() {
            return plusStateT(dictMonad)(dictAlternative.Plus1());
        });
    };
};
var monadZeroStateT = function(dictMonadZero) {
    return new Control_MonadZero.MonadZero(function() {
        return alternativeStateT(dictMonadZero.Monad0())(dictMonadZero.Alternative1());
    }, function() {
        return monadStateT(dictMonadZero.Monad0());
    });
};
var monadPlusStateT = function(dictMonadPlus) {
    return new Control_MonadPlus.MonadPlus(function() {
        return monadZeroStateT(dictMonadPlus.MonadZero0());
    });
};
module.exports = {
    StateT: StateT,
    runStateT: runStateT,
    evalStateT: evalStateT,
    execStateT: execStateT,
    mapStateT: mapStateT,
    withStateT: withStateT,
    newtypeStateT: newtypeStateT,
    functorStateT: functorStateT,
    applyStateT: applyStateT,
    applicativeStateT: applicativeStateT,
    altStateT: altStateT,
    plusStateT: plusStateT,
    alternativeStateT: alternativeStateT,
    bindStateT: bindStateT,
    monadStateT: monadStateT,
    monadRecStateT: monadRecStateT,
    monadZeroStateT: monadZeroStateT,
    monadPlusStateT: monadPlusStateT,
    monadTransStateT: monadTransStateT,
    lazyStateT: lazyStateT,
    monadEffectState: monadEffectState,
    monadContStateT: monadContStateT,
    monadThrowStateT: monadThrowStateT,
    monadErrorStateT: monadErrorStateT,
    monadAskStateT: monadAskStateT,
    monadReaderStateT: monadReaderStateT,
    monadStateStateT: monadStateStateT,
    monadTellStateT: monadTellStateT,
    monadWriterStateT: monadWriterStateT
};
var _c;
$RefreshReg$(_c, "StateT");

},{"../Control.Alt/index.js":"82RIG","../Control.Alternative/index.js":"bgcOZ","../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Lazy/index.js":"chn7k","../Control.Monad/index.js":"alCn2","../Control.Monad.Cont.Class/index.js":"kWCMf","../Control.Monad.Error.Class/index.js":"acXO9","../Control.Monad.Reader.Class/index.js":"3BEj9","../Control.Monad.Rec.Class/index.js":"dMFG0","../Control.Monad.State.Class/index.js":"enW6F","../Control.Monad.Trans.Class/index.js":"9pz5v","../Control.Monad.Writer.Class/index.js":"6wyz5","../Control.MonadPlus/index.js":"jUJh4","../Control.MonadZero/index.js":"aqmZo","../Control.Plus/index.js":"5lCU5","../Data.Functor/index.js":"iy1jO","../Data.Newtype/index.js":"czJbt","../Data.Tuple/index.js":"eOBbM","../Data.Unit/index.js":"d7oKp","../Effect.Class/index.js":"53rRA"}],"82RIG":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Alt = function(Functor0, alt) {
    this.Functor0 = Functor0;
    this.alt = alt;
};
_c = Alt;
var altArray = new Alt(function() {
    return Data_Functor.functorArray;
}, Data_Semigroup.append(Data_Semigroup.semigroupArray));
var alt = function(dict) {
    return dict.alt;
};
module.exports = {
    Alt: Alt,
    alt: alt,
    altArray: altArray
};
var _c;
$RefreshReg$(_c, "Alt");

},{"../Data.Functor/index.js":"iy1jO","../Data.Semigroup/index.js":"4sNah"}],"4sNah":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Void = require("../Data.Void/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var SemigroupRecord = function(appendRecord) {
    this.appendRecord = appendRecord;
};
_c = SemigroupRecord;
var Semigroup = function(append) {
    this.append = append;
};
_c1 = Semigroup;
var semigroupVoid = new Semigroup(function(v) {
    return Data_Void.absurd;
});
var semigroupUnit = new Semigroup(function(v) {
    return function(v1) {
        return Data_Unit.unit;
    };
});
var semigroupString = new Semigroup($foreign.concatString);
var semigroupRecordNil = new SemigroupRecord(function(v) {
    return function(v1) {
        return function(v2) {
            return {
            };
        };
    };
});
var semigroupArray = new Semigroup($foreign.concatArray);
var appendRecord = function(dict) {
    return dict.appendRecord;
};
var semigroupRecord = function(dictRowToList) {
    return function(dictSemigroupRecord) {
        return new Semigroup(appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value));
    };
};
var append = function(dict) {
    return dict.append;
};
var semigroupFn = function(dictSemigroup) {
    return new Semigroup(function(f) {
        return function(g) {
            return function(x) {
                return append(dictSemigroup)(f(x))(g(x));
            };
        };
    });
};
var semigroupRecordCons = function(dictIsSymbol) {
    return function(dictCons) {
        return function(dictSemigroupRecord) {
            return function(dictSemigroup) {
                return new SemigroupRecord(function(v) {
                    return function(ra) {
                        return function(rb) {
                            var tail = appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                        };
                    };
                });
            };
        };
    };
};
module.exports = {
    Semigroup: Semigroup,
    append: append,
    SemigroupRecord: SemigroupRecord,
    appendRecord: appendRecord,
    semigroupString: semigroupString,
    semigroupUnit: semigroupUnit,
    semigroupVoid: semigroupVoid,
    semigroupFn: semigroupFn,
    semigroupArray: semigroupArray,
    semigroupRecord: semigroupRecord,
    semigroupRecordNil: semigroupRecordNil,
    semigroupRecordCons: semigroupRecordCons
};
var _c, _c1;
$RefreshReg$(_c, "SemigroupRecord");
$RefreshReg$(_c1, "Semigroup");

},{"./foreign.js":"crUyk","../Data.Symbol/index.js":"6s2wm","../Data.Unit/index.js":"d7oKp","../Data.Void/index.js":"jziT4","../Record.Unsafe/index.js":"6NDQI","../Type.Data.RowList/index.js":"2WGhx"}],"crUyk":[function(require,module,exports) {
"use strict";
exports.concatString = function(s1) {
    return function(s2) {
        return s1 + s2;
    };
};
exports.concatArray = function(xs) {
    return function(ys) {
        if (xs.length === 0) return ys;
        if (ys.length === 0) return xs;
        return xs.concat(ys);
    };
};

},{}],"jziT4":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Show = require("../Data.Show/index.js");
var Void = function(x) {
    return x;
};
_c = Void;
var absurd = function(a) {
    var spin = function($copy_v) {
        var $tco_result;
        function $tco_loop(v) {
            $copy_v = v;
            return;
        }
        while(true)$tco_result = $tco_loop($copy_v);
        return $tco_result;
    };
    return spin(a);
};
var showVoid = new Data_Show.Show(absurd);
module.exports = {
    absurd: absurd,
    showVoid: showVoid
};
var _c;
$RefreshReg$(_c, "Void");

},{"../Data.Show/index.js":"b6tNW"}],"bgcOZ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Alternative = function(Applicative0, Plus1) {
    this.Applicative0 = Applicative0;
    this.Plus1 = Plus1;
};
_c = Alternative;
var alternativeArray = new Alternative(function() {
    return Control_Applicative.applicativeArray;
}, function() {
    return Control_Plus.plusArray;
});
module.exports = {
    Alternative: Alternative,
    alternativeArray: alternativeArray
};
var _c;
$RefreshReg$(_c, "Alternative");

},{"../Control.Applicative/index.js":"dG9TO","../Control.Plus/index.js":"5lCU5"}],"5lCU5":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Plus = function(Alt0, empty) {
    this.Alt0 = Alt0;
    this.empty = empty;
};
_c = Plus;
var plusArray = new Plus(function() {
    return Control_Alt.altArray;
}, []);
var empty = function(dict) {
    return dict.empty;
};
module.exports = {
    Plus: Plus,
    empty: empty,
    plusArray: plusArray
};
var _c;
$RefreshReg$(_c, "Plus");

},{"../Control.Alt/index.js":"82RIG"}],"7Sory":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Function = require("../Data.Function/index.js");
var Discard = function(discard) {
    this.discard = discard;
};
_c = Discard;
var Bind = function(Apply0, bind) {
    this.Apply0 = Apply0;
    this.bind = bind;
};
_c1 = Bind;
var discard = function(dict) {
    return dict.discard;
};
var bindFn = new Bind(function() {
    return Control_Apply.applyFn;
}, function(m) {
    return function(f) {
        return function(x) {
            return f(m(x))(x);
        };
    };
});
var bindArray = new Bind(function() {
    return Control_Apply.applyArray;
}, $foreign.arrayBind);
var bind = function(dict) {
    return dict.bind;
};
var bindFlipped = function(dictBind) {
    return Data_Function.flip(bind(dictBind));
};
var composeKleisliFlipped = function(dictBind) {
    return function(f) {
        return function(g) {
            return function(a) {
                return bindFlipped(dictBind)(f)(g(a));
            };
        };
    };
};
var composeKleisli = function(dictBind) {
    return function(f) {
        return function(g) {
            return function(a) {
                return bind(dictBind)(f(a))(g);
            };
        };
    };
};
var discardUnit = new Discard(function(dictBind) {
    return bind(dictBind);
});
var ifM = function(dictBind) {
    return function(cond) {
        return function(t) {
            return function(f) {
                return bind(dictBind)(cond)(function(cond$prime) {
                    if (cond$prime) return t;
                    return f;
                });
            };
        };
    };
};
var join = function(dictBind) {
    return function(m) {
        return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
    };
};
module.exports = {
    Bind: Bind,
    bind: bind,
    bindFlipped: bindFlipped,
    Discard: Discard,
    discard: discard,
    join: join,
    composeKleisli: composeKleisli,
    composeKleisliFlipped: composeKleisliFlipped,
    ifM: ifM,
    bindFn: bindFn,
    bindArray: bindArray,
    discardUnit: discardUnit
};
var _c, _c1;
$RefreshReg$(_c, "Discard");
$RefreshReg$(_c1, "Bind");

},{"./foreign.js":"byQt7","../Control.Apply/index.js":"cnlqg","../Control.Category/index.js":"dfcPK","../Data.Function/index.js":"cuwEt"}],"byQt7":[function(require,module,exports) {
"use strict";
exports.arrayBind = function(arr) {
    return function(f) {
        var result = [];
        for(var i = 0, l = arr.length; i < l; i++)Array.prototype.push.apply(result, f(arr[i]));
        return result;
    };
};

},{}],"chn7k":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Unit = require("../Data.Unit/index.js");
var Lazy = function(defer) {
    this.defer = defer;
};
_c = Lazy;
var lazyUnit = new Lazy(function(v) {
    return Data_Unit.unit;
});
var lazyFn = new Lazy(function(f) {
    return function(x) {
        return f(Data_Unit.unit)(x);
    };
});
var defer = function(dict) {
    return dict.defer;
};
var fix = function(dictLazy) {
    return function(f) {
        var go = defer(dictLazy)(function(v) {
            return f(go);
        });
        return go;
    };
};
module.exports = {
    defer: defer,
    Lazy: Lazy,
    fix: fix,
    lazyFn: lazyFn,
    lazyUnit: lazyUnit
};
var _c;
$RefreshReg$(_c, "Lazy");

},{"../Data.Unit/index.js":"d7oKp"}],"alCn2":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Monad = function(Applicative0, Bind1) {
    this.Applicative0 = Applicative0;
    this.Bind1 = Bind1;
};
_c = Monad;
var whenM = function(dictMonad) {
    return function(mb) {
        return function(m) {
            return Control_Bind.bind(dictMonad.Bind1())(mb)(function(b) {
                return Control_Applicative.when(dictMonad.Applicative0())(b)(m);
            });
        };
    };
};
var unlessM = function(dictMonad) {
    return function(mb) {
        return function(m) {
            return Control_Bind.bind(dictMonad.Bind1())(mb)(function(b) {
                return Control_Applicative.unless(dictMonad.Applicative0())(b)(m);
            });
        };
    };
};
var monadFn = new Monad(function() {
    return Control_Applicative.applicativeFn;
}, function() {
    return Control_Bind.bindFn;
});
var monadArray = new Monad(function() {
    return Control_Applicative.applicativeArray;
}, function() {
    return Control_Bind.bindArray;
});
var liftM1 = function(dictMonad) {
    return function(f) {
        return function(a) {
            return Control_Bind.bind(dictMonad.Bind1())(a)(function(a$prime) {
                return Control_Applicative.pure(dictMonad.Applicative0())(f(a$prime));
            });
        };
    };
};
var ap = function(dictMonad) {
    return function(f) {
        return function(a) {
            return Control_Bind.bind(dictMonad.Bind1())(f)(function(f$prime) {
                return Control_Bind.bind(dictMonad.Bind1())(a)(function(a$prime) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                });
            });
        };
    };
};
module.exports = {
    Monad: Monad,
    liftM1: liftM1,
    ap: ap,
    whenM: whenM,
    unlessM: unlessM,
    monadFn: monadFn,
    monadArray: monadArray
};
var _c;
$RefreshReg$(_c, "Monad");

},{"../Control.Applicative/index.js":"dG9TO","../Control.Bind/index.js":"7Sory"}],"kWCMf":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var MonadCont = function(Monad0, callCC) {
    this.Monad0 = Monad0;
    this.callCC = callCC;
};
_c = MonadCont;
var callCC = function(dict) {
    return dict.callCC;
};
module.exports = {
    MonadCont: MonadCont,
    callCC: callCC
};
var _c;
$RefreshReg$(_c, "MonadCont");

},{}],"acXO9":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var MonadThrow = function(Monad0, throwError) {
    this.Monad0 = Monad0;
    this.throwError = throwError;
};
_c = MonadThrow;
var MonadError = function(MonadThrow0, catchError) {
    this.MonadThrow0 = MonadThrow0;
    this.catchError = catchError;
};
_c1 = MonadError;
var throwError = function(dict) {
    return dict.throwError;
};
var monadThrowMaybe = new MonadThrow(function() {
    return Data_Maybe.monadMaybe;
}, Data_Function["const"](Data_Maybe.Nothing.value));
var monadThrowEither = new MonadThrow(function() {
    return Data_Either.monadEither;
}, Data_Either.Left.create);
var monadThrowEffect = new MonadThrow(function() {
    return Effect.monadEffect;
}, Effect_Exception.throwException);
var monadErrorMaybe = new MonadError(function() {
    return monadThrowMaybe;
}, function(v) {
    return function(v1) {
        if (v instanceof Data_Maybe.Nothing) return v1(Data_Unit.unit);
        if (v instanceof Data_Maybe.Just) return new Data_Maybe.Just(v.value0);
        throw new Error("Failed pattern match at Control.Monad.Error.Class (line 79, column 1 - line 81, column 33): " + [
            v.constructor.name,
            v1.constructor.name
        ]);
    };
});
var monadErrorEither = new MonadError(function() {
    return monadThrowEither;
}, function(v) {
    return function(v1) {
        if (v instanceof Data_Either.Left) return v1(v.value0);
        if (v instanceof Data_Either.Right) return new Data_Either.Right(v.value0);
        throw new Error("Failed pattern match at Control.Monad.Error.Class (line 72, column 1 - line 74, column 35): " + [
            v.constructor.name,
            v1.constructor.name
        ]);
    };
});
var monadErrorEffect = new MonadError(function() {
    return monadThrowEffect;
}, Data_Function.flip(Effect_Exception.catchException));
var catchError = function(dict) {
    return dict.catchError;
};
var catchJust = function(dictMonadError) {
    return function(p) {
        return function(act) {
            return function(handler) {
                var handle = function(e) {
                    var v = p(e);
                    if (v instanceof Data_Maybe.Nothing) return throwError(dictMonadError.MonadThrow0())(e);
                    if (v instanceof Data_Maybe.Just) return handler(v.value0);
                    throw new Error("Failed pattern match at Control.Monad.Error.Class (line 57, column 5 - line 59, column 26): " + [
                        v.constructor.name
                    ]);
                };
                return catchError(dictMonadError)(act)(handle);
            };
        };
    };
};
var $$try = function(dictMonadError) {
    return function(a) {
        return catchError(dictMonadError)(Data_Functor.map(dictMonadError.MonadThrow0().Monad0().Bind1().Apply0().Functor0())(Data_Either.Right.create)(a))(function() {
            var $17 = Control_Applicative.pure(dictMonadError.MonadThrow0().Monad0().Applicative0());
            return function($18) {
                return $17(Data_Either.Left.create($18));
            };
        }());
    };
};
var withResource = function(dictMonadError) {
    return function(acquire) {
        return function(release) {
            return function(kleisli) {
                return Control_Bind.bind(dictMonadError.MonadThrow0().Monad0().Bind1())(acquire)(function(resource) {
                    return Control_Bind.bind(dictMonadError.MonadThrow0().Monad0().Bind1())($$try(dictMonadError)(kleisli(resource)))(function(result) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(dictMonadError.MonadThrow0().Monad0().Bind1())(release(resource))(function() {
                            return Data_Either.either(throwError(dictMonadError.MonadThrow0()))(Control_Applicative.pure(dictMonadError.MonadThrow0().Monad0().Applicative0()))(result);
                        });
                    });
                });
            };
        };
    };
};
module.exports = {
    catchError: catchError,
    throwError: throwError,
    MonadThrow: MonadThrow,
    MonadError: MonadError,
    catchJust: catchJust,
    "try": $$try,
    withResource: withResource,
    monadThrowEither: monadThrowEither,
    monadErrorEither: monadErrorEither,
    monadThrowMaybe: monadThrowMaybe,
    monadErrorMaybe: monadErrorMaybe,
    monadThrowEffect: monadThrowEffect,
    monadErrorEffect: monadErrorEffect
};
var _c, _c1;
$RefreshReg$(_c, "MonadThrow");
$RefreshReg$(_c1, "MonadError");

},{"../Control.Applicative/index.js":"dG9TO","../Control.Bind/index.js":"7Sory","../Data.Either/index.js":"3WZha","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO","../Data.Maybe/index.js":"ePH81","../Data.Unit/index.js":"d7oKp","../Effect/index.js":"bKbtZ","../Effect.Exception/index.js":"3J2RH"}],"3WZha":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Bifoldable = require("../Data.Bifoldable/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bitraversable = require("../Data.Bitraversable/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Left = function() {
    function Left1(value0) {
        this.value0 = value0;
    }
    Left1.create = function(value0) {
        return new Left1(value0);
    };
    return Left1;
}();
var Right = function() {
    function Right1(value0) {
        this.value0 = value0;
    }
    Right1.create = function(value0) {
        return new Right1(value0);
    };
    return Right1;
}();
var showEither = function(dictShow) {
    return function(dictShow1) {
        return new Data_Show.Show(function(v) {
            if (v instanceof Left) return "(Left " + (Data_Show.show(dictShow)(v.value0) + ")");
            if (v instanceof Right) return "(Right " + (Data_Show.show(dictShow1)(v.value0) + ")");
            throw new Error("Failed pattern match at Data.Either (line 163, column 1 - line 165, column 46): " + [
                v.constructor.name
            ]);
        });
    };
};
var note$prime = function(f) {
    return Data_Maybe["maybe'"](function($198) {
        return Left.create(f($198));
    })(Right.create);
};
var note = function(a) {
    return Data_Maybe.maybe(new Left(a))(Right.create);
};
var functorEither = new Data_Functor.Functor(function(f) {
    return function(m) {
        if (m instanceof Left) return new Left(m.value0);
        if (m instanceof Right) return new Right(f(m.value0));
        throw new Error("Failed pattern match at Data.Either (line 38, column 1 - line 38, column 52): " + [
            m.constructor.name
        ]);
    };
});
var functorWithIndexEither = new Data_FunctorWithIndex.FunctorWithIndex(function() {
    return functorEither;
}, function(f) {
    return Data_Functor.map(functorEither)(f(Data_Unit.unit));
});
var invariantEither = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorEither));
var fromRight = function(dictPartial) {
    return function(v) {
        if (v instanceof Right) return v.value0;
        throw new Error("Failed pattern match at Data.Either (line 261, column 1 - line 261, column 52): " + [
            v.constructor.name
        ]);
    };
};
var fromLeft = function(dictPartial) {
    return function(v) {
        if (v instanceof Left) return v.value0;
        throw new Error("Failed pattern match at Data.Either (line 256, column 1 - line 256, column 51): " + [
            v.constructor.name
        ]);
    };
};
var foldableEither = new Data_Foldable.Foldable(function(dictMonoid) {
    return function(f) {
        return function(v) {
            if (v instanceof Left) return Data_Monoid.mempty(dictMonoid);
            if (v instanceof Right) return f(v.value0);
            throw new Error("Failed pattern match at Data.Either (line 187, column 1 - line 193, column 28): " + [
                f.constructor.name,
                v.constructor.name
            ]);
        };
    };
}, function(v) {
    return function(z) {
        return function(v1) {
            if (v1 instanceof Left) return z;
            if (v1 instanceof Right) return v(z)(v1.value0);
            throw new Error("Failed pattern match at Data.Either (line 187, column 1 - line 193, column 28): " + [
                v.constructor.name,
                z.constructor.name,
                v1.constructor.name
            ]);
        };
    };
}, function(v) {
    return function(z) {
        return function(v1) {
            if (v1 instanceof Left) return z;
            if (v1 instanceof Right) return v(v1.value0)(z);
            throw new Error("Failed pattern match at Data.Either (line 187, column 1 - line 193, column 28): " + [
                v.constructor.name,
                z.constructor.name,
                v1.constructor.name
            ]);
        };
    };
});
var foldableWithIndexEither = new Data_FoldableWithIndex.FoldableWithIndex(function() {
    return foldableEither;
}, function(dictMonoid) {
    return function(f) {
        return function(v) {
            if (v instanceof Left) return Data_Monoid.mempty(dictMonoid);
            if (v instanceof Right) return f(Data_Unit.unit)(v.value0);
            throw new Error("Failed pattern match at Data.Either (line 195, column 1 - line 201, column 42): " + [
                f.constructor.name,
                v.constructor.name
            ]);
        };
    };
}, function(v) {
    return function(z) {
        return function(v1) {
            if (v1 instanceof Left) return z;
            if (v1 instanceof Right) return v(Data_Unit.unit)(z)(v1.value0);
            throw new Error("Failed pattern match at Data.Either (line 195, column 1 - line 201, column 42): " + [
                v.constructor.name,
                z.constructor.name,
                v1.constructor.name
            ]);
        };
    };
}, function(v) {
    return function(z) {
        return function(v1) {
            if (v1 instanceof Left) return z;
            if (v1 instanceof Right) return v(Data_Unit.unit)(v1.value0)(z);
            throw new Error("Failed pattern match at Data.Either (line 195, column 1 - line 201, column 42): " + [
                v.constructor.name,
                z.constructor.name,
                v1.constructor.name
            ]);
        };
    };
});
var traversableEither = new Data_Traversable.Traversable(function() {
    return foldableEither;
}, function() {
    return functorEither;
}, function(dictApplicative) {
    return function(v) {
        if (v instanceof Left) return Control_Applicative.pure(dictApplicative)(new Left(v.value0));
        if (v instanceof Right) return Data_Functor.map(dictApplicative.Apply0().Functor0())(Right.create)(v.value0);
        throw new Error("Failed pattern match at Data.Either (line 211, column 1 - line 215, column 36): " + [
            v.constructor.name
        ]);
    };
}, function(dictApplicative) {
    return function(v) {
        return function(v1) {
            if (v1 instanceof Left) return Control_Applicative.pure(dictApplicative)(new Left(v1.value0));
            if (v1 instanceof Right) return Data_Functor.map(dictApplicative.Apply0().Functor0())(Right.create)(v(v1.value0));
            throw new Error("Failed pattern match at Data.Either (line 211, column 1 - line 215, column 36): " + [
                v.constructor.name,
                v1.constructor.name
            ]);
        };
    };
});
var traversableWithIndexEither = new Data_TraversableWithIndex.TraversableWithIndex(function() {
    return foldableWithIndexEither;
}, function() {
    return functorWithIndexEither;
}, function() {
    return traversableEither;
}, function(dictApplicative) {
    return function(v) {
        return function(v1) {
            if (v1 instanceof Left) return Control_Applicative.pure(dictApplicative)(new Left(v1.value0));
            if (v1 instanceof Right) return Data_Functor.map(dictApplicative.Apply0().Functor0())(Right.create)(v(Data_Unit.unit)(v1.value0));
            throw new Error("Failed pattern match at Data.Either (line 217, column 1 - line 219, column 53): " + [
                v.constructor.name,
                v1.constructor.name
            ]);
        };
    };
});
var extendEither = new Control_Extend.Extend(function() {
    return functorEither;
}, function(v) {
    return function(v1) {
        if (v1 instanceof Left) return new Left(v1.value0);
        return new Right(v(v1));
    };
});
var eqEither = function(dictEq) {
    return function(dictEq1) {
        return new Data_Eq.Eq(function(x) {
            return function(y) {
                if (x instanceof Left && y instanceof Left) return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                if (x instanceof Right && y instanceof Right) return Data_Eq.eq(dictEq1)(x.value0)(y.value0);
                return false;
            };
        });
    };
};
var ordEither = function(dictOrd) {
    return function(dictOrd1) {
        return new Data_Ord.Ord(function() {
            return eqEither(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function(x) {
            return function(y) {
                if (x instanceof Left && y instanceof Left) return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (x instanceof Left) return Data_Ordering.LT.value;
                if (y instanceof Left) return Data_Ordering.GT.value;
                if (x instanceof Right && y instanceof Right) return Data_Ord.compare(dictOrd1)(x.value0)(y.value0);
                throw new Error("Failed pattern match at Data.Either (line 179, column 1 - line 179, column 64): " + [
                    x.constructor.name,
                    y.constructor.name
                ]);
            };
        });
    };
};
var eq1Either = function(dictEq) {
    return new Data_Eq.Eq1(function(dictEq1) {
        return Data_Eq.eq(eqEither(dictEq)(dictEq1));
    });
};
var ord1Either = function(dictOrd) {
    return new Data_Ord.Ord1(function() {
        return eq1Either(dictOrd.Eq0());
    }, function(dictOrd1) {
        return Data_Ord.compare(ordEither(dictOrd)(dictOrd1));
    });
};
var either = function(v) {
    return function(v1) {
        return function(v2) {
            if (v2 instanceof Left) return v(v2.value0);
            if (v2 instanceof Right) return v1(v2.value0);
            throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [
                v.constructor.name,
                v1.constructor.name,
                v2.constructor.name
            ]);
        };
    };
};
var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
var isLeft = either(Data_Function["const"](true))(Data_Function["const"](false));
var isRight = either(Data_Function["const"](false))(Data_Function["const"](true));
var choose = function(dictAlt) {
    return function(a) {
        return function(b) {
            return Control_Alt.alt(dictAlt)(Data_Functor.map(dictAlt.Functor0())(Left.create)(a))(Data_Functor.map(dictAlt.Functor0())(Right.create)(b));
        };
    };
};
var boundedEither = function(dictBounded) {
    return function(dictBounded1) {
        return new Data_Bounded.Bounded(function() {
            return ordEither(dictBounded.Ord0())(dictBounded1.Ord0());
        }, new Left(Data_Bounded.bottom(dictBounded)), new Right(Data_Bounded.top(dictBounded1)));
    };
};
var bifunctorEither = new Data_Bifunctor.Bifunctor(function(v) {
    return function(v1) {
        return function(v2) {
            if (v2 instanceof Left) return new Left(v(v2.value0));
            if (v2 instanceof Right) return new Right(v1(v2.value0));
            throw new Error("Failed pattern match at Data.Either (line 46, column 1 - line 48, column 36): " + [
                v.constructor.name,
                v1.constructor.name,
                v2.constructor.name
            ]);
        };
    };
});
var bifoldableEither = new Data_Bifoldable.Bifoldable(function(dictMonoid) {
    return function(v) {
        return function(v1) {
            return function(v2) {
                if (v2 instanceof Left) return v(v2.value0);
                if (v2 instanceof Right) return v1(v2.value0);
                throw new Error("Failed pattern match at Data.Either (line 203, column 1 - line 209, column 32): " + [
                    v.constructor.name,
                    v1.constructor.name,
                    v2.constructor.name
                ]);
            };
        };
    };
}, function(v) {
    return function(v1) {
        return function(z) {
            return function(v2) {
                if (v2 instanceof Left) return v(z)(v2.value0);
                if (v2 instanceof Right) return v1(z)(v2.value0);
                throw new Error("Failed pattern match at Data.Either (line 203, column 1 - line 209, column 32): " + [
                    v.constructor.name,
                    v1.constructor.name,
                    z.constructor.name,
                    v2.constructor.name
                ]);
            };
        };
    };
}, function(v) {
    return function(v1) {
        return function(z) {
            return function(v2) {
                if (v2 instanceof Left) return v(v2.value0)(z);
                if (v2 instanceof Right) return v1(v2.value0)(z);
                throw new Error("Failed pattern match at Data.Either (line 203, column 1 - line 209, column 32): " + [
                    v.constructor.name,
                    v1.constructor.name,
                    z.constructor.name,
                    v2.constructor.name
                ]);
            };
        };
    };
});
var bitraversableEither = new Data_Bitraversable.Bitraversable(function() {
    return bifoldableEither;
}, function() {
    return bifunctorEither;
}, function(dictApplicative) {
    return function(v) {
        if (v instanceof Left) return Data_Functor.map(dictApplicative.Apply0().Functor0())(Left.create)(v.value0);
        if (v instanceof Right) return Data_Functor.map(dictApplicative.Apply0().Functor0())(Right.create)(v.value0);
        throw new Error("Failed pattern match at Data.Either (line 221, column 1 - line 225, column 37): " + [
            v.constructor.name
        ]);
    };
}, function(dictApplicative) {
    return function(v) {
        return function(v1) {
            return function(v2) {
                if (v2 instanceof Left) return Data_Functor.map(dictApplicative.Apply0().Functor0())(Left.create)(v(v2.value0));
                if (v2 instanceof Right) return Data_Functor.map(dictApplicative.Apply0().Functor0())(Right.create)(v1(v2.value0));
                throw new Error("Failed pattern match at Data.Either (line 221, column 1 - line 225, column 37): " + [
                    v.constructor.name,
                    v1.constructor.name,
                    v2.constructor.name
                ]);
            };
        };
    };
});
var applyEither = new Control_Apply.Apply(function() {
    return functorEither;
}, function(v) {
    return function(v1) {
        if (v instanceof Left) return new Left(v.value0);
        if (v instanceof Right) return Data_Functor.map(functorEither)(v.value0)(v1);
        throw new Error("Failed pattern match at Data.Either (line 82, column 1 - line 84, column 30): " + [
            v.constructor.name,
            v1.constructor.name
        ]);
    };
});
var bindEither = new Control_Bind.Bind(function() {
    return applyEither;
}, either(function(e) {
    return function(v) {
        return new Left(e);
    };
})(function(a) {
    return function(f) {
        return f(a);
    };
}));
var semigroupEither = function(dictSemigroup) {
    return new Data_Semigroup.Semigroup(function(x) {
        return function(y) {
            return Control_Apply.apply(applyEither)(Data_Functor.map(functorEither)(Data_Semigroup.append(dictSemigroup))(x))(y);
        };
    });
};
var applicativeEither = new Control_Applicative.Applicative(function() {
    return applyEither;
}, Right.create);
var monadEither = new Control_Monad.Monad(function() {
    return applicativeEither;
}, function() {
    return bindEither;
});
var altEither = new Control_Alt.Alt(function() {
    return functorEither;
}, function(v) {
    return function(v1) {
        if (v instanceof Left) return v1;
        return v;
    };
});
module.exports = {
    Left: Left,
    Right: Right,
    either: either,
    choose: choose,
    isLeft: isLeft,
    isRight: isRight,
    fromLeft: fromLeft,
    fromRight: fromRight,
    note: note,
    "note'": note$prime,
    hush: hush,
    functorEither: functorEither,
    functorWithIndexEither: functorWithIndexEither,
    invariantEither: invariantEither,
    bifunctorEither: bifunctorEither,
    applyEither: applyEither,
    applicativeEither: applicativeEither,
    altEither: altEither,
    bindEither: bindEither,
    monadEither: monadEither,
    extendEither: extendEither,
    showEither: showEither,
    eqEither: eqEither,
    eq1Either: eq1Either,
    ordEither: ordEither,
    ord1Either: ord1Either,
    boundedEither: boundedEither,
    foldableEither: foldableEither,
    foldableWithIndexEither: foldableWithIndexEither,
    bifoldableEither: bifoldableEither,
    traversableEither: traversableEither,
    traversableWithIndexEither: traversableWithIndexEither,
    bitraversableEither: bitraversableEither,
    semigroupEither: semigroupEither
};

},{"../Control.Alt/index.js":"82RIG","../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Extend/index.js":"kAltv","../Control.Monad/index.js":"alCn2","../Data.Bifoldable/index.js":"9e0vW","../Data.Bifunctor/index.js":"4aJ07","../Data.Bitraversable/index.js":"8QR9r","../Data.Bounded/index.js":"jzt4h","../Data.Eq/index.js":"c3b8F","../Data.Foldable/index.js":"jWmFN","../Data.FoldableWithIndex/index.js":"b0hJn","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO","../Data.Functor.Invariant/index.js":"hYAzT","../Data.FunctorWithIndex/index.js":"9mTwC","../Data.Maybe/index.js":"ePH81","../Data.Monoid/index.js":"94fxC","../Data.Ord/index.js":"f14nh","../Data.Ordering/index.js":"lEtyd","../Data.Semigroup/index.js":"4sNah","../Data.Show/index.js":"b6tNW","../Data.Traversable/index.js":"i5Kon","../Data.TraversableWithIndex/index.js":"bLveW","../Data.Unit/index.js":"d7oKp"}],"kAltv":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Extend = function(Functor0, extend) {
    this.Functor0 = Functor0;
    this.extend = extend;
};
_c = Extend;
var extendFn = function(dictSemigroup) {
    return new Extend(function() {
        return Data_Functor.functorFn;
    }, function(f) {
        return function(g) {
            return function(w) {
                return f(function(w$prime) {
                    return g(Data_Semigroup.append(dictSemigroup)(w)(w$prime));
                });
            };
        };
    });
};
var extendArray = new Extend(function() {
    return Data_Functor.functorArray;
}, $foreign.arrayExtend);
var extend = function(dict) {
    return dict.extend;
};
var extendFlipped = function(dictExtend) {
    return function(w) {
        return function(f) {
            return extend(dictExtend)(f)(w);
        };
    };
};
var duplicate = function(dictExtend) {
    return extend(dictExtend)(Control_Category.identity(Control_Category.categoryFn));
};
var composeCoKleisliFlipped = function(dictExtend) {
    return function(f) {
        return function(g) {
            return function(w) {
                return f(extend(dictExtend)(g)(w));
            };
        };
    };
};
var composeCoKleisli = function(dictExtend) {
    return function(f) {
        return function(g) {
            return function(w) {
                return g(extend(dictExtend)(f)(w));
            };
        };
    };
};
module.exports = {
    Extend: Extend,
    extend: extend,
    extendFlipped: extendFlipped,
    composeCoKleisli: composeCoKleisli,
    composeCoKleisliFlipped: composeCoKleisliFlipped,
    duplicate: duplicate,
    extendFn: extendFn,
    extendArray: extendArray
};
var _c;
$RefreshReg$(_c, "Extend");

},{"./foreign.js":"cqcmB","../Control.Category/index.js":"dfcPK","../Data.Functor/index.js":"iy1jO","../Data.Semigroup/index.js":"4sNah"}],"cqcmB":[function(require,module,exports) {
"use strict";
exports.arrayExtend = function(f) {
    return function(xs) {
        return xs.map(function(_, i, xs1) {
            return f(xs1.slice(i));
        });
    };
};

},{}],"9e0vW":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Bifoldable = function(bifoldMap, bifoldl, bifoldr) {
    this.bifoldMap = bifoldMap;
    this.bifoldl = bifoldl;
    this.bifoldr = bifoldr;
};
_c = Bifoldable;
var bifoldr = function(dict) {
    return dict.bifoldr;
};
var bitraverse_ = function(dictBifoldable) {
    return function(dictApplicative) {
        return function(f) {
            return function(g) {
                return bifoldr(dictBifoldable)(function() {
                    var $97 = Control_Apply.applySecond(dictApplicative.Apply0());
                    return function($98) {
                        return $97(f($98));
                    };
                }())(function() {
                    var $99 = Control_Apply.applySecond(dictApplicative.Apply0());
                    return function($100) {
                        return $99(g($100));
                    };
                }())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
            };
        };
    };
};
var bifor_ = function(dictBifoldable) {
    return function(dictApplicative) {
        return function(t) {
            return function(f) {
                return function(g) {
                    return bitraverse_(dictBifoldable)(dictApplicative)(f)(g)(t);
                };
            };
        };
    };
};
var bisequence_ = function(dictBifoldable) {
    return function(dictApplicative) {
        return bitraverse_(dictBifoldable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
    };
};
var bifoldl = function(dict) {
    return dict.bifoldl;
};
var bifoldableJoker = function(dictFoldable) {
    return new Bifoldable(function(dictMonoid) {
        return function(v) {
            return function(r) {
                return function(v1) {
                    return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(r)(v1);
                };
            };
        };
    }, function(v) {
        return function(r) {
            return function(u) {
                return function(v1) {
                    return Data_Foldable.foldl(dictFoldable)(r)(u)(v1);
                };
            };
        };
    }, function(v) {
        return function(r) {
            return function(u) {
                return function(v1) {
                    return Data_Foldable.foldr(dictFoldable)(r)(u)(v1);
                };
            };
        };
    });
};
var bifoldableClown = function(dictFoldable) {
    return new Bifoldable(function(dictMonoid) {
        return function(l) {
            return function(v) {
                return function(v1) {
                    return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(l)(v1);
                };
            };
        };
    }, function(l) {
        return function(v) {
            return function(u) {
                return function(v1) {
                    return Data_Foldable.foldl(dictFoldable)(l)(u)(v1);
                };
            };
        };
    }, function(l) {
        return function(v) {
            return function(u) {
                return function(v1) {
                    return Data_Foldable.foldr(dictFoldable)(l)(u)(v1);
                };
            };
        };
    });
};
var bifoldMapDefaultR = function(dictBifoldable) {
    return function(dictMonoid) {
        return function(f) {
            return function(g) {
                return bifoldr(dictBifoldable)(function() {
                    var $101 = Data_Semigroup.append(dictMonoid.Semigroup0());
                    return function($102) {
                        return $101(f($102));
                    };
                }())(function() {
                    var $103 = Data_Semigroup.append(dictMonoid.Semigroup0());
                    return function($104) {
                        return $103(g($104));
                    };
                }())(Data_Monoid.mempty(dictMonoid));
            };
        };
    };
};
var bifoldMapDefaultL = function(dictBifoldable) {
    return function(dictMonoid) {
        return function(f) {
            return function(g) {
                return bifoldl(dictBifoldable)(function(m) {
                    return function(a) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(f(a));
                    };
                })(function(m) {
                    return function(b) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(g(b));
                    };
                })(Data_Monoid.mempty(dictMonoid));
            };
        };
    };
};
var bifoldMap = function(dict) {
    return dict.bifoldMap;
};
var bifoldableFlip = function(dictBifoldable) {
    return new Bifoldable(function(dictMonoid) {
        return function(r) {
            return function(l) {
                return function(v) {
                    return bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v);
                };
            };
        };
    }, function(r) {
        return function(l) {
            return function(u) {
                return function(v) {
                    return bifoldl(dictBifoldable)(l)(r)(u)(v);
                };
            };
        };
    }, function(r) {
        return function(l) {
            return function(u) {
                return function(v) {
                    return bifoldr(dictBifoldable)(l)(r)(u)(v);
                };
            };
        };
    });
};
var bifoldableWrap = function(dictBifoldable) {
    return new Bifoldable(function(dictMonoid) {
        return function(l) {
            return function(r) {
                return function(v) {
                    return bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v);
                };
            };
        };
    }, function(l) {
        return function(r) {
            return function(u) {
                return function(v) {
                    return bifoldl(dictBifoldable)(l)(r)(u)(v);
                };
            };
        };
    }, function(l) {
        return function(r) {
            return function(u) {
                return function(v) {
                    return bifoldr(dictBifoldable)(l)(r)(u)(v);
                };
            };
        };
    });
};
var bifoldlDefault = function(dictBifoldable) {
    return function(f) {
        return function(g) {
            return function(z) {
                return function(p) {
                    return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(bifoldMap(dictBifoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function() {
                        var $105 = Data_Function.flip(f);
                        return function($106) {
                            return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($105($106)));
                        };
                    }())(function() {
                        var $107 = Data_Function.flip(g);
                        return function($108) {
                            return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($107($108)));
                        };
                    }())(p)))(z);
                };
            };
        };
    };
};
var bifoldrDefault = function(dictBifoldable) {
    return function(f) {
        return function(g) {
            return function(z) {
                return function(p) {
                    return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(bifoldMap(dictBifoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function($109) {
                        return Data_Monoid_Endo.Endo(f($109));
                    })(function($110) {
                        return Data_Monoid_Endo.Endo(g($110));
                    })(p))(z);
                };
            };
        };
    };
};
var bifoldableProduct = function(dictBifoldable) {
    return function(dictBifoldable1) {
        return new Bifoldable(function(dictMonoid) {
            return function(l) {
                return function(r) {
                    return function(v) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v.value0))(bifoldMap(dictBifoldable1)(dictMonoid)(l)(r)(v.value1));
                    };
                };
            };
        }, function(l) {
            return function(r) {
                return function(u) {
                    return function(m) {
                        return bifoldlDefault(bifoldableProduct(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
                    };
                };
            };
        }, function(l) {
            return function(r) {
                return function(u) {
                    return function(m) {
                        return bifoldrDefault(bifoldableProduct(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
                    };
                };
            };
        });
    };
};
var bifold = function(dictBifoldable) {
    return function(dictMonoid) {
        return bifoldMap(dictBifoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
    };
};
var biany = function(dictBifoldable) {
    return function(dictBooleanAlgebra) {
        return function(p) {
            return function(q) {
                var $111 = Data_Newtype.unwrap(Data_Newtype.newtypeDisj);
                var $112 = bifoldMap(dictBifoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra.HeytingAlgebra0()))(function($114) {
                    return Data_Monoid_Disj.Disj(p($114));
                })(function($115) {
                    return Data_Monoid_Disj.Disj(q($115));
                });
                return function($113) {
                    return $111($112($113));
                };
            };
        };
    };
};
var biall = function(dictBifoldable) {
    return function(dictBooleanAlgebra) {
        return function(p) {
            return function(q) {
                var $116 = Data_Newtype.unwrap(Data_Newtype.newtypeConj);
                var $117 = bifoldMap(dictBifoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra.HeytingAlgebra0()))(function($119) {
                    return Data_Monoid_Conj.Conj(p($119));
                })(function($120) {
                    return Data_Monoid_Conj.Conj(q($120));
                });
                return function($118) {
                    return $116($117($118));
                };
            };
        };
    };
};
module.exports = {
    bifoldMap: bifoldMap,
    bifoldl: bifoldl,
    bifoldr: bifoldr,
    Bifoldable: Bifoldable,
    bifoldrDefault: bifoldrDefault,
    bifoldlDefault: bifoldlDefault,
    bifoldMapDefaultR: bifoldMapDefaultR,
    bifoldMapDefaultL: bifoldMapDefaultL,
    bifold: bifold,
    bitraverse_: bitraverse_,
    bifor_: bifor_,
    bisequence_: bisequence_,
    biany: biany,
    biall: biall,
    bifoldableClown: bifoldableClown,
    bifoldableJoker: bifoldableJoker,
    bifoldableFlip: bifoldableFlip,
    bifoldableProduct: bifoldableProduct,
    bifoldableWrap: bifoldableWrap
};
var _c;
$RefreshReg$(_c, "Bifoldable");

},{"../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Category/index.js":"dfcPK","../Data.Foldable/index.js":"jWmFN","../Data.Function/index.js":"cuwEt","../Data.Monoid/index.js":"94fxC","../Data.Monoid.Conj/index.js":"gxI2n","../Data.Monoid.Disj/index.js":"2qFBQ","../Data.Monoid.Dual/index.js":"9K8EM","../Data.Monoid.Endo/index.js":"jaqUa","../Data.Newtype/index.js":"czJbt","../Data.Semigroup/index.js":"4sNah","../Data.Unit/index.js":"d7oKp"}],"jWmFN":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Foldable = function(foldMap, foldl, foldr) {
    this.foldMap = foldMap;
    this.foldl = foldl;
    this.foldr = foldr;
};
_c = Foldable;
var foldr = function(dict) {
    return dict.foldr;
};
var indexr = function(dictFoldable) {
    return function(idx) {
        var go = function(a) {
            return function(cursor) {
                if (cursor.elem instanceof Data_Maybe.Just) return cursor;
                var $106 = cursor.pos === idx;
                if ($106) return {
                    elem: new Data_Maybe.Just(a),
                    pos: cursor.pos
                };
                return {
                    pos: cursor.pos + 1 | 0,
                    elem: cursor.elem
                };
            };
        };
        var $193 = foldr(dictFoldable)(go)({
            elem: Data_Maybe.Nothing.value,
            pos: 0
        });
        return function($194) {
            return (function(v) {
                return v.elem;
            })($193($194));
        };
    };
};
var $$null = function(dictFoldable) {
    return foldr(dictFoldable)(function(v) {
        return function(v1) {
            return false;
        };
    })(true);
};
var oneOf = function(dictFoldable) {
    return function(dictPlus) {
        return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
    };
};
var oneOfMap = function(dictFoldable) {
    return function(dictPlus) {
        return function(f) {
            return foldr(dictFoldable)(function() {
                var $195 = Control_Alt.alt(dictPlus.Alt0());
                return function($196) {
                    return $195(f($196));
                };
            }())(Control_Plus.empty(dictPlus));
        };
    };
};
var traverse_ = function(dictApplicative) {
    return function(dictFoldable) {
        return function(f) {
            return foldr(dictFoldable)(function() {
                var $197 = Control_Apply.applySecond(dictApplicative.Apply0());
                return function($198) {
                    return $197(f($198));
                };
            }())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
        };
    };
};
var for_ = function(dictApplicative) {
    return function(dictFoldable) {
        return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
    };
};
var sequence_ = function(dictApplicative) {
    return function(dictFoldable) {
        return traverse_(dictApplicative)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var foldl = function(dict) {
    return dict.foldl;
};
var indexl = function(dictFoldable) {
    return function(idx) {
        var go = function(cursor) {
            return function(a) {
                if (cursor.elem instanceof Data_Maybe.Just) return cursor;
                var $109 = cursor.pos === idx;
                if ($109) return {
                    elem: new Data_Maybe.Just(a),
                    pos: cursor.pos
                };
                return {
                    pos: cursor.pos + 1 | 0,
                    elem: cursor.elem
                };
            };
        };
        var $199 = foldl(dictFoldable)(go)({
            elem: Data_Maybe.Nothing.value,
            pos: 0
        });
        return function($200) {
            return (function(v) {
                return v.elem;
            })($199($200));
        };
    };
};
var intercalate = function(dictFoldable) {
    return function(dictMonoid) {
        return function(sep) {
            return function(xs) {
                var go = function(v) {
                    return function(x) {
                        if (v.init) return {
                            init: false,
                            acc: x
                        };
                        return {
                            init: false,
                            acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                        };
                    };
                };
                return foldl(dictFoldable)(go)({
                    init: true,
                    acc: Data_Monoid.mempty(dictMonoid)
                })(xs).acc;
            };
        };
    };
};
var length = function(dictFoldable) {
    return function(dictSemiring) {
        return foldl(dictFoldable)(function(c) {
            return function(v) {
                return Data_Semiring.add(dictSemiring)(Data_Semiring.one(dictSemiring))(c);
            };
        })(Data_Semiring.zero(dictSemiring));
    };
};
var maximumBy = function(dictFoldable) {
    return function(cmp) {
        var max$prime = function(v) {
            return function(v1) {
                if (v instanceof Data_Maybe.Nothing) return new Data_Maybe.Just(v1);
                if (v instanceof Data_Maybe.Just) return new Data_Maybe.Just(function() {
                    var $116 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.GT.value);
                    if ($116) return v.value0;
                    return v1;
                }());
                throw new Error("Failed pattern match at Data.Foldable (line 389, column 3 - line 389, column 27): " + [
                    v.constructor.name,
                    v1.constructor.name
                ]);
            };
        };
        return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
    };
};
var maximum = function(dictOrd) {
    return function(dictFoldable) {
        return maximumBy(dictFoldable)(Data_Ord.compare(dictOrd));
    };
};
var minimumBy = function(dictFoldable) {
    return function(cmp) {
        var min$prime = function(v) {
            return function(v1) {
                if (v instanceof Data_Maybe.Nothing) return new Data_Maybe.Just(v1);
                if (v instanceof Data_Maybe.Just) return new Data_Maybe.Just(function() {
                    var $120 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.LT.value);
                    if ($120) return v.value0;
                    return v1;
                }());
                throw new Error("Failed pattern match at Data.Foldable (line 402, column 3 - line 402, column 27): " + [
                    v.constructor.name,
                    v1.constructor.name
                ]);
            };
        };
        return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
    };
};
var minimum = function(dictOrd) {
    return function(dictFoldable) {
        return minimumBy(dictFoldable)(Data_Ord.compare(dictOrd));
    };
};
var product = function(dictFoldable) {
    return function(dictSemiring) {
        return foldl(dictFoldable)(Data_Semiring.mul(dictSemiring))(Data_Semiring.one(dictSemiring));
    };
};
var sum = function(dictFoldable) {
    return function(dictSemiring) {
        return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
    };
};
var foldableMultiplicative = new Foldable(function(dictMonoid) {
    return function(f) {
        return function(v) {
            return f(v);
        };
    };
}, function(f) {
    return function(z) {
        return function(v) {
            return f(z)(v);
        };
    };
}, function(f) {
    return function(z) {
        return function(v) {
            return f(v)(z);
        };
    };
});
var foldableMaybe = new Foldable(function(dictMonoid) {
    return function(f) {
        return function(v) {
            if (v instanceof Data_Maybe.Nothing) return Data_Monoid.mempty(dictMonoid);
            if (v instanceof Data_Maybe.Just) return f(v.value0);
            throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [
                f.constructor.name,
                v.constructor.name
            ]);
        };
    };
}, function(v) {
    return function(z) {
        return function(v1) {
            if (v1 instanceof Data_Maybe.Nothing) return z;
            if (v1 instanceof Data_Maybe.Just) return v(z)(v1.value0);
            throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [
                v.constructor.name,
                z.constructor.name,
                v1.constructor.name
            ]);
        };
    };
}, function(v) {
    return function(z) {
        return function(v1) {
            if (v1 instanceof Data_Maybe.Nothing) return z;
            if (v1 instanceof Data_Maybe.Just) return v(v1.value0)(z);
            throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [
                v.constructor.name,
                z.constructor.name,
                v1.constructor.name
            ]);
        };
    };
});
var foldableDual = new Foldable(function(dictMonoid) {
    return function(f) {
        return function(v) {
            return f(v);
        };
    };
}, function(f) {
    return function(z) {
        return function(v) {
            return f(z)(v);
        };
    };
}, function(f) {
    return function(z) {
        return function(v) {
            return f(v)(z);
        };
    };
});
var foldableDisj = new Foldable(function(dictMonoid) {
    return function(f) {
        return function(v) {
            return f(v);
        };
    };
}, function(f) {
    return function(z) {
        return function(v) {
            return f(z)(v);
        };
    };
}, function(f) {
    return function(z) {
        return function(v) {
            return f(v)(z);
        };
    };
});
var foldableConj = new Foldable(function(dictMonoid) {
    return function(f) {
        return function(v) {
            return f(v);
        };
    };
}, function(f) {
    return function(z) {
        return function(v) {
            return f(z)(v);
        };
    };
}, function(f) {
    return function(z) {
        return function(v) {
            return f(v)(z);
        };
    };
});
var foldableAdditive = new Foldable(function(dictMonoid) {
    return function(f) {
        return function(v) {
            return f(v);
        };
    };
}, function(f) {
    return function(z) {
        return function(v) {
            return f(z)(v);
        };
    };
}, function(f) {
    return function(z) {
        return function(v) {
            return f(v)(z);
        };
    };
});
var foldMapDefaultR = function(dictFoldable) {
    return function(dictMonoid) {
        return function(f) {
            return foldr(dictFoldable)(function(x) {
                return function(acc) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                };
            })(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var foldableArray = new Foldable(function(dictMonoid) {
    return foldMapDefaultR(foldableArray)(dictMonoid);
}, $foreign.foldlArray, $foreign.foldrArray);
var foldMapDefaultL = function(dictFoldable) {
    return function(dictMonoid) {
        return function(f) {
            return foldl(dictFoldable)(function(acc) {
                return function(x) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(x));
                };
            })(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var foldMap = function(dict) {
    return dict.foldMap;
};
var foldableFirst = new Foldable(function(dictMonoid) {
    return function(f) {
        return function(v) {
            return foldMap(foldableMaybe)(dictMonoid)(f)(v);
        };
    };
}, function(f) {
    return function(z) {
        return function(v) {
            return foldl(foldableMaybe)(f)(z)(v);
        };
    };
}, function(f) {
    return function(z) {
        return function(v) {
            return foldr(foldableMaybe)(f)(z)(v);
        };
    };
});
var foldableLast = new Foldable(function(dictMonoid) {
    return function(f) {
        return function(v) {
            return foldMap(foldableMaybe)(dictMonoid)(f)(v);
        };
    };
}, function(f) {
    return function(z) {
        return function(v) {
            return foldl(foldableMaybe)(f)(z)(v);
        };
    };
}, function(f) {
    return function(z) {
        return function(v) {
            return foldr(foldableMaybe)(f)(z)(v);
        };
    };
});
var foldlDefault = function(dictFoldable) {
    return function(c) {
        return function(u) {
            return function(xs) {
                return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function() {
                    var $201 = Data_Function.flip(c);
                    return function($202) {
                        return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($201($202)));
                    };
                }())(xs)))(u);
            };
        };
    };
};
var foldrDefault = function(dictFoldable) {
    return function(c) {
        return function(u) {
            return function(xs) {
                return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function($203) {
                    return Data_Monoid_Endo.Endo(c($203));
                })(xs))(u);
            };
        };
    };
};
var surroundMap = function(dictFoldable) {
    return function(dictSemigroup) {
        return function(d) {
            return function(t) {
                return function(f) {
                    var joined = function(a) {
                        return function(m) {
                            return Data_Semigroup.append(dictSemigroup)(d)(Data_Semigroup.append(dictSemigroup)(t(a))(m));
                        };
                    };
                    return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(joined)(f))(d);
                };
            };
        };
    };
};
var surround = function(dictFoldable) {
    return function(dictSemigroup) {
        return function(d) {
            return surroundMap(dictFoldable)(dictSemigroup)(d)(Control_Category.identity(Control_Category.categoryFn));
        };
    };
};
var foldM = function(dictFoldable) {
    return function(dictMonad) {
        return function(f) {
            return function(a0) {
                return foldl(dictFoldable)(function(ma) {
                    return function(b) {
                        return Control_Bind.bind(dictMonad.Bind1())(ma)(Data_Function.flip(f)(b));
                    };
                })(Control_Applicative.pure(dictMonad.Applicative0())(a0));
            };
        };
    };
};
var fold = function(dictFoldable) {
    return function(dictMonoid) {
        return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var findMap = function(dictFoldable) {
    return function(p) {
        var go = function(v) {
            return function(v1) {
                if (v instanceof Data_Maybe.Nothing) return p(v1);
                return v;
            };
        };
        return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
    };
};
var find = function(dictFoldable) {
    return function(p) {
        var go = function(v) {
            return function(v1) {
                if (v instanceof Data_Maybe.Nothing && p(v1)) return new Data_Maybe.Just(v1);
                return v;
            };
        };
        return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
    };
};
var any = function(dictFoldable) {
    return function(dictHeytingAlgebra) {
        return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
    };
};
var elem = function(dictFoldable) {
    return function(dictEq) {
        var $204 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
        var $205 = Data_Eq.eq(dictEq);
        return function($206) {
            return $204($205($206));
        };
    };
};
var notElem = function(dictFoldable) {
    return function(dictEq) {
        return function(x) {
            var $207 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
            var $208 = elem(dictFoldable)(dictEq)(x);
            return function($209) {
                return $207($208($209));
            };
        };
    };
};
var or = function(dictFoldable) {
    return function(dictHeytingAlgebra) {
        return any(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var all = function(dictFoldable) {
    return function(dictHeytingAlgebra) {
        return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeConj)(Data_Newtype.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
    };
};
var and = function(dictFoldable) {
    return function(dictHeytingAlgebra) {
        return all(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
    };
};
module.exports = {
    Foldable: Foldable,
    foldr: foldr,
    foldl: foldl,
    foldMap: foldMap,
    foldrDefault: foldrDefault,
    foldlDefault: foldlDefault,
    foldMapDefaultL: foldMapDefaultL,
    foldMapDefaultR: foldMapDefaultR,
    fold: fold,
    foldM: foldM,
    traverse_: traverse_,
    for_: for_,
    sequence_: sequence_,
    oneOf: oneOf,
    oneOfMap: oneOfMap,
    intercalate: intercalate,
    surroundMap: surroundMap,
    surround: surround,
    and: and,
    or: or,
    all: all,
    any: any,
    sum: sum,
    product: product,
    elem: elem,
    notElem: notElem,
    indexl: indexl,
    indexr: indexr,
    find: find,
    findMap: findMap,
    maximum: maximum,
    maximumBy: maximumBy,
    minimum: minimum,
    minimumBy: minimumBy,
    "null": $$null,
    length: length,
    foldableArray: foldableArray,
    foldableMaybe: foldableMaybe,
    foldableFirst: foldableFirst,
    foldableLast: foldableLast,
    foldableAdditive: foldableAdditive,
    foldableDual: foldableDual,
    foldableDisj: foldableDisj,
    foldableConj: foldableConj,
    foldableMultiplicative: foldableMultiplicative
};
var _c;
$RefreshReg$(_c, "Foldable");

},{"./foreign.js":"2B1xa","../Control.Alt/index.js":"82RIG","../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Category/index.js":"dfcPK","../Control.Plus/index.js":"5lCU5","../Data.Eq/index.js":"c3b8F","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO","../Data.HeytingAlgebra/index.js":"8Mx0E","../Data.Maybe/index.js":"ePH81","../Data.Monoid/index.js":"94fxC","../Data.Monoid.Conj/index.js":"gxI2n","../Data.Monoid.Disj/index.js":"2qFBQ","../Data.Monoid.Dual/index.js":"9K8EM","../Data.Monoid.Endo/index.js":"jaqUa","../Data.Newtype/index.js":"czJbt","../Data.Ord/index.js":"f14nh","../Data.Ordering/index.js":"lEtyd","../Data.Semigroup/index.js":"4sNah","../Data.Semiring/index.js":"39btI","../Data.Unit/index.js":"d7oKp"}],"2B1xa":[function(require,module,exports) {
"use strict";
exports.foldrArray = function(f) {
    return function(init) {
        return function(xs) {
            var acc = init;
            var len = xs.length;
            for(var i = len - 1; i >= 0; i--)acc = f(xs[i])(acc);
            return acc;
        };
    };
};
exports.foldlArray = function(f) {
    return function(init) {
        return function(xs) {
            var acc = init;
            var len = xs.length;
            for(var i = 0; i < len; i++)acc = f(acc)(xs[i]);
            return acc;
        };
    };
};

},{}],"c3b8F":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var EqRecord = function(eqRecord) {
    this.eqRecord = eqRecord;
};
_c = EqRecord;
var Eq1 = function(eq1) {
    this.eq1 = eq1;
};
_c1 = Eq1;
var Eq = function(eq) {
    this.eq = eq;
};
_c2 = Eq;
var eqVoid = new Eq(function(v) {
    return function(v1) {
        return true;
    };
});
var eqUnit = new Eq(function(v) {
    return function(v1) {
        return true;
    };
});
var eqString = new Eq($foreign.eqStringImpl);
var eqRowNil = new EqRecord(function(v) {
    return function(v1) {
        return function(v2) {
            return true;
        };
    };
});
var eqRecord = function(dict) {
    return dict.eqRecord;
};
var eqRec = function(dictRowToList) {
    return function(dictEqRecord) {
        return new Eq(eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value));
    };
};
var eqNumber = new Eq($foreign.eqNumberImpl);
var eqInt = new Eq($foreign.eqIntImpl);
var eqChar = new Eq($foreign.eqCharImpl);
var eqBoolean = new Eq($foreign.eqBooleanImpl);
var eq1 = function(dict) {
    return dict.eq1;
};
var eq = function(dict) {
    return dict.eq;
};
var eqArray = function(dictEq) {
    return new Eq($foreign.eqArrayImpl(eq(dictEq)));
};
var eq1Array = new Eq1(function(dictEq) {
    return eq(eqArray(dictEq));
});
var eqRowCons = function(dictEqRecord) {
    return function(dictCons) {
        return function(dictIsSymbol) {
            return function(dictEq) {
                return new EqRecord(function(v) {
                    return function(ra) {
                        return function(rb) {
                            var tail = eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var get = Record_Unsafe.unsafeGet(key);
                            return eq(dictEq)(get(ra))(get(rb)) && tail;
                        };
                    };
                });
            };
        };
    };
};
var notEq = function(dictEq) {
    return function(x) {
        return function(y) {
            return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
        };
    };
};
var notEq1 = function(dictEq1) {
    return function(dictEq) {
        return function(x) {
            return function(y) {
                return eq(eqBoolean)(eq1(dictEq1)(dictEq)(x)(y))(false);
            };
        };
    };
};
module.exports = {
    Eq: Eq,
    eq: eq,
    notEq: notEq,
    Eq1: Eq1,
    eq1: eq1,
    notEq1: notEq1,
    EqRecord: EqRecord,
    eqRecord: eqRecord,
    eqBoolean: eqBoolean,
    eqInt: eqInt,
    eqNumber: eqNumber,
    eqChar: eqChar,
    eqString: eqString,
    eqUnit: eqUnit,
    eqVoid: eqVoid,
    eqArray: eqArray,
    eqRec: eqRec,
    eq1Array: eq1Array,
    eqRowNil: eqRowNil,
    eqRowCons: eqRowCons
};
var _c, _c1, _c2;
$RefreshReg$(_c, "EqRecord");
$RefreshReg$(_c1, "Eq1");
$RefreshReg$(_c2, "Eq");

},{"./foreign.js":"hB6CF","../Data.Symbol/index.js":"6s2wm","../Record.Unsafe/index.js":"6NDQI","../Type.Data.RowList/index.js":"2WGhx"}],"hB6CF":[function(require,module,exports) {
"use strict";
var refEq = function(r1) {
    return function(r2) {
        return r1 === r2;
    };
};
exports.eqBooleanImpl = refEq;
exports.eqIntImpl = refEq;
exports.eqNumberImpl = refEq;
exports.eqCharImpl = refEq;
exports.eqStringImpl = refEq;
exports.eqArrayImpl = function(f) {
    return function(xs) {
        return function(ys) {
            if (xs === ys) return true;
            if (xs.length !== ys.length) return false;
            for(var i = 0; i < xs.length; i++){
                if (!f(xs[i])(ys[i])) return false;
            }
            return true;
        };
    };
};

},{}],"8Mx0E":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_Row = require("../Type.Data.Row/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var HeytingAlgebraRecord = function(conjRecord, disjRecord, ffRecord, impliesRecord, notRecord, ttRecord) {
    this.conjRecord = conjRecord;
    this.disjRecord = disjRecord;
    this.ffRecord = ffRecord;
    this.impliesRecord = impliesRecord;
    this.notRecord = notRecord;
    this.ttRecord = ttRecord;
};
_c = HeytingAlgebraRecord;
var HeytingAlgebra = function(conj, disj, ff, implies, not, tt) {
    this.conj = conj;
    this.disj = disj;
    this.ff = ff;
    this.implies = implies;
    this.not = not;
    this.tt = tt;
};
_c1 = HeytingAlgebra;
var ttRecord = function(dict) {
    return dict.ttRecord;
};
var tt = function(dict) {
    return dict.tt;
};
var notRecord = function(dict) {
    return dict.notRecord;
};
var not = function(dict) {
    return dict.not;
};
var impliesRecord = function(dict) {
    return dict.impliesRecord;
};
var implies = function(dict) {
    return dict.implies;
};
var heytingAlgebraUnit = new HeytingAlgebra(function(v) {
    return function(v1) {
        return Data_Unit.unit;
    };
}, function(v) {
    return function(v1) {
        return Data_Unit.unit;
    };
}, Data_Unit.unit, function(v) {
    return function(v1) {
        return Data_Unit.unit;
    };
}, function(v) {
    return Data_Unit.unit;
}, Data_Unit.unit);
var heytingAlgebraRecordNil = new HeytingAlgebraRecord(function(v) {
    return function(v1) {
        return function(v2) {
            return {
            };
        };
    };
}, function(v) {
    return function(v1) {
        return function(v2) {
            return {
            };
        };
    };
}, function(v) {
    return function(v1) {
        return {
        };
    };
}, function(v) {
    return function(v1) {
        return function(v2) {
            return {
            };
        };
    };
}, function(v) {
    return function(v1) {
        return {
        };
    };
}, function(v) {
    return function(v1) {
        return {
        };
    };
});
var ffRecord = function(dict) {
    return dict.ffRecord;
};
var ff = function(dict) {
    return dict.ff;
};
var disjRecord = function(dict) {
    return dict.disjRecord;
};
var disj = function(dict) {
    return dict.disj;
};
var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function(a) {
    return function(b) {
        return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
    };
}, $foreign.boolNot, true);
var conjRecord = function(dict) {
    return dict.conjRecord;
};
var heytingAlgebraRecord = function(dictRowToList) {
    return function(dictHeytingAlgebraRecord) {
        return new HeytingAlgebra(conjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), disjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), ffRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value), impliesRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), notRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), ttRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value));
    };
};
var conj = function(dict) {
    return dict.conj;
};
var heytingAlgebraFunction = function(dictHeytingAlgebra) {
    return new HeytingAlgebra(function(f) {
        return function(g) {
            return function(a) {
                return conj(dictHeytingAlgebra)(f(a))(g(a));
            };
        };
    }, function(f) {
        return function(g) {
            return function(a) {
                return disj(dictHeytingAlgebra)(f(a))(g(a));
            };
        };
    }, function(v) {
        return ff(dictHeytingAlgebra);
    }, function(f) {
        return function(g) {
            return function(a) {
                return implies(dictHeytingAlgebra)(f(a))(g(a));
            };
        };
    }, function(f) {
        return function(a) {
            return not(dictHeytingAlgebra)(f(a));
        };
    }, function(v) {
        return tt(dictHeytingAlgebra);
    });
};
var heytingAlgebraRecordCons = function(dictIsSymbol) {
    return function(dictCons) {
        return function(dictHeytingAlgebraRecord) {
            return function(dictHeytingAlgebra) {
                return new HeytingAlgebraRecord(function(v) {
                    return function(ra) {
                        return function(rb) {
                            var tail = conjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(conj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                        };
                    };
                }, function(v) {
                    return function(ra) {
                        return function(rb) {
                            var tail = disjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(disj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                        };
                    };
                }, function(v) {
                    return function(row) {
                        var tail = ffRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);
                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                        var insert = Record_Unsafe.unsafeSet(key);
                        return insert(ff(dictHeytingAlgebra))(tail);
                    };
                }, function(v) {
                    return function(ra) {
                        return function(rb) {
                            var tail = impliesRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(implies(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                        };
                    };
                }, function(v) {
                    return function(row) {
                        var tail = notRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);
                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                        var insert = Record_Unsafe.unsafeSet(key);
                        var get = Record_Unsafe.unsafeGet(key);
                        return insert(not(dictHeytingAlgebra)(get(row)))(tail);
                    };
                }, function(v) {
                    return function(row) {
                        var tail = ttRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);
                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                        var insert = Record_Unsafe.unsafeSet(key);
                        return insert(tt(dictHeytingAlgebra))(tail);
                    };
                });
            };
        };
    };
};
module.exports = {
    HeytingAlgebra: HeytingAlgebra,
    tt: tt,
    ff: ff,
    implies: implies,
    conj: conj,
    disj: disj,
    not: not,
    HeytingAlgebraRecord: HeytingAlgebraRecord,
    ffRecord: ffRecord,
    ttRecord: ttRecord,
    impliesRecord: impliesRecord,
    conjRecord: conjRecord,
    disjRecord: disjRecord,
    notRecord: notRecord,
    heytingAlgebraBoolean: heytingAlgebraBoolean,
    heytingAlgebraUnit: heytingAlgebraUnit,
    heytingAlgebraFunction: heytingAlgebraFunction,
    heytingAlgebraRecord: heytingAlgebraRecord,
    heytingAlgebraRecordNil: heytingAlgebraRecordNil,
    heytingAlgebraRecordCons: heytingAlgebraRecordCons
};
var _c, _c1;
$RefreshReg$(_c, "HeytingAlgebraRecord");
$RefreshReg$(_c1, "HeytingAlgebra");

},{"./foreign.js":"3vAGv","../Data.Symbol/index.js":"6s2wm","../Data.Unit/index.js":"d7oKp","../Record.Unsafe/index.js":"6NDQI","../Type.Data.Row/index.js":"56mpt","../Type.Data.RowList/index.js":"2WGhx"}],"3vAGv":[function(require,module,exports) {
"use strict";
exports.boolConj = function(b1) {
    return function(b2) {
        return b1 && b2;
    };
};
exports.boolDisj = function(b1) {
    return function(b2) {
        return b1 || b2;
    };
};
exports.boolNot = function(b) {
    return !b;
};

},{}],"56mpt":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var RProxy = function() {
    function RProxy1() {
    }
    RProxy1.value = new RProxy1();
    return RProxy1;
}();
module.exports = {
    RProxy: RProxy
};

},{}],"ePH81":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Nothing = function() {
    function Nothing1() {
    }
    Nothing1.value = new Nothing1();
    return Nothing1;
}();
var Just = function() {
    function Just1(value0) {
        this.value0 = value0;
    }
    Just1.create = function(value0) {
        return new Just1(value0);
    };
    return Just1;
}();
var showMaybe = function(dictShow) {
    return new Data_Show.Show(function(v) {
        if (v instanceof Just) return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
        if (v instanceof Nothing) return "Nothing";
        throw new Error("Failed pattern match at Data.Maybe (line 205, column 1 - line 207, column 28): " + [
            v.constructor.name
        ]);
    });
};
var semigroupMaybe = function(dictSemigroup) {
    return new Data_Semigroup.Semigroup(function(v) {
        return function(v1) {
            if (v instanceof Nothing) return v1;
            if (v1 instanceof Nothing) return v;
            if (v instanceof Just && v1 instanceof Just) return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
            throw new Error("Failed pattern match at Data.Maybe (line 174, column 1 - line 177, column 43): " + [
                v.constructor.name,
                v1.constructor.name
            ]);
        };
    });
};
var optional = function(dictAlternative) {
    return function(a) {
        return Control_Alt.alt(dictAlternative.Plus1().Alt0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(Just.create)(a))(Control_Applicative.pure(dictAlternative.Applicative0())(Nothing.value));
    };
};
var monoidMaybe = function(dictSemigroup) {
    return new Data_Monoid.Monoid(function() {
        return semigroupMaybe(dictSemigroup);
    }, Nothing.value);
};
var maybe$prime = function(v) {
    return function(v1) {
        return function(v2) {
            if (v2 instanceof Nothing) return v(Data_Unit.unit);
            if (v2 instanceof Just) return v1(v2.value0);
            throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 62): " + [
                v.constructor.name,
                v1.constructor.name,
                v2.constructor.name
            ]);
        };
    };
};
var maybe = function(v) {
    return function(v1) {
        return function(v2) {
            if (v2 instanceof Nothing) return v;
            if (v2 instanceof Just) return v1(v2.value0);
            throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [
                v.constructor.name,
                v1.constructor.name,
                v2.constructor.name
            ]);
        };
    };
};
var isNothing = maybe(true)(Data_Function["const"](false));
var isJust = maybe(false)(Data_Function["const"](true));
var functorMaybe = new Data_Functor.Functor(function(v) {
    return function(v1) {
        if (v1 instanceof Just) return new Just(v(v1.value0));
        return Nothing.value;
    };
});
var invariantMaybe = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorMaybe));
var fromMaybe$prime = function(a) {
    return maybe$prime(a)(Control_Category.identity(Control_Category.categoryFn));
};
var fromMaybe = function(a) {
    return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
};
var fromJust = function(dictPartial) {
    return function(v) {
        if (v instanceof Just) return v.value0;
        throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [
            v.constructor.name
        ]);
    };
};
var extendMaybe = new Control_Extend.Extend(function() {
    return functorMaybe;
}, function(v) {
    return function(v1) {
        if (v1 instanceof Nothing) return Nothing.value;
        return new Just(v(v1));
    };
});
var eqMaybe = function(dictEq) {
    return new Data_Eq.Eq(function(x) {
        return function(y) {
            if (x instanceof Nothing && y instanceof Nothing) return true;
            if (x instanceof Just && y instanceof Just) return Data_Eq.eq(dictEq)(x.value0)(y.value0);
            return false;
        };
    });
};
var ordMaybe = function(dictOrd) {
    return new Data_Ord.Ord(function() {
        return eqMaybe(dictOrd.Eq0());
    }, function(x) {
        return function(y) {
            if (x instanceof Nothing && y instanceof Nothing) return Data_Ordering.EQ.value;
            if (x instanceof Nothing) return Data_Ordering.LT.value;
            if (y instanceof Nothing) return Data_Ordering.GT.value;
            if (x instanceof Just && y instanceof Just) return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
            throw new Error("Failed pattern match at Data.Maybe (line 194, column 1 - line 194, column 51): " + [
                x.constructor.name,
                y.constructor.name
            ]);
        };
    });
};
var eq1Maybe = new Data_Eq.Eq1(function(dictEq) {
    return Data_Eq.eq(eqMaybe(dictEq));
});
var ord1Maybe = new Data_Ord.Ord1(function() {
    return eq1Maybe;
}, function(dictOrd) {
    return Data_Ord.compare(ordMaybe(dictOrd));
});
var boundedMaybe = function(dictBounded) {
    return new Data_Bounded.Bounded(function() {
        return ordMaybe(dictBounded.Ord0());
    }, Nothing.value, new Just(Data_Bounded.top(dictBounded)));
};
var applyMaybe = new Control_Apply.Apply(function() {
    return functorMaybe;
}, function(v) {
    return function(v1) {
        if (v instanceof Just) return Data_Functor.map(functorMaybe)(v.value0)(v1);
        if (v instanceof Nothing) return Nothing.value;
        throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [
            v.constructor.name,
            v1.constructor.name
        ]);
    };
});
var bindMaybe = new Control_Bind.Bind(function() {
    return applyMaybe;
}, function(v) {
    return function(v1) {
        if (v instanceof Just) return v1(v.value0);
        if (v instanceof Nothing) return Nothing.value;
        throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [
            v.constructor.name,
            v1.constructor.name
        ]);
    };
});
var applicativeMaybe = new Control_Applicative.Applicative(function() {
    return applyMaybe;
}, Just.create);
var monadMaybe = new Control_Monad.Monad(function() {
    return applicativeMaybe;
}, function() {
    return bindMaybe;
});
var altMaybe = new Control_Alt.Alt(function() {
    return functorMaybe;
}, function(v) {
    return function(v1) {
        if (v instanceof Nothing) return v1;
        return v;
    };
});
var plusMaybe = new Control_Plus.Plus(function() {
    return altMaybe;
}, Nothing.value);
var alternativeMaybe = new Control_Alternative.Alternative(function() {
    return applicativeMaybe;
}, function() {
    return plusMaybe;
});
var monadZeroMaybe = new Control_MonadZero.MonadZero(function() {
    return alternativeMaybe;
}, function() {
    return monadMaybe;
});
module.exports = {
    Nothing: Nothing,
    Just: Just,
    maybe: maybe,
    "maybe'": maybe$prime,
    fromMaybe: fromMaybe,
    "fromMaybe'": fromMaybe$prime,
    isJust: isJust,
    isNothing: isNothing,
    fromJust: fromJust,
    optional: optional,
    functorMaybe: functorMaybe,
    applyMaybe: applyMaybe,
    applicativeMaybe: applicativeMaybe,
    altMaybe: altMaybe,
    plusMaybe: plusMaybe,
    alternativeMaybe: alternativeMaybe,
    bindMaybe: bindMaybe,
    monadMaybe: monadMaybe,
    monadZeroMaybe: monadZeroMaybe,
    extendMaybe: extendMaybe,
    invariantMaybe: invariantMaybe,
    semigroupMaybe: semigroupMaybe,
    monoidMaybe: monoidMaybe,
    eqMaybe: eqMaybe,
    eq1Maybe: eq1Maybe,
    ordMaybe: ordMaybe,
    ord1Maybe: ord1Maybe,
    boundedMaybe: boundedMaybe,
    showMaybe: showMaybe
};

},{"../Control.Alt/index.js":"82RIG","../Control.Alternative/index.js":"bgcOZ","../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Category/index.js":"dfcPK","../Control.Extend/index.js":"kAltv","../Control.Monad/index.js":"alCn2","../Control.MonadZero/index.js":"aqmZo","../Control.Plus/index.js":"5lCU5","../Data.Bounded/index.js":"jzt4h","../Data.Eq/index.js":"c3b8F","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO","../Data.Functor.Invariant/index.js":"hYAzT","../Data.Monoid/index.js":"94fxC","../Data.Ord/index.js":"f14nh","../Data.Ordering/index.js":"lEtyd","../Data.Semigroup/index.js":"4sNah","../Data.Show/index.js":"b6tNW","../Data.Unit/index.js":"d7oKp"}],"aqmZo":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var MonadZero = function(Alternative1, Monad0) {
    this.Alternative1 = Alternative1;
    this.Monad0 = Monad0;
};
_c = MonadZero;
var monadZeroArray = new MonadZero(function() {
    return Control_Alternative.alternativeArray;
}, function() {
    return Control_Monad.monadArray;
});
var guard = function(dictMonadZero) {
    return function(v) {
        if (v) return Control_Applicative.pure(dictMonadZero.Alternative1().Applicative0())(Data_Unit.unit);
        if (!v) return Control_Plus.empty(dictMonadZero.Alternative1().Plus1());
        throw new Error("Failed pattern match at Control.MonadZero (line 54, column 1 - line 54, column 52): " + [
            v.constructor.name
        ]);
    };
};
module.exports = {
    MonadZero: MonadZero,
    guard: guard,
    monadZeroArray: monadZeroArray
};
var _c;
$RefreshReg$(_c, "MonadZero");

},{"../Control.Alternative/index.js":"bgcOZ","../Control.Applicative/index.js":"dG9TO","../Control.Monad/index.js":"alCn2","../Control.Plus/index.js":"5lCU5","../Data.Unit/index.js":"d7oKp"}],"jzt4h":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Bounded = function(Ord0, bottom, top) {
    this.Ord0 = Ord0;
    this.bottom = bottom;
    this.top = top;
};
_c = Bounded;
var top = function(dict) {
    return dict.top;
};
var boundedUnit = new Bounded(function() {
    return Data_Ord.ordUnit;
}, Data_Unit.unit, Data_Unit.unit);
var boundedOrdering = new Bounded(function() {
    return Data_Ord.ordOrdering;
}, Data_Ordering.LT.value, Data_Ordering.GT.value);
var boundedNumber = new Bounded(function() {
    return Data_Ord.ordNumber;
}, $foreign.bottomNumber, $foreign.topNumber);
var boundedInt = new Bounded(function() {
    return Data_Ord.ordInt;
}, $foreign.bottomInt, $foreign.topInt);
var boundedChar = new Bounded(function() {
    return Data_Ord.ordChar;
}, $foreign.bottomChar, $foreign.topChar);
var boundedBoolean = new Bounded(function() {
    return Data_Ord.ordBoolean;
}, false, true);
var bottom = function(dict) {
    return dict.bottom;
};
module.exports = {
    Bounded: Bounded,
    bottom: bottom,
    top: top,
    boundedBoolean: boundedBoolean,
    boundedInt: boundedInt,
    boundedChar: boundedChar,
    boundedOrdering: boundedOrdering,
    boundedUnit: boundedUnit,
    boundedNumber: boundedNumber
};
var _c;
$RefreshReg$(_c, "Bounded");

},{"./foreign.js":"j3V7l","../Data.Ord/index.js":"f14nh","../Data.Ordering/index.js":"lEtyd","../Data.Unit/index.js":"d7oKp"}],"j3V7l":[function(require,module,exports) {
"use strict";
exports.topInt = 2147483647;
exports.bottomInt = -2147483648;
exports.topChar = String.fromCharCode(65535);
exports.bottomChar = String.fromCharCode(0);
exports.topNumber = Number.POSITIVE_INFINITY;
exports.bottomNumber = Number.NEGATIVE_INFINITY;

},{}],"f14nh":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var OrdRecord = function(EqRecord0, compareRecord) {
    this.EqRecord0 = EqRecord0;
    this.compareRecord = compareRecord;
};
_c = OrdRecord;
var Ord1 = function(Eq10, compare1) {
    this.Eq10 = Eq10;
    this.compare1 = compare1;
};
_c1 = Ord1;
var Ord = function(Eq0, compare) {
    this.Eq0 = Eq0;
    this.compare = compare;
};
_c2 = Ord;
var ordVoid = new Ord(function() {
    return Data_Eq.eqVoid;
}, function(v) {
    return function(v1) {
        return Data_Ordering.EQ.value;
    };
});
var ordUnit = new Ord(function() {
    return Data_Eq.eqUnit;
}, function(v) {
    return function(v1) {
        return Data_Ordering.EQ.value;
    };
});
var ordString = new Ord(function() {
    return Data_Eq.eqString;
}, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordRecordNil = new OrdRecord(function() {
    return Data_Eq.eqRowNil;
}, function(v) {
    return function(v1) {
        return function(v2) {
            return Data_Ordering.EQ.value;
        };
    };
});
var ordOrdering = new Ord(function() {
    return Data_Ordering.eqOrdering;
}, function(v) {
    return function(v1) {
        if (v instanceof Data_Ordering.LT && v1 instanceof Data_Ordering.LT) return Data_Ordering.EQ.value;
        if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.EQ) return Data_Ordering.EQ.value;
        if (v instanceof Data_Ordering.GT && v1 instanceof Data_Ordering.GT) return Data_Ordering.EQ.value;
        if (v instanceof Data_Ordering.LT) return Data_Ordering.LT.value;
        if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.LT) return Data_Ordering.GT.value;
        if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.GT) return Data_Ordering.LT.value;
        if (v instanceof Data_Ordering.GT) return Data_Ordering.GT.value;
        throw new Error("Failed pattern match at Data.Ord (line 112, column 1 - line 119, column 21): " + [
            v.constructor.name,
            v1.constructor.name
        ]);
    };
});
var ordNumber = new Ord(function() {
    return Data_Eq.eqNumber;
}, $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordInt = new Ord(function() {
    return Data_Eq.eqInt;
}, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordChar = new Ord(function() {
    return Data_Eq.eqChar;
}, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordBoolean = new Ord(function() {
    return Data_Eq.eqBoolean;
}, $foreign.ordBooleanImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var compareRecord = function(dict) {
    return dict.compareRecord;
};
var ordRecord = function(dictRowToList) {
    return function(dictOrdRecord) {
        return new Ord(function() {
            return Data_Eq.eqRec()(dictOrdRecord.EqRecord0());
        }, compareRecord(dictOrdRecord)(Type_Data_RowList.RLProxy.value));
    };
};
var compare1 = function(dict) {
    return dict.compare1;
};
var compare = function(dict) {
    return dict.compare;
};
var comparing = function(dictOrd) {
    return function(f) {
        return function(x) {
            return function(y) {
                return compare(dictOrd)(f(x))(f(y));
            };
        };
    };
};
var greaterThan = function(dictOrd) {
    return function(a1) {
        return function(a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.GT) return true;
            return false;
        };
    };
};
var greaterThanOrEq = function(dictOrd) {
    return function(a1) {
        return function(a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.LT) return false;
            return true;
        };
    };
};
var signum = function(dictOrd) {
    return function(dictRing) {
        return function(x) {
            var $43 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
            if ($43) return Data_Semiring.one(dictRing.Semiring0());
            return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));
        };
    };
};
var lessThan = function(dictOrd) {
    return function(a1) {
        return function(a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.LT) return true;
            return false;
        };
    };
};
var lessThanOrEq = function(dictOrd) {
    return function(a1) {
        return function(a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.GT) return false;
            return true;
        };
    };
};
var max = function(dictOrd) {
    return function(x) {
        return function(y) {
            var v = compare(dictOrd)(x)(y);
            if (v instanceof Data_Ordering.LT) return y;
            if (v instanceof Data_Ordering.EQ) return x;
            if (v instanceof Data_Ordering.GT) return x;
            throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [
                v.constructor.name
            ]);
        };
    };
};
var min = function(dictOrd) {
    return function(x) {
        return function(y) {
            var v = compare(dictOrd)(x)(y);
            if (v instanceof Data_Ordering.LT) return x;
            if (v instanceof Data_Ordering.EQ) return x;
            if (v instanceof Data_Ordering.GT) return y;
            throw new Error("Failed pattern match at Data.Ord (line 158, column 3 - line 161, column 12): " + [
                v.constructor.name
            ]);
        };
    };
};
var ordArray = function(dictOrd) {
    return new Ord(function() {
        return Data_Eq.eqArray(dictOrd.Eq0());
    }, function() {
        var toDelta = function(x) {
            return function(y) {
                var v = compare(dictOrd)(x)(y);
                if (v instanceof Data_Ordering.EQ) return 0;
                if (v instanceof Data_Ordering.LT) return 1;
                if (v instanceof Data_Ordering.GT) return -1;
                throw new Error("Failed pattern match at Data.Ord (line 65, column 7 - line 68, column 17): " + [
                    v.constructor.name
                ]);
            };
        };
        return function(xs) {
            return function(ys) {
                return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
            };
        };
    }());
};
var ord1Array = new Ord1(function() {
    return Data_Eq.eq1Array;
}, function(dictOrd) {
    return compare(ordArray(dictOrd));
});
var ordRecordCons = function(dictOrdRecord) {
    return function(dictCons) {
        return function(dictIsSymbol) {
            return function(dictOrd) {
                return new OrdRecord(function() {
                    return Data_Eq.eqRowCons(dictOrdRecord.EqRecord0())()(dictIsSymbol)(dictOrd.Eq0());
                }, function(v) {
                    return function(ra) {
                        return function(rb) {
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var left = compare(dictOrd)(Record_Unsafe.unsafeGet(key)(ra))(Record_Unsafe.unsafeGet(key)(rb));
                            var $49 = Data_Eq.notEq(Data_Ordering.eqOrdering)(left)(Data_Ordering.EQ.value);
                            if ($49) return left;
                            return compareRecord(dictOrdRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                        };
                    };
                });
            };
        };
    };
};
var clamp = function(dictOrd) {
    return function(low) {
        return function(hi) {
            return function(x) {
                return min(dictOrd)(hi)(max(dictOrd)(low)(x));
            };
        };
    };
};
var between = function(dictOrd) {
    return function(low) {
        return function(hi) {
            return function(x) {
                if (lessThan(dictOrd)(x)(low)) return false;
                if (greaterThan(dictOrd)(x)(hi)) return false;
                return true;
            };
        };
    };
};
var abs = function(dictOrd) {
    return function(dictRing) {
        return function(x) {
            var $53 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
            if ($53) return x;
            return Data_Ring.negate(dictRing)(x);
        };
    };
};
module.exports = {
    Ord: Ord,
    compare: compare,
    Ord1: Ord1,
    compare1: compare1,
    lessThan: lessThan,
    lessThanOrEq: lessThanOrEq,
    greaterThan: greaterThan,
    greaterThanOrEq: greaterThanOrEq,
    comparing: comparing,
    min: min,
    max: max,
    clamp: clamp,
    between: between,
    abs: abs,
    signum: signum,
    OrdRecord: OrdRecord,
    compareRecord: compareRecord,
    ordBoolean: ordBoolean,
    ordInt: ordInt,
    ordNumber: ordNumber,
    ordString: ordString,
    ordChar: ordChar,
    ordUnit: ordUnit,
    ordVoid: ordVoid,
    ordArray: ordArray,
    ordOrdering: ordOrdering,
    ord1Array: ord1Array,
    ordRecordNil: ordRecordNil,
    ordRecordCons: ordRecordCons,
    ordRecord: ordRecord
};
var _c, _c1, _c2;
$RefreshReg$(_c, "OrdRecord");
$RefreshReg$(_c1, "Ord1");
$RefreshReg$(_c2, "Ord");

},{"./foreign.js":"5ekfy","../Data.Eq/index.js":"c3b8F","../Data.Ordering/index.js":"lEtyd","../Data.Ring/index.js":"2x2oG","../Data.Semiring/index.js":"39btI","../Data.Symbol/index.js":"6s2wm","../Record.Unsafe/index.js":"6NDQI","../Type.Data.RowList/index.js":"2WGhx"}],"5ekfy":[function(require,module,exports) {
"use strict";
var unsafeCompareImpl = function(lt) {
    return function(eq) {
        return function(gt) {
            return function(x) {
                return function(y) {
                    return x < y ? lt : x === y ? eq : gt;
                };
            };
        };
    };
};
exports.ordBooleanImpl = unsafeCompareImpl;
exports.ordIntImpl = unsafeCompareImpl;
exports.ordNumberImpl = unsafeCompareImpl;
exports.ordStringImpl = unsafeCompareImpl;
exports.ordCharImpl = unsafeCompareImpl;
exports.ordArrayImpl = function(f) {
    return function(xs) {
        return function(ys) {
            var i = 0;
            var xlen = xs.length;
            var ylen = ys.length;
            while(i < xlen && i < ylen){
                var x = xs[i];
                var y = ys[i];
                var o = f(x)(y);
                if (o !== 0) return o;
                i++;
            }
            if (xlen === ylen) return 0;
            else if (xlen > ylen) return -1;
            else return 1;
        };
    };
};

},{}],"lEtyd":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var LT = function() {
    function LT1() {
    }
    LT1.value = new LT1();
    return LT1;
}();
var GT = function() {
    function GT1() {
    }
    GT1.value = new GT1();
    return GT1;
}();
var EQ = function() {
    function EQ1() {
    }
    EQ1.value = new EQ1();
    return EQ1;
}();
var showOrdering = new Data_Show.Show(function(v) {
    if (v instanceof LT) return "LT";
    if (v instanceof GT) return "GT";
    if (v instanceof EQ) return "EQ";
    throw new Error("Failed pattern match at Data.Ordering (line 26, column 1 - line 29, column 17): " + [
        v.constructor.name
    ]);
});
var semigroupOrdering = new Data_Semigroup.Semigroup(function(v) {
    return function(v1) {
        if (v instanceof LT) return LT.value;
        if (v instanceof GT) return GT.value;
        if (v instanceof EQ) return v1;
        throw new Error("Failed pattern match at Data.Ordering (line 21, column 1 - line 24, column 18): " + [
            v.constructor.name,
            v1.constructor.name
        ]);
    };
});
var invert = function(v) {
    if (v instanceof GT) return LT.value;
    if (v instanceof EQ) return EQ.value;
    if (v instanceof LT) return GT.value;
    throw new Error("Failed pattern match at Data.Ordering (line 33, column 1 - line 33, column 31): " + [
        v.constructor.name
    ]);
};
var eqOrdering = new Data_Eq.Eq(function(v) {
    return function(v1) {
        if (v instanceof LT && v1 instanceof LT) return true;
        if (v instanceof GT && v1 instanceof GT) return true;
        if (v instanceof EQ && v1 instanceof EQ) return true;
        return false;
    };
});
module.exports = {
    LT: LT,
    GT: GT,
    EQ: EQ,
    invert: invert,
    eqOrdering: eqOrdering,
    semigroupOrdering: semigroupOrdering,
    showOrdering: showOrdering
};

},{"../Data.Eq/index.js":"c3b8F","../Data.Semigroup/index.js":"4sNah","../Data.Show/index.js":"b6tNW"}],"2x2oG":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var RingRecord = function(SemiringRecord0, subRecord) {
    this.SemiringRecord0 = SemiringRecord0;
    this.subRecord = subRecord;
};
_c = RingRecord;
var Ring = function(Semiring0, sub) {
    this.Semiring0 = Semiring0;
    this.sub = sub;
};
_c1 = Ring;
var subRecord = function(dict) {
    return dict.subRecord;
};
var sub = function(dict) {
    return dict.sub;
};
var ringUnit = new Ring(function() {
    return Data_Semiring.semiringUnit;
}, function(v) {
    return function(v1) {
        return Data_Unit.unit;
    };
});
var ringRecordNil = new RingRecord(function() {
    return Data_Semiring.semiringRecordNil;
}, function(v) {
    return function(v1) {
        return function(v2) {
            return {
            };
        };
    };
});
var ringRecordCons = function(dictIsSymbol) {
    return function(dictCons) {
        return function(dictRingRecord) {
            return function(dictRing) {
                return new RingRecord(function() {
                    return Data_Semiring.semiringRecordCons(dictIsSymbol)()(dictRingRecord.SemiringRecord0())(dictRing.Semiring0());
                }, function(v) {
                    return function(ra) {
                        return function(rb) {
                            var tail = subRecord(dictRingRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(sub(dictRing)(get(ra))(get(rb)))(tail);
                        };
                    };
                });
            };
        };
    };
};
var ringRecord = function(dictRowToList) {
    return function(dictRingRecord) {
        return new Ring(function() {
            return Data_Semiring.semiringRecord()(dictRingRecord.SemiringRecord0());
        }, subRecord(dictRingRecord)(Type_Data_RowList.RLProxy.value));
    };
};
var ringNumber = new Ring(function() {
    return Data_Semiring.semiringNumber;
}, $foreign.numSub);
var ringInt = new Ring(function() {
    return Data_Semiring.semiringInt;
}, $foreign.intSub);
var ringFn = function(dictRing) {
    return new Ring(function() {
        return Data_Semiring.semiringFn(dictRing.Semiring0());
    }, function(f) {
        return function(g) {
            return function(x) {
                return sub(dictRing)(f(x))(g(x));
            };
        };
    });
};
var negate = function(dictRing) {
    return function(a) {
        return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
    };
};
module.exports = {
    Ring: Ring,
    sub: sub,
    negate: negate,
    RingRecord: RingRecord,
    subRecord: subRecord,
    ringInt: ringInt,
    ringNumber: ringNumber,
    ringUnit: ringUnit,
    ringFn: ringFn,
    ringRecord: ringRecord,
    ringRecordNil: ringRecordNil,
    ringRecordCons: ringRecordCons
};
var _c, _c1;
$RefreshReg$(_c, "RingRecord");
$RefreshReg$(_c1, "Ring");

},{"./foreign.js":"8rTyr","../Data.Semiring/index.js":"39btI","../Data.Symbol/index.js":"6s2wm","../Data.Unit/index.js":"d7oKp","../Record.Unsafe/index.js":"6NDQI","../Type.Data.RowList/index.js":"2WGhx"}],"8rTyr":[function(require,module,exports) {
"use strict";
exports.intSub = function(x) {
    return function(y) {
        /* jshint bitwise: false */ return x - y | 0;
    };
};
exports.numSub = function(n1) {
    return function(n2) {
        return n1 - n2;
    };
};

},{}],"39btI":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_Row = require("../Type.Data.Row/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var SemiringRecord = function(addRecord, mulRecord, oneRecord, zeroRecord) {
    this.addRecord = addRecord;
    this.mulRecord = mulRecord;
    this.oneRecord = oneRecord;
    this.zeroRecord = zeroRecord;
};
_c = SemiringRecord;
var Semiring = function(add, mul, one, zero) {
    this.add = add;
    this.mul = mul;
    this.one = one;
    this.zero = zero;
};
_c1 = Semiring;
var zeroRecord = function(dict) {
    return dict.zeroRecord;
};
var zero = function(dict) {
    return dict.zero;
};
var semiringUnit = new Semiring(function(v) {
    return function(v1) {
        return Data_Unit.unit;
    };
}, function(v) {
    return function(v1) {
        return Data_Unit.unit;
    };
}, Data_Unit.unit, Data_Unit.unit);
var semiringRecordNil = new SemiringRecord(function(v) {
    return function(v1) {
        return function(v2) {
            return {
            };
        };
    };
}, function(v) {
    return function(v1) {
        return function(v2) {
            return {
            };
        };
    };
}, function(v) {
    return function(v1) {
        return {
        };
    };
}, function(v) {
    return function(v1) {
        return {
        };
    };
});
var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1, 0);
var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
var oneRecord = function(dict) {
    return dict.oneRecord;
};
var one = function(dict) {
    return dict.one;
};
var mulRecord = function(dict) {
    return dict.mulRecord;
};
var mul = function(dict) {
    return dict.mul;
};
var addRecord = function(dict) {
    return dict.addRecord;
};
var semiringRecord = function(dictRowToList) {
    return function(dictSemiringRecord) {
        return new Semiring(addRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value), mulRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value), oneRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value), zeroRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value));
    };
};
var add = function(dict) {
    return dict.add;
};
var semiringFn = function(dictSemiring) {
    return new Semiring(function(f) {
        return function(g) {
            return function(x) {
                return add(dictSemiring)(f(x))(g(x));
            };
        };
    }, function(f) {
        return function(g) {
            return function(x) {
                return mul(dictSemiring)(f(x))(g(x));
            };
        };
    }, function(v) {
        return one(dictSemiring);
    }, function(v) {
        return zero(dictSemiring);
    });
};
var semiringRecordCons = function(dictIsSymbol) {
    return function(dictCons) {
        return function(dictSemiringRecord) {
            return function(dictSemiring) {
                return new SemiringRecord(function(v) {
                    return function(ra) {
                        return function(rb) {
                            var tail = addRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(add(dictSemiring)(get(ra))(get(rb)))(tail);
                        };
                    };
                }, function(v) {
                    return function(ra) {
                        return function(rb) {
                            var tail = mulRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(mul(dictSemiring)(get(ra))(get(rb)))(tail);
                        };
                    };
                }, function(v) {
                    return function(v1) {
                        var tail = oneRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);
                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                        var insert = Record_Unsafe.unsafeSet(key);
                        return insert(one(dictSemiring))(tail);
                    };
                }, function(v) {
                    return function(v1) {
                        var tail = zeroRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);
                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                        var insert = Record_Unsafe.unsafeSet(key);
                        return insert(zero(dictSemiring))(tail);
                    };
                });
            };
        };
    };
};
module.exports = {
    Semiring: Semiring,
    add: add,
    zero: zero,
    mul: mul,
    one: one,
    SemiringRecord: SemiringRecord,
    addRecord: addRecord,
    mulRecord: mulRecord,
    oneRecord: oneRecord,
    zeroRecord: zeroRecord,
    semiringInt: semiringInt,
    semiringNumber: semiringNumber,
    semiringFn: semiringFn,
    semiringUnit: semiringUnit,
    semiringRecord: semiringRecord,
    semiringRecordNil: semiringRecordNil,
    semiringRecordCons: semiringRecordCons
};
var _c, _c1;
$RefreshReg$(_c, "SemiringRecord");
$RefreshReg$(_c1, "Semiring");

},{"./foreign.js":"j2CWM","../Data.Symbol/index.js":"6s2wm","../Data.Unit/index.js":"d7oKp","../Record.Unsafe/index.js":"6NDQI","../Type.Data.Row/index.js":"56mpt","../Type.Data.RowList/index.js":"2WGhx"}],"j2CWM":[function(require,module,exports) {
"use strict";
exports.intAdd = function(x) {
    return function(y) {
        /* jshint bitwise: false */ return x + y | 0;
    };
};
exports.intMul = function(x) {
    return function(y) {
        /* jshint bitwise: false */ return x * y | 0;
    };
};
exports.numAdd = function(n1) {
    return function(n2) {
        return n1 + n2;
    };
};
exports.numMul = function(n1) {
    return function(n2) {
        return n1 * n2;
    };
};

},{}],"hYAzT":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Invariant = function(imap) {
    this.imap = imap;
};
_c = Invariant;
var invariantMultiplicative = new Invariant(function(f) {
    return function(v) {
        return function(v1) {
            return f(v1);
        };
    };
});
var invariantEndo = new Invariant(function(ab) {
    return function(ba) {
        return function(v) {
            return function($31) {
                return ab(v(ba($31)));
            };
        };
    };
});
var invariantDual = new Invariant(function(f) {
    return function(v) {
        return function(v1) {
            return f(v1);
        };
    };
});
var invariantDisj = new Invariant(function(f) {
    return function(v) {
        return function(v1) {
            return f(v1);
        };
    };
});
var invariantConj = new Invariant(function(f) {
    return function(v) {
        return function(v1) {
            return f(v1);
        };
    };
});
var invariantAdditive = new Invariant(function(f) {
    return function(v) {
        return function(v1) {
            return f(v1);
        };
    };
});
var imapF = function(dictFunctor) {
    return function(f) {
        return function(v) {
            return Data_Functor.map(dictFunctor)(f);
        };
    };
};
var invariantArray = new Invariant(imapF(Data_Functor.functorArray));
var invariantFn = new Invariant(imapF(Data_Functor.functorFn));
var imap = function(dict) {
    return dict.imap;
};
module.exports = {
    imap: imap,
    Invariant: Invariant,
    imapF: imapF,
    invariantFn: invariantFn,
    invariantArray: invariantArray,
    invariantAdditive: invariantAdditive,
    invariantConj: invariantConj,
    invariantDisj: invariantDisj,
    invariantDual: invariantDual,
    invariantEndo: invariantEndo,
    invariantMultiplicative: invariantMultiplicative
};
var _c;
$RefreshReg$(_c, "Invariant");

},{"../Data.Functor/index.js":"iy1jO"}],"94fxC":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var MonoidRecord = function(SemigroupRecord0, memptyRecord) {
    this.SemigroupRecord0 = SemigroupRecord0;
    this.memptyRecord = memptyRecord;
};
_c = MonoidRecord;
var Monoid = function(Semigroup0, mempty) {
    this.Semigroup0 = Semigroup0;
    this.mempty = mempty;
};
_c1 = Monoid;
var monoidUnit = new Monoid(function() {
    return Data_Semigroup.semigroupUnit;
}, Data_Unit.unit);
var monoidString = new Monoid(function() {
    return Data_Semigroup.semigroupString;
}, "");
var monoidRecordNil = new MonoidRecord(function() {
    return Data_Semigroup.semigroupRecordNil;
}, function(v) {
    return {
    };
});
var monoidOrdering = new Monoid(function() {
    return Data_Ordering.semigroupOrdering;
}, Data_Ordering.EQ.value);
var monoidArray = new Monoid(function() {
    return Data_Semigroup.semigroupArray;
}, []);
var memptyRecord = function(dict) {
    return dict.memptyRecord;
};
var monoidRecord = function(dictRowToList) {
    return function(dictMonoidRecord) {
        return new Monoid(function() {
            return Data_Semigroup.semigroupRecord()(dictMonoidRecord.SemigroupRecord0());
        }, memptyRecord(dictMonoidRecord)(Type_Data_RowList.RLProxy.value));
    };
};
var mempty = function(dict) {
    return dict.mempty;
};
var monoidFn = function(dictMonoid) {
    return new Monoid(function() {
        return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
    }, function(v) {
        return mempty(dictMonoid);
    });
};
var monoidRecordCons = function(dictIsSymbol) {
    return function(dictMonoid) {
        return function(dictCons) {
            return function(dictMonoidRecord) {
                return new MonoidRecord(function() {
                    return Data_Semigroup.semigroupRecordCons(dictIsSymbol)()(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());
                }, function(v) {
                    var tail = memptyRecord(dictMonoidRecord)(Type_Data_RowList.RLProxy.value);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                    var insert = Record_Unsafe.unsafeSet(key);
                    return insert(mempty(dictMonoid))(tail);
                });
            };
        };
    };
};
var power = function(dictMonoid) {
    return function(x) {
        var go = function(p) {
            if (p <= 0) return mempty(dictMonoid);
            if (p === 1) return x;
            if (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(p)(2) === 0) {
                var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
                return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x$prime);
            }
            if (Data_Boolean.otherwise) {
                var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
                return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x));
            }
            throw new Error("Failed pattern match at Data.Monoid (line 65, column 3 - line 65, column 17): " + [
                p.constructor.name
            ]);
        };
        return go;
    };
};
var guard = function(dictMonoid) {
    return function(v) {
        return function(v1) {
            if (v) return v1;
            if (!v) return mempty(dictMonoid);
            throw new Error("Failed pattern match at Data.Monoid (line 73, column 1 - line 73, column 49): " + [
                v.constructor.name,
                v1.constructor.name
            ]);
        };
    };
};
module.exports = {
    Monoid: Monoid,
    mempty: mempty,
    power: power,
    guard: guard,
    MonoidRecord: MonoidRecord,
    memptyRecord: memptyRecord,
    monoidUnit: monoidUnit,
    monoidOrdering: monoidOrdering,
    monoidFn: monoidFn,
    monoidString: monoidString,
    monoidArray: monoidArray,
    monoidRecord: monoidRecord,
    monoidRecordNil: monoidRecordNil,
    monoidRecordCons: monoidRecordCons
};
var _c, _c1;
$RefreshReg$(_c, "MonoidRecord");
$RefreshReg$(_c1, "Monoid");

},{"../Data.Boolean/index.js":"lv1qw","../Data.EuclideanRing/index.js":"fTU7A","../Data.Ordering/index.js":"lEtyd","../Data.Semigroup/index.js":"4sNah","../Data.Symbol/index.js":"6s2wm","../Data.Unit/index.js":"d7oKp","../Record.Unsafe/index.js":"6NDQI","../Type.Data.RowList/index.js":"2WGhx"}],"fTU7A":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var EuclideanRing = function(CommutativeRing0, degree, div, mod) {
    this.CommutativeRing0 = CommutativeRing0;
    this.degree = degree;
    this.div = div;
    this.mod = mod;
};
_c = EuclideanRing;
var mod = function(dict) {
    return dict.mod;
};
var gcd = function($copy_dictEq) {
    return function($copy_dictEuclideanRing) {
        return function($copy_a) {
            return function($copy_b) {
                var $tco_var_dictEq = $copy_dictEq;
                var $tco_var_dictEuclideanRing = $copy_dictEuclideanRing;
                var $tco_var_a = $copy_a;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(dictEq, dictEuclideanRing, a, b) {
                    var $7 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0()));
                    if ($7) {
                        $tco_done = true;
                        return a;
                    }
                    $tco_var_dictEq = dictEq;
                    $tco_var_dictEuclideanRing = dictEuclideanRing;
                    $tco_var_a = b;
                    $copy_b = mod(dictEuclideanRing)(a)(b);
                    return;
                }
                while(!$tco_done)$tco_result = $tco_loop($tco_var_dictEq, $tco_var_dictEuclideanRing, $tco_var_a, $copy_b);
                return $tco_result;
            };
        };
    };
};
var euclideanRingNumber = new EuclideanRing(function() {
    return Data_CommutativeRing.commutativeRingNumber;
}, function(v) {
    return 1;
}, $foreign.numDiv, function(v) {
    return function(v1) {
        return 0;
    };
});
var euclideanRingInt = new EuclideanRing(function() {
    return Data_CommutativeRing.commutativeRingInt;
}, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
var div = function(dict) {
    return dict.div;
};
var lcm = function(dictEq) {
    return function(dictEuclideanRing) {
        return function(a) {
            return function(b) {
                var $8 = Data_Eq.eq(dictEq)(a)(Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0())) || Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0()));
                if ($8) return Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0());
                return div(dictEuclideanRing)(Data_Semiring.mul(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0())(a)(b))(gcd(dictEq)(dictEuclideanRing)(a)(b));
            };
        };
    };
};
var degree = function(dict) {
    return dict.degree;
};
module.exports = {
    EuclideanRing: EuclideanRing,
    degree: degree,
    div: div,
    mod: mod,
    gcd: gcd,
    lcm: lcm,
    euclideanRingInt: euclideanRingInt,
    euclideanRingNumber: euclideanRingNumber
};
var _c;
$RefreshReg$(_c, "EuclideanRing");

},{"./foreign.js":"7AE5H","../Data.CommutativeRing/index.js":"2q7tT","../Data.Eq/index.js":"c3b8F","../Data.Semiring/index.js":"39btI"}],"7AE5H":[function(require,module,exports) {
"use strict";
exports.intDegree = function(x) {
    return Math.min(Math.abs(x), 2147483647);
};
// See the Euclidean definition in
// https://en.m.wikipedia.org/wiki/Modulo_operation.
exports.intDiv = function(x) {
    return function(y) {
        if (y === 0) return 0;
        return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
};
exports.intMod = function(x) {
    return function(y) {
        if (y === 0) return 0;
        var yy = Math.abs(y);
        return (x % yy + yy) % yy;
    };
};
exports.numDiv = function(n1) {
    return function(n2) {
        return n1 / n2;
    };
};

},{}],"2q7tT":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Ring = require("../Data.Ring/index.js");
var CommutativeRingRecord = function(RingRecord0) {
    this.RingRecord0 = RingRecord0;
};
_c = CommutativeRingRecord;
var CommutativeRing = function(Ring0) {
    this.Ring0 = Ring0;
};
_c1 = CommutativeRing;
var commutativeRingUnit = new CommutativeRing(function() {
    return Data_Ring.ringUnit;
});
var commutativeRingRecordNil = new CommutativeRingRecord(function() {
    return Data_Ring.ringRecordNil;
});
var commutativeRingRecordCons = function(dictIsSymbol) {
    return function(dictCons) {
        return function(dictCommutativeRingRecord) {
            return function(dictCommutativeRing) {
                return new CommutativeRingRecord(function() {
                    return Data_Ring.ringRecordCons(dictIsSymbol)()(dictCommutativeRingRecord.RingRecord0())(dictCommutativeRing.Ring0());
                });
            };
        };
    };
};
var commutativeRingRecord = function(dictRowToList) {
    return function(dictCommutativeRingRecord) {
        return new CommutativeRing(function() {
            return Data_Ring.ringRecord()(dictCommutativeRingRecord.RingRecord0());
        });
    };
};
var commutativeRingNumber = new CommutativeRing(function() {
    return Data_Ring.ringNumber;
});
var commutativeRingInt = new CommutativeRing(function() {
    return Data_Ring.ringInt;
});
var commutativeRingFn = function(dictCommutativeRing) {
    return new CommutativeRing(function() {
        return Data_Ring.ringFn(dictCommutativeRing.Ring0());
    });
};
module.exports = {
    CommutativeRing: CommutativeRing,
    CommutativeRingRecord: CommutativeRingRecord,
    commutativeRingInt: commutativeRingInt,
    commutativeRingNumber: commutativeRingNumber,
    commutativeRingUnit: commutativeRingUnit,
    commutativeRingFn: commutativeRingFn,
    commutativeRingRecord: commutativeRingRecord,
    commutativeRingRecordNil: commutativeRingRecordNil,
    commutativeRingRecordCons: commutativeRingRecordCons
};
var _c, _c1;
$RefreshReg$(_c, "CommutativeRingRecord");
$RefreshReg$(_c1, "CommutativeRing");

},{"../Data.Ring/index.js":"2x2oG"}],"gxI2n":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Conj = function(x) {
    return x;
};
_c = Conj;
var showConj = function(dictShow) {
    return new Data_Show.Show(function(v) {
        return "(Conj " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semiringConj = function(dictHeytingAlgebra) {
    return new Data_Semiring.Semiring(function(v) {
        return function(v1) {
            return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
        };
    }, function(v) {
        return function(v1) {
            return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
        };
    }, Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra));
};
var semigroupConj = function(dictHeytingAlgebra) {
    return new Data_Semigroup.Semigroup(function(v) {
        return function(v1) {
            return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
        };
    });
};
var ordConj = function(dictOrd) {
    return dictOrd;
};
var monoidConj = function(dictHeytingAlgebra) {
    return new Data_Monoid.Monoid(function() {
        return semigroupConj(dictHeytingAlgebra);
    }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
};
var functorConj = new Data_Functor.Functor(function(f) {
    return function(m) {
        return f(m);
    };
});
var eqConj = function(dictEq) {
    return dictEq;
};
var eq1Conj = new Data_Eq.Eq1(function(dictEq) {
    return Data_Eq.eq(eqConj(dictEq));
});
var ord1Conj = new Data_Ord.Ord1(function() {
    return eq1Conj;
}, function(dictOrd) {
    return Data_Ord.compare(ordConj(dictOrd));
});
var boundedConj = function(dictBounded) {
    return dictBounded;
};
var applyConj = new Control_Apply.Apply(function() {
    return functorConj;
}, function(v) {
    return function(v1) {
        return v(v1);
    };
});
var bindConj = new Control_Bind.Bind(function() {
    return applyConj;
}, function(v) {
    return function(f) {
        return f(v);
    };
});
var applicativeConj = new Control_Applicative.Applicative(function() {
    return applyConj;
}, Conj);
var monadConj = new Control_Monad.Monad(function() {
    return applicativeConj;
}, function() {
    return bindConj;
});
module.exports = {
    Conj: Conj,
    eqConj: eqConj,
    eq1Conj: eq1Conj,
    ordConj: ordConj,
    ord1Conj: ord1Conj,
    boundedConj: boundedConj,
    showConj: showConj,
    functorConj: functorConj,
    applyConj: applyConj,
    applicativeConj: applicativeConj,
    bindConj: bindConj,
    monadConj: monadConj,
    semigroupConj: semigroupConj,
    monoidConj: monoidConj,
    semiringConj: semiringConj
};
var _c;
$RefreshReg$(_c, "Conj");

},{"../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Monad/index.js":"alCn2","../Data.Eq/index.js":"c3b8F","../Data.Functor/index.js":"iy1jO","../Data.HeytingAlgebra/index.js":"8Mx0E","../Data.Monoid/index.js":"94fxC","../Data.Ord/index.js":"f14nh","../Data.Semigroup/index.js":"4sNah","../Data.Semiring/index.js":"39btI","../Data.Show/index.js":"b6tNW"}],"2qFBQ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Disj = function(x) {
    return x;
};
_c = Disj;
var showDisj = function(dictShow) {
    return new Data_Show.Show(function(v) {
        return "(Disj " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semiringDisj = function(dictHeytingAlgebra) {
    return new Data_Semiring.Semiring(function(v) {
        return function(v1) {
            return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
        };
    }, function(v) {
        return function(v1) {
            return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
        };
    }, Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra));
};
var semigroupDisj = function(dictHeytingAlgebra) {
    return new Data_Semigroup.Semigroup(function(v) {
        return function(v1) {
            return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
        };
    });
};
var ordDisj = function(dictOrd) {
    return dictOrd;
};
var monoidDisj = function(dictHeytingAlgebra) {
    return new Data_Monoid.Monoid(function() {
        return semigroupDisj(dictHeytingAlgebra);
    }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
};
var functorDisj = new Data_Functor.Functor(function(f) {
    return function(m) {
        return f(m);
    };
});
var eqDisj = function(dictEq) {
    return dictEq;
};
var eq1Disj = new Data_Eq.Eq1(function(dictEq) {
    return Data_Eq.eq(eqDisj(dictEq));
});
var ord1Disj = new Data_Ord.Ord1(function() {
    return eq1Disj;
}, function(dictOrd) {
    return Data_Ord.compare(ordDisj(dictOrd));
});
var boundedDisj = function(dictBounded) {
    return dictBounded;
};
var applyDisj = new Control_Apply.Apply(function() {
    return functorDisj;
}, function(v) {
    return function(v1) {
        return v(v1);
    };
});
var bindDisj = new Control_Bind.Bind(function() {
    return applyDisj;
}, function(v) {
    return function(f) {
        return f(v);
    };
});
var applicativeDisj = new Control_Applicative.Applicative(function() {
    return applyDisj;
}, Disj);
var monadDisj = new Control_Monad.Monad(function() {
    return applicativeDisj;
}, function() {
    return bindDisj;
});
module.exports = {
    Disj: Disj,
    eqDisj: eqDisj,
    eq1Disj: eq1Disj,
    ordDisj: ordDisj,
    ord1Disj: ord1Disj,
    boundedDisj: boundedDisj,
    showDisj: showDisj,
    functorDisj: functorDisj,
    applyDisj: applyDisj,
    applicativeDisj: applicativeDisj,
    bindDisj: bindDisj,
    monadDisj: monadDisj,
    semigroupDisj: semigroupDisj,
    monoidDisj: monoidDisj,
    semiringDisj: semiringDisj
};
var _c;
$RefreshReg$(_c, "Disj");

},{"../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Monad/index.js":"alCn2","../Data.Eq/index.js":"c3b8F","../Data.Functor/index.js":"iy1jO","../Data.HeytingAlgebra/index.js":"8Mx0E","../Data.Monoid/index.js":"94fxC","../Data.Ord/index.js":"f14nh","../Data.Semigroup/index.js":"4sNah","../Data.Semiring/index.js":"39btI","../Data.Show/index.js":"b6tNW"}],"9K8EM":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Dual = function(x) {
    return x;
};
_c = Dual;
var showDual = function(dictShow) {
    return new Data_Show.Show(function(v) {
        return "(Dual " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupDual = function(dictSemigroup) {
    return new Data_Semigroup.Semigroup(function(v) {
        return function(v1) {
            return Data_Semigroup.append(dictSemigroup)(v1)(v);
        };
    });
};
var ordDual = function(dictOrd) {
    return dictOrd;
};
var monoidDual = function(dictMonoid) {
    return new Data_Monoid.Monoid(function() {
        return semigroupDual(dictMonoid.Semigroup0());
    }, Data_Monoid.mempty(dictMonoid));
};
var functorDual = new Data_Functor.Functor(function(f) {
    return function(m) {
        return f(m);
    };
});
var eqDual = function(dictEq) {
    return dictEq;
};
var eq1Dual = new Data_Eq.Eq1(function(dictEq) {
    return Data_Eq.eq(eqDual(dictEq));
});
var ord1Dual = new Data_Ord.Ord1(function() {
    return eq1Dual;
}, function(dictOrd) {
    return Data_Ord.compare(ordDual(dictOrd));
});
var boundedDual = function(dictBounded) {
    return dictBounded;
};
var applyDual = new Control_Apply.Apply(function() {
    return functorDual;
}, function(v) {
    return function(v1) {
        return v(v1);
    };
});
var bindDual = new Control_Bind.Bind(function() {
    return applyDual;
}, function(v) {
    return function(f) {
        return f(v);
    };
});
var applicativeDual = new Control_Applicative.Applicative(function() {
    return applyDual;
}, Dual);
var monadDual = new Control_Monad.Monad(function() {
    return applicativeDual;
}, function() {
    return bindDual;
});
module.exports = {
    Dual: Dual,
    eqDual: eqDual,
    eq1Dual: eq1Dual,
    ordDual: ordDual,
    ord1Dual: ord1Dual,
    boundedDual: boundedDual,
    showDual: showDual,
    functorDual: functorDual,
    applyDual: applyDual,
    applicativeDual: applicativeDual,
    bindDual: bindDual,
    monadDual: monadDual,
    semigroupDual: semigroupDual,
    monoidDual: monoidDual
};
var _c;
$RefreshReg$(_c, "Dual");

},{"../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Monad/index.js":"alCn2","../Data.Eq/index.js":"c3b8F","../Data.Functor/index.js":"iy1jO","../Data.Monoid/index.js":"94fxC","../Data.Ord/index.js":"f14nh","../Data.Semigroup/index.js":"4sNah","../Data.Show/index.js":"b6tNW"}],"jaqUa":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Endo = function(x) {
    return x;
};
_c = Endo;
var showEndo = function(dictShow) {
    return new Data_Show.Show(function(v) {
        return "(Endo " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupEndo = function(dictSemigroupoid) {
    return new Data_Semigroup.Semigroup(function(v) {
        return function(v1) {
            return Control_Semigroupoid.compose(dictSemigroupoid)(v)(v1);
        };
    });
};
var ordEndo = function(dictOrd) {
    return dictOrd;
};
var monoidEndo = function(dictCategory) {
    return new Data_Monoid.Monoid(function() {
        return semigroupEndo(dictCategory.Semigroupoid0());
    }, Control_Category.identity(dictCategory));
};
var eqEndo = function(dictEq) {
    return dictEq;
};
var boundedEndo = function(dictBounded) {
    return dictBounded;
};
module.exports = {
    Endo: Endo,
    eqEndo: eqEndo,
    ordEndo: ordEndo,
    boundedEndo: boundedEndo,
    showEndo: showEndo,
    semigroupEndo: semigroupEndo,
    monoidEndo: monoidEndo
};
var _c;
$RefreshReg$(_c, "Endo");

},{"../Control.Category/index.js":"dfcPK","../Control.Semigroupoid/index.js":"fSgEH","../Data.Monoid/index.js":"94fxC","../Data.Semigroup/index.js":"4sNah","../Data.Show/index.js":"b6tNW"}],"czJbt":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");
var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");
var Data_Semigroup_First = require("../Data.Semigroup.First/index.js");
var Data_Semigroup_Last = require("../Data.Semigroup.Last/index.js");
var Newtype = function(unwrap, wrap) {
    this.unwrap = unwrap;
    this.wrap = wrap;
};
_c = Newtype;
var wrap = function(dict) {
    return dict.wrap;
};
var unwrap = function(dict) {
    return dict.unwrap;
};
var underF2 = function(dictFunctor) {
    return function(dictFunctor1) {
        return function(dictNewtype) {
            return function(dictNewtype1) {
                return function(v) {
                    return function(f) {
                        var $66 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1)));
                        var $67 = Data_Function.on(f)(Data_Functor.map(dictFunctor)(wrap(dictNewtype)));
                        return function($68) {
                            return $66($67($68));
                        };
                    };
                };
            };
        };
    };
};
var underF = function(dictFunctor) {
    return function(dictFunctor1) {
        return function(dictNewtype) {
            return function(dictNewtype1) {
                return function(v) {
                    return function(f) {
                        var $69 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
                        var $70 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                        return function($71) {
                            return $69(f($70($71)));
                        };
                    };
                };
            };
        };
    };
};
var under2 = function(dictNewtype) {
    return function(dictNewtype1) {
        return function(v) {
            return function(f) {
                var $72 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(unwrap(dictNewtype1));
                var $73 = Data_Function.on(f)(wrap(dictNewtype));
                return function($74) {
                    return $72($73($74));
                };
            };
        };
    };
};
var under = function(dictNewtype) {
    return function(dictNewtype1) {
        return function(v) {
            return function(f) {
                var $75 = unwrap(dictNewtype1);
                var $76 = wrap(dictNewtype);
                return function($77) {
                    return $75(f($76($77)));
                };
            };
        };
    };
};
var un = function(dictNewtype) {
    return function(v) {
        return unwrap(dictNewtype);
    };
};
var traverse = function(dictFunctor) {
    return function(dictNewtype) {
        return function(v) {
            return function(f) {
                var $78 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                var $79 = unwrap(dictNewtype);
                return function($80) {
                    return $78(f($79($80)));
                };
            };
        };
    };
};
var overF2 = function(dictFunctor) {
    return function(dictFunctor1) {
        return function(dictNewtype) {
            return function(dictNewtype1) {
                return function(v) {
                    return function(f) {
                        var $81 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(Data_Functor.map(dictFunctor1)(wrap(dictNewtype1)));
                        var $82 = Data_Function.on(f)(Data_Functor.map(dictFunctor)(unwrap(dictNewtype)));
                        return function($83) {
                            return $81($82($83));
                        };
                    };
                };
            };
        };
    };
};
var overF = function(dictFunctor) {
    return function(dictFunctor1) {
        return function(dictNewtype) {
            return function(dictNewtype1) {
                return function(v) {
                    return function(f) {
                        var $84 = Data_Functor.map(dictFunctor1)(wrap(dictNewtype1));
                        var $85 = Data_Functor.map(dictFunctor)(unwrap(dictNewtype));
                        return function($86) {
                            return $84(f($85($86)));
                        };
                    };
                };
            };
        };
    };
};
var over2 = function(dictNewtype) {
    return function(dictNewtype1) {
        return function(v) {
            return function(f) {
                var $87 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(wrap(dictNewtype1));
                var $88 = Data_Function.on(f)(unwrap(dictNewtype));
                return function($89) {
                    return $87($88($89));
                };
            };
        };
    };
};
var over = function(dictNewtype) {
    return function(dictNewtype1) {
        return function(v) {
            return function(f) {
                var $90 = wrap(dictNewtype1);
                var $91 = unwrap(dictNewtype);
                return function($92) {
                    return $90(f($91($92)));
                };
            };
        };
    };
};
var op = function(dictNewtype) {
    return un(dictNewtype);
};
var newtypeMultiplicative = new Newtype(function(v) {
    return v;
}, Data_Monoid_Multiplicative.Multiplicative);
var newtypeLast = new Newtype(function(v) {
    return v;
}, Data_Semigroup_Last.Last);
var newtypeFirst = new Newtype(function(v) {
    return v;
}, Data_Semigroup_First.First);
var newtypeEndo = new Newtype(function(v) {
    return v;
}, Data_Monoid_Endo.Endo);
var newtypeDual = new Newtype(function(v) {
    return v;
}, Data_Monoid_Dual.Dual);
var newtypeDisj = new Newtype(function(v) {
    return v;
}, Data_Monoid_Disj.Disj);
var newtypeConj = new Newtype(function(v) {
    return v;
}, Data_Monoid_Conj.Conj);
var newtypeAdditive = new Newtype(function(v) {
    return v;
}, Data_Monoid_Additive.Additive);
var collect = function(dictFunctor) {
    return function(dictNewtype) {
        return function(v) {
            return function(f) {
                var $93 = wrap(dictNewtype);
                var $94 = Data_Functor.map(dictFunctor)(unwrap(dictNewtype));
                return function($95) {
                    return $93(f($94($95)));
                };
            };
        };
    };
};
var alaF = function(dictFunctor) {
    return function(dictFunctor1) {
        return function(dictNewtype) {
            return function(dictNewtype1) {
                return function(v) {
                    return function(f) {
                        var $96 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
                        var $97 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                        return function($98) {
                            return $96(f($97($98)));
                        };
                    };
                };
            };
        };
    };
};
var ala = function(dictFunctor) {
    return function(dictNewtype) {
        return function(dictNewtype1) {
            return function(v) {
                return function(f) {
                    return Data_Functor.map(dictFunctor)(unwrap(dictNewtype))(f(wrap(dictNewtype1)));
                };
            };
        };
    };
};
module.exports = {
    unwrap: unwrap,
    wrap: wrap,
    Newtype: Newtype,
    un: un,
    op: op,
    ala: ala,
    alaF: alaF,
    over: over,
    overF: overF,
    under: under,
    underF: underF,
    over2: over2,
    overF2: overF2,
    under2: under2,
    underF2: underF2,
    traverse: traverse,
    collect: collect,
    newtypeAdditive: newtypeAdditive,
    newtypeMultiplicative: newtypeMultiplicative,
    newtypeConj: newtypeConj,
    newtypeDisj: newtypeDisj,
    newtypeDual: newtypeDual,
    newtypeEndo: newtypeEndo,
    newtypeFirst: newtypeFirst,
    newtypeLast: newtypeLast
};
var _c;
$RefreshReg$(_c, "Newtype");

},{"../Control.Semigroupoid/index.js":"fSgEH","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO","../Data.Monoid.Additive/index.js":"gMw6U","../Data.Monoid.Conj/index.js":"gxI2n","../Data.Monoid.Disj/index.js":"2qFBQ","../Data.Monoid.Dual/index.js":"9K8EM","../Data.Monoid.Endo/index.js":"jaqUa","../Data.Monoid.Multiplicative/index.js":"ks234","../Data.Semigroup.First/index.js":"2DeoO","../Data.Semigroup.Last/index.js":"2oJi8"}],"gMw6U":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Additive = function(x) {
    return x;
};
_c = Additive;
var showAdditive = function(dictShow) {
    return new Data_Show.Show(function(v) {
        return "(Additive " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupAdditive = function(dictSemiring) {
    return new Data_Semigroup.Semigroup(function(v) {
        return function(v1) {
            return Data_Semiring.add(dictSemiring)(v)(v1);
        };
    });
};
var ordAdditive = function(dictOrd) {
    return dictOrd;
};
var monoidAdditive = function(dictSemiring) {
    return new Data_Monoid.Monoid(function() {
        return semigroupAdditive(dictSemiring);
    }, Data_Semiring.zero(dictSemiring));
};
var functorAdditive = new Data_Functor.Functor(function(f) {
    return function(m) {
        return f(m);
    };
});
var eqAdditive = function(dictEq) {
    return dictEq;
};
var eq1Additive = new Data_Eq.Eq1(function(dictEq) {
    return Data_Eq.eq(eqAdditive(dictEq));
});
var ord1Additive = new Data_Ord.Ord1(function() {
    return eq1Additive;
}, function(dictOrd) {
    return Data_Ord.compare(ordAdditive(dictOrd));
});
var boundedAdditive = function(dictBounded) {
    return dictBounded;
};
var applyAdditive = new Control_Apply.Apply(function() {
    return functorAdditive;
}, function(v) {
    return function(v1) {
        return v(v1);
    };
});
var bindAdditive = new Control_Bind.Bind(function() {
    return applyAdditive;
}, function(v) {
    return function(f) {
        return f(v);
    };
});
var applicativeAdditive = new Control_Applicative.Applicative(function() {
    return applyAdditive;
}, Additive);
var monadAdditive = new Control_Monad.Monad(function() {
    return applicativeAdditive;
}, function() {
    return bindAdditive;
});
module.exports = {
    Additive: Additive,
    eqAdditive: eqAdditive,
    eq1Additive: eq1Additive,
    ordAdditive: ordAdditive,
    ord1Additive: ord1Additive,
    boundedAdditive: boundedAdditive,
    showAdditive: showAdditive,
    functorAdditive: functorAdditive,
    applyAdditive: applyAdditive,
    applicativeAdditive: applicativeAdditive,
    bindAdditive: bindAdditive,
    monadAdditive: monadAdditive,
    semigroupAdditive: semigroupAdditive,
    monoidAdditive: monoidAdditive
};
var _c;
$RefreshReg$(_c, "Additive");

},{"../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Monad/index.js":"alCn2","../Data.Eq/index.js":"c3b8F","../Data.Functor/index.js":"iy1jO","../Data.Monoid/index.js":"94fxC","../Data.Ord/index.js":"f14nh","../Data.Semigroup/index.js":"4sNah","../Data.Semiring/index.js":"39btI","../Data.Show/index.js":"b6tNW"}],"ks234":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Multiplicative = function(x) {
    return x;
};
_c = Multiplicative;
var showMultiplicative = function(dictShow) {
    return new Data_Show.Show(function(v) {
        return "(Multiplicative " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupMultiplicative = function(dictSemiring) {
    return new Data_Semigroup.Semigroup(function(v) {
        return function(v1) {
            return Data_Semiring.mul(dictSemiring)(v)(v1);
        };
    });
};
var ordMultiplicative = function(dictOrd) {
    return dictOrd;
};
var monoidMultiplicative = function(dictSemiring) {
    return new Data_Monoid.Monoid(function() {
        return semigroupMultiplicative(dictSemiring);
    }, Data_Semiring.one(dictSemiring));
};
var functorMultiplicative = new Data_Functor.Functor(function(f) {
    return function(m) {
        return f(m);
    };
});
var eqMultiplicative = function(dictEq) {
    return dictEq;
};
var eq1Multiplicative = new Data_Eq.Eq1(function(dictEq) {
    return Data_Eq.eq(eqMultiplicative(dictEq));
});
var ord1Multiplicative = new Data_Ord.Ord1(function() {
    return eq1Multiplicative;
}, function(dictOrd) {
    return Data_Ord.compare(ordMultiplicative(dictOrd));
});
var boundedMultiplicative = function(dictBounded) {
    return dictBounded;
};
var applyMultiplicative = new Control_Apply.Apply(function() {
    return functorMultiplicative;
}, function(v) {
    return function(v1) {
        return v(v1);
    };
});
var bindMultiplicative = new Control_Bind.Bind(function() {
    return applyMultiplicative;
}, function(v) {
    return function(f) {
        return f(v);
    };
});
var applicativeMultiplicative = new Control_Applicative.Applicative(function() {
    return applyMultiplicative;
}, Multiplicative);
var monadMultiplicative = new Control_Monad.Monad(function() {
    return applicativeMultiplicative;
}, function() {
    return bindMultiplicative;
});
module.exports = {
    Multiplicative: Multiplicative,
    eqMultiplicative: eqMultiplicative,
    eq1Multiplicative: eq1Multiplicative,
    ordMultiplicative: ordMultiplicative,
    ord1Multiplicative: ord1Multiplicative,
    boundedMultiplicative: boundedMultiplicative,
    showMultiplicative: showMultiplicative,
    functorMultiplicative: functorMultiplicative,
    applyMultiplicative: applyMultiplicative,
    applicativeMultiplicative: applicativeMultiplicative,
    bindMultiplicative: bindMultiplicative,
    monadMultiplicative: monadMultiplicative,
    semigroupMultiplicative: semigroupMultiplicative,
    monoidMultiplicative: monoidMultiplicative
};
var _c;
$RefreshReg$(_c, "Multiplicative");

},{"../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Monad/index.js":"alCn2","../Data.Eq/index.js":"c3b8F","../Data.Functor/index.js":"iy1jO","../Data.Monoid/index.js":"94fxC","../Data.Ord/index.js":"f14nh","../Data.Semigroup/index.js":"4sNah","../Data.Semiring/index.js":"39btI","../Data.Show/index.js":"b6tNW"}],"2DeoO":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var First = function(x) {
    return x;
};
_c = First;
var showFirst = function(dictShow) {
    return new Data_Show.Show(function(v) {
        return "(First " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupFirst = new Data_Semigroup.Semigroup(function(x) {
    return function(v) {
        return x;
    };
});
var ordFirst = function(dictOrd) {
    return dictOrd;
};
var functorFirst = new Data_Functor.Functor(function(f) {
    return function(m) {
        return f(m);
    };
});
var eqFirst = function(dictEq) {
    return dictEq;
};
var eq1First = new Data_Eq.Eq1(function(dictEq) {
    return Data_Eq.eq(eqFirst(dictEq));
});
var ord1First = new Data_Ord.Ord1(function() {
    return eq1First;
}, function(dictOrd) {
    return Data_Ord.compare(ordFirst(dictOrd));
});
var boundedFirst = function(dictBounded) {
    return dictBounded;
};
var applyFirst = new Control_Apply.Apply(function() {
    return functorFirst;
}, function(v) {
    return function(v1) {
        return v(v1);
    };
});
var bindFirst = new Control_Bind.Bind(function() {
    return applyFirst;
}, function(v) {
    return function(f) {
        return f(v);
    };
});
var applicativeFirst = new Control_Applicative.Applicative(function() {
    return applyFirst;
}, First);
var monadFirst = new Control_Monad.Monad(function() {
    return applicativeFirst;
}, function() {
    return bindFirst;
});
module.exports = {
    First: First,
    eqFirst: eqFirst,
    eq1First: eq1First,
    ordFirst: ordFirst,
    ord1First: ord1First,
    boundedFirst: boundedFirst,
    showFirst: showFirst,
    functorFirst: functorFirst,
    applyFirst: applyFirst,
    applicativeFirst: applicativeFirst,
    bindFirst: bindFirst,
    monadFirst: monadFirst,
    semigroupFirst: semigroupFirst
};
var _c;
$RefreshReg$(_c, "First");

},{"../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Monad/index.js":"alCn2","../Data.Eq/index.js":"c3b8F","../Data.Functor/index.js":"iy1jO","../Data.Ord/index.js":"f14nh","../Data.Semigroup/index.js":"4sNah","../Data.Show/index.js":"b6tNW"}],"2oJi8":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Last = function(x) {
    return x;
};
_c = Last;
var showLast = function(dictShow) {
    return new Data_Show.Show(function(v) {
        return "(Last " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupLast = new Data_Semigroup.Semigroup(function(v) {
    return function(x) {
        return x;
    };
});
var ordLast = function(dictOrd) {
    return dictOrd;
};
var functorLast = new Data_Functor.Functor(function(f) {
    return function(m) {
        return f(m);
    };
});
var eqLast = function(dictEq) {
    return dictEq;
};
var eq1Last = new Data_Eq.Eq1(function(dictEq) {
    return Data_Eq.eq(eqLast(dictEq));
});
var ord1Last = new Data_Ord.Ord1(function() {
    return eq1Last;
}, function(dictOrd) {
    return Data_Ord.compare(ordLast(dictOrd));
});
var boundedLast = function(dictBounded) {
    return dictBounded;
};
var applyLast = new Control_Apply.Apply(function() {
    return functorLast;
}, function(v) {
    return function(v1) {
        return v(v1);
    };
});
var bindLast = new Control_Bind.Bind(function() {
    return applyLast;
}, function(v) {
    return function(f) {
        return f(v);
    };
});
var applicativeLast = new Control_Applicative.Applicative(function() {
    return applyLast;
}, Last);
var monadLast = new Control_Monad.Monad(function() {
    return applicativeLast;
}, function() {
    return bindLast;
});
module.exports = {
    Last: Last,
    eqLast: eqLast,
    eq1Last: eq1Last,
    ordLast: ordLast,
    ord1Last: ord1Last,
    boundedLast: boundedLast,
    showLast: showLast,
    functorLast: functorLast,
    applyLast: applyLast,
    applicativeLast: applicativeLast,
    bindLast: bindLast,
    monadLast: monadLast,
    semigroupLast: semigroupLast
};
var _c;
$RefreshReg$(_c, "Last");

},{"../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Monad/index.js":"alCn2","../Data.Eq/index.js":"c3b8F","../Data.Functor/index.js":"iy1jO","../Data.Ord/index.js":"f14nh","../Data.Semigroup/index.js":"4sNah","../Data.Show/index.js":"b6tNW"}],"4aJ07":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Bifunctor = function(bimap) {
    this.bimap = bimap;
};
_c = Bifunctor;
var bimap = function(dict) {
    return dict.bimap;
};
var lmap = function(dictBifunctor) {
    return function(f) {
        return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var rmap = function(dictBifunctor) {
    return bimap(dictBifunctor)(Control_Category.identity(Control_Category.categoryFn));
};
module.exports = {
    bimap: bimap,
    Bifunctor: Bifunctor,
    lmap: lmap,
    rmap: rmap
};
var _c;
$RefreshReg$(_c, "Bifunctor");

},{"../Control.Category/index.js":"dfcPK"}],"8QR9r":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Bifoldable = require("../Data.Bifoldable/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bifunctor_Clown = require("../Data.Bifunctor.Clown/index.js");
var Data_Bifunctor_Flip = require("../Data.Bifunctor.Flip/index.js");
var Data_Bifunctor_Joker = require("../Data.Bifunctor.Joker/index.js");
var Data_Bifunctor_Product = require("../Data.Bifunctor.Product/index.js");
var Data_Bifunctor_Wrap = require("../Data.Bifunctor.Wrap/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Bitraversable = function(Bifoldable1, Bifunctor0, bisequence, bitraverse) {
    this.Bifoldable1 = Bifoldable1;
    this.Bifunctor0 = Bifunctor0;
    this.bisequence = bisequence;
    this.bitraverse = bitraverse;
};
_c = Bitraversable;
var bitraverse = function(dict) {
    return dict.bitraverse;
};
var lfor = function(dictBitraversable) {
    return function(dictApplicative) {
        return function(t) {
            return function(f) {
                return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative))(t);
            };
        };
    };
};
var ltraverse = function(dictBitraversable) {
    return function(dictApplicative) {
        return function(f) {
            return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative));
        };
    };
};
var rfor = function(dictBitraversable) {
    return function(dictApplicative) {
        return function(t) {
            return function(f) {
                return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative))(f)(t);
            };
        };
    };
};
var rtraverse = function(dictBitraversable) {
    return function(dictApplicative) {
        return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative));
    };
};
var bitraversableJoker = function(dictTraversable) {
    return new Bitraversable(function() {
        return Data_Bifoldable.bifoldableJoker(dictTraversable.Foldable1());
    }, function() {
        return Data_Bifunctor_Joker.bifunctorJoker(dictTraversable.Functor0());
    }, function(dictApplicative) {
        return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Joker.Joker)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
        };
    }, function(dictApplicative) {
        return function(v) {
            return function(r) {
                return function(v1) {
                    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Joker.Joker)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(r)(v1));
                };
            };
        };
    });
};
var bitraversableClown = function(dictTraversable) {
    return new Bitraversable(function() {
        return Data_Bifoldable.bifoldableClown(dictTraversable.Foldable1());
    }, function() {
        return Data_Bifunctor_Clown.bifunctorClown(dictTraversable.Functor0());
    }, function(dictApplicative) {
        return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Clown.Clown)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
        };
    }, function(dictApplicative) {
        return function(l) {
            return function(v) {
                return function(v1) {
                    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Clown.Clown)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(l)(v1));
                };
            };
        };
    });
};
var bisequenceDefault = function(dictBitraversable) {
    return function(dictApplicative) {
        return bitraverse(dictBitraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
    };
};
var bisequence = function(dict) {
    return dict.bisequence;
};
var bitraversableFlip = function(dictBitraversable) {
    return new Bitraversable(function() {
        return Data_Bifoldable.bifoldableFlip(dictBitraversable.Bifoldable1());
    }, function() {
        return Data_Bifunctor_Flip.bifunctorFlip(dictBitraversable.Bifunctor0());
    }, function(dictApplicative) {
        return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Flip.Flip)(bisequence(dictBitraversable)(dictApplicative)(v));
        };
    }, function(dictApplicative) {
        return function(r) {
            return function(l) {
                return function(v) {
                    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Flip.Flip)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v));
                };
            };
        };
    });
};
var bitraversableProduct = function(dictBitraversable) {
    return function(dictBitraversable1) {
        return new Bitraversable(function() {
            return Data_Bifoldable.bifoldableProduct(dictBitraversable.Bifoldable1())(dictBitraversable1.Bifoldable1());
        }, function() {
            return Data_Bifunctor_Product.bifunctorProduct(dictBitraversable.Bifunctor0())(dictBitraversable1.Bifunctor0());
        }, function(dictApplicative) {
            return function(v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Product.Product.create)(bisequence(dictBitraversable)(dictApplicative)(v.value0)))(bisequence(dictBitraversable1)(dictApplicative)(v.value1));
            };
        }, function(dictApplicative) {
            return function(l) {
                return function(r) {
                    return function(v) {
                        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Product.Product.create)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v.value0)))(bitraverse(dictBitraversable1)(dictApplicative)(l)(r)(v.value1));
                    };
                };
            };
        });
    };
};
var bitraversableWrap = function(dictBitraversable) {
    return new Bitraversable(function() {
        return Data_Bifoldable.bifoldableWrap(dictBitraversable.Bifoldable1());
    }, function() {
        return Data_Bifunctor_Wrap.bifunctorWrap(dictBitraversable.Bifunctor0());
    }, function(dictApplicative) {
        return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Wrap.Wrap)(bisequence(dictBitraversable)(dictApplicative)(v));
        };
    }, function(dictApplicative) {
        return function(l) {
            return function(r) {
                return function(v) {
                    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Wrap.Wrap)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v));
                };
            };
        };
    });
};
var bitraverseDefault = function(dictBitraversable) {
    return function(dictApplicative) {
        return function(f) {
            return function(g) {
                return function(t) {
                    return bisequence(dictBitraversable)(dictApplicative)(Data_Bifunctor.bimap(dictBitraversable.Bifunctor0())(f)(g)(t));
                };
            };
        };
    };
};
var bifor = function(dictBitraversable) {
    return function(dictApplicative) {
        return function(t) {
            return function(f) {
                return function(g) {
                    return bitraverse(dictBitraversable)(dictApplicative)(f)(g)(t);
                };
            };
        };
    };
};
module.exports = {
    Bitraversable: Bitraversable,
    bitraverse: bitraverse,
    bisequence: bisequence,
    bitraverseDefault: bitraverseDefault,
    bisequenceDefault: bisequenceDefault,
    ltraverse: ltraverse,
    rtraverse: rtraverse,
    bifor: bifor,
    lfor: lfor,
    rfor: rfor,
    bitraversableClown: bitraversableClown,
    bitraversableJoker: bitraversableJoker,
    bitraversableFlip: bitraversableFlip,
    bitraversableProduct: bitraversableProduct,
    bitraversableWrap: bitraversableWrap
};
var _c;
$RefreshReg$(_c, "Bitraversable");

},{"../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Category/index.js":"dfcPK","../Data.Bifoldable/index.js":"9e0vW","../Data.Bifunctor/index.js":"4aJ07","../Data.Bifunctor.Clown/index.js":"Tss5d","../Data.Bifunctor.Flip/index.js":"3IQBg","../Data.Bifunctor.Joker/index.js":"cLJsb","../Data.Bifunctor.Product/index.js":"dxf40","../Data.Bifunctor.Wrap/index.js":"blmob","../Data.Functor/index.js":"iy1jO","../Data.Traversable/index.js":"i5Kon"}],"Tss5d":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var Clown = function(x) {
    return x;
};
_c = Clown;
var showClown = function(dictShow) {
    return new Data_Show.Show(function(v) {
        return "(Clown " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var ordClown = function(dictOrd) {
    return dictOrd;
};
var newtypeClown = new Data_Newtype.Newtype(function(n) {
    return n;
}, Clown);
var functorClown = new Data_Functor.Functor(function(v) {
    return function(v1) {
        return v1;
    };
});
var eqClown = function(dictEq) {
    return dictEq;
};
var bifunctorClown = function(dictFunctor) {
    return new Data_Bifunctor.Bifunctor(function(f) {
        return function(v) {
            return function(v1) {
                return Data_Functor.map(dictFunctor)(f)(v1);
            };
        };
    });
};
var biapplyClown = function(dictApply) {
    return new Control_Biapply.Biapply(function() {
        return bifunctorClown(dictApply.Functor0());
    }, function(v) {
        return function(v1) {
            return Control_Apply.apply(dictApply)(v)(v1);
        };
    });
};
var biapplicativeClown = function(dictApplicative) {
    return new Control_Biapplicative.Biapplicative(function() {
        return biapplyClown(dictApplicative.Apply0());
    }, function(a) {
        return function(v) {
            return Control_Applicative.pure(dictApplicative)(a);
        };
    });
};
module.exports = {
    Clown: Clown,
    newtypeClown: newtypeClown,
    eqClown: eqClown,
    ordClown: ordClown,
    showClown: showClown,
    functorClown: functorClown,
    bifunctorClown: bifunctorClown,
    biapplyClown: biapplyClown,
    biapplicativeClown: biapplicativeClown
};
var _c;
$RefreshReg$(_c, "Clown");

},{"../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Biapplicative/index.js":"1lW2v","../Control.Biapply/index.js":"5aHxN","../Data.Bifunctor/index.js":"4aJ07","../Data.Functor/index.js":"iy1jO","../Data.Newtype/index.js":"czJbt","../Data.Show/index.js":"b6tNW"}],"1lW2v":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Biapplicative = function(Biapply0, bipure) {
    this.Biapply0 = Biapply0;
    this.bipure = bipure;
};
_c = Biapplicative;
var bipure = function(dict) {
    return dict.bipure;
};
module.exports = {
    bipure: bipure,
    Biapplicative: Biapplicative
};
var _c;
$RefreshReg$(_c, "Biapplicative");

},{}],"5aHxN":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Function = require("../Data.Function/index.js");
var Biapply = function(Bifunctor0, biapply) {
    this.Bifunctor0 = Bifunctor0;
    this.biapply = biapply;
};
_c = Biapply;
var biapply = function(dict) {
    return dict.biapply;
};
var biapplyFirst = function(dictBiapply) {
    return function(a) {
        return function(b) {
            return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))))(a))(b);
        };
    };
};
var biapplySecond = function(dictBiapply) {
    return function(a) {
        return function(b) {
            return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"])(Data_Function["const"]))(a))(b);
        };
    };
};
var bilift2 = function(dictBiapply) {
    return function(f) {
        return function(g) {
            return function(a) {
                return function(b) {
                    return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b);
                };
            };
        };
    };
};
var bilift3 = function(dictBiapply) {
    return function(f) {
        return function(g) {
            return function(a) {
                return function(b) {
                    return function(c) {
                        return biapply(dictBiapply)(biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b))(c);
                    };
                };
            };
        };
    };
};
module.exports = {
    biapply: biapply,
    Biapply: Biapply,
    biapplyFirst: biapplyFirst,
    biapplySecond: biapplySecond,
    bilift2: bilift2,
    bilift3: bilift3
};
var _c;
$RefreshReg$(_c, "Biapply");

},{"../Control.Category/index.js":"dfcPK","../Data.Bifunctor/index.js":"4aJ07","../Data.Function/index.js":"cuwEt"}],"3IQBg":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var Flip = function(x) {
    return x;
};
_c = Flip;
var showFlip = function(dictShow) {
    return new Data_Show.Show(function(v) {
        return "(Flip " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var ordFlip = function(dictOrd) {
    return dictOrd;
};
var newtypeFlip = new Data_Newtype.Newtype(function(n) {
    return n;
}, Flip);
var functorFlip = function(dictBifunctor) {
    return new Data_Functor.Functor(function(f) {
        return function(v) {
            return Data_Bifunctor.lmap(dictBifunctor)(f)(v);
        };
    });
};
var eqFlip = function(dictEq) {
    return dictEq;
};
var bifunctorFlip = function(dictBifunctor) {
    return new Data_Bifunctor.Bifunctor(function(f) {
        return function(g) {
            return function(v) {
                return Data_Bifunctor.bimap(dictBifunctor)(g)(f)(v);
            };
        };
    });
};
var biapplyFlip = function(dictBiapply) {
    return new Control_Biapply.Biapply(function() {
        return bifunctorFlip(dictBiapply.Bifunctor0());
    }, function(v) {
        return function(v1) {
            return Control_Biapply.biapply(dictBiapply)(v)(v1);
        };
    });
};
var biapplicativeFlip = function(dictBiapplicative) {
    return new Control_Biapplicative.Biapplicative(function() {
        return biapplyFlip(dictBiapplicative.Biapply0());
    }, function(a) {
        return function(b) {
            return Control_Biapplicative.bipure(dictBiapplicative)(b)(a);
        };
    });
};
module.exports = {
    Flip: Flip,
    newtypeFlip: newtypeFlip,
    eqFlip: eqFlip,
    ordFlip: ordFlip,
    showFlip: showFlip,
    functorFlip: functorFlip,
    bifunctorFlip: bifunctorFlip,
    biapplyFlip: biapplyFlip,
    biapplicativeFlip: biapplicativeFlip
};
var _c;
$RefreshReg$(_c, "Flip");

},{"../Control.Biapplicative/index.js":"1lW2v","../Control.Biapply/index.js":"5aHxN","../Data.Bifunctor/index.js":"4aJ07","../Data.Functor/index.js":"iy1jO","../Data.Newtype/index.js":"czJbt","../Data.Show/index.js":"b6tNW"}],"cLJsb":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var Joker = function(x) {
    return x;
};
_c = Joker;
var showJoker = function(dictShow) {
    return new Data_Show.Show(function(v) {
        return "(Joker " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var ordJoker = function(dictOrd) {
    return dictOrd;
};
var newtypeJoker = new Data_Newtype.Newtype(function(n) {
    return n;
}, Joker);
var functorJoker = function(dictFunctor) {
    return new Data_Functor.Functor(function(g) {
        return function(v) {
            return Data_Functor.map(dictFunctor)(g)(v);
        };
    });
};
var eqJoker = function(dictEq) {
    return dictEq;
};
var bifunctorJoker = function(dictFunctor) {
    return new Data_Bifunctor.Bifunctor(function(v) {
        return function(g) {
            return function(v1) {
                return Data_Functor.map(dictFunctor)(g)(v1);
            };
        };
    });
};
var biapplyJoker = function(dictApply) {
    return new Control_Biapply.Biapply(function() {
        return bifunctorJoker(dictApply.Functor0());
    }, function(v) {
        return function(v1) {
            return Control_Apply.apply(dictApply)(v)(v1);
        };
    });
};
var biapplicativeJoker = function(dictApplicative) {
    return new Control_Biapplicative.Biapplicative(function() {
        return biapplyJoker(dictApplicative.Apply0());
    }, function(v) {
        return function(b) {
            return Control_Applicative.pure(dictApplicative)(b);
        };
    });
};
module.exports = {
    Joker: Joker,
    newtypeJoker: newtypeJoker,
    eqJoker: eqJoker,
    ordJoker: ordJoker,
    showJoker: showJoker,
    functorJoker: functorJoker,
    bifunctorJoker: bifunctorJoker,
    biapplyJoker: biapplyJoker,
    biapplicativeJoker: biapplicativeJoker
};
var _c;
$RefreshReg$(_c, "Joker");

},{"../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Biapplicative/index.js":"1lW2v","../Control.Biapply/index.js":"5aHxN","../Data.Bifunctor/index.js":"4aJ07","../Data.Functor/index.js":"iy1jO","../Data.Newtype/index.js":"czJbt","../Data.Show/index.js":"b6tNW"}],"dxf40":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Product = function() {
    function Product1(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }
    Product1.create = function(value0) {
        return function(value1) {
            return new Product1(value0, value1);
        };
    };
    return Product1;
}();
var showProduct = function(dictShow) {
    return function(dictShow1) {
        return new Data_Show.Show(function(v) {
            return "(Product " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
        });
    };
};
var eqProduct = function(dictEq) {
    return function(dictEq1) {
        return new Data_Eq.Eq(function(x) {
            return function(y) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
            };
        });
    };
};
var ordProduct = function(dictOrd) {
    return function(dictOrd1) {
        return new Data_Ord.Ord(function() {
            return eqProduct(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function(x) {
            return function(y) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) return Data_Ordering.LT.value;
                if (v instanceof Data_Ordering.GT) return Data_Ordering.GT.value;
                return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
            };
        });
    };
};
var bifunctorProduct = function(dictBifunctor) {
    return function(dictBifunctor1) {
        return new Data_Bifunctor.Bifunctor(function(f) {
            return function(g) {
                return function(v) {
                    return new Product(Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v.value0), Data_Bifunctor.bimap(dictBifunctor1)(f)(g)(v.value1));
                };
            };
        });
    };
};
var biapplyProduct = function(dictBiapply) {
    return function(dictBiapply1) {
        return new Control_Biapply.Biapply(function() {
            return bifunctorProduct(dictBiapply.Bifunctor0())(dictBiapply1.Bifunctor0());
        }, function(v) {
            return function(v1) {
                return new Product(Control_Biapply.biapply(dictBiapply)(v.value0)(v1.value0), Control_Biapply.biapply(dictBiapply1)(v.value1)(v1.value1));
            };
        });
    };
};
var biapplicativeProduct = function(dictBiapplicative) {
    return function(dictBiapplicative1) {
        return new Control_Biapplicative.Biapplicative(function() {
            return biapplyProduct(dictBiapplicative.Biapply0())(dictBiapplicative1.Biapply0());
        }, function(a) {
            return function(b) {
                return new Product(Control_Biapplicative.bipure(dictBiapplicative)(a)(b), Control_Biapplicative.bipure(dictBiapplicative1)(a)(b));
            };
        });
    };
};
module.exports = {
    Product: Product,
    eqProduct: eqProduct,
    ordProduct: ordProduct,
    showProduct: showProduct,
    bifunctorProduct: bifunctorProduct,
    biapplyProduct: biapplyProduct,
    biapplicativeProduct: biapplicativeProduct
};

},{"../Control.Biapplicative/index.js":"1lW2v","../Control.Biapply/index.js":"5aHxN","../Data.Bifunctor/index.js":"4aJ07","../Data.Eq/index.js":"c3b8F","../Data.Ord/index.js":"f14nh","../Data.Ordering/index.js":"lEtyd","../Data.Show/index.js":"b6tNW"}],"blmob":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var Wrap = function(x) {
    return x;
};
_c = Wrap;
var showWrap = function(dictShow) {
    return new Data_Show.Show(function(v) {
        return "(Wrap " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var ordWrap = function(dictOrd) {
    return dictOrd;
};
var newtypeWrap = new Data_Newtype.Newtype(function(n) {
    return n;
}, Wrap);
var functorWrap = function(dictBifunctor) {
    return new Data_Functor.Functor(function(f) {
        return function(v) {
            return Data_Bifunctor.rmap(dictBifunctor)(f)(v);
        };
    });
};
var eqWrap = function(dictEq) {
    return dictEq;
};
var bifunctorWrap = function(dictBifunctor) {
    return new Data_Bifunctor.Bifunctor(function(f) {
        return function(g) {
            return function(v) {
                return Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v);
            };
        };
    });
};
var biapplyWrap = function(dictBiapply) {
    return new Control_Biapply.Biapply(function() {
        return bifunctorWrap(dictBiapply.Bifunctor0());
    }, function(v) {
        return function(v1) {
            return Control_Biapply.biapply(dictBiapply)(v)(v1);
        };
    });
};
var biapplicativeWrap = function(dictBiapplicative) {
    return new Control_Biapplicative.Biapplicative(function() {
        return biapplyWrap(dictBiapplicative.Biapply0());
    }, function(a) {
        return function(b) {
            return Control_Biapplicative.bipure(dictBiapplicative)(a)(b);
        };
    });
};
module.exports = {
    Wrap: Wrap,
    newtypeWrap: newtypeWrap,
    eqWrap: eqWrap,
    ordWrap: ordWrap,
    showWrap: showWrap,
    functorWrap: functorWrap,
    bifunctorWrap: bifunctorWrap,
    biapplyWrap: biapplyWrap,
    biapplicativeWrap: biapplicativeWrap
};
var _c;
$RefreshReg$(_c, "Wrap");

},{"../Control.Biapplicative/index.js":"1lW2v","../Control.Biapply/index.js":"5aHxN","../Data.Bifunctor/index.js":"4aJ07","../Data.Functor/index.js":"iy1jO","../Data.Newtype/index.js":"czJbt","../Data.Show/index.js":"b6tNW"}],"i5Kon":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Maybe_Last = require("../Data.Maybe.Last/index.js");
var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");
var Data_Traversable_Accum_Internal = require("../Data.Traversable.Accum.Internal/index.js");
var Traversable = function(Foldable1, Functor0, sequence, traverse) {
    this.Foldable1 = Foldable1;
    this.Functor0 = Functor0;
    this.sequence = sequence;
    this.traverse = traverse;
};
_c = Traversable;
var traverse = function(dict) {
    return dict.traverse;
};
var traversableMultiplicative = new Traversable(function() {
    return Data_Foldable.foldableMultiplicative;
}, function() {
    return Data_Monoid_Multiplicative.functorMultiplicative;
}, function(dictApplicative) {
    return function(v) {
        return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Multiplicative.Multiplicative)(v);
    };
}, function(dictApplicative) {
    return function(f) {
        return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
        };
    };
});
var traversableMaybe = new Traversable(function() {
    return Data_Foldable.foldableMaybe;
}, function() {
    return Data_Maybe.functorMaybe;
}, function(dictApplicative) {
    return function(v) {
        if (v instanceof Data_Maybe.Nothing) return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
        if (v instanceof Data_Maybe.Just) return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe.Just.create)(v.value0);
        throw new Error("Failed pattern match at Data.Traversable (line 86, column 1 - line 90, column 33): " + [
            v.constructor.name
        ]);
    };
}, function(dictApplicative) {
    return function(v) {
        return function(v1) {
            if (v1 instanceof Data_Maybe.Nothing) return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
            if (v1 instanceof Data_Maybe.Just) return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe.Just.create)(v(v1.value0));
            throw new Error("Failed pattern match at Data.Traversable (line 86, column 1 - line 90, column 33): " + [
                v.constructor.name,
                v1.constructor.name
            ]);
        };
    };
});
var traversableDual = new Traversable(function() {
    return Data_Foldable.foldableDual;
}, function() {
    return Data_Monoid_Dual.functorDual;
}, function(dictApplicative) {
    return function(v) {
        return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Dual.Dual)(v);
    };
}, function(dictApplicative) {
    return function(f) {
        return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Dual.Dual)(f(v));
        };
    };
});
var traversableDisj = new Traversable(function() {
    return Data_Foldable.foldableDisj;
}, function() {
    return Data_Monoid_Disj.functorDisj;
}, function(dictApplicative) {
    return function(v) {
        return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Disj.Disj)(v);
    };
}, function(dictApplicative) {
    return function(f) {
        return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Disj.Disj)(f(v));
        };
    };
});
var traversableConj = new Traversable(function() {
    return Data_Foldable.foldableConj;
}, function() {
    return Data_Monoid_Conj.functorConj;
}, function(dictApplicative) {
    return function(v) {
        return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Conj.Conj)(v);
    };
}, function(dictApplicative) {
    return function(f) {
        return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Conj.Conj)(f(v));
        };
    };
});
var traversableAdditive = new Traversable(function() {
    return Data_Foldable.foldableAdditive;
}, function() {
    return Data_Monoid_Additive.functorAdditive;
}, function(dictApplicative) {
    return function(v) {
        return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Additive.Additive)(v);
    };
}, function(dictApplicative) {
    return function(f) {
        return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Additive.Additive)(f(v));
        };
    };
});
var sequenceDefault = function(dictTraversable) {
    return function(dictApplicative) {
        return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var traversableArray = new Traversable(function() {
    return Data_Foldable.foldableArray;
}, function() {
    return Data_Functor.functorArray;
}, function(dictApplicative) {
    return sequenceDefault(traversableArray)(dictApplicative);
}, function(dictApplicative) {
    return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map(dictApplicative.Apply0().Functor0()))(Control_Applicative.pure(dictApplicative));
});
var sequence = function(dict) {
    return dict.sequence;
};
var traversableFirst = new Traversable(function() {
    return Data_Foldable.foldableFirst;
}, function() {
    return Data_Maybe_First.functorFirst;
}, function(dictApplicative) {
    return function(v) {
        return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe_First.First)(sequence(traversableMaybe)(dictApplicative)(v));
    };
}, function(dictApplicative) {
    return function(f) {
        return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe_First.First)(traverse(traversableMaybe)(dictApplicative)(f)(v));
        };
    };
});
var traversableLast = new Traversable(function() {
    return Data_Foldable.foldableLast;
}, function() {
    return Data_Maybe_Last.functorLast;
}, function(dictApplicative) {
    return function(v) {
        return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe_Last.Last)(sequence(traversableMaybe)(dictApplicative)(v));
    };
}, function(dictApplicative) {
    return function(f) {
        return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe_Last.Last)(traverse(traversableMaybe)(dictApplicative)(f)(v));
        };
    };
});
var traverseDefault = function(dictTraversable) {
    return function(dictApplicative) {
        return function(f) {
            return function(ta) {
                return sequence(dictTraversable)(dictApplicative)(Data_Functor.map(dictTraversable.Functor0())(f)(ta));
            };
        };
    };
};
var mapAccumR = function(dictTraversable) {
    return function(f) {
        return function(s0) {
            return function(xs) {
                return Data_Traversable_Accum_Internal.stateR(traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateR)(function(a) {
                    return function(s) {
                        return f(s)(a);
                    };
                })(xs))(s0);
            };
        };
    };
};
var scanr = function(dictTraversable) {
    return function(f) {
        return function(b0) {
            return function(xs) {
                return mapAccumR(dictTraversable)(function(b) {
                    return function(a) {
                        var b$prime = f(a)(b);
                        return {
                            accum: b$prime,
                            value: b$prime
                        };
                    };
                })(b0)(xs).value;
            };
        };
    };
};
var mapAccumL = function(dictTraversable) {
    return function(f) {
        return function(s0) {
            return function(xs) {
                return Data_Traversable_Accum_Internal.stateL(traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateL)(function(a) {
                    return function(s) {
                        return f(s)(a);
                    };
                })(xs))(s0);
            };
        };
    };
};
var scanl = function(dictTraversable) {
    return function(f) {
        return function(b0) {
            return function(xs) {
                return mapAccumL(dictTraversable)(function(b) {
                    return function(a) {
                        var b$prime = f(b)(a);
                        return {
                            accum: b$prime,
                            value: b$prime
                        };
                    };
                })(b0)(xs).value;
            };
        };
    };
};
var $$for = function(dictApplicative) {
    return function(dictTraversable) {
        return function(x) {
            return function(f) {
                return traverse(dictTraversable)(dictApplicative)(f)(x);
            };
        };
    };
};
module.exports = {
    Traversable: Traversable,
    traverse: traverse,
    sequence: sequence,
    traverseDefault: traverseDefault,
    sequenceDefault: sequenceDefault,
    "for": $$for,
    scanl: scanl,
    scanr: scanr,
    mapAccumL: mapAccumL,
    mapAccumR: mapAccumR,
    traversableArray: traversableArray,
    traversableMaybe: traversableMaybe,
    traversableFirst: traversableFirst,
    traversableLast: traversableLast,
    traversableAdditive: traversableAdditive,
    traversableDual: traversableDual,
    traversableConj: traversableConj,
    traversableDisj: traversableDisj,
    traversableMultiplicative: traversableMultiplicative
};
var _c;
$RefreshReg$(_c, "Traversable");

},{"./foreign.js":"6FRLh","../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Category/index.js":"dfcPK","../Data.Foldable/index.js":"jWmFN","../Data.Functor/index.js":"iy1jO","../Data.Maybe/index.js":"ePH81","../Data.Maybe.First/index.js":"7YZYW","../Data.Maybe.Last/index.js":"kKmFe","../Data.Monoid.Additive/index.js":"gMw6U","../Data.Monoid.Conj/index.js":"gxI2n","../Data.Monoid.Disj/index.js":"2qFBQ","../Data.Monoid.Dual/index.js":"9K8EM","../Data.Monoid.Multiplicative/index.js":"ks234","../Data.Traversable.Accum.Internal/index.js":"1K5e2"}],"6FRLh":[function(require,module,exports) {
"use strict";
// jshint maxparams: 3
exports.traverseArrayImpl = (function() {
    function array1(a) {
        return [
            a
        ];
    }
    function array2(a) {
        return function(b) {
            return [
                a,
                b
            ];
        };
    }
    function array3(a) {
        return function(b) {
            return function(c) {
                return [
                    a,
                    b,
                    c
                ];
            };
        };
    }
    function concat2(xs) {
        return function(ys) {
            return xs.concat(ys);
        };
    }
    return function(apply) {
        return function(map) {
            return function(pure) {
                return function(f) {
                    return function(array) {
                        function go(bot, top) {
                            switch(top - bot){
                                case 0:
                                    return pure([]);
                                case 1:
                                    return map(array1)(f(array[bot]));
                                case 2:
                                    return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                                case 3:
                                    return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                                default:
                                    // This slightly tricky pivot selection aims to produce two
                                    // even-length partitions where possible.
                                    var pivot = bot + Math.floor((top - bot) / 4) * 2;
                                    return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                            }
                        }
                        return go(0, array.length);
                    };
                };
            };
        };
    };
})();

},{}],"7YZYW":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var First = function(x) {
    return x;
};
_c = First;
var showFirst = function(dictShow) {
    return new Data_Show.Show(function(v) {
        return "First (" + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
    });
};
var semigroupFirst = new Data_Semigroup.Semigroup(function(v) {
    return function(v1) {
        if (v instanceof Data_Maybe.Just) return v;
        return v1;
    };
});
var ordFirst = function(dictOrd) {
    return Data_Maybe.ordMaybe(dictOrd);
};
var ord1First = Data_Maybe.ord1Maybe;
var newtypeFirst = new Data_Newtype.Newtype(function(n) {
    return n;
}, First);
var monoidFirst = new Data_Monoid.Monoid(function() {
    return semigroupFirst;
}, Data_Maybe.Nothing.value);
var monadFirst = Data_Maybe.monadMaybe;
var invariantFirst = Data_Maybe.invariantMaybe;
var functorFirst = Data_Maybe.functorMaybe;
var extendFirst = Data_Maybe.extendMaybe;
var eqFirst = function(dictEq) {
    return Data_Maybe.eqMaybe(dictEq);
};
var eq1First = Data_Maybe.eq1Maybe;
var boundedFirst = function(dictBounded) {
    return Data_Maybe.boundedMaybe(dictBounded);
};
var bindFirst = Data_Maybe.bindMaybe;
var applyFirst = Data_Maybe.applyMaybe;
var applicativeFirst = Data_Maybe.applicativeMaybe;
var altFirst = new Control_Alt.Alt(function() {
    return functorFirst;
}, Data_Semigroup.append(semigroupFirst));
var plusFirst = new Control_Plus.Plus(function() {
    return altFirst;
}, Data_Monoid.mempty(monoidFirst));
var alternativeFirst = new Control_Alternative.Alternative(function() {
    return applicativeFirst;
}, function() {
    return plusFirst;
});
var monadZeroFirst = new Control_MonadZero.MonadZero(function() {
    return alternativeFirst;
}, function() {
    return monadFirst;
});
module.exports = {
    First: First,
    newtypeFirst: newtypeFirst,
    eqFirst: eqFirst,
    eq1First: eq1First,
    ordFirst: ordFirst,
    ord1First: ord1First,
    boundedFirst: boundedFirst,
    functorFirst: functorFirst,
    invariantFirst: invariantFirst,
    applyFirst: applyFirst,
    applicativeFirst: applicativeFirst,
    bindFirst: bindFirst,
    monadFirst: monadFirst,
    extendFirst: extendFirst,
    showFirst: showFirst,
    semigroupFirst: semigroupFirst,
    monoidFirst: monoidFirst,
    altFirst: altFirst,
    plusFirst: plusFirst,
    alternativeFirst: alternativeFirst,
    monadZeroFirst: monadZeroFirst
};
var _c;
$RefreshReg$(_c, "First");

},{"../Control.Alt/index.js":"82RIG","../Control.Alternative/index.js":"bgcOZ","../Control.MonadZero/index.js":"aqmZo","../Control.Plus/index.js":"5lCU5","../Data.Maybe/index.js":"ePH81","../Data.Monoid/index.js":"94fxC","../Data.Newtype/index.js":"czJbt","../Data.Semigroup/index.js":"4sNah","../Data.Show/index.js":"b6tNW"}],"kKmFe":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Last = function(x) {
    return x;
};
_c = Last;
var showLast = function(dictShow) {
    return new Data_Show.Show(function(v) {
        return "(Last " + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
    });
};
var semigroupLast = new Data_Semigroup.Semigroup(function(v) {
    return function(v1) {
        if (v1 instanceof Data_Maybe.Just) return v1;
        if (v1 instanceof Data_Maybe.Nothing) return v;
        throw new Error("Failed pattern match at Data.Maybe.Last (line 52, column 1 - line 54, column 36): " + [
            v.constructor.name,
            v1.constructor.name
        ]);
    };
});
var ordLast = function(dictOrd) {
    return Data_Maybe.ordMaybe(dictOrd);
};
var ord1Last = Data_Maybe.ord1Maybe;
var newtypeLast = new Data_Newtype.Newtype(function(n) {
    return n;
}, Last);
var monoidLast = new Data_Monoid.Monoid(function() {
    return semigroupLast;
}, Data_Maybe.Nothing.value);
var monadLast = Data_Maybe.monadMaybe;
var invariantLast = Data_Maybe.invariantMaybe;
var functorLast = Data_Maybe.functorMaybe;
var extendLast = Data_Maybe.extendMaybe;
var eqLast = function(dictEq) {
    return Data_Maybe.eqMaybe(dictEq);
};
var eq1Last = Data_Maybe.eq1Maybe;
var boundedLast = function(dictBounded) {
    return Data_Maybe.boundedMaybe(dictBounded);
};
var bindLast = Data_Maybe.bindMaybe;
var applyLast = Data_Maybe.applyMaybe;
var applicativeLast = Data_Maybe.applicativeMaybe;
var altLast = new Control_Alt.Alt(function() {
    return functorLast;
}, Data_Semigroup.append(semigroupLast));
var plusLast = new Control_Plus.Plus(function() {
    return altLast;
}, Data_Monoid.mempty(monoidLast));
var alternativeLast = new Control_Alternative.Alternative(function() {
    return applicativeLast;
}, function() {
    return plusLast;
});
var monadZeroLast = new Control_MonadZero.MonadZero(function() {
    return alternativeLast;
}, function() {
    return monadLast;
});
module.exports = {
    Last: Last,
    newtypeLast: newtypeLast,
    eqLast: eqLast,
    eq1Last: eq1Last,
    ordLast: ordLast,
    ord1Last: ord1Last,
    boundedLast: boundedLast,
    functorLast: functorLast,
    invariantLast: invariantLast,
    applyLast: applyLast,
    applicativeLast: applicativeLast,
    bindLast: bindLast,
    monadLast: monadLast,
    extendLast: extendLast,
    showLast: showLast,
    semigroupLast: semigroupLast,
    monoidLast: monoidLast,
    altLast: altLast,
    plusLast: plusLast,
    alternativeLast: alternativeLast,
    monadZeroLast: monadZeroLast
};
var _c;
$RefreshReg$(_c, "Last");

},{"../Control.Alt/index.js":"82RIG","../Control.Alternative/index.js":"bgcOZ","../Control.MonadZero/index.js":"aqmZo","../Control.Plus/index.js":"5lCU5","../Data.Maybe/index.js":"ePH81","../Data.Monoid/index.js":"94fxC","../Data.Newtype/index.js":"czJbt","../Data.Semigroup/index.js":"4sNah","../Data.Show/index.js":"b6tNW"}],"1K5e2":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var StateR = function(x) {
    return x;
};
_c = StateR;
var StateL = function(x) {
    return x;
};
_c1 = StateL;
var stateR = function(v) {
    return v;
};
var stateL = function(v) {
    return v;
};
var functorStateR = new Data_Functor.Functor(function(f) {
    return function(k) {
        return function(s) {
            var v = stateR(k)(s);
            return {
                accum: v.accum,
                value: f(v.value)
            };
        };
    };
});
var functorStateL = new Data_Functor.Functor(function(f) {
    return function(k) {
        return function(s) {
            var v = stateL(k)(s);
            return {
                accum: v.accum,
                value: f(v.value)
            };
        };
    };
});
var applyStateR = new Control_Apply.Apply(function() {
    return functorStateR;
}, function(f) {
    return function(x) {
        return function(s) {
            var v = stateR(x)(s);
            var v1 = stateR(f)(v.accum);
            return {
                accum: v1.accum,
                value: v1.value(v.value)
            };
        };
    };
});
var applyStateL = new Control_Apply.Apply(function() {
    return functorStateL;
}, function(f) {
    return function(x) {
        return function(s) {
            var v = stateL(f)(s);
            var v1 = stateL(x)(v.accum);
            return {
                accum: v1.accum,
                value: v.value(v1.value)
            };
        };
    };
});
var applicativeStateR = new Control_Applicative.Applicative(function() {
    return applyStateR;
}, function(a) {
    return function(s) {
        return {
            accum: s,
            value: a
        };
    };
});
var applicativeStateL = new Control_Applicative.Applicative(function() {
    return applyStateL;
}, function(a) {
    return function(s) {
        return {
            accum: s,
            value: a
        };
    };
});
module.exports = {
    StateL: StateL,
    stateL: stateL,
    StateR: StateR,
    stateR: stateR,
    functorStateL: functorStateL,
    applyStateL: applyStateL,
    applicativeStateL: applicativeStateL,
    functorStateR: functorStateR,
    applyStateR: applyStateR,
    applicativeStateR: applicativeStateR
};
var _c, _c1;
$RefreshReg$(_c, "StateR");
$RefreshReg$(_c1, "StateL");

},{"../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Data.Functor/index.js":"iy1jO"}],"b0hJn":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Tuple = function() {
    function Tuple1(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }
    Tuple1.create = function(value0) {
        return function(value1) {
            return new Tuple1(value0, value1);
        };
    };
    return Tuple1;
}();
var FoldableWithIndex = function(Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
    this.Foldable0 = Foldable0;
    this.foldMapWithIndex = foldMapWithIndex;
    this.foldlWithIndex = foldlWithIndex;
    this.foldrWithIndex = foldrWithIndex;
};
_c = FoldableWithIndex;
var foldrWithIndex = function(dict) {
    return dict.foldrWithIndex;
};
var traverseWithIndex_ = function(dictApplicative) {
    return function(dictFoldableWithIndex) {
        return function(f) {
            return foldrWithIndex(dictFoldableWithIndex)(function(i) {
                var $46 = Control_Apply.applySecond(dictApplicative.Apply0());
                var $47 = f(i);
                return function($48) {
                    return $46($47($48));
                };
            })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
        };
    };
};
var forWithIndex_ = function(dictApplicative) {
    return function(dictFoldableWithIndex) {
        return Data_Function.flip(traverseWithIndex_(dictApplicative)(dictFoldableWithIndex));
    };
};
var foldrDefault = function(dictFoldableWithIndex) {
    return function(f) {
        return foldrWithIndex(dictFoldableWithIndex)(Data_Function["const"](f));
    };
};
var foldlWithIndex = function(dict) {
    return dict.foldlWithIndex;
};
var foldlDefault = function(dictFoldableWithIndex) {
    return function(f) {
        return foldlWithIndex(dictFoldableWithIndex)(Data_Function["const"](f));
    };
};
var foldableWithIndexMultiplicative = new FoldableWithIndex(function() {
    return Data_Foldable.foldableMultiplicative;
}, function(dictMonoid) {
    return function(f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableMultiplicative)(dictMonoid)(f(Data_Unit.unit));
    };
}, function(f) {
    return Data_Foldable.foldl(Data_Foldable.foldableMultiplicative)(f(Data_Unit.unit));
}, function(f) {
    return Data_Foldable.foldr(Data_Foldable.foldableMultiplicative)(f(Data_Unit.unit));
});
var foldableWithIndexMaybe = new FoldableWithIndex(function() {
    return Data_Foldable.foldableMaybe;
}, function(dictMonoid) {
    return function(f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(f(Data_Unit.unit));
    };
}, function(f) {
    return Data_Foldable.foldl(Data_Foldable.foldableMaybe)(f(Data_Unit.unit));
}, function(f) {
    return Data_Foldable.foldr(Data_Foldable.foldableMaybe)(f(Data_Unit.unit));
});
var foldableWithIndexLast = new FoldableWithIndex(function() {
    return Data_Foldable.foldableLast;
}, function(dictMonoid) {
    return function(f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableLast)(dictMonoid)(f(Data_Unit.unit));
    };
}, function(f) {
    return Data_Foldable.foldl(Data_Foldable.foldableLast)(f(Data_Unit.unit));
}, function(f) {
    return Data_Foldable.foldr(Data_Foldable.foldableLast)(f(Data_Unit.unit));
});
var foldableWithIndexFirst = new FoldableWithIndex(function() {
    return Data_Foldable.foldableFirst;
}, function(dictMonoid) {
    return function(f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableFirst)(dictMonoid)(f(Data_Unit.unit));
    };
}, function(f) {
    return Data_Foldable.foldl(Data_Foldable.foldableFirst)(f(Data_Unit.unit));
}, function(f) {
    return Data_Foldable.foldr(Data_Foldable.foldableFirst)(f(Data_Unit.unit));
});
var foldableWithIndexDual = new FoldableWithIndex(function() {
    return Data_Foldable.foldableDual;
}, function(dictMonoid) {
    return function(f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableDual)(dictMonoid)(f(Data_Unit.unit));
    };
}, function(f) {
    return Data_Foldable.foldl(Data_Foldable.foldableDual)(f(Data_Unit.unit));
}, function(f) {
    return Data_Foldable.foldr(Data_Foldable.foldableDual)(f(Data_Unit.unit));
});
var foldableWithIndexDisj = new FoldableWithIndex(function() {
    return Data_Foldable.foldableDisj;
}, function(dictMonoid) {
    return function(f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableDisj)(dictMonoid)(f(Data_Unit.unit));
    };
}, function(f) {
    return Data_Foldable.foldl(Data_Foldable.foldableDisj)(f(Data_Unit.unit));
}, function(f) {
    return Data_Foldable.foldr(Data_Foldable.foldableDisj)(f(Data_Unit.unit));
});
var foldableWithIndexConj = new FoldableWithIndex(function() {
    return Data_Foldable.foldableConj;
}, function(dictMonoid) {
    return function(f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableConj)(dictMonoid)(f(Data_Unit.unit));
    };
}, function(f) {
    return Data_Foldable.foldl(Data_Foldable.foldableConj)(f(Data_Unit.unit));
}, function(f) {
    return Data_Foldable.foldr(Data_Foldable.foldableConj)(f(Data_Unit.unit));
});
var foldableWithIndexAdditive = new FoldableWithIndex(function() {
    return Data_Foldable.foldableAdditive;
}, function(dictMonoid) {
    return function(f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableAdditive)(dictMonoid)(f(Data_Unit.unit));
    };
}, function(f) {
    return Data_Foldable.foldl(Data_Foldable.foldableAdditive)(f(Data_Unit.unit));
}, function(f) {
    return Data_Foldable.foldr(Data_Foldable.foldableAdditive)(f(Data_Unit.unit));
});
var foldWithIndexM = function(dictFoldableWithIndex) {
    return function(dictMonad) {
        return function(f) {
            return function(a0) {
                return foldlWithIndex(dictFoldableWithIndex)(function(i) {
                    return function(ma) {
                        return function(b) {
                            return Control_Bind.bind(dictMonad.Bind1())(ma)(Data_Function.flip(f(i))(b));
                        };
                    };
                })(Control_Applicative.pure(dictMonad.Applicative0())(a0));
            };
        };
    };
};
var foldMapWithIndexDefaultR = function(dictFoldableWithIndex) {
    return function(dictMonoid) {
        return function(f) {
            return foldrWithIndex(dictFoldableWithIndex)(function(i) {
                return function(x) {
                    return function(acc) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                    };
                };
            })(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var foldableWithIndexArray = new FoldableWithIndex(function() {
    return Data_Foldable.foldableArray;
}, function(dictMonoid) {
    return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
}, function(f) {
    return function(z) {
        var $49 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function(y) {
            return function(v) {
                return f(v.value0)(y)(v.value1);
            };
        })(z);
        var $50 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
        return function($51) {
            return $49($50($51));
        };
    };
}, function(f) {
    return function(z) {
        var $52 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function(v) {
            return function(y) {
                return f(v.value0)(v.value1)(y);
            };
        })(z);
        var $53 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
        return function($54) {
            return $52($53($54));
        };
    };
});
var foldMapWithIndexDefaultL = function(dictFoldableWithIndex) {
    return function(dictMonoid) {
        return function(f) {
            return foldlWithIndex(dictFoldableWithIndex)(function(i) {
                return function(acc) {
                    return function(x) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(i)(x));
                    };
                };
            })(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var foldMapWithIndex = function(dict) {
    return dict.foldMapWithIndex;
};
var foldlWithIndexDefault = function(dictFoldableWithIndex) {
    return function(c) {
        return function(u) {
            return function(xs) {
                return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function(i) {
                    var $55 = Data_Function.flip(c(i));
                    return function($56) {
                        return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($55($56)));
                    };
                })(xs)))(u);
            };
        };
    };
};
var foldrWithIndexDefault = function(dictFoldableWithIndex) {
    return function(c) {
        return function(u) {
            return function(xs) {
                return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function(i) {
                    var $57 = c(i);
                    return function($58) {
                        return Data_Monoid_Endo.Endo($57($58));
                    };
                })(xs))(u);
            };
        };
    };
};
var surroundMapWithIndex = function(dictFoldableWithIndex) {
    return function(dictSemigroup) {
        return function(d) {
            return function(t) {
                return function(f) {
                    var joined = function(i) {
                        return function(a) {
                            return function(m) {
                                return Data_Semigroup.append(dictSemigroup)(d)(Data_Semigroup.append(dictSemigroup)(t(i)(a))(m));
                            };
                        };
                    };
                    return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(joined)(f))(d);
                };
            };
        };
    };
};
var foldMapDefault = function(dictFoldableWithIndex) {
    return function(dictMonoid) {
        return function(f) {
            return foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(Data_Function["const"](f));
        };
    };
};
var findWithIndex = function(dictFoldableWithIndex) {
    return function(p) {
        var go = function(v) {
            return function(v1) {
                return function(v2) {
                    if (v1 instanceof Data_Maybe.Nothing && p(v)(v2)) return new Data_Maybe.Just({
                        index: v,
                        value: v2
                    });
                    return v1;
                };
            };
        };
        return foldlWithIndex(dictFoldableWithIndex)(go)(Data_Maybe.Nothing.value);
    };
};
var anyWithIndex = function(dictFoldableWithIndex) {
    return function(dictHeytingAlgebra) {
        return function(t) {
            var $59 = Data_Newtype.unwrap(Data_Newtype.newtypeDisj);
            var $60 = foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra))(function(i) {
                var $62 = t(i);
                return function($63) {
                    return Data_Monoid_Disj.Disj($62($63));
                };
            });
            return function($61) {
                return $59($60($61));
            };
        };
    };
};
var allWithIndex = function(dictFoldableWithIndex) {
    return function(dictHeytingAlgebra) {
        return function(t) {
            var $64 = Data_Newtype.unwrap(Data_Newtype.newtypeConj);
            var $65 = foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra))(function(i) {
                var $67 = t(i);
                return function($68) {
                    return Data_Monoid_Conj.Conj($67($68));
                };
            });
            return function($66) {
                return $64($65($66));
            };
        };
    };
};
module.exports = {
    FoldableWithIndex: FoldableWithIndex,
    foldrWithIndex: foldrWithIndex,
    foldlWithIndex: foldlWithIndex,
    foldMapWithIndex: foldMapWithIndex,
    foldrWithIndexDefault: foldrWithIndexDefault,
    foldlWithIndexDefault: foldlWithIndexDefault,
    foldMapWithIndexDefaultR: foldMapWithIndexDefaultR,
    foldMapWithIndexDefaultL: foldMapWithIndexDefaultL,
    foldWithIndexM: foldWithIndexM,
    traverseWithIndex_: traverseWithIndex_,
    forWithIndex_: forWithIndex_,
    surroundMapWithIndex: surroundMapWithIndex,
    allWithIndex: allWithIndex,
    anyWithIndex: anyWithIndex,
    findWithIndex: findWithIndex,
    foldrDefault: foldrDefault,
    foldlDefault: foldlDefault,
    foldMapDefault: foldMapDefault,
    foldableWithIndexArray: foldableWithIndexArray,
    foldableWithIndexMaybe: foldableWithIndexMaybe,
    foldableWithIndexFirst: foldableWithIndexFirst,
    foldableWithIndexLast: foldableWithIndexLast,
    foldableWithIndexAdditive: foldableWithIndexAdditive,
    foldableWithIndexDual: foldableWithIndexDual,
    foldableWithIndexDisj: foldableWithIndexDisj,
    foldableWithIndexConj: foldableWithIndexConj,
    foldableWithIndexMultiplicative: foldableWithIndexMultiplicative
};
var _c;
$RefreshReg$(_c, "FoldableWithIndex");

},{"../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Category/index.js":"dfcPK","../Data.Foldable/index.js":"jWmFN","../Data.Function/index.js":"cuwEt","../Data.FunctorWithIndex/index.js":"9mTwC","../Data.Maybe/index.js":"ePH81","../Data.Monoid/index.js":"94fxC","../Data.Monoid.Conj/index.js":"gxI2n","../Data.Monoid.Disj/index.js":"2qFBQ","../Data.Monoid.Dual/index.js":"9K8EM","../Data.Monoid.Endo/index.js":"jaqUa","../Data.Newtype/index.js":"czJbt","../Data.Semigroup/index.js":"4sNah","../Data.Unit/index.js":"d7oKp"}],"9mTwC":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Maybe_Last = require("../Data.Maybe.Last/index.js");
var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var FunctorWithIndex = function(Functor0, mapWithIndex) {
    this.Functor0 = Functor0;
    this.mapWithIndex = mapWithIndex;
};
_c = FunctorWithIndex;
var mapWithIndex = function(dict) {
    return dict.mapWithIndex;
};
var mapDefault = function(dictFunctorWithIndex) {
    return function(f) {
        return mapWithIndex(dictFunctorWithIndex)(Data_Function["const"](f));
    };
};
var functorWithIndexMultiplicative = new FunctorWithIndex(function() {
    return Data_Monoid_Multiplicative.functorMultiplicative;
}, function(f) {
    return Data_Functor.map(Data_Monoid_Multiplicative.functorMultiplicative)(f(Data_Unit.unit));
});
var functorWithIndexMaybe = new FunctorWithIndex(function() {
    return Data_Maybe.functorMaybe;
}, function(f) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(f(Data_Unit.unit));
});
var functorWithIndexLast = new FunctorWithIndex(function() {
    return Data_Maybe_Last.functorLast;
}, function(f) {
    return Data_Functor.map(Data_Maybe_Last.functorLast)(f(Data_Unit.unit));
});
var functorWithIndexFirst = new FunctorWithIndex(function() {
    return Data_Maybe_First.functorFirst;
}, function(f) {
    return Data_Functor.map(Data_Maybe_First.functorFirst)(f(Data_Unit.unit));
});
var functorWithIndexDual = new FunctorWithIndex(function() {
    return Data_Monoid_Dual.functorDual;
}, function(f) {
    return Data_Functor.map(Data_Monoid_Dual.functorDual)(f(Data_Unit.unit));
});
var functorWithIndexDisj = new FunctorWithIndex(function() {
    return Data_Monoid_Disj.functorDisj;
}, function(f) {
    return Data_Functor.map(Data_Monoid_Disj.functorDisj)(f(Data_Unit.unit));
});
var functorWithIndexConj = new FunctorWithIndex(function() {
    return Data_Monoid_Conj.functorConj;
}, function(f) {
    return Data_Functor.map(Data_Monoid_Conj.functorConj)(f(Data_Unit.unit));
});
var functorWithIndexArray = new FunctorWithIndex(function() {
    return Data_Functor.functorArray;
}, $foreign.mapWithIndexArray);
var functorWithIndexAdditive = new FunctorWithIndex(function() {
    return Data_Monoid_Additive.functorAdditive;
}, function(f) {
    return Data_Functor.map(Data_Monoid_Additive.functorAdditive)(f(Data_Unit.unit));
});
module.exports = {
    FunctorWithIndex: FunctorWithIndex,
    mapWithIndex: mapWithIndex,
    mapDefault: mapDefault,
    functorWithIndexArray: functorWithIndexArray,
    functorWithIndexMaybe: functorWithIndexMaybe,
    functorWithIndexFirst: functorWithIndexFirst,
    functorWithIndexLast: functorWithIndexLast,
    functorWithIndexAdditive: functorWithIndexAdditive,
    functorWithIndexDual: functorWithIndexDual,
    functorWithIndexConj: functorWithIndexConj,
    functorWithIndexDisj: functorWithIndexDisj,
    functorWithIndexMultiplicative: functorWithIndexMultiplicative
};
var _c;
$RefreshReg$(_c, "FunctorWithIndex");

},{"./foreign.js":"l1veR","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO","../Data.Maybe/index.js":"ePH81","../Data.Maybe.First/index.js":"7YZYW","../Data.Maybe.Last/index.js":"kKmFe","../Data.Monoid.Additive/index.js":"gMw6U","../Data.Monoid.Conj/index.js":"gxI2n","../Data.Monoid.Disj/index.js":"2qFBQ","../Data.Monoid.Dual/index.js":"9K8EM","../Data.Monoid.Multiplicative/index.js":"ks234","../Data.Unit/index.js":"d7oKp"}],"l1veR":[function(require,module,exports) {
"use strict";
exports.mapWithIndexArray = function(f) {
    return function(xs) {
        var l = xs.length;
        var result = Array(l);
        for(var i = 0; i < l; i++)result[i] = f(i)(xs[i]);
        return result;
    };
};

},{}],"bLveW":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Traversable_Accum_Internal = require("../Data.Traversable.Accum.Internal/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var TraversableWithIndex = function(FoldableWithIndex1, FunctorWithIndex0, Traversable2, traverseWithIndex) {
    this.FoldableWithIndex1 = FoldableWithIndex1;
    this.FunctorWithIndex0 = FunctorWithIndex0;
    this.Traversable2 = Traversable2;
    this.traverseWithIndex = traverseWithIndex;
};
_c = TraversableWithIndex;
var traverseWithIndexDefault = function(dictTraversableWithIndex) {
    return function(dictApplicative) {
        return function(f) {
            var $19 = Data_Traversable.sequence(dictTraversableWithIndex.Traversable2())(dictApplicative);
            var $20 = Data_FunctorWithIndex.mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0())(f);
            return function($21) {
                return $19($20($21));
            };
        };
    };
};
var traverseWithIndex = function(dict) {
    return dict.traverseWithIndex;
};
var traverseDefault = function(dictTraversableWithIndex) {
    return function(dictApplicative) {
        return function(f) {
            return traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(Data_Function["const"](f));
        };
    };
};
var traversableWithIndexMultiplicative = new TraversableWithIndex(function() {
    return Data_FoldableWithIndex.foldableWithIndexMultiplicative;
}, function() {
    return Data_FunctorWithIndex.functorWithIndexMultiplicative;
}, function() {
    return Data_Traversable.traversableMultiplicative;
}, function(dictApplicative) {
    return function(f) {
        return Data_Traversable.traverse(Data_Traversable.traversableMultiplicative)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexMaybe = new TraversableWithIndex(function() {
    return Data_FoldableWithIndex.foldableWithIndexMaybe;
}, function() {
    return Data_FunctorWithIndex.functorWithIndexMaybe;
}, function() {
    return Data_Traversable.traversableMaybe;
}, function(dictApplicative) {
    return function(f) {
        return Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexLast = new TraversableWithIndex(function() {
    return Data_FoldableWithIndex.foldableWithIndexLast;
}, function() {
    return Data_FunctorWithIndex.functorWithIndexLast;
}, function() {
    return Data_Traversable.traversableLast;
}, function(dictApplicative) {
    return function(f) {
        return Data_Traversable.traverse(Data_Traversable.traversableLast)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexFirst = new TraversableWithIndex(function() {
    return Data_FoldableWithIndex.foldableWithIndexFirst;
}, function() {
    return Data_FunctorWithIndex.functorWithIndexFirst;
}, function() {
    return Data_Traversable.traversableFirst;
}, function(dictApplicative) {
    return function(f) {
        return Data_Traversable.traverse(Data_Traversable.traversableFirst)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexDual = new TraversableWithIndex(function() {
    return Data_FoldableWithIndex.foldableWithIndexDual;
}, function() {
    return Data_FunctorWithIndex.functorWithIndexDual;
}, function() {
    return Data_Traversable.traversableDual;
}, function(dictApplicative) {
    return function(f) {
        return Data_Traversable.traverse(Data_Traversable.traversableDual)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexDisj = new TraversableWithIndex(function() {
    return Data_FoldableWithIndex.foldableWithIndexDisj;
}, function() {
    return Data_FunctorWithIndex.functorWithIndexDisj;
}, function() {
    return Data_Traversable.traversableDisj;
}, function(dictApplicative) {
    return function(f) {
        return Data_Traversable.traverse(Data_Traversable.traversableDisj)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexConj = new TraversableWithIndex(function() {
    return Data_FoldableWithIndex.foldableWithIndexConj;
}, function() {
    return Data_FunctorWithIndex.functorWithIndexConj;
}, function() {
    return Data_Traversable.traversableConj;
}, function(dictApplicative) {
    return function(f) {
        return Data_Traversable.traverse(Data_Traversable.traversableConj)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexArray = new TraversableWithIndex(function() {
    return Data_FoldableWithIndex.foldableWithIndexArray;
}, function() {
    return Data_FunctorWithIndex.functorWithIndexArray;
}, function() {
    return Data_Traversable.traversableArray;
}, function(dictApplicative) {
    return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
});
var traversableWithIndexAdditive = new TraversableWithIndex(function() {
    return Data_FoldableWithIndex.foldableWithIndexAdditive;
}, function() {
    return Data_FunctorWithIndex.functorWithIndexAdditive;
}, function() {
    return Data_Traversable.traversableAdditive;
}, function(dictApplicative) {
    return function(f) {
        return Data_Traversable.traverse(Data_Traversable.traversableAdditive)(dictApplicative)(f(Data_Unit.unit));
    };
});
var mapAccumRWithIndex = function(dictTraversableWithIndex) {
    return function(f) {
        return function(s0) {
            return function(xs) {
                return Data_Traversable_Accum_Internal.stateR(traverseWithIndex(dictTraversableWithIndex)(Data_Traversable_Accum_Internal.applicativeStateR)(function(i) {
                    return function(a) {
                        return function(s) {
                            return f(i)(s)(a);
                        };
                    };
                })(xs))(s0);
            };
        };
    };
};
var scanrWithIndex = function(dictTraversableWithIndex) {
    return function(f) {
        return function(b0) {
            return function(xs) {
                return mapAccumRWithIndex(dictTraversableWithIndex)(function(i) {
                    return function(b) {
                        return function(a) {
                            var b$prime = f(i)(a)(b);
                            return {
                                accum: b$prime,
                                value: b$prime
                            };
                        };
                    };
                })(b0)(xs).value;
            };
        };
    };
};
var mapAccumLWithIndex = function(dictTraversableWithIndex) {
    return function(f) {
        return function(s0) {
            return function(xs) {
                return Data_Traversable_Accum_Internal.stateL(traverseWithIndex(dictTraversableWithIndex)(Data_Traversable_Accum_Internal.applicativeStateL)(function(i) {
                    return function(a) {
                        return function(s) {
                            return f(i)(s)(a);
                        };
                    };
                })(xs))(s0);
            };
        };
    };
};
var scanlWithIndex = function(dictTraversableWithIndex) {
    return function(f) {
        return function(b0) {
            return function(xs) {
                return mapAccumLWithIndex(dictTraversableWithIndex)(function(i) {
                    return function(b) {
                        return function(a) {
                            var b$prime = f(i)(b)(a);
                            return {
                                accum: b$prime,
                                value: b$prime
                            };
                        };
                    };
                })(b0)(xs).value;
            };
        };
    };
};
var forWithIndex = function(dictApplicative) {
    return function(dictTraversableWithIndex) {
        return Data_Function.flip(traverseWithIndex(dictTraversableWithIndex)(dictApplicative));
    };
};
module.exports = {
    TraversableWithIndex: TraversableWithIndex,
    traverseWithIndex: traverseWithIndex,
    traverseWithIndexDefault: traverseWithIndexDefault,
    forWithIndex: forWithIndex,
    scanlWithIndex: scanlWithIndex,
    mapAccumLWithIndex: mapAccumLWithIndex,
    scanrWithIndex: scanrWithIndex,
    mapAccumRWithIndex: mapAccumRWithIndex,
    traverseDefault: traverseDefault,
    traversableWithIndexArray: traversableWithIndexArray,
    traversableWithIndexMaybe: traversableWithIndexMaybe,
    traversableWithIndexFirst: traversableWithIndexFirst,
    traversableWithIndexLast: traversableWithIndexLast,
    traversableWithIndexAdditive: traversableWithIndexAdditive,
    traversableWithIndexDual: traversableWithIndexDual,
    traversableWithIndexConj: traversableWithIndexConj,
    traversableWithIndexDisj: traversableWithIndexDisj,
    traversableWithIndexMultiplicative: traversableWithIndexMultiplicative
};
var _c;
$RefreshReg$(_c, "TraversableWithIndex");

},{"../Data.FoldableWithIndex/index.js":"b0hJn","../Data.Function/index.js":"cuwEt","../Data.FunctorWithIndex/index.js":"9mTwC","../Data.Traversable/index.js":"i5Kon","../Data.Traversable.Accum.Internal/index.js":"1K5e2","../Data.Unit/index.js":"d7oKp"}],"bKbtZ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var monadEffect = new Control_Monad.Monad(function() {
    return applicativeEffect;
}, function() {
    return bindEffect;
});
var bindEffect = new Control_Bind.Bind(function() {
    return applyEffect;
}, $foreign.bindE);
var applyEffect = new Control_Apply.Apply(function() {
    return functorEffect;
}, Control_Monad.ap(monadEffect));
var applicativeEffect = new Control_Applicative.Applicative(function() {
    return applyEffect;
}, $foreign.pureE);
var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
var semigroupEffect = function(dictSemigroup) {
    return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyEffect)(Data_Semigroup.append(dictSemigroup)));
};
var monoidEffect = function(dictMonoid) {
    return new Data_Monoid.Monoid(function() {
        return semigroupEffect(dictMonoid.Semigroup0());
    }, $foreign.pureE(Data_Monoid.mempty(dictMonoid)));
};
module.exports = {
    functorEffect: functorEffect,
    applyEffect: applyEffect,
    applicativeEffect: applicativeEffect,
    bindEffect: bindEffect,
    monadEffect: monadEffect,
    semigroupEffect: semigroupEffect,
    monoidEffect: monoidEffect,
    untilE: $foreign.untilE,
    whileE: $foreign.whileE,
    forE: $foreign.forE,
    foreachE: $foreign.foreachE
};

},{"./foreign.js":"ivEtP","../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Monad/index.js":"alCn2","../Data.Functor/index.js":"iy1jO","../Data.Monoid/index.js":"94fxC","../Data.Semigroup/index.js":"4sNah"}],"ivEtP":[function(require,module,exports) {
"use strict";
exports.pureE = function(a) {
    return function() {
        return a;
    };
};
exports.bindE = function(a) {
    return function(f) {
        return function() {
            return f(a())();
        };
    };
};
exports.untilE = function(f) {
    return function() {
        while(!f());
        return {
        };
    };
};
exports.whileE = function(f) {
    return function(a) {
        return function() {
            while(f())a();
            return {
            };
        };
    };
};
exports.forE = function(lo) {
    return function(hi) {
        return function(f) {
            return function() {
                for(var i = lo; i < hi; i++)f(i)();
            };
        };
    };
};
exports.foreachE = function(as) {
    return function(f) {
        return function() {
            for(var i = 0, l = as.length; i < l; i++)f(as[i])();
        };
    };
};

},{}],"3J2RH":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Effect = require("../Effect/index.js");
var $$try = function(action) {
    return $foreign.catchException(function() {
        var $0 = Control_Applicative.pure(Effect.applicativeEffect);
        return function($1) {
            return $0(Data_Either.Left.create($1));
        };
    }())(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(action));
};
var $$throw = function($2) {
    return $foreign.throwException($foreign.error($2));
};
var stack = $foreign.stackImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var showError = new Data_Show.Show($foreign.showErrorImpl);
module.exports = {
    stack: stack,
    "throw": $$throw,
    "try": $$try,
    showError: showError,
    error: $foreign.error,
    message: $foreign.message,
    name: $foreign.name,
    throwException: $foreign.throwException,
    catchException: $foreign.catchException
};

},{"./foreign.js":"dOJNe","../Control.Applicative/index.js":"dG9TO","../Data.Either/index.js":"3WZha","../Data.Functor/index.js":"iy1jO","../Data.Maybe/index.js":"ePH81","../Data.Show/index.js":"b6tNW","../Effect/index.js":"bKbtZ"}],"dOJNe":[function(require,module,exports) {
"use strict";
exports.showErrorImpl = function(err) {
    return err.stack || err.toString();
};
exports.error = function(msg) {
    return new Error(msg);
};
exports.message = function(e) {
    return e.message;
};
exports.name = function(e) {
    return e.name || "Error";
};
exports.stackImpl = function(just) {
    return function(nothing) {
        return function(e) {
            return e.stack ? just(e.stack) : nothing;
        };
    };
};
exports.throwException = function(e) {
    return function() {
        throw e;
    };
};
exports.catchException = function(c) {
    return function(t) {
        return function() {
            try {
                return t();
            } catch (e) {
                if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") return c(e)();
                else return c(new Error(e.toString()))();
            }
        };
    };
};

},{}],"3BEj9":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var MonadAsk = function(Monad0, ask) {
    this.Monad0 = Monad0;
    this.ask = ask;
};
_c = MonadAsk;
var MonadReader = function(MonadAsk0, local) {
    this.MonadAsk0 = MonadAsk0;
    this.local = local;
};
_c1 = MonadReader;
var monadAskFun = new MonadAsk(function() {
    return Control_Monad.monadFn;
}, Control_Category.identity(Control_Category.categoryFn));
var monadReaderFun = new MonadReader(function() {
    return monadAskFun;
}, Control_Semigroupoid.composeFlipped(Control_Semigroupoid.semigroupoidFn));
var local = function(dict) {
    return dict.local;
};
var ask = function(dict) {
    return dict.ask;
};
var asks = function(dictMonadAsk) {
    return function(f) {
        return Data_Functor.map(dictMonadAsk.Monad0().Bind1().Apply0().Functor0())(f)(ask(dictMonadAsk));
    };
};
module.exports = {
    ask: ask,
    local: local,
    MonadAsk: MonadAsk,
    asks: asks,
    MonadReader: MonadReader,
    monadAskFun: monadAskFun,
    monadReaderFun: monadReaderFun
};
var _c, _c1;
$RefreshReg$(_c, "MonadAsk");
$RefreshReg$(_c1, "MonadReader");

},{"../Control.Category/index.js":"dfcPK","../Control.Monad/index.js":"alCn2","../Control.Semigroupoid/index.js":"fSgEH","../Data.Functor/index.js":"iy1jO"}],"dMFG0":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Loop = function() {
    function Loop1(value0) {
        this.value0 = value0;
    }
    Loop1.create = function(value0) {
        return new Loop1(value0);
    };
    return Loop1;
}();
var Done = function() {
    function Done1(value0) {
        this.value0 = value0;
    }
    Done1.create = function(value0) {
        return new Done1(value0);
    };
    return Done1;
}();
var MonadRec = function(Monad0, tailRecM) {
    this.Monad0 = Monad0;
    this.tailRecM = tailRecM;
};
_c = MonadRec;
var tailRecM = function(dict) {
    return dict.tailRecM;
};
var tailRecM2 = function(dictMonadRec) {
    return function(f) {
        return function(a) {
            return function(b) {
                return tailRecM(dictMonadRec)(function(o) {
                    return f(o.a)(o.b);
                })({
                    a: a,
                    b: b
                });
            };
        };
    };
};
var tailRecM3 = function(dictMonadRec) {
    return function(f) {
        return function(a) {
            return function(b) {
                return function(c) {
                    return tailRecM(dictMonadRec)(function(o) {
                        return f(o.a)(o.b)(o.c);
                    })({
                        a: a,
                        b: b,
                        c: c
                    });
                };
            };
        };
    };
};
var untilJust = function(dictMonadRec) {
    return function(m) {
        return tailRecM(dictMonadRec)(function(v) {
            return Data_Functor.mapFlipped(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(m)(function(v1) {
                if (v1 instanceof Data_Maybe.Nothing) return new Loop(Data_Unit.unit);
                if (v1 instanceof Data_Maybe.Just) return new Done(v1.value0);
                throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 155, column 43 - line 157, column 19): " + [
                    v1.constructor.name
                ]);
            });
        })(Data_Unit.unit);
    };
};
var whileJust = function(dictMonoid) {
    return function(dictMonadRec) {
        return function(m) {
            return tailRecM(dictMonadRec)(function(v) {
                return Data_Functor.mapFlipped(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(m)(function(v1) {
                    if (v1 instanceof Data_Maybe.Nothing) return new Done(v);
                    if (v1 instanceof Data_Maybe.Just) return Loop.create(Data_Semigroup.append(dictMonoid.Semigroup0())(v)(v1.value0));
                    throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 148, column 45 - line 150, column 26): " + [
                        v1.constructor.name
                    ]);
                });
            })(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var tailRec = function(f) {
    var go = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Loop) {
                $copy_v = f(v.value0);
                return;
            }
            if (v instanceof Done) {
                $tco_done = true;
                return v.value0;
            }
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 93, column 3 - line 93, column 25): " + [
                v.constructor.name
            ]);
        }
        while(!$tco_done)$tco_result = $tco_loop($copy_v);
        return $tco_result;
    };
    return function($58) {
        return go(f($58));
    };
};
var monadRecMaybe = new MonadRec(function() {
    return Data_Maybe.monadMaybe;
}, function(f) {
    return function(a0) {
        var g = function(v) {
            if (v instanceof Data_Maybe.Nothing) return new Done(Data_Maybe.Nothing.value);
            if (v instanceof Data_Maybe.Just && v.value0 instanceof Loop) return new Loop(f(v.value0.value0));
            if (v instanceof Data_Maybe.Just && v.value0 instanceof Done) return new Done(new Data_Maybe.Just(v.value0.value0));
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 129, column 7 - line 129, column 31): " + [
                v.constructor.name
            ]);
        };
        return tailRec(g)(f(a0));
    };
});
var monadRecIdentity = new MonadRec(function() {
    return Data_Identity.monadIdentity;
}, function(f) {
    var runIdentity = function(v) {
        return v;
    };
    var $59 = tailRec(function($61) {
        return runIdentity(f($61));
    });
    return function($60) {
        return Data_Identity.Identity($59($60));
    };
});
var monadRecFunction = new MonadRec(function() {
    return Control_Monad.monadFn;
}, function(f) {
    return function(a0) {
        return function(e) {
            return tailRec(function(a) {
                return f(a)(e);
            })(a0);
        };
    };
});
var monadRecEither = new MonadRec(function() {
    return Data_Either.monadEither;
}, function(f) {
    return function(a0) {
        var g = function(v) {
            if (v instanceof Data_Either.Left) return new Done(new Data_Either.Left(v.value0));
            if (v instanceof Data_Either.Right && v.value0 instanceof Loop) return new Loop(f(v.value0.value0));
            if (v instanceof Data_Either.Right && v.value0 instanceof Done) return new Done(new Data_Either.Right(v.value0.value0));
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 121, column 7 - line 121, column 33): " + [
                v.constructor.name
            ]);
        };
        return tailRec(g)(f(a0));
    };
});
var monadRecEffect = new MonadRec(function() {
    return Effect.monadEffect;
}, function(f) {
    return function(a) {
        var fromDone = function(v) {
            if (v instanceof Done) return v.value0;
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 113, column 30 - line 113, column 44): " + [
                v.constructor.name
            ]);
        };
        return function __do() {
            var r = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(f(a))();
            (function() {
                while(!function __do1() {
                    var v = Effect_Ref.read(r)();
                    if (v instanceof Loop) {
                        var e = f(v.value0)();
                        Effect_Ref.write(e)(r)();
                        return false;
                    }
                    if (v instanceof Done) return true;
                    throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 104, column 22 - line 109, column 28): " + [
                        v.constructor.name
                    ]);
                }());
                return {
                };
            })();
            return Data_Functor.map(Effect.functorEffect)(fromDone)(Effect_Ref.read(r))();
        };
    };
});
var functorStep = new Data_Functor.Functor(function(f) {
    return function(m) {
        if (m instanceof Loop) return new Loop(m.value0);
        if (m instanceof Done) return new Done(f(m.value0));
        throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 27, column 1 - line 27, column 48): " + [
            m.constructor.name
        ]);
    };
});
var forever = function(dictMonadRec) {
    return function(ma) {
        return tailRecM(dictMonadRec)(function(u) {
            return Data_Functor.voidRight(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(new Loop(u))(ma);
        })(Data_Unit.unit);
    };
};
var bifunctorStep = new Data_Bifunctor.Bifunctor(function(v) {
    return function(v1) {
        return function(v2) {
            if (v2 instanceof Loop) return new Loop(v(v2.value0));
            if (v2 instanceof Done) return new Done(v1(v2.value0));
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 29, column 1 - line 31, column 34): " + [
                v.constructor.name,
                v1.constructor.name,
                v2.constructor.name
            ]);
        };
    };
});
module.exports = {
    Loop: Loop,
    Done: Done,
    MonadRec: MonadRec,
    tailRec: tailRec,
    tailRecM: tailRecM,
    tailRecM2: tailRecM2,
    tailRecM3: tailRecM3,
    forever: forever,
    whileJust: whileJust,
    untilJust: untilJust,
    functorStep: functorStep,
    bifunctorStep: bifunctorStep,
    monadRecIdentity: monadRecIdentity,
    monadRecEffect: monadRecEffect,
    monadRecFunction: monadRecFunction,
    monadRecEither: monadRecEither,
    monadRecMaybe: monadRecMaybe
};
var _c;
$RefreshReg$(_c, "MonadRec");

},{"../Control.Bind/index.js":"7Sory","../Control.Monad/index.js":"alCn2","../Data.Bifunctor/index.js":"4aJ07","../Data.Either/index.js":"3WZha","../Data.Functor/index.js":"iy1jO","../Data.Identity/index.js":"3qeSN","../Data.Maybe/index.js":"ePH81","../Data.Monoid/index.js":"94fxC","../Data.Semigroup/index.js":"4sNah","../Data.Unit/index.js":"d7oKp","../Effect/index.js":"bKbtZ","../Effect.Ref/index.js":"8AWDF"}],"3qeSN":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Identity = function(x) {
    return x;
};
_c = Identity;
var showIdentity = function(dictShow) {
    return new Data_Show.Show(function(v) {
        return "(Identity " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semiringIdentity = function(dictSemiring) {
    return dictSemiring;
};
var semigroupIdenity = function(dictSemigroup) {
    return dictSemigroup;
};
var ringIdentity = function(dictRing) {
    return dictRing;
};
var ordIdentity = function(dictOrd) {
    return dictOrd;
};
var newtypeIdentity = new Data_Newtype.Newtype(function(n) {
    return n;
}, Identity);
var monoidIdentity = function(dictMonoid) {
    return dictMonoid;
};
var lazyIdentity = function(dictLazy) {
    return dictLazy;
};
var heytingAlgebraIdentity = function(dictHeytingAlgebra) {
    return dictHeytingAlgebra;
};
var functorIdentity = new Data_Functor.Functor(function(f) {
    return function(m) {
        return f(m);
    };
});
var functorWithIndexIdentity = new Data_FunctorWithIndex.FunctorWithIndex(function() {
    return functorIdentity;
}, function(f) {
    return function(v) {
        return f(Data_Unit.unit)(v);
    };
});
var invariantIdentity = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorIdentity));
var foldableIdentity = new Data_Foldable.Foldable(function(dictMonoid) {
    return function(f) {
        return function(v) {
            return f(v);
        };
    };
}, function(f) {
    return function(z) {
        return function(v) {
            return f(z)(v);
        };
    };
}, function(f) {
    return function(z) {
        return function(v) {
            return f(v)(z);
        };
    };
});
var foldableWithIndexIdentity = new Data_FoldableWithIndex.FoldableWithIndex(function() {
    return foldableIdentity;
}, function(dictMonoid) {
    return function(f) {
        return function(v) {
            return f(Data_Unit.unit)(v);
        };
    };
}, function(f) {
    return function(z) {
        return function(v) {
            return f(Data_Unit.unit)(z)(v);
        };
    };
}, function(f) {
    return function(z) {
        return function(v) {
            return f(Data_Unit.unit)(v)(z);
        };
    };
});
var traversableIdentity = new Data_Traversable.Traversable(function() {
    return foldableIdentity;
}, function() {
    return functorIdentity;
}, function(dictApplicative) {
    return function(v) {
        return Data_Functor.map(dictApplicative.Apply0().Functor0())(Identity)(v);
    };
}, function(dictApplicative) {
    return function(f) {
        return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Identity)(f(v));
        };
    };
});
var traversableWithIndexIdentity = new Data_TraversableWithIndex.TraversableWithIndex(function() {
    return foldableWithIndexIdentity;
}, function() {
    return functorWithIndexIdentity;
}, function() {
    return traversableIdentity;
}, function(dictApplicative) {
    return function(f) {
        return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Identity)(f(Data_Unit.unit)(v));
        };
    };
});
var foldable1Identity = new Data_Semigroup_Foldable.Foldable1(function() {
    return foldableIdentity;
}, function(dictSemigroup) {
    return function(v) {
        return v;
    };
}, function(dictSemigroup) {
    return function(f) {
        return function(v) {
            return f(v);
        };
    };
});
var traversable1Identity = new Data_Semigroup_Traversable.Traversable1(function() {
    return foldable1Identity;
}, function() {
    return traversableIdentity;
}, function(dictApply) {
    return function(v) {
        return Data_Functor.map(dictApply.Functor0())(Identity)(v);
    };
}, function(dictApply) {
    return function(f) {
        return function(v) {
            return Data_Functor.map(dictApply.Functor0())(Identity)(f(v));
        };
    };
});
var extendIdentity = new Control_Extend.Extend(function() {
    return functorIdentity;
}, function(f) {
    return function(m) {
        return f(m);
    };
});
var euclideanRingIdentity = function(dictEuclideanRing) {
    return dictEuclideanRing;
};
var eqIdentity = function(dictEq) {
    return dictEq;
};
var eq1Identity = new Data_Eq.Eq1(function(dictEq) {
    return Data_Eq.eq(eqIdentity(dictEq));
});
var ord1Identity = new Data_Ord.Ord1(function() {
    return eq1Identity;
}, function(dictOrd) {
    return Data_Ord.compare(ordIdentity(dictOrd));
});
var comonadIdentity = new Control_Comonad.Comonad(function() {
    return extendIdentity;
}, function(v) {
    return v;
});
var commutativeRingIdentity = function(dictCommutativeRing) {
    return dictCommutativeRing;
};
var boundedIdentity = function(dictBounded) {
    return dictBounded;
};
var booleanAlgebraIdentity = function(dictBooleanAlgebra) {
    return dictBooleanAlgebra;
};
var applyIdentity = new Control_Apply.Apply(function() {
    return functorIdentity;
}, function(v) {
    return function(v1) {
        return v(v1);
    };
});
var bindIdentity = new Control_Bind.Bind(function() {
    return applyIdentity;
}, function(v) {
    return function(f) {
        return f(v);
    };
});
var applicativeIdentity = new Control_Applicative.Applicative(function() {
    return applyIdentity;
}, Identity);
var monadIdentity = new Control_Monad.Monad(function() {
    return applicativeIdentity;
}, function() {
    return bindIdentity;
});
var altIdentity = new Control_Alt.Alt(function() {
    return functorIdentity;
}, function(x) {
    return function(v) {
        return x;
    };
});
module.exports = {
    Identity: Identity,
    newtypeIdentity: newtypeIdentity,
    eqIdentity: eqIdentity,
    ordIdentity: ordIdentity,
    boundedIdentity: boundedIdentity,
    heytingAlgebraIdentity: heytingAlgebraIdentity,
    booleanAlgebraIdentity: booleanAlgebraIdentity,
    semigroupIdenity: semigroupIdenity,
    monoidIdentity: monoidIdentity,
    semiringIdentity: semiringIdentity,
    euclideanRingIdentity: euclideanRingIdentity,
    ringIdentity: ringIdentity,
    commutativeRingIdentity: commutativeRingIdentity,
    lazyIdentity: lazyIdentity,
    showIdentity: showIdentity,
    eq1Identity: eq1Identity,
    ord1Identity: ord1Identity,
    functorIdentity: functorIdentity,
    functorWithIndexIdentity: functorWithIndexIdentity,
    invariantIdentity: invariantIdentity,
    altIdentity: altIdentity,
    applyIdentity: applyIdentity,
    applicativeIdentity: applicativeIdentity,
    bindIdentity: bindIdentity,
    monadIdentity: monadIdentity,
    extendIdentity: extendIdentity,
    comonadIdentity: comonadIdentity,
    foldableIdentity: foldableIdentity,
    foldable1Identity: foldable1Identity,
    foldableWithIndexIdentity: foldableWithIndexIdentity,
    traversableIdentity: traversableIdentity,
    traversable1Identity: traversable1Identity,
    traversableWithIndexIdentity: traversableWithIndexIdentity
};
var _c;
$RefreshReg$(_c, "Identity");

},{"../Control.Alt/index.js":"82RIG","../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Comonad/index.js":"hfPua","../Control.Extend/index.js":"kAltv","../Control.Monad/index.js":"alCn2","../Data.Eq/index.js":"c3b8F","../Data.Foldable/index.js":"jWmFN","../Data.FoldableWithIndex/index.js":"b0hJn","../Data.Functor/index.js":"iy1jO","../Data.Functor.Invariant/index.js":"hYAzT","../Data.FunctorWithIndex/index.js":"9mTwC","../Data.Newtype/index.js":"czJbt","../Data.Ord/index.js":"f14nh","../Data.Semigroup.Foldable/index.js":"lM4gt","../Data.Semigroup.Traversable/index.js":"kPmtP","../Data.Show/index.js":"b6tNW","../Data.Traversable/index.js":"i5Kon","../Data.TraversableWithIndex/index.js":"bLveW","../Data.Unit/index.js":"d7oKp"}],"hfPua":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Comonad = function(Extend0, extract) {
    this.Extend0 = Extend0;
    this.extract = extract;
};
_c = Comonad;
var extract = function(dict) {
    return dict.extract;
};
module.exports = {
    Comonad: Comonad,
    extract: extract
};
var _c;
$RefreshReg$(_c, "Comonad");

},{}],"lM4gt":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord_Max = require("../Data.Ord.Max/index.js");
var Data_Ord_Min = require("../Data.Ord.Min/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var JoinWith = function(x) {
    return x;
};
_c = JoinWith;
var Act = function(x) {
    return x;
};
_c1 = Act;
var Foldable1 = function(Foldable0, fold1, foldMap1) {
    this.Foldable0 = Foldable0;
    this.fold1 = fold1;
    this.foldMap1 = foldMap1;
};
_c2 = Foldable1;
var semigroupJoinWith = function(dictSemigroup) {
    return new Data_Semigroup.Semigroup(function(v) {
        return function(v1) {
            return JoinWith(function(j) {
                return Data_Semigroup.append(dictSemigroup)(v(j))(Data_Semigroup.append(dictSemigroup)(j)(v1(j)));
            });
        };
    });
};
var semigroupAct = function(dictApply) {
    return new Data_Semigroup.Semigroup(function(v) {
        return function(v1) {
            return Control_Apply.applySecond(dictApply)(v)(v1);
        };
    });
};
var joinee = function(v) {
    return v;
};
var getAct = function(v) {
    return v;
};
var foldMap1 = function(dict) {
    return dict.foldMap1;
};
var intercalateMap = function(dictFoldable1) {
    return function(dictSemigroup) {
        return function(j) {
            return function(f) {
                return function(foldable) {
                    return joinee(foldMap1(dictFoldable1)(semigroupJoinWith(dictSemigroup))(function($43) {
                        return JoinWith(Data_Function["const"](f($43)));
                    })(foldable))(j);
                };
            };
        };
    };
};
var intercalate = function(dictFoldable1) {
    return function(dictSemigroup) {
        return Data_Function.flip(intercalateMap(dictFoldable1)(dictSemigroup))(Control_Category.identity(Control_Category.categoryFn));
    };
};
var maximum = function(dictOrd) {
    return function(dictFoldable1) {
        return Data_Newtype.ala(Data_Functor.functorFn)(Data_Ord_Max.newtypeMax)(Data_Ord_Max.newtypeMax)(Data_Ord_Max.Max)(foldMap1(dictFoldable1)(Data_Ord_Max.semigroupMax(dictOrd)));
    };
};
var minimum = function(dictOrd) {
    return function(dictFoldable1) {
        return Data_Newtype.ala(Data_Functor.functorFn)(Data_Ord_Min.newtypeMin)(Data_Ord_Min.newtypeMin)(Data_Ord_Min.Min)(foldMap1(dictFoldable1)(Data_Ord_Min.semigroupMin(dictOrd)));
    };
};
var traverse1_ = function(dictFoldable1) {
    return function(dictApply) {
        return function(f) {
            return function(t) {
                return Data_Functor.voidRight(dictApply.Functor0())(Data_Unit.unit)(getAct(foldMap1(dictFoldable1)(semigroupAct(dictApply))(function($44) {
                    return Act(f($44));
                })(t)));
            };
        };
    };
};
var for1_ = function(dictFoldable1) {
    return function(dictApply) {
        return Data_Function.flip(traverse1_(dictFoldable1)(dictApply));
    };
};
var sequence1_ = function(dictFoldable1) {
    return function(dictApply) {
        return traverse1_(dictFoldable1)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var fold1Default = function(dictFoldable1) {
    return function(dictSemigroup) {
        return foldMap1(dictFoldable1)(dictSemigroup)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var foldableDual = new Foldable1(function() {
    return Data_Foldable.foldableDual;
}, function(dictSemigroup) {
    return fold1Default(foldableDual)(dictSemigroup);
}, function(dictSemigroup) {
    return function(f) {
        return function(v) {
            return f(v);
        };
    };
});
var foldableMultiplicative = new Foldable1(function() {
    return Data_Foldable.foldableMultiplicative;
}, function(dictSemigroup) {
    return fold1Default(foldableMultiplicative)(dictSemigroup);
}, function(dictSemigroup) {
    return function(f) {
        return function(v) {
            return f(v);
        };
    };
});
var fold1 = function(dict) {
    return dict.fold1;
};
var foldMap1Default = function(dictFoldable1) {
    return function(dictFunctor) {
        return function(dictSemigroup) {
            return function(f) {
                var $45 = fold1(dictFoldable1)(dictSemigroup);
                var $46 = Data_Functor.map(dictFunctor)(f);
                return function($47) {
                    return $45($46($47));
                };
            };
        };
    };
};
module.exports = {
    Foldable1: Foldable1,
    foldMap1: foldMap1,
    fold1: fold1,
    traverse1_: traverse1_,
    for1_: for1_,
    sequence1_: sequence1_,
    foldMap1Default: foldMap1Default,
    fold1Default: fold1Default,
    intercalate: intercalate,
    intercalateMap: intercalateMap,
    maximum: maximum,
    minimum: minimum,
    foldableDual: foldableDual,
    foldableMultiplicative: foldableMultiplicative
};
var _c, _c1, _c2;
$RefreshReg$(_c, "JoinWith");
$RefreshReg$(_c1, "Act");
$RefreshReg$(_c2, "Foldable1");

},{"../Control.Apply/index.js":"cnlqg","../Control.Category/index.js":"dfcPK","../Data.Foldable/index.js":"jWmFN","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO","../Data.Newtype/index.js":"czJbt","../Data.Ord.Max/index.js":"4OJD6","../Data.Ord.Min/index.js":"bYnWj","../Data.Semigroup/index.js":"4sNah","../Data.Unit/index.js":"d7oKp"}],"4OJD6":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Max = function(x) {
    return x;
};
_c = Max;
var showMax = function(dictShow) {
    return new Data_Show.Show(function(v) {
        return "(Max " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupMax = function(dictOrd) {
    return new Data_Semigroup.Semigroup(function(v) {
        return function(v1) {
            return Data_Ord.max(dictOrd)(v)(v1);
        };
    });
};
var newtypeMax = new Data_Newtype.Newtype(function(n) {
    return n;
}, Max);
var monoidMax = function(dictBounded) {
    return new Data_Monoid.Monoid(function() {
        return semigroupMax(dictBounded.Ord0());
    }, Data_Bounded.bottom(dictBounded));
};
var eqMax = function(dictEq) {
    return dictEq;
};
var ordMax = function(dictOrd) {
    return new Data_Ord.Ord(function() {
        return eqMax(dictOrd.Eq0());
    }, function(v) {
        return function(v1) {
            return Data_Ord.compare(dictOrd)(v)(v1);
        };
    });
};
module.exports = {
    Max: Max,
    newtypeMax: newtypeMax,
    eqMax: eqMax,
    ordMax: ordMax,
    semigroupMax: semigroupMax,
    monoidMax: monoidMax,
    showMax: showMax
};
var _c;
$RefreshReg$(_c, "Max");

},{"../Data.Bounded/index.js":"jzt4h","../Data.Monoid/index.js":"94fxC","../Data.Newtype/index.js":"czJbt","../Data.Ord/index.js":"f14nh","../Data.Semigroup/index.js":"4sNah","../Data.Show/index.js":"b6tNW"}],"bYnWj":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Min = function(x) {
    return x;
};
_c = Min;
var showMin = function(dictShow) {
    return new Data_Show.Show(function(v) {
        return "(Min " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupMin = function(dictOrd) {
    return new Data_Semigroup.Semigroup(function(v) {
        return function(v1) {
            return Data_Ord.min(dictOrd)(v)(v1);
        };
    });
};
var newtypeMin = new Data_Newtype.Newtype(function(n) {
    return n;
}, Min);
var monoidMin = function(dictBounded) {
    return new Data_Monoid.Monoid(function() {
        return semigroupMin(dictBounded.Ord0());
    }, Data_Bounded.top(dictBounded));
};
var eqMin = function(dictEq) {
    return dictEq;
};
var ordMin = function(dictOrd) {
    return new Data_Ord.Ord(function() {
        return eqMin(dictOrd.Eq0());
    }, function(v) {
        return function(v1) {
            return Data_Ord.compare(dictOrd)(v)(v1);
        };
    });
};
module.exports = {
    Min: Min,
    newtypeMin: newtypeMin,
    eqMin: eqMin,
    ordMin: ordMin,
    semigroupMin: semigroupMin,
    monoidMin: monoidMin,
    showMin: showMin
};
var _c;
$RefreshReg$(_c, "Min");

},{"../Data.Bounded/index.js":"jzt4h","../Data.Monoid/index.js":"94fxC","../Data.Newtype/index.js":"czJbt","../Data.Ord/index.js":"f14nh","../Data.Semigroup/index.js":"4sNah","../Data.Show/index.js":"b6tNW"}],"kPmtP":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Traversable1 = function(Foldable10, Traversable11, sequence1, traverse1) {
    this.Foldable10 = Foldable10;
    this.Traversable1 = Traversable11;
    this.sequence1 = sequence1;
    this.traverse1 = traverse1;
};
_c = Traversable1;
var traverse1 = function(dict) {
    return dict.traverse1;
};
var sequence1Default = function(dictTraversable1) {
    return function(dictApply) {
        return traverse1(dictTraversable1)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var traversableDual = new Traversable1(function() {
    return Data_Semigroup_Foldable.foldableDual;
}, function() {
    return Data_Traversable.traversableDual;
}, function(dictApply) {
    return sequence1Default(traversableDual)(dictApply);
}, function(dictApply) {
    return function(f) {
        return function(v) {
            return Data_Functor.map(dictApply.Functor0())(Data_Monoid_Dual.Dual)(f(v));
        };
    };
});
var traversableMultiplicative = new Traversable1(function() {
    return Data_Semigroup_Foldable.foldableMultiplicative;
}, function() {
    return Data_Traversable.traversableMultiplicative;
}, function(dictApply) {
    return sequence1Default(traversableMultiplicative)(dictApply);
}, function(dictApply) {
    return function(f) {
        return function(v) {
            return Data_Functor.map(dictApply.Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
        };
    };
});
var sequence1 = function(dict) {
    return dict.sequence1;
};
var traverse1Default = function(dictTraversable1) {
    return function(dictApply) {
        return function(f) {
            return function(ta) {
                return sequence1(dictTraversable1)(dictApply)(Data_Functor.map(dictTraversable1.Traversable1().Functor0())(f)(ta));
            };
        };
    };
};
module.exports = {
    sequence1: sequence1,
    traverse1: traverse1,
    Traversable1: Traversable1,
    traverse1Default: traverse1Default,
    sequence1Default: sequence1Default,
    traversableDual: traversableDual,
    traversableMultiplicative: traversableMultiplicative
};
var _c;
$RefreshReg$(_c, "Traversable1");

},{"../Control.Category/index.js":"dfcPK","../Data.Functor/index.js":"iy1jO","../Data.Monoid.Dual/index.js":"9K8EM","../Data.Monoid.Multiplicative/index.js":"ks234","../Data.Semigroup.Foldable/index.js":"lM4gt","../Data.Traversable/index.js":"i5Kon"}],"8AWDF":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Functor = require("../Data.Functor/index.js");
var Effect = require("../Effect/index.js");
var modify = function(f) {
    return $foreign["modify'"](function(s) {
        var s$prime = f(s);
        return {
            state: s$prime,
            value: s$prime
        };
    });
};
var modify_ = function(f) {
    return function(s) {
        return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
    };
};
module.exports = {
    modify: modify,
    modify_: modify_,
    "new": $foreign["new"],
    read: $foreign.read,
    "modify'": $foreign["modify'"],
    write: $foreign.write
};

},{"./foreign.js":"iBjCZ","../Data.Functor/index.js":"iy1jO","../Effect/index.js":"bKbtZ"}],"iBjCZ":[function(require,module,exports) {
"use strict";
exports.new = function(val) {
    return function() {
        return {
            value: val
        };
    };
};
exports.read = function(ref) {
    return function() {
        return ref.value;
    };
};
exports["modify'"] = function(f) {
    return function(ref) {
        return function() {
            var t = f(ref.value);
            ref.value = t.state;
            return t.value;
        };
    };
};
exports.write = function(val) {
    return function(ref) {
        return function() {
            ref.value = val;
            return {
            };
        };
    };
};

},{}],"enW6F":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var MonadState = function(Monad0, state) {
    this.Monad0 = Monad0;
    this.state = state;
};
_c = MonadState;
var state = function(dict) {
    return dict.state;
};
var put = function(dictMonadState) {
    return function(s) {
        return state(dictMonadState)(function(v) {
            return new Data_Tuple.Tuple(Data_Unit.unit, s);
        });
    };
};
var modify_ = function(dictMonadState) {
    return function(f) {
        return state(dictMonadState)(function(s) {
            return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
        });
    };
};
var modify = function(dictMonadState) {
    return function(f) {
        return state(dictMonadState)(function(s) {
            var s$prime = f(s);
            return new Data_Tuple.Tuple(s$prime, s$prime);
        });
    };
};
var gets = function(dictMonadState) {
    return function(f) {
        return state(dictMonadState)(function(s) {
            return new Data_Tuple.Tuple(f(s), s);
        });
    };
};
var get = function(dictMonadState) {
    return state(dictMonadState)(function(s) {
        return new Data_Tuple.Tuple(s, s);
    });
};
module.exports = {
    state: state,
    MonadState: MonadState,
    get: get,
    gets: gets,
    put: put,
    modify: modify,
    modify_: modify_
};
var _c;
$RefreshReg$(_c, "MonadState");

},{"../Data.Tuple/index.js":"eOBbM","../Data.Unit/index.js":"d7oKp"}],"eOBbM":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Bifoldable = require("../Data.Bifoldable/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bitraversable = require("../Data.Bitraversable/index.js");
var Data_BooleanAlgebra = require("../Data.BooleanAlgebra/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");
var Data_Distributive = require("../Data.Distributive/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Type_Equality = require("../Type.Equality/index.js");
var Tuple = function() {
    function Tuple1(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }
    Tuple1.create = function(value0) {
        return function(value1) {
            return new Tuple1(value0, value1);
        };
    };
    return Tuple1;
}();
var uncurry = function(f) {
    return function(v) {
        return f(v.value0)(v.value1);
    };
};
var swap = function(v) {
    return new Tuple(v.value1, v.value0);
};
var snd = function(v) {
    return v.value1;
};
var showTuple = function(dictShow) {
    return function(dictShow1) {
        return new Data_Show.Show(function(v) {
            return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
        });
    };
};
var semiringTuple = function(dictSemiring) {
    return function(dictSemiring1) {
        return new Data_Semiring.Semiring(function(v) {
            return function(v1) {
                return new Tuple(Data_Semiring.add(dictSemiring)(v.value0)(v1.value0), Data_Semiring.add(dictSemiring1)(v.value1)(v1.value1));
            };
        }, function(v) {
            return function(v1) {
                return new Tuple(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value0), Data_Semiring.mul(dictSemiring1)(v.value1)(v1.value1));
            };
        }, new Tuple(Data_Semiring.one(dictSemiring), Data_Semiring.one(dictSemiring1)), new Tuple(Data_Semiring.zero(dictSemiring), Data_Semiring.zero(dictSemiring1)));
    };
};
var semigroupoidTuple = new Control_Semigroupoid.Semigroupoid(function(v) {
    return function(v1) {
        return new Tuple(v1.value0, v.value1);
    };
});
var semigroupTuple = function(dictSemigroup) {
    return function(dictSemigroup1) {
        return new Data_Semigroup.Semigroup(function(v) {
            return function(v1) {
                return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
            };
        });
    };
};
var ringTuple = function(dictRing) {
    return function(dictRing1) {
        return new Data_Ring.Ring(function() {
            return semiringTuple(dictRing.Semiring0())(dictRing1.Semiring0());
        }, function(v) {
            return function(v1) {
                return new Tuple(Data_Ring.sub(dictRing)(v.value0)(v1.value0), Data_Ring.sub(dictRing1)(v.value1)(v1.value1));
            };
        });
    };
};
var monoidTuple = function(dictMonoid) {
    return function(dictMonoid1) {
        return new Data_Monoid.Monoid(function() {
            return semigroupTuple(dictMonoid.Semigroup0())(dictMonoid1.Semigroup0());
        }, new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)));
    };
};
var lookup = function(dictFoldable) {
    return function(dictEq) {
        return function(a) {
            var $312 = Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst);
            var $313 = Data_Foldable.foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function(v) {
                var $163 = Data_Eq.eq(dictEq)(a)(v.value0);
                if ($163) return new Data_Maybe.Just(v.value1);
                return Data_Maybe.Nothing.value;
            });
            return function($314) {
                return $312($313($314));
            };
        };
    };
};
var heytingAlgebraTuple = function(dictHeytingAlgebra) {
    return function(dictHeytingAlgebra1) {
        return new Data_HeytingAlgebra.HeytingAlgebra(function(v) {
            return function(v1) {
                return new Tuple(Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.conj(dictHeytingAlgebra1)(v.value1)(v1.value1));
            };
        }, function(v) {
            return function(v1) {
                return new Tuple(Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.disj(dictHeytingAlgebra1)(v.value1)(v1.value1));
            };
        }, new Tuple(Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra1)), function(v) {
            return function(v1) {
                return new Tuple(Data_HeytingAlgebra.implies(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.implies(dictHeytingAlgebra1)(v.value1)(v1.value1));
            };
        }, function(v) {
            return new Tuple(Data_HeytingAlgebra.not(dictHeytingAlgebra)(v.value0), Data_HeytingAlgebra.not(dictHeytingAlgebra1)(v.value1));
        }, new Tuple(Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra1)));
    };
};
var functorTuple = new Data_Functor.Functor(function(f) {
    return function(m) {
        return new Tuple(m.value0, f(m.value1));
    };
});
var functorWithIndexTuple = new Data_FunctorWithIndex.FunctorWithIndex(function() {
    return functorTuple;
}, function(f) {
    return Data_Functor.map(functorTuple)(f(Data_Unit.unit));
});
var invariantTuple = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorTuple));
var fst = function(v) {
    return v.value0;
};
var lazyTuple = function(dictLazy) {
    return function(dictLazy1) {
        return new Control_Lazy.Lazy(function(f) {
            return new Tuple(Control_Lazy.defer(dictLazy)(function(v) {
                return fst(f(Data_Unit.unit));
            }), Control_Lazy.defer(dictLazy1)(function(v) {
                return snd(f(Data_Unit.unit));
            }));
        });
    };
};
var foldableTuple = new Data_Foldable.Foldable(function(dictMonoid) {
    return function(f) {
        return function(v) {
            return f(v.value1);
        };
    };
}, function(f) {
    return function(z) {
        return function(v) {
            return f(z)(v.value1);
        };
    };
}, function(f) {
    return function(z) {
        return function(v) {
            return f(v.value1)(z);
        };
    };
});
var foldableWithIndexTuple = new Data_FoldableWithIndex.FoldableWithIndex(function() {
    return foldableTuple;
}, function(dictMonoid) {
    return function(f) {
        return function(v) {
            return f(Data_Unit.unit)(v.value1);
        };
    };
}, function(f) {
    return function(z) {
        return function(v) {
            return f(Data_Unit.unit)(z)(v.value1);
        };
    };
}, function(f) {
    return function(z) {
        return function(v) {
            return f(Data_Unit.unit)(v.value1)(z);
        };
    };
});
var traversableTuple = new Data_Traversable.Traversable(function() {
    return foldableTuple;
}, function() {
    return functorTuple;
}, function(dictApplicative) {
    return function(v) {
        return Data_Functor.map(dictApplicative.Apply0().Functor0())(Tuple.create(v.value0))(v.value1);
    };
}, function(dictApplicative) {
    return function(f) {
        return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Tuple.create(v.value0))(f(v.value1));
        };
    };
});
var traversableWithIndexTuple = new Data_TraversableWithIndex.TraversableWithIndex(function() {
    return foldableWithIndexTuple;
}, function() {
    return functorWithIndexTuple;
}, function() {
    return traversableTuple;
}, function(dictApplicative) {
    return function(f) {
        return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Tuple.create(v.value0))(f(Data_Unit.unit)(v.value1));
        };
    };
});
var foldable1Tuple = new Data_Semigroup_Foldable.Foldable1(function() {
    return foldableTuple;
}, function(dictSemigroup) {
    return function(v) {
        return v.value1;
    };
}, function(dictSemigroup) {
    return function(f) {
        return function(v) {
            return f(v.value1);
        };
    };
});
var traversable1Tuple = new Data_Semigroup_Traversable.Traversable1(function() {
    return foldable1Tuple;
}, function() {
    return traversableTuple;
}, function(dictApply) {
    return function(v) {
        return Data_Functor.map(dictApply.Functor0())(Tuple.create(v.value0))(v.value1);
    };
}, function(dictApply) {
    return function(f) {
        return function(v) {
            return Data_Functor.map(dictApply.Functor0())(Tuple.create(v.value0))(f(v.value1));
        };
    };
});
var extendTuple = new Control_Extend.Extend(function() {
    return functorTuple;
}, function(f) {
    return function(v) {
        return new Tuple(v.value0, f(v));
    };
});
var eqTuple = function(dictEq) {
    return function(dictEq1) {
        return new Data_Eq.Eq(function(x) {
            return function(y) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
            };
        });
    };
};
var ordTuple = function(dictOrd) {
    return function(dictOrd1) {
        return new Data_Ord.Ord(function() {
            return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function(x) {
            return function(y) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) return Data_Ordering.LT.value;
                if (v instanceof Data_Ordering.GT) return Data_Ordering.GT.value;
                return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
            };
        });
    };
};
var eq1Tuple = function(dictEq) {
    return new Data_Eq.Eq1(function(dictEq1) {
        return Data_Eq.eq(eqTuple(dictEq)(dictEq1));
    });
};
var ord1Tuple = function(dictOrd) {
    return new Data_Ord.Ord1(function() {
        return eq1Tuple(dictOrd.Eq0());
    }, function(dictOrd1) {
        return Data_Ord.compare(ordTuple(dictOrd)(dictOrd1));
    });
};
var distributiveTuple = function(dictTypeEquals) {
    return new Data_Distributive.Distributive(function() {
        return functorTuple;
    }, function(dictFunctor) {
        return Data_Distributive.collectDefault(distributiveTuple(dictTypeEquals))(dictFunctor);
    }, function(dictFunctor) {
        var $315 = Tuple.create(Type_Equality.from(dictTypeEquals)(Data_Unit.unit));
        var $316 = Data_Functor.map(dictFunctor)(snd);
        return function($317) {
            return $315($316($317));
        };
    });
};
var curry = function(f) {
    return function(a) {
        return function(b) {
            return f(new Tuple(a, b));
        };
    };
};
var comonadTuple = new Control_Comonad.Comonad(function() {
    return extendTuple;
}, snd);
var commutativeRingTuple = function(dictCommutativeRing) {
    return function(dictCommutativeRing1) {
        return new Data_CommutativeRing.CommutativeRing(function() {
            return ringTuple(dictCommutativeRing.Ring0())(dictCommutativeRing1.Ring0());
        });
    };
};
var boundedTuple = function(dictBounded) {
    return function(dictBounded1) {
        return new Data_Bounded.Bounded(function() {
            return ordTuple(dictBounded.Ord0())(dictBounded1.Ord0());
        }, new Tuple(Data_Bounded.bottom(dictBounded), Data_Bounded.bottom(dictBounded1)), new Tuple(Data_Bounded.top(dictBounded), Data_Bounded.top(dictBounded1)));
    };
};
var booleanAlgebraTuple = function(dictBooleanAlgebra) {
    return function(dictBooleanAlgebra1) {
        return new Data_BooleanAlgebra.BooleanAlgebra(function() {
            return heytingAlgebraTuple(dictBooleanAlgebra.HeytingAlgebra0())(dictBooleanAlgebra1.HeytingAlgebra0());
        });
    };
};
var bifunctorTuple = new Data_Bifunctor.Bifunctor(function(f) {
    return function(g) {
        return function(v) {
            return new Tuple(f(v.value0), g(v.value1));
        };
    };
});
var bifoldableTuple = new Data_Bifoldable.Bifoldable(function(dictMonoid) {
    return function(f) {
        return function(g) {
            return function(v) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(g(v.value1));
            };
        };
    };
}, function(f) {
    return function(g) {
        return function(z) {
            return function(v) {
                return g(f(z)(v.value0))(v.value1);
            };
        };
    };
}, function(f) {
    return function(g) {
        return function(z) {
            return function(v) {
                return f(v.value0)(g(v.value1)(z));
            };
        };
    };
});
var bitraversableTuple = new Data_Bitraversable.Bitraversable(function() {
    return bifoldableTuple;
}, function() {
    return bifunctorTuple;
}, function(dictApplicative) {
    return function(v) {
        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Tuple.create)(v.value0))(v.value1);
    };
}, function(dictApplicative) {
    return function(f) {
        return function(g) {
            return function(v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Tuple.create)(f(v.value0)))(g(v.value1));
            };
        };
    };
});
var biapplyTuple = new Control_Biapply.Biapply(function() {
    return bifunctorTuple;
}, function(v) {
    return function(v1) {
        return new Tuple(v.value0(v1.value0), v.value1(v1.value1));
    };
});
var biapplicativeTuple = new Control_Biapplicative.Biapplicative(function() {
    return biapplyTuple;
}, Tuple.create);
var applyTuple = function(dictSemigroup) {
    return new Control_Apply.Apply(function() {
        return functorTuple;
    }, function(v) {
        return function(v1) {
            return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v.value1(v1.value1));
        };
    });
};
var bindTuple = function(dictSemigroup) {
    return new Control_Bind.Bind(function() {
        return applyTuple(dictSemigroup);
    }, function(v) {
        return function(f) {
            var v1 = f(v.value1);
            return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v1.value1);
        };
    });
};
var applicativeTuple = function(dictMonoid) {
    return new Control_Applicative.Applicative(function() {
        return applyTuple(dictMonoid.Semigroup0());
    }, Tuple.create(Data_Monoid.mempty(dictMonoid)));
};
var monadTuple = function(dictMonoid) {
    return new Control_Monad.Monad(function() {
        return applicativeTuple(dictMonoid);
    }, function() {
        return bindTuple(dictMonoid.Semigroup0());
    });
};
module.exports = {
    Tuple: Tuple,
    fst: fst,
    snd: snd,
    curry: curry,
    uncurry: uncurry,
    swap: swap,
    lookup: lookup,
    showTuple: showTuple,
    eqTuple: eqTuple,
    eq1Tuple: eq1Tuple,
    ordTuple: ordTuple,
    ord1Tuple: ord1Tuple,
    boundedTuple: boundedTuple,
    semigroupoidTuple: semigroupoidTuple,
    semigroupTuple: semigroupTuple,
    monoidTuple: monoidTuple,
    semiringTuple: semiringTuple,
    ringTuple: ringTuple,
    commutativeRingTuple: commutativeRingTuple,
    heytingAlgebraTuple: heytingAlgebraTuple,
    booleanAlgebraTuple: booleanAlgebraTuple,
    functorTuple: functorTuple,
    functorWithIndexTuple: functorWithIndexTuple,
    invariantTuple: invariantTuple,
    bifunctorTuple: bifunctorTuple,
    applyTuple: applyTuple,
    biapplyTuple: biapplyTuple,
    applicativeTuple: applicativeTuple,
    biapplicativeTuple: biapplicativeTuple,
    bindTuple: bindTuple,
    monadTuple: monadTuple,
    extendTuple: extendTuple,
    comonadTuple: comonadTuple,
    lazyTuple: lazyTuple,
    foldableTuple: foldableTuple,
    foldable1Tuple: foldable1Tuple,
    foldableWithIndexTuple: foldableWithIndexTuple,
    bifoldableTuple: bifoldableTuple,
    traversableTuple: traversableTuple,
    traversable1Tuple: traversable1Tuple,
    traversableWithIndexTuple: traversableWithIndexTuple,
    bitraversableTuple: bitraversableTuple,
    distributiveTuple: distributiveTuple
};

},{"../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Biapplicative/index.js":"1lW2v","../Control.Biapply/index.js":"5aHxN","../Control.Bind/index.js":"7Sory","../Control.Comonad/index.js":"hfPua","../Control.Extend/index.js":"kAltv","../Control.Lazy/index.js":"chn7k","../Control.Monad/index.js":"alCn2","../Control.Semigroupoid/index.js":"fSgEH","../Data.Bifoldable/index.js":"9e0vW","../Data.Bifunctor/index.js":"4aJ07","../Data.Bitraversable/index.js":"8QR9r","../Data.BooleanAlgebra/index.js":"l0dkx","../Data.Bounded/index.js":"jzt4h","../Data.CommutativeRing/index.js":"2q7tT","../Data.Distributive/index.js":"czVlx","../Data.Eq/index.js":"c3b8F","../Data.Foldable/index.js":"jWmFN","../Data.FoldableWithIndex/index.js":"b0hJn","../Data.Functor/index.js":"iy1jO","../Data.Functor.Invariant/index.js":"hYAzT","../Data.FunctorWithIndex/index.js":"9mTwC","../Data.HeytingAlgebra/index.js":"8Mx0E","../Data.Maybe/index.js":"ePH81","../Data.Maybe.First/index.js":"7YZYW","../Data.Monoid/index.js":"94fxC","../Data.Newtype/index.js":"czJbt","../Data.Ord/index.js":"f14nh","../Data.Ordering/index.js":"lEtyd","../Data.Ring/index.js":"2x2oG","../Data.Semigroup/index.js":"4sNah","../Data.Semigroup.Foldable/index.js":"lM4gt","../Data.Semigroup.Traversable/index.js":"kPmtP","../Data.Semiring/index.js":"39btI","../Data.Show/index.js":"b6tNW","../Data.Traversable/index.js":"i5Kon","../Data.TraversableWithIndex/index.js":"bLveW","../Data.Unit/index.js":"d7oKp","../Type.Equality/index.js":"ks4Ik"}],"l0dkx":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var BooleanAlgebraRecord = function(HeytingAlgebraRecord0) {
    this.HeytingAlgebraRecord0 = HeytingAlgebraRecord0;
};
_c = BooleanAlgebraRecord;
var BooleanAlgebra = function(HeytingAlgebra0) {
    this.HeytingAlgebra0 = HeytingAlgebra0;
};
_c1 = BooleanAlgebra;
var booleanAlgebraUnit = new BooleanAlgebra(function() {
    return Data_HeytingAlgebra.heytingAlgebraUnit;
});
var booleanAlgebraRecordNil = new BooleanAlgebraRecord(function() {
    return Data_HeytingAlgebra.heytingAlgebraRecordNil;
});
var booleanAlgebraRecordCons = function(dictIsSymbol) {
    return function(dictCons) {
        return function(dictBooleanAlgebraRecord) {
            return function(dictBooleanAlgebra) {
                return new BooleanAlgebraRecord(function() {
                    return Data_HeytingAlgebra.heytingAlgebraRecordCons(dictIsSymbol)()(dictBooleanAlgebraRecord.HeytingAlgebraRecord0())(dictBooleanAlgebra.HeytingAlgebra0());
                });
            };
        };
    };
};
var booleanAlgebraRecord = function(dictRowToList) {
    return function(dictBooleanAlgebraRecord) {
        return new BooleanAlgebra(function() {
            return Data_HeytingAlgebra.heytingAlgebraRecord()(dictBooleanAlgebraRecord.HeytingAlgebraRecord0());
        });
    };
};
var booleanAlgebraFn = function(dictBooleanAlgebra) {
    return new BooleanAlgebra(function() {
        return Data_HeytingAlgebra.heytingAlgebraFunction(dictBooleanAlgebra.HeytingAlgebra0());
    });
};
var booleanAlgebraBoolean = new BooleanAlgebra(function() {
    return Data_HeytingAlgebra.heytingAlgebraBoolean;
});
module.exports = {
    BooleanAlgebra: BooleanAlgebra,
    BooleanAlgebraRecord: BooleanAlgebraRecord,
    booleanAlgebraBoolean: booleanAlgebraBoolean,
    booleanAlgebraUnit: booleanAlgebraUnit,
    booleanAlgebraFn: booleanAlgebraFn,
    booleanAlgebraRecord: booleanAlgebraRecord,
    booleanAlgebraRecordNil: booleanAlgebraRecordNil,
    booleanAlgebraRecordCons: booleanAlgebraRecordCons
};
var _c, _c1;
$RefreshReg$(_c, "BooleanAlgebraRecord");
$RefreshReg$(_c1, "BooleanAlgebra");

},{"../Data.HeytingAlgebra/index.js":"8Mx0E"}],"czVlx":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Distributive = function(Functor0, collect, distribute) {
    this.Functor0 = Functor0;
    this.collect = collect;
    this.distribute = distribute;
};
_c = Distributive;
var distributiveIdentity = new Distributive(function() {
    return Data_Identity.functorIdentity;
}, function(dictFunctor) {
    return function(f) {
        var $11 = Data_Functor.map(dictFunctor)(function() {
            var $13 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
            return function($14) {
                return $13(f($14));
            };
        }());
        return function($12) {
            return Data_Identity.Identity($11($12));
        };
    };
}, function(dictFunctor) {
    var $15 = Data_Functor.map(dictFunctor)(Data_Newtype.unwrap(Data_Identity.newtypeIdentity));
    return function($16) {
        return Data_Identity.Identity($15($16));
    };
});
var distribute = function(dict) {
    return dict.distribute;
};
var distributiveFunction = new Distributive(function() {
    return Data_Functor.functorFn;
}, function(dictFunctor) {
    return function(f) {
        var $17 = distribute(distributiveFunction)(dictFunctor);
        var $18 = Data_Functor.map(dictFunctor)(f);
        return function($19) {
            return $17($18($19));
        };
    };
}, function(dictFunctor) {
    return function(a) {
        return function(e) {
            return Data_Functor.map(dictFunctor)(function(v) {
                return v(e);
            })(a);
        };
    };
});
var cotraverse = function(dictDistributive) {
    return function(dictFunctor) {
        return function(f) {
            var $20 = Data_Functor.map(dictDistributive.Functor0())(f);
            var $21 = distribute(dictDistributive)(dictFunctor);
            return function($22) {
                return $20($21($22));
            };
        };
    };
};
var collectDefault = function(dictDistributive) {
    return function(dictFunctor) {
        return function(f) {
            var $23 = distribute(dictDistributive)(dictFunctor);
            var $24 = Data_Functor.map(dictFunctor)(f);
            return function($25) {
                return $23($24($25));
            };
        };
    };
};
var collect = function(dict) {
    return dict.collect;
};
var distributeDefault = function(dictDistributive) {
    return function(dictFunctor) {
        return collect(dictDistributive)(dictFunctor)(Control_Category.identity(Control_Category.categoryFn));
    };
};
module.exports = {
    collect: collect,
    distribute: distribute,
    Distributive: Distributive,
    distributeDefault: distributeDefault,
    collectDefault: collectDefault,
    cotraverse: cotraverse,
    distributiveIdentity: distributiveIdentity,
    distributiveFunction: distributiveFunction
};
var _c;
$RefreshReg$(_c, "Distributive");

},{"../Control.Category/index.js":"dfcPK","../Data.Functor/index.js":"iy1jO","../Data.Identity/index.js":"3qeSN","../Data.Newtype/index.js":"czJbt"}],"ks4Ik":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var TypeEquals = function(from, to) {
    this.from = from;
    this.to = to;
};
_c = TypeEquals;
var to = function(dict) {
    return dict.to;
};
var refl = new TypeEquals(function(a) {
    return a;
}, function(a) {
    return a;
});
var from = function(dict) {
    return dict.from;
};
module.exports = {
    TypeEquals: TypeEquals,
    to: to,
    from: from,
    refl: refl
};
var _c;
$RefreshReg$(_c, "TypeEquals");

},{}],"9pz5v":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var MonadTrans = function(lift) {
    this.lift = lift;
};
_c = MonadTrans;
var lift = function(dict) {
    return dict.lift;
};
module.exports = {
    lift: lift,
    MonadTrans: MonadTrans
};
var _c;
$RefreshReg$(_c, "MonadTrans");

},{}],"6wyz5":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var MonadTell = function(Monad0, tell) {
    this.Monad0 = Monad0;
    this.tell = tell;
};
_c = MonadTell;
var MonadWriter = function(MonadTell0, listen, pass) {
    this.MonadTell0 = MonadTell0;
    this.listen = listen;
    this.pass = pass;
};
_c1 = MonadWriter;
var tell = function(dict) {
    return dict.tell;
};
var pass = function(dict) {
    return dict.pass;
};
var listen = function(dict) {
    return dict.listen;
};
var listens = function(dictMonadWriter) {
    return function(f) {
        return function(m) {
            return Control_Bind.bind(dictMonadWriter.MonadTell0().Monad0().Bind1())(listen(dictMonadWriter)(m))(function(v) {
                return Control_Applicative.pure(dictMonadWriter.MonadTell0().Monad0().Applicative0())(new Data_Tuple.Tuple(v.value0, f(v.value1)));
            });
        };
    };
};
var censor = function(dictMonadWriter) {
    return function(f) {
        return function(m) {
            return pass(dictMonadWriter)(Control_Bind.bind(dictMonadWriter.MonadTell0().Monad0().Bind1())(m)(function(a) {
                return Control_Applicative.pure(dictMonadWriter.MonadTell0().Monad0().Applicative0())(new Data_Tuple.Tuple(a, f));
            }));
        };
    };
};
module.exports = {
    listen: listen,
    pass: pass,
    tell: tell,
    MonadTell: MonadTell,
    MonadWriter: MonadWriter,
    listens: listens,
    censor: censor
};
var _c, _c1;
$RefreshReg$(_c, "MonadTell");
$RefreshReg$(_c1, "MonadWriter");

},{"../Control.Applicative/index.js":"dG9TO","../Control.Bind/index.js":"7Sory","../Data.Tuple/index.js":"eOBbM"}],"jUJh4":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_MonadZero = require("../Control.MonadZero/index.js");
var MonadPlus = function(MonadZero0) {
    this.MonadZero0 = MonadZero0;
};
_c = MonadPlus;
var monadPlusArray = new MonadPlus(function() {
    return Control_MonadZero.monadZeroArray;
});
module.exports = {
    MonadPlus: MonadPlus,
    monadPlusArray: monadPlusArray
};
var _c;
$RefreshReg$(_c, "MonadPlus");

},{"../Control.MonadZero/index.js":"aqmZo"}],"53rRA":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Effect = require("../Effect/index.js");
var MonadEffect = function(Monad0, liftEffect) {
    this.Monad0 = Monad0;
    this.liftEffect = liftEffect;
};
_c = MonadEffect;
var monadEffectEffect = new MonadEffect(function() {
    return Effect.monadEffect;
}, Control_Category.identity(Control_Category.categoryFn));
var liftEffect = function(dict) {
    return dict.liftEffect;
};
module.exports = {
    liftEffect: liftEffect,
    MonadEffect: MonadEffect,
    monadEffectEffect: monadEffectEffect
};
var _c;
$RefreshReg$(_c, "MonadEffect");

},{"../Control.Category/index.js":"dfcPK","../Effect/index.js":"bKbtZ"}],"7x0bj":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");
var Data_Array_ST = require("../Data.Array.ST/index.js");
var Data_Array_ST_Iterator = require("../Data.Array.ST.Iterator/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var zipWithA = function(dictApplicative) {
    return function(f) {
        return function(xs) {
            return function(ys) {
                return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
            };
        };
    };
};
var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
var updateAtIndices = function(dictFoldable) {
    return function(us) {
        return function(xs) {
            return Data_Array_ST.withArray(function(res) {
                return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function(v) {
                    return Data_Array_ST.poke(v.value0)(v.value1)(res);
                })(us);
            })(xs)();
        };
    };
};
var updateAt = $foreign["_updateAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var unsafeIndex = function(dictPartial) {
    return $foreign.unsafeIndexImpl;
};
var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function(x) {
    return function(xs) {
        return new Data_Maybe.Just({
            head: x,
            tail: xs
        });
    };
});
var toUnfoldable = function(dictUnfoldable) {
    return function(xs) {
        var len = $foreign.length(xs);
        var f = function(i) {
            if (i < len) return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
            if (Data_Boolean.otherwise) return Data_Maybe.Nothing.value;
            throw new Error("Failed pattern match at Data.Array (line 143, column 3 - line 145, column 26): " + [
                i.constructor.name
            ]);
        };
        return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
    };
};
var takeEnd = function(n) {
    return function(xs) {
        return $foreign.drop($foreign.length(xs) - n | 0)(xs);
    };
};
var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function(v) {
    return function(xs) {
        return new Data_Maybe.Just(xs);
    };
});
var sortBy = function(comp) {
    return function(xs) {
        var comp$prime = function(x) {
            return function(y) {
                var v = comp(x)(y);
                if (v instanceof Data_Ordering.GT) return 1;
                if (v instanceof Data_Ordering.EQ) return 0;
                if (v instanceof Data_Ordering.LT) return -1;
                throw new Error("Failed pattern match at Data.Array (line 702, column 15 - line 705, column 13): " + [
                    v.constructor.name
                ]);
            };
        };
        return $foreign.sortImpl(comp$prime)(xs);
    };
};
var sortWith = function(dictOrd) {
    return function(f) {
        return sortBy(Data_Ord.comparing(dictOrd)(f));
    };
};
var sort = function(dictOrd) {
    return function(xs) {
        return sortBy(Data_Ord.compare(dictOrd))(xs);
    };
};
var singleton = function(a) {
    return [
        a
    ];
};
var $$null = function(xs) {
    return $foreign.length(xs) === 0;
};
var nubByEq = function(eq) {
    return function(xs) {
        return (function __do() {
            var arr = Data_Array_ST.empty();
            Control_Monad_ST_Internal.foreach(xs)(function(x) {
                return function __do1() {
                    var e = Data_Functor.map(Control_Monad_ST_Internal.functorST)(function() {
                        var $84 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                        var $85 = Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function(v) {
                            return eq(v)(x);
                        });
                        return function($86) {
                            return $84($85($86));
                        };
                    }())(Data_Array_ST.unsafeFreeze(arr))();
                    return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(e)(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(x)(arr)))();
                };
            })();
            return Data_Array_ST.unsafeFreeze(arr)();
        })();
    };
};
var nubEq = function(dictEq) {
    return nubByEq(Data_Eq.eq(dictEq));
};
var modifyAtIndices = function(dictFoldable) {
    return function(is) {
        return function(f) {
            return function(xs) {
                return Data_Array_ST.withArray(function(res) {
                    return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function(i) {
                        return Data_Array_ST.modify(i)(f)(res);
                    })(is);
                })(xs)();
            };
        };
    };
};
var mapWithIndex = function(f) {
    return function(xs) {
        return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
    };
};
var some = function(dictAlternative) {
    return function(dictLazy) {
        return function(v) {
            return Control_Apply.apply(dictAlternative.Applicative0().Apply0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())($foreign.cons)(v))(Control_Lazy.defer(dictLazy)(function(v1) {
                return many(dictAlternative)(dictLazy)(v);
            }));
        };
    };
};
var many = function(dictAlternative) {
    return function(dictLazy) {
        return function(v) {
            return Control_Alt.alt(dictAlternative.Plus1().Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())([]));
        };
    };
};
var insertAt = $foreign["_insertAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var init = function(xs) {
    if ($$null(xs)) return Data_Maybe.Nothing.value;
    if (Data_Boolean.otherwise) return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
    throw new Error("Failed pattern match at Data.Array (line 323, column 1 - line 323, column 45): " + [
        xs.constructor.name
    ]);
};
var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var last = function(xs) {
    return index(xs)($foreign.length(xs) - 1 | 0);
};
var unsnoc = function(xs) {
    return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function(v) {
        return function(v1) {
            return {
                init: v,
                last: v1
            };
        };
    })(init(xs)))(last(xs));
};
var modifyAt = function(i) {
    return function(f) {
        return function(xs) {
            var go = function(x) {
                return updateAt(i)(f(x))(xs);
            };
            return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
        };
    };
};
var span = function(p) {
    return function(arr) {
        var go = function($copy_i) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(i) {
                var v = index(arr)(i);
                if (v instanceof Data_Maybe.Just) {
                    var $60 = p(v.value0);
                    if ($60) {
                        $copy_i = i + 1 | 0;
                        return;
                    }
                    $tco_done = true;
                    return new Data_Maybe.Just(i);
                }
                if (v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                }
                throw new Error("Failed pattern match at Data.Array (line 834, column 5 - line 836, column 25): " + [
                    v.constructor.name
                ]);
            }
            while(!$tco_done)$tco_result = $tco_loop($copy_i);
            return $tco_result;
        };
        var breakIndex = go(0);
        if (breakIndex instanceof Data_Maybe.Just && breakIndex.value0 === 0) return {
            init: [],
            rest: arr
        };
        if (breakIndex instanceof Data_Maybe.Just) return {
            init: $foreign.slice(0)(breakIndex.value0)(arr),
            rest: $foreign.slice(breakIndex.value0)($foreign.length(arr))(arr)
        };
        if (breakIndex instanceof Data_Maybe.Nothing) return {
            init: arr,
            rest: []
        };
        throw new Error("Failed pattern match at Data.Array (line 821, column 3 - line 827, column 30): " + [
            breakIndex.constructor.name
        ]);
    };
};
var takeWhile = function(p) {
    return function(xs) {
        return span(p)(xs).init;
    };
};
var unzip = function(xs) {
    return (function __do() {
        var fsts = Data_Array_ST.empty();
        var snds = Data_Array_ST.empty();
        var iter = Data_Array_ST_Iterator.iterator(function(v) {
            return index(xs)(v);
        })();
        Data_Array_ST_Iterator.iterate(iter)(function(v) {
            return function __do1() {
                Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v.value0)(fsts))();
                return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v.value1)(snds))();
            };
        })();
        var fsts$prime = Data_Array_ST.unsafeFreeze(fsts)();
        var snds$prime = Data_Array_ST.unsafeFreeze(snds)();
        return new Data_Tuple.Tuple(fsts$prime, snds$prime);
    })();
};
var head = function(xs) {
    return index(xs)(0);
};
var nubBy = function(comp) {
    return function(xs) {
        var indexedAndSorted = sortBy(function(x) {
            return function(y) {
                return comp(Data_Tuple.snd(x))(Data_Tuple.snd(y));
            };
        })(mapWithIndex(Data_Tuple.Tuple.create)(xs));
        var v = head(indexedAndSorted);
        if (v instanceof Data_Maybe.Nothing) return [];
        if (v instanceof Data_Maybe.Just) return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(sortWith(Data_Ord.ordInt)(Data_Tuple.fst)(function __do() {
            var result = Data_Array_ST.unsafeThaw(singleton(v.value0))();
            Control_Monad_ST_Internal.foreach(indexedAndSorted)(function(v1) {
                return function __do1() {
                    var lst = Data_Functor.map(Control_Monad_ST_Internal.functorST)(function() {
                        var $87 = function(dictPartial) {
                            var $89 = Data_Maybe.fromJust();
                            return function($90) {
                                return $89(last($90));
                            };
                        }();
                        return function($88) {
                            return Data_Tuple.snd($87($88));
                        };
                    }())(Data_Array_ST.unsafeFreeze(result))();
                    return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(Data_Eq.notEq(Data_Ordering.eqOrdering)(comp(lst)(v1.value1))(Data_Ordering.EQ.value))(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v1)(result)))();
                };
            })();
            return Data_Array_ST.unsafeFreeze(result)();
        }()));
        throw new Error("Failed pattern match at Data.Array (line 903, column 17 - line 911, column 29): " + [
            v.constructor.name
        ]);
    };
};
var nub = function(dictOrd) {
    return nubBy(Data_Ord.compare(dictOrd));
};
var groupBy = function(op) {
    return function(xs) {
        return (function __do() {
            var result = Data_Array_ST.empty();
            var iter = Data_Array_ST_Iterator.iterator(function(v) {
                return index(xs)(v);
            })();
            Data_Array_ST_Iterator.iterate(iter)(function(x) {
                return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(function __do1() {
                    var sub = Data_Array_ST.empty();
                    Data_Array_ST.push(x)(sub)();
                    Data_Array_ST_Iterator.pushWhile(op(x))(iter)(sub)();
                    var grp = Data_Array_ST.unsafeFreeze(sub)();
                    return Data_Array_ST.push(grp)(result)();
                });
            })();
            return Data_Array_ST.unsafeFreeze(result)();
        })();
    };
};
var group = function(dictEq) {
    return function(xs) {
        return groupBy(Data_Eq.eq(dictEq))(xs);
    };
};
var group$prime = function(dictOrd) {
    var $91 = group(dictOrd.Eq0());
    var $92 = sort(dictOrd);
    return function($93) {
        return $91($92($93));
    };
};
var fromFoldable = function(dictFoldable) {
    return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
};
var foldRecM = function(dictMonadRec) {
    return function(f) {
        return function(a) {
            return function(array) {
                var go = function(res) {
                    return function(i) {
                        if (i >= $foreign.length(array)) return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Control_Monad_Rec_Class.Done(res));
                        if (Data_Boolean.otherwise) return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(f(res)(unsafeIndex()(array)(i)))(function(res$prime) {
                            return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Control_Monad_Rec_Class.Loop({
                                a: res$prime,
                                b: i + 1 | 0
                            }));
                        });
                        throw new Error("Failed pattern match at Data.Array (line 1101, column 3 - line 1105, column 42): " + [
                            res.constructor.name,
                            i.constructor.name
                        ]);
                    };
                };
                return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(go)(a)(0);
            };
        };
    };
};
var foldM = function(dictMonad) {
    return function(f) {
        return function(a) {
            return $foreign["uncons'"](function(v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(a);
            })(function(b) {
                return function(bs) {
                    return Control_Bind.bind(dictMonad.Bind1())(f(a)(b))(function(a$prime) {
                        return foldM(dictMonad)(f)(a$prime)(bs);
                    });
                };
            });
        };
    };
};
var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var insertBy = function(cmp) {
    return function(x) {
        return function(ys) {
            var i = Data_Maybe.maybe(0)(function(v) {
                return v + 1 | 0;
            })(findLastIndex(function(y) {
                return Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.GT.value);
            })(ys));
            return Data_Maybe.fromJust()(insertAt(i)(x)(ys));
        };
    };
};
var insert = function(dictOrd) {
    return insertBy(Data_Ord.compare(dictOrd));
};
var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var intersectBy = function(eq) {
    return function(xs) {
        return function(ys) {
            return $foreign.filter(function(x) {
                return Data_Maybe.isJust(findIndex(eq(x))(ys));
            })(xs);
        };
    };
};
var intersect = function(dictEq) {
    return intersectBy(Data_Eq.eq(dictEq));
};
var elemLastIndex = function(dictEq) {
    return function(x) {
        return findLastIndex(function(v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var elemIndex = function(dictEq) {
    return function(x) {
        return findIndex(function(v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var dropWhile = function(p) {
    return function(xs) {
        return span(p)(xs).rest;
    };
};
var dropEnd = function(n) {
    return function(xs) {
        return $foreign.take($foreign.length(xs) - n | 0)(xs);
    };
};
var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var deleteBy = function(v) {
    return function(v1) {
        return function(v2) {
            if (v2.length === 0) return [];
            return Data_Maybe.maybe(v2)(function(i) {
                return Data_Maybe.fromJust()(deleteAt(i)(v2));
            })(findIndex(v(v1))(v2));
        };
    };
};
var unionBy = function(eq) {
    return function(xs) {
        return function(ys) {
            return Data_Semigroup.append(Data_Semigroup.semigroupArray)(xs)(Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Function.flip(deleteBy(eq)))(nubByEq(eq)(ys))(xs));
        };
    };
};
var union = function(dictEq) {
    return unionBy(Data_Eq.eq(dictEq));
};
var $$delete = function(dictEq) {
    return deleteBy(Data_Eq.eq(dictEq));
};
var difference = function(dictEq) {
    return Data_Foldable.foldr(Data_Foldable.foldableArray)($$delete(dictEq));
};
var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
var mapMaybe = function(f) {
    return concatMap(function() {
        var $94 = Data_Maybe.maybe([])(singleton);
        return function($95) {
            return $94(f($95));
        };
    }());
};
var filterA = function(dictApplicative) {
    return function(p) {
        var $96 = Data_Functor.map(dictApplicative.Apply0().Functor0())(mapMaybe(function(v) {
            if (v.value1) return new Data_Maybe.Just(v.value0);
            return Data_Maybe.Nothing.value;
        }));
        var $97 = Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(function(x) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Tuple.Tuple.create(x))(p(x));
        });
        return function($98) {
            return $96($97($98));
        };
    };
};
var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
var alterAt = function(i) {
    return function(f) {
        return function(xs) {
            var go = function(x) {
                var v = f(x);
                if (v instanceof Data_Maybe.Nothing) return deleteAt(i)(xs);
                if (v instanceof Data_Maybe.Just) return updateAt(i)(v.value0)(xs);
                throw new Error("Failed pattern match at Data.Array (line 544, column 10 - line 546, column 32): " + [
                    v.constructor.name
                ]);
            };
            return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
        };
    };
};
module.exports = {
    fromFoldable: fromFoldable,
    toUnfoldable: toUnfoldable,
    singleton: singleton,
    some: some,
    many: many,
    "null": $$null,
    insert: insert,
    insertBy: insertBy,
    head: head,
    last: last,
    tail: tail,
    init: init,
    uncons: uncons,
    unsnoc: unsnoc,
    index: index,
    elemIndex: elemIndex,
    elemLastIndex: elemLastIndex,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    insertAt: insertAt,
    deleteAt: deleteAt,
    updateAt: updateAt,
    updateAtIndices: updateAtIndices,
    modifyAt: modifyAt,
    modifyAtIndices: modifyAtIndices,
    alterAt: alterAt,
    concatMap: concatMap,
    filterA: filterA,
    mapMaybe: mapMaybe,
    catMaybes: catMaybes,
    mapWithIndex: mapWithIndex,
    sort: sort,
    sortBy: sortBy,
    sortWith: sortWith,
    takeEnd: takeEnd,
    takeWhile: takeWhile,
    dropEnd: dropEnd,
    dropWhile: dropWhile,
    span: span,
    group: group,
    "group'": group$prime,
    groupBy: groupBy,
    nub: nub,
    nubEq: nubEq,
    nubBy: nubBy,
    nubByEq: nubByEq,
    union: union,
    unionBy: unionBy,
    "delete": $$delete,
    deleteBy: deleteBy,
    difference: difference,
    intersect: intersect,
    intersectBy: intersectBy,
    zipWithA: zipWithA,
    zip: zip,
    unzip: unzip,
    foldM: foldM,
    foldRecM: foldRecM,
    unsafeIndex: unsafeIndex,
    range: $foreign.range,
    replicate: $foreign.replicate,
    length: $foreign.length,
    cons: $foreign.cons,
    snoc: $foreign.snoc,
    reverse: $foreign.reverse,
    concat: $foreign.concat,
    filter: $foreign.filter,
    partition: $foreign.partition,
    slice: $foreign.slice,
    take: $foreign.take,
    drop: $foreign.drop,
    zipWith: $foreign.zipWith
};

},{"./foreign.js":"dqzTa","../Control.Alt/index.js":"82RIG","../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Category/index.js":"dfcPK","../Control.Lazy/index.js":"chn7k","../Control.Monad.Rec.Class/index.js":"dMFG0","../Control.Monad.ST.Internal/index.js":"gv8IF","../Data.Array.ST/index.js":"4GJp8","../Data.Array.ST.Iterator/index.js":"eQ1Ji","../Data.Boolean/index.js":"lv1qw","../Data.Eq/index.js":"c3b8F","../Data.Foldable/index.js":"jWmFN","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO","../Data.HeytingAlgebra/index.js":"8Mx0E","../Data.Maybe/index.js":"ePH81","../Data.Ord/index.js":"f14nh","../Data.Ordering/index.js":"lEtyd","../Data.Semigroup/index.js":"4sNah","../Data.Traversable/index.js":"i5Kon","../Data.Tuple/index.js":"eOBbM","../Data.Unfoldable/index.js":"5NUrk"}],"dqzTa":[function(require,module,exports) {
"use strict";
//------------------------------------------------------------------------------
// Array creation --------------------------------------------------------------
//------------------------------------------------------------------------------
exports.range = function(start) {
    return function(end) {
        var step = start > end ? -1 : 1;
        var result = new Array(step * (end - start) + 1);
        var i = start, n = 0;
        while(i !== end){
            result[n++] = i;
            i += step;
        }
        result[n] = i;
        return result;
    };
};
var replicateFill = function(count) {
    return function(value) {
        if (count < 1) return [];
        var result = new Array(count);
        return result.fill(value);
    };
};
var replicatePolyfill = function(count) {
    return function(value) {
        var result = [];
        var n = 0;
        for(var i = 0; i < count; i++)result[n++] = value;
        return result;
    };
};
// In browsers that have Array.prototype.fill we use it, as it's faster.
exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;
exports.fromFoldableImpl = (function() {
    function Cons(head, tail) {
        this.head = head;
        this.tail = tail;
    }
    var emptyList = {
    };
    function curryCons(head) {
        return function(tail) {
            return new Cons(head, tail);
        };
    }
    function listToArray(list) {
        var result = [];
        var count = 0;
        var xs = list;
        while(xs !== emptyList){
            result[count++] = xs.head;
            xs = xs.tail;
        }
        return result;
    }
    return function(foldr) {
        return function(xs) {
            return listToArray(foldr(curryCons)(emptyList)(xs));
        };
    };
})();
//------------------------------------------------------------------------------
// Array size ------------------------------------------------------------------
//------------------------------------------------------------------------------
exports.length = function(xs) {
    return xs.length;
};
//------------------------------------------------------------------------------
// Extending arrays ------------------------------------------------------------
//------------------------------------------------------------------------------
exports.cons = function(e) {
    return function(l) {
        return [
            e
        ].concat(l);
    };
};
exports.snoc = function(l) {
    return function(e) {
        var l1 = l.slice();
        l1.push(e);
        return l1;
    };
};
//------------------------------------------------------------------------------
// Non-indexed reads -----------------------------------------------------------
//------------------------------------------------------------------------------
exports["uncons'"] = function(empty) {
    return function(next) {
        return function(xs) {
            return xs.length === 0 ? empty({
            }) : next(xs[0])(xs.slice(1));
        };
    };
};
//------------------------------------------------------------------------------
// Indexed operations ----------------------------------------------------------
//------------------------------------------------------------------------------
exports.indexImpl = function(just) {
    return function(nothing) {
        return function(xs) {
            return function(i) {
                return i < 0 || i >= xs.length ? nothing : just(xs[i]);
            };
        };
    };
};
exports.findIndexImpl = function(just) {
    return function(nothing) {
        return function(f) {
            return function(xs) {
                for(var i = 0, l = xs.length; i < l; i++){
                    if (f(xs[i])) return just(i);
                }
                return nothing;
            };
        };
    };
};
exports.findLastIndexImpl = function(just) {
    return function(nothing) {
        return function(f) {
            return function(xs) {
                for(var i = xs.length - 1; i >= 0; i--){
                    if (f(xs[i])) return just(i);
                }
                return nothing;
            };
        };
    };
};
exports._insertAt = function(just) {
    return function(nothing) {
        return function(i) {
            return function(a) {
                return function(l) {
                    if (i < 0 || i > l.length) return nothing;
                    var l1 = l.slice();
                    l1.splice(i, 0, a);
                    return just(l1);
                };
            };
        };
    };
};
exports._deleteAt = function(just) {
    return function(nothing) {
        return function(i) {
            return function(l) {
                if (i < 0 || i >= l.length) return nothing;
                var l1 = l.slice();
                l1.splice(i, 1);
                return just(l1);
            };
        };
    };
};
exports._updateAt = function(just) {
    return function(nothing) {
        return function(i) {
            return function(a) {
                return function(l) {
                    if (i < 0 || i >= l.length) return nothing;
                    var l1 = l.slice();
                    l1[i] = a;
                    return just(l1);
                };
            };
        };
    };
};
//------------------------------------------------------------------------------
// Transformations -------------------------------------------------------------
//------------------------------------------------------------------------------
exports.reverse = function(l) {
    return l.slice().reverse();
};
exports.concat = function(xss) {
    if (xss.length <= 10000) // This method is faster, but it crashes on big arrays.
    // So we use it when can and fallback to simple variant otherwise.
    return Array.prototype.concat.apply([], xss);
    var result = [];
    for(var i = 0, l = xss.length; i < l; i++){
        var xs = xss[i];
        for(var j = 0, m = xs.length; j < m; j++)result.push(xs[j]);
    }
    return result;
};
exports.filter = function(f) {
    return function(xs) {
        return xs.filter(f);
    };
};
exports.partition = function(f) {
    return function(xs) {
        var yes = [];
        var no = [];
        for(var i = 0; i < xs.length; i++){
            var x = xs[i];
            if (f(x)) yes.push(x);
            else no.push(x);
        }
        return {
            yes: yes,
            no: no
        };
    };
};
//------------------------------------------------------------------------------
// Sorting ---------------------------------------------------------------------
//------------------------------------------------------------------------------
exports.sortImpl = function(f) {
    return function(l) {
        return l.slice().sort(function(x, y) {
            return f(x)(y);
        });
    };
};
//------------------------------------------------------------------------------
// Subarrays -------------------------------------------------------------------
//------------------------------------------------------------------------------
exports.slice = function(s) {
    return function(e) {
        return function(l) {
            return l.slice(s, e);
        };
    };
};
exports.take = function(n) {
    return function(l) {
        return n < 1 ? [] : l.slice(0, n);
    };
};
exports.drop = function(n) {
    return function(l) {
        return n < 1 ? l : l.slice(n);
    };
};
//------------------------------------------------------------------------------
// Zipping ---------------------------------------------------------------------
//------------------------------------------------------------------------------
exports.zipWith = function(f) {
    return function(xs) {
        return function(ys) {
            var l = xs.length < ys.length ? xs.length : ys.length;
            var result = new Array(l);
            for(var i = 0; i < l; i++)result[i] = f(xs[i])(ys[i]);
            return result;
        };
    };
};
//------------------------------------------------------------------------------
// Partial ---------------------------------------------------------------------
//------------------------------------------------------------------------------
exports.unsafeIndexImpl = function(xs) {
    return function(n) {
        return xs[n];
    };
};

},{}],"gv8IF":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var modify = function(f) {
    return $foreign["modify'"](function(s) {
        var s$prime = f(s);
        return {
            state: s$prime,
            value: s$prime
        };
    });
};
var functorST = new Data_Functor.Functor($foreign.map_);
var monadST = new Control_Monad.Monad(function() {
    return applicativeST;
}, function() {
    return bindST;
});
var bindST = new Control_Bind.Bind(function() {
    return applyST;
}, $foreign.bind_);
var applyST = new Control_Apply.Apply(function() {
    return functorST;
}, Control_Monad.ap(monadST));
var applicativeST = new Control_Applicative.Applicative(function() {
    return applyST;
}, $foreign.pure_);
var monadRecST = new Control_Monad_Rec_Class.MonadRec(function() {
    return monadST;
}, function(f) {
    return function(a) {
        var isLooping = function(v) {
            if (v instanceof Control_Monad_Rec_Class.Loop) return true;
            return false;
        };
        var fromDone = function(v) {
            if (v instanceof Control_Monad_Rec_Class.Done) return v.value0;
            throw new Error("Failed pattern match at Control.Monad.ST.Internal (line 54, column 32 - line 54, column 46): " + [
                v.constructor.name
            ]);
        };
        return Control_Bind.bind(bindST)(Control_Bind.bindFlipped(bindST)($foreign["new"])(f(a)))(function(r) {
            return Control_Bind.discard(Control_Bind.discardUnit)(bindST)($foreign["while"](Data_Functor.map(functorST)(isLooping)($foreign.read(r)))(Control_Bind.bind(bindST)($foreign.read(r))(function(v) {
                if (v instanceof Control_Monad_Rec_Class.Loop) return Control_Bind.bind(bindST)(f(v.value0))(function(e) {
                    return Data_Functor["void"](functorST)($foreign.write(e)(r));
                });
                if (v instanceof Control_Monad_Rec_Class.Done) return Control_Applicative.pure(applicativeST)(Data_Unit.unit);
                throw new Error("Failed pattern match at Control.Monad.ST.Internal (line 46, column 18 - line 50, column 28): " + [
                    v.constructor.name
                ]);
            })))(function() {
                return Data_Functor.map(functorST)(fromDone)($foreign.read(r));
            });
        });
    };
});
module.exports = {
    modify: modify,
    functorST: functorST,
    applyST: applyST,
    applicativeST: applicativeST,
    bindST: bindST,
    monadST: monadST,
    monadRecST: monadRecST,
    map_: $foreign.map_,
    pure_: $foreign.pure_,
    bind_: $foreign.bind_,
    run: $foreign.run,
    "while": $foreign["while"],
    "for": $foreign["for"],
    foreach: $foreign.foreach,
    "new": $foreign["new"],
    read: $foreign.read,
    "modify'": $foreign["modify'"],
    write: $foreign.write
};

},{"./foreign.js":"7Y8o2","../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Monad/index.js":"alCn2","../Control.Monad.Rec.Class/index.js":"dMFG0","../Data.Functor/index.js":"iy1jO","../Data.Unit/index.js":"d7oKp"}],"7Y8o2":[function(require,module,exports) {
"use strict";
exports.map_ = function(f) {
    return function(a) {
        return function() {
            return f(a());
        };
    };
};
exports.pure_ = function(a) {
    return function() {
        return a;
    };
};
exports.bind_ = function(a) {
    return function(f) {
        return function() {
            return f(a())();
        };
    };
};
exports.run = function(f) {
    return f();
};
exports["while"] = function(f) {
    return function(a) {
        return function() {
            while(f())a();
        };
    };
};
exports["for"] = function(lo) {
    return function(hi) {
        return function(f) {
            return function() {
                for(var i = lo; i < hi; i++)f(i)();
            };
        };
    };
};
exports.foreach = function(as) {
    return function(f) {
        return function() {
            for(var i = 0, l = as.length; i < l; i++)f(as[i])();
        };
    };
};
exports.new = function(val) {
    return function() {
        return {
            value: val
        };
    };
};
exports.read = function(ref) {
    return function() {
        return ref.value;
    };
};
exports["modify'"] = function(f) {
    return function(ref) {
        return function() {
            var t = f(ref.value);
            ref.value = t.state;
            return t.value;
        };
    };
};
exports.write = function(a) {
    return function(ref) {
        return function() {
            return ref.value = a; // eslint-disable-line no-return-assign
        };
    };
};

},{}],"4GJp8":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var withArray = function(f) {
    return function(xs) {
        return function __do() {
            var result = $foreign.thaw(xs)();
            f(result)();
            return $foreign.unsafeFreeze(result)();
        };
    };
};
var unshift = function(a) {
    return $foreign.unshiftAll([
        a
    ]);
};
var sortBy = function(comp) {
    var comp$prime = function(x) {
        return function(y) {
            var v = comp(x)(y);
            if (v instanceof Data_Ordering.GT) return 1;
            if (v instanceof Data_Ordering.EQ) return 0;
            if (v instanceof Data_Ordering.LT) return -1;
            throw new Error("Failed pattern match at Data.Array.ST (line 105, column 15 - line 108, column 13): " + [
                v.constructor.name
            ]);
        };
    };
    return $foreign.sortByImpl(comp$prime);
};
var sortWith = function(dictOrd) {
    return function(f) {
        return sortBy(Data_Ord.comparing(dictOrd)(f));
    };
};
var sort = function(dictOrd) {
    return sortBy(Data_Ord.compare(dictOrd));
};
var shift = $foreign.shiftImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var run = function(st) {
    return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(st)($foreign.unsafeFreeze)();
};
var push = function(a) {
    return $foreign.pushAll([
        a
    ]);
};
var pop = $foreign.popImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var peek = $foreign.peekImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var modify = function(i) {
    return function(f) {
        return function(xs) {
            return function __do() {
                var entry = peek(i)(xs)();
                if (entry instanceof Data_Maybe.Just) return $foreign.poke(i)(f(entry.value0))(xs)();
                if (entry instanceof Data_Maybe.Nothing) return false;
                throw new Error("Failed pattern match at Data.Array.ST (line 188, column 3 - line 190, column 26): " + [
                    entry.constructor.name
                ]);
            };
        };
    };
};
module.exports = {
    run: run,
    withArray: withArray,
    peek: peek,
    modify: modify,
    pop: pop,
    push: push,
    shift: shift,
    unshift: unshift,
    sort: sort,
    sortBy: sortBy,
    sortWith: sortWith,
    empty: $foreign.empty,
    poke: $foreign.poke,
    pushAll: $foreign.pushAll,
    unshiftAll: $foreign.unshiftAll,
    splice: $foreign.splice,
    freeze: $foreign.freeze,
    thaw: $foreign.thaw,
    unsafeFreeze: $foreign.unsafeFreeze,
    unsafeThaw: $foreign.unsafeThaw,
    toAssocArray: $foreign.toAssocArray
};

},{"./foreign.js":"iYfHP","../Control.Bind/index.js":"7Sory","../Control.Monad.ST.Internal/index.js":"gv8IF","../Data.Maybe/index.js":"ePH81","../Data.Ord/index.js":"f14nh","../Data.Ordering/index.js":"lEtyd"}],"iYfHP":[function(require,module,exports) {
"use strict";
exports.empty = function() {
    return [];
};
exports.peekImpl = function(just) {
    return function(nothing) {
        return function(i) {
            return function(xs) {
                return function() {
                    return i >= 0 && i < xs.length ? just(xs[i]) : nothing;
                };
            };
        };
    };
};
exports.poke = function(i) {
    return function(a) {
        return function(xs) {
            return function() {
                var ret = i >= 0 && i < xs.length;
                if (ret) xs[i] = a;
                return ret;
            };
        };
    };
};
exports.popImpl = function(just) {
    return function(nothing) {
        return function(xs) {
            return function() {
                return xs.length > 0 ? just(xs.pop()) : nothing;
            };
        };
    };
};
exports.pushAll = function(as) {
    return function(xs) {
        return function() {
            return xs.push.apply(xs, as);
        };
    };
};
exports.shiftImpl = function(just) {
    return function(nothing) {
        return function(xs) {
            return function() {
                return xs.length > 0 ? just(xs.shift()) : nothing;
            };
        };
    };
};
exports.unshiftAll = function(as) {
    return function(xs) {
        return function() {
            return xs.unshift.apply(xs, as);
        };
    };
};
exports.splice = function(i) {
    return function(howMany) {
        return function(bs) {
            return function(xs) {
                return function() {
                    return xs.splice.apply(xs, [
                        i,
                        howMany
                    ].concat(bs));
                };
            };
        };
    };
};
exports.unsafeFreeze = function(xs) {
    return function() {
        return xs;
    };
};
exports.unsafeThaw = function(xs) {
    return function() {
        return xs;
    };
};
function copyImpl(xs) {
    return function() {
        return xs.slice();
    };
}
exports.freeze = copyImpl;
exports.thaw = copyImpl;
exports.sortByImpl = function(comp) {
    return function(xs) {
        return function() {
            return xs.sort(function(x, y) {
                return comp(x)(y);
            });
        };
    };
};
exports.toAssocArray = function(xs) {
    return function() {
        var n = xs.length;
        var as = new Array(n);
        for(var i = 0; i < n; i++)as[i] = {
            value: xs[i],
            index: i
        };
        return as;
    };
};

},{}],"eQ1Ji":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");
var Data_Array_ST = require("../Data.Array.ST/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Iterator = function() {
    function Iterator1(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }
    Iterator1.create = function(value0) {
        return function(value1) {
            return new Iterator1(value0, value1);
        };
    };
    return Iterator1;
}();
var peek = function(v) {
    return function __do() {
        var i = Control_Monad_ST_Internal.read(v.value1)();
        return v.value0(i);
    };
};
var next = function(v) {
    return function __do() {
        var i = Control_Monad_ST_Internal.read(v.value1)();
        Control_Monad_ST_Internal.modify(function(v1) {
            return v1 + 1 | 0;
        })(v.value1)();
        return v.value0(i);
    };
};
var pushWhile = function(p) {
    return function(iter) {
        return function(array) {
            return function __do() {
                var $$break = Control_Monad_ST_Internal["new"](false)();
                while(Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))())(function __do1() {
                    var mx = peek(iter)();
                    if (mx instanceof Data_Maybe.Just && p(mx.value0)) {
                        Data_Array_ST.push(mx.value0)(array)();
                        return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(next(iter))();
                    }
                    return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                })();
                return {
                };
            };
        };
    };
};
var pushAll = pushWhile(Data_Function["const"](true));
var iterator = function(f) {
    return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Iterator.create(f))(Control_Monad_ST_Internal["new"](0));
};
var iterate = function(iter) {
    return function(f) {
        return function __do() {
            var $$break = Control_Monad_ST_Internal["new"](false)();
            while(Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))())(function __do1() {
                var mx = next(iter)();
                if (mx instanceof Data_Maybe.Just) return f(mx.value0)();
                if (mx instanceof Data_Maybe.Nothing) return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                throw new Error("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47): " + [
                    mx.constructor.name
                ]);
            })();
            return {
            };
        };
    };
};
var exhausted = function() {
    var $13 = Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_Maybe.isNothing);
    return function($14) {
        return $13(peek($14));
    };
}();
module.exports = {
    iterator: iterator,
    iterate: iterate,
    next: next,
    peek: peek,
    exhausted: exhausted,
    pushWhile: pushWhile,
    pushAll: pushAll
};

},{"../Control.Monad.ST.Internal/index.js":"gv8IF","../Data.Array.ST/index.js":"4GJp8","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO","../Data.HeytingAlgebra/index.js":"8Mx0E","../Data.Maybe/index.js":"ePH81"}],"5NUrk":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Unfoldable = function(Unfoldable10, unfoldr) {
    this.Unfoldable10 = Unfoldable10;
    this.unfoldr = unfoldr;
};
_c = Unfoldable;
var unfoldr = function(dict) {
    return dict.unfoldr;
};
var unfoldableMaybe = new Unfoldable(function() {
    return Data_Unfoldable1.unfoldable1Maybe;
}, function(f) {
    return function(b) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst)(f(b));
    };
});
var unfoldableArray = new Unfoldable(function() {
    return Data_Unfoldable1.unfoldable1Array;
}, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
var replicate = function(dictUnfoldable) {
    return function(n) {
        return function(v) {
            var step = function(i) {
                var $7 = i <= 0;
                if ($7) return Data_Maybe.Nothing.value;
                return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1 | 0));
            };
            return unfoldr(dictUnfoldable)(step)(n);
        };
    };
};
var replicateA = function(dictApplicative) {
    return function(dictUnfoldable) {
        return function(dictTraversable) {
            return function(n) {
                return function(m) {
                    return Data_Traversable.sequence(dictTraversable)(dictApplicative)(replicate(dictUnfoldable)(n)(m));
                };
            };
        };
    };
};
var none = function(dictUnfoldable) {
    return unfoldr(dictUnfoldable)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Unit.unit);
};
var fromMaybe = function(dictUnfoldable) {
    return unfoldr(dictUnfoldable)(function(b) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Maybe.Nothing.value))(b);
    });
};
module.exports = {
    Unfoldable: Unfoldable,
    unfoldr: unfoldr,
    replicate: replicate,
    replicateA: replicateA,
    none: none,
    fromMaybe: fromMaybe,
    unfoldableArray: unfoldableArray,
    unfoldableMaybe: unfoldableMaybe
};
var _c;
$RefreshReg$(_c, "Unfoldable");

},{"./foreign.js":"kKqNB","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO","../Data.Maybe/index.js":"ePH81","../Data.Traversable/index.js":"i5Kon","../Data.Tuple/index.js":"eOBbM","../Data.Unfoldable1/index.js":"Daf7x","../Data.Unit/index.js":"d7oKp"}],"kKqNB":[function(require,module,exports) {
"use strict";
exports.unfoldrArrayImpl = function(isNothing) {
    return function(fromJust) {
        return function(fst) {
            return function(snd) {
                return function(f) {
                    return function(b) {
                        var result = [];
                        var value = b;
                        while(true){
                            var maybe = f(value);
                            if (isNothing(maybe)) return result;
                            var tuple = fromJust(maybe);
                            result.push(fst(tuple));
                            value = snd(tuple);
                        }
                    };
                };
            };
        };
    };
};

},{}],"Daf7x":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Unfoldable1 = function(unfoldr1) {
    this.unfoldr1 = unfoldr1;
};
_c = Unfoldable1;
var unfoldr1 = function(dict) {
    return dict.unfoldr1;
};
var unfoldable1Maybe = new Unfoldable1(function(f) {
    return function(b) {
        return new Data_Maybe.Just(Data_Tuple.fst(f(b)));
    };
});
var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
var replicate1 = function(dictUnfoldable1) {
    return function(n) {
        return function(v) {
            var step = function(i) {
                if (i <= 0) return new Data_Tuple.Tuple(v, Data_Maybe.Nothing.value);
                if (Data_Boolean.otherwise) return new Data_Tuple.Tuple(v, new Data_Maybe.Just(i - 1 | 0));
                throw new Error("Failed pattern match at Data.Unfoldable1 (line 67, column 5 - line 67, column 39): " + [
                    i.constructor.name
                ]);
            };
            return unfoldr1(dictUnfoldable1)(step)(n - 1 | 0);
        };
    };
};
var replicate1A = function(dictApply) {
    return function(dictUnfoldable1) {
        return function(dictTraversable1) {
            return function(n) {
                return function(m) {
                    return Data_Semigroup_Traversable.sequence1(dictTraversable1)(dictApply)(replicate1(dictUnfoldable1)(n)(m));
                };
            };
        };
    };
};
var singleton = function(dictUnfoldable1) {
    return replicate1(dictUnfoldable1)(1);
};
var range = function(dictUnfoldable1) {
    return function(start) {
        return function(end) {
            var go = function(delta) {
                return function(i) {
                    var i$prime = i + delta | 0;
                    return new Data_Tuple.Tuple(i, function() {
                        var $8 = i === end;
                        if ($8) return Data_Maybe.Nothing.value;
                        return new Data_Maybe.Just(i$prime);
                    }());
                };
            };
            var delta = function() {
                var $9 = end >= start;
                if ($9) return 1;
                return -1;
            }();
            return unfoldr1(dictUnfoldable1)(go(delta))(start);
        };
    };
};
module.exports = {
    Unfoldable1: Unfoldable1,
    unfoldr1: unfoldr1,
    replicate1: replicate1,
    replicate1A: replicate1A,
    singleton: singleton,
    range: range,
    unfoldable1Array: unfoldable1Array,
    unfoldable1Maybe: unfoldable1Maybe
};
var _c;
$RefreshReg$(_c, "Unfoldable1");

},{"./foreign.js":"6M6Cy","../Data.Boolean/index.js":"lv1qw","../Data.Maybe/index.js":"ePH81","../Data.Semigroup.Traversable/index.js":"kPmtP","../Data.Tuple/index.js":"eOBbM"}],"6M6Cy":[function(require,module,exports) {
"use strict";
exports.unfoldr1ArrayImpl = function(isNothing) {
    return function(fromJust) {
        return function(fst) {
            return function(snd) {
                return function(f) {
                    return function(b) {
                        var result = [];
                        var value = b;
                        while(true){
                            var tuple = f(value);
                            result.push(fst(tuple));
                            var maybe = snd(tuple);
                            if (isNothing(maybe)) return result;
                            value = fromJust(maybe);
                        }
                    };
                };
            };
        };
    };
};

},{}],"avUSa":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Unit = require("../Data.Unit/index.js");
var $$undefined = Data_Unit.unit;
module.exports = {
    "undefined": $$undefined
};

},{"../Data.Unit/index.js":"d7oKp"}],"7zFQn":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_BigNumber = require("../Data.BigNumber/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Exponentials = require("../Exponentials/index.js");
var Test_QuickCheck_Arbitrary = require("../Test.QuickCheck.Arbitrary/index.js");
var Test_QuickCheck_Gen = require("../Test.QuickCheck.Gen/index.js");
var Utils = require("../Utils/index.js");
var Scalar = function() {
    function Scalar1(value0) {
        this.value0 = value0;
    }
    Scalar1.create = function(value0) {
        return new Scalar1(value0);
    };
    return Scalar1;
}();
var Name = function() {
    function Name1(value0) {
        this.value0 = value0;
    }
    Name1.create = function(value0) {
        return new Name1(value0);
    };
    return Name1;
}();
var Fn1 = function() {
    function Fn11(value0) {
        this.value0 = value0;
    }
    Fn11.create = function(value0) {
        return new Fn11(value0);
    };
    return Fn11;
}();
var Fn2 = function() {
    function Fn21(value0) {
        this.value0 = value0;
    }
    Fn21.create = function(value0) {
        return new Fn21(value0);
    };
    return Fn21;
}();
var BindPrefix = function() {
    function BindPrefix1(value0) {
        this.value0 = value0;
    }
    BindPrefix1.create = function(value0) {
        return new BindPrefix1(value0);
    };
    return BindPrefix1;
}();
var BindRootUnit = function() {
    function BindRootUnit1(value0) {
        this.value0 = value0;
    }
    BindRootUnit1.create = function(value0) {
        return new BindRootUnit1(value0);
    };
    return BindRootUnit1;
}();
var BindUnit = function() {
    function BindUnit1(value0) {
        this.value0 = value0;
    }
    BindUnit1.create = function(value0) {
        return new BindUnit1(value0);
    };
    return BindUnit1;
}();
var BindAlias = function() {
    function BindAlias1(value0) {
        this.value0 = value0;
    }
    BindAlias1.create = function(value0) {
        return new BindAlias1(value0);
    };
    return BindAlias1;
}();
var BindVariable = function() {
    function BindVariable1(value0) {
        this.value0 = value0;
    }
    BindVariable1.create = function(value0) {
        return new BindVariable1(value0);
    };
    return BindVariable1;
}();
var singletonUnit = function(unit) {
    return {
        scalar: Utils.parseBigNumber("1"),
        units: Exponentials.singleton(unit)
    };
};
var scalar1 = {
    scalar: Utils.parseBigNumber("1"),
    units: Data_Monoid.mempty(Exponentials.monoidExponentials(Data_Ord.ordString))
};
var prettyBigNum = function(n) {
    if (Data_Ord.lessThan(Data_BigNumber.ordBigNumber)(Data_Ring.sub(Data_BigNumber.ringBigNumber)(n)(Utils.bigNumberFixed(0)(n)))(Utils.parseBigNumber(".01"))) return Utils.bigNumberFormatFixed(0)(n);
    if (Data_Ord.lessThan(Data_BigNumber.ordBigNumber)(Data_Ring.sub(Data_BigNumber.ringBigNumber)(n)(Utils.bigNumberFixed(1)(n)))(Utils.parseBigNumber(".01"))) return Utils.bigNumberFormatFixed(1)(n);
    if (Data_Boolean.otherwise) return Utils.bigNumberFormatFixed(2)(n);
    throw new Error("Failed pattern match at Expression (line 63, column 1 - line 63, column 36): " + [
        n.constructor.name
    ]);
};
var prettyValue = function(v) {
    if (Data_Eq.eq(Exponentials.eqExponentials(Data_Ord.ordString))(v.units)(Data_Monoid.mempty(Exponentials.monoidExponentials(Data_Ord.ordString)))) return prettyBigNum(v.scalar);
    if (Data_Boolean.otherwise) return prettyBigNum(v.scalar) + (" " + Data_Show.show(Exponentials.showExponentialsString)(v.units));
    throw new Error("Failed pattern match at Expression (line 69, column 1 - line 69, column 31): " + [
        v.constructor.name
    ]);
};
var infixNames = [
    "+",
    "-",
    "*",
    "/",
    "^"
];
var showWrapped = function(v) {
    if (v instanceof Scalar) return Data_Show.show(Data_BigNumber.showBigNumber)(v.value0);
    if (v instanceof Name) return v.value0;
    return "(" + (Data_Show.show(showExpr)(v) + ")");
};
var showExpr = new Data_Show.Show(function(v) {
    if (v instanceof Scalar) return Data_Show.show(Data_BigNumber.showBigNumber)(v.value0);
    if (v instanceof Name) return v.value0;
    if (v instanceof Fn1) return v.value0.name + ("(" + (Data_Show.show(showExpr)(v.value0.p1) + ")"));
    if (v instanceof Fn2) {
        if (Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString)(v.value0.name)(infixNames)) return showWrapped(v.value0.p1) + (v.value0.name + showWrapped(v.value0.p2));
        if (Data_Boolean.otherwise) return v.value0.name + ("(" + (Data_Show.show(showExpr)(v.value0.p1) + ("," + (Data_Show.show(showExpr)(v.value0.p2) + ")"))));
    }
    if (v instanceof BindPrefix) return "prefix " + (v.value0.name + (" = " + Data_Show.show(showExpr)(v.value0.expr)));
    if (v instanceof BindRootUnit) return "unit " + v.value0.name;
    if (v instanceof BindUnit) return "unit " + (v.value0.name + (" = " + Data_Show.show(showExpr)(v.value0.expr)));
    if (v instanceof BindAlias) return "alias " + (v.value0.name + (" = " + v.value0.target));
    if (v instanceof BindVariable) return v.value0.name + (" = " + Data_Show.show(showExpr)(v.value0.expr));
    throw new Error("Failed pattern match at Expression (line 31, column 1 - line 42, column 66): " + [
        v.constructor.name
    ]);
});
var genName = Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Name.create)(Test_QuickCheck_Gen.elements(new Data_NonEmpty.NonEmpty("ft", [
    "pi",
    "m",
    "advait"
])));
var genBigNumber = Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Data_Functor.map(Data_Functor.functorFn)(Utils.parseBigNumber)(Data_Show.show(Data_Show.showInt)))(Test_QuickCheck_Arbitrary.arbitrary(Test_QuickCheck_Arbitrary.arbInt));
var genScalar = Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Scalar.create)(genBigNumber);
var genConcrete = Test_QuickCheck_Gen.oneOf(new Data_NonEmpty.NonEmpty(genScalar, [
    genName
]));
var genInfix = function(maxDepth) {
    if (maxDepth <= 0) return genConcrete;
    if (Data_Boolean.otherwise) return Control_Bind.bind(Test_QuickCheck_Gen.bindGen)(Test_QuickCheck_Gen.elements(new Data_NonEmpty.NonEmpty("*", infixNames)))(function(name) {
        return Control_Bind.bind(Test_QuickCheck_Gen.bindGen)(genExpr(maxDepth - 1 | 0))(function(p1) {
            return Control_Bind.bind(Test_QuickCheck_Gen.bindGen)(genExpr(maxDepth - 1 | 0))(function(p2) {
                return Control_Applicative.pure(Test_QuickCheck_Gen.applicativeGen)(new Fn2({
                    name: name,
                    p1: p1,
                    p2: p2
                }));
            });
        });
    });
    throw new Error("Failed pattern match at Expression (line 94, column 1 - line 94, column 28): " + [
        maxDepth.constructor.name
    ]);
};
var genExpr = function(maxDepth) {
    if (maxDepth <= 0) return genConcrete;
    if (Data_Boolean.otherwise) return Test_QuickCheck_Gen.oneOf(new Data_NonEmpty.NonEmpty(genInfix(maxDepth), []));
    throw new Error("Failed pattern match at Expression (line 105, column 1 - line 105, column 27): " + [
        maxDepth.constructor.name
    ]);
};
var eqExpr = new Data_Eq.Eq(function(x) {
    return function(y) {
        if (x instanceof Scalar && y instanceof Scalar) return Data_Eq.eq(Data_BigNumber.eqBigNumber)(x.value0)(y.value0);
        if (x instanceof Name && y instanceof Name) return x.value0 === y.value0;
        if (x instanceof Fn1 && y instanceof Fn1) return x.value0.name === y.value0.name && Data_Eq.eq(eqExpr)(x.value0.p1)(y.value0.p1);
        if (x instanceof Fn2 && y instanceof Fn2) return x.value0.name === y.value0.name && Data_Eq.eq(eqExpr)(x.value0.p1)(y.value0.p1) && Data_Eq.eq(eqExpr)(x.value0.p2)(y.value0.p2);
        if (x instanceof BindPrefix && y instanceof BindPrefix) return Data_Eq.eq(eqExpr)(x.value0.expr)(y.value0.expr) && x.value0.name === y.value0.name;
        if (x instanceof BindRootUnit && y instanceof BindRootUnit) return x.value0.name === y.value0.name;
        if (x instanceof BindUnit && y instanceof BindUnit) return Data_Eq.eq(eqExpr)(x.value0.expr)(y.value0.expr) && x.value0.name === y.value0.name;
        if (x instanceof BindAlias && y instanceof BindAlias) return x.value0.name === y.value0.name && x.value0.target === y.value0.target;
        if (x instanceof BindVariable && y instanceof BindVariable) return Data_Eq.eq(eqExpr)(x.value0.expr)(y.value0.expr) && x.value0.name === y.value0.name;
        return false;
    };
});
var arbitraryExpr = new Test_QuickCheck_Arbitrary.Arbitrary(genExpr(3));
module.exports = {
    Scalar: Scalar,
    Name: Name,
    Fn1: Fn1,
    Fn2: Fn2,
    BindPrefix: BindPrefix,
    BindRootUnit: BindRootUnit,
    BindUnit: BindUnit,
    BindAlias: BindAlias,
    BindVariable: BindVariable,
    infixNames: infixNames,
    showWrapped: showWrapped,
    scalar1: scalar1,
    prettyBigNum: prettyBigNum,
    prettyValue: prettyValue,
    singletonUnit: singletonUnit,
    genBigNumber: genBigNumber,
    genScalar: genScalar,
    genName: genName,
    genConcrete: genConcrete,
    genInfix: genInfix,
    genExpr: genExpr,
    eqExpr: eqExpr,
    showExpr: showExpr,
    arbitraryExpr: arbitraryExpr
};

},{"../Control.Applicative/index.js":"dG9TO","../Control.Bind/index.js":"7Sory","../Data.BigNumber/index.js":"hlAFq","../Data.Boolean/index.js":"lv1qw","../Data.Eq/index.js":"c3b8F","../Data.Foldable/index.js":"jWmFN","../Data.Functor/index.js":"iy1jO","../Data.Monoid/index.js":"94fxC","../Data.NonEmpty/index.js":"4pAZZ","../Data.Ord/index.js":"f14nh","../Data.Ring/index.js":"2x2oG","../Data.Show/index.js":"b6tNW","../Exponentials/index.js":"3DhL5","../Test.QuickCheck.Arbitrary/index.js":"eQhPs","../Test.QuickCheck.Gen/index.js":"dti6O","../Utils/index.js":"liNIM"}],"hlAFq":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");
var Data_DivisionRing = require("../Data.DivisionRing/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Function_Uncurried = require("../Data.Function.Uncurried/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Tuple_Native = require("../Data.Tuple.Native/index.js");
var Data_Typelevel_Num_Reps = require("../Data.Typelevel.Num.Reps/index.js");
var Data_Typelevel_Num_Sets = require("../Data.Typelevel.Num.Sets/index.js");
var Effect_Uncurried = require("../Effect.Uncurried/index.js");
var RoundingMode = function(x) {
    return x;
};
_c = RoundingMode;
var ModuloMode = function(x) {
    return x;
};
_c1 = ModuloMode;
var toFraction = function(a) {
    return function(b) {
        var x = $foreign.toFractionImpl(a, b);
        return new Data_Tuple.Tuple(Data_Tuple_Native.prj()()()()()(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Reps.d0)(x), Data_Tuple_Native.prj()()()()()(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Reps.d1)(x));
    };
};
var showBigNumber = new Data_Show.Show($foreign.toString);
var shiftedBy = Data_Function_Uncurried.runFn2($foreign.shiftedByImpl);
var roundUp = 0;
var roundHalfUp = 4;
var roundHalfFloor = 8;
var roundHalfEven = 6;
var roundHalfDown = 5;
var roundHalfCeil = 7;
var roundFloor = 3;
var roundDown = 1;
var roundCeil = 2;
var precision = Data_Function_Uncurried.runFn2($foreign.precisionImpl);
var pow = Data_Function_Uncurried.runFn2($foreign.powBigNumberImpl);
var parseBigNumber = Data_Function_Uncurried.runFn3($foreign.parseBigNumberImpl)(Data_Either.Left.create)(Data_Either.Right.create);
var semiringBigNumber = new Data_Semiring.Semiring(Data_Function_Uncurried.runFn2($foreign.plusBigNumberImpl), Data_Function_Uncurried.runFn2($foreign.timesBigNumberImpl), function(dictPartial) {
    var v = parseBigNumber("1");
    if (v instanceof Data_Either.Right) return v.value0;
    throw new Error("Failed pattern match at Data.BigNumber (line 269, column 9 - line 270, column 23): " + [
        v.constructor.name
    ]);
}(), function(dictPartial) {
    var v = parseBigNumber("0");
    if (v instanceof Data_Either.Right) return v.value0;
    throw new Error("Failed pattern match at Data.BigNumber (line 265, column 9 - line 266, column 23): " + [
        v.constructor.name
    ]);
}());
var ringBigNumber = new Data_Ring.Ring(function() {
    return semiringBigNumber;
}, Data_Function_Uncurried.runFn2($foreign.minusBigNumberImpl));
var negate$prime = $foreign.negateImpl;
var modRoundUp = 0;
var modRoundHalfEven = 6;
var modRoundFloor = 3;
var modRoundDown = 1;
var modEuclid = 9;
var idiv = Data_Function_Uncurried.runFn2($foreign.idivBigNumberImpl);
var genericBigNumber = new Data_Generic_Rep.Generic(function(x) {
    return $foreign.toString(x);
}, function(v) {
    var v1 = parseBigNumber(v);
    if (v1 instanceof Data_Either.Right) return v1.value0;
    throw new Error("Failed pattern match at Data.BigNumber (line 68, column 9 - line 69, column 23): " + [
        v1.constructor.name
    ]);
});
var eqBigNumber = new Data_Eq.Eq(Data_Function_Uncurried.runFn2($foreign.eqBigNumberImpl));
var ordBigNumber = new Data_Ord.Ord(function() {
    return eqBigNumber;
}, Data_Function_Uncurried.runFn5($foreign.compareBigNumberImpl)(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var divisionRingBigNumber = new Data_DivisionRing.DivisionRing(function() {
    return ringBigNumber;
}, Data_Function_Uncurried.runFn2($foreign.divBigNumberImpl)(Data_Semiring.one(semiringBigNumber)));
var decimalPlaces = Data_Function_Uncurried.runFn2($foreign.decimalPlacesImpl);
var config = function(dictSubRow) {
    return function(dictSubRow1) {
        return Effect_Uncurried.runEffectFn1($foreign.configImpl);
    };
};
var commutativeRingBigNumber = new Data_CommutativeRing.CommutativeRing(function() {
    return ringBigNumber;
});
var abs$prime = $foreign.absImpl;
var euclideanRingBigNumber = new Data_EuclideanRing.EuclideanRing(function() {
    return commutativeRingBigNumber;
}, function($28) {
    return Data_Int.floor($foreign.toNumber($foreign.intValue(abs$prime($28))));
}, Data_Function_Uncurried.runFn2($foreign.divBigNumberImpl), Data_Function_Uncurried.runFn2($foreign.moduloBigNumberImpl));
module.exports = {
    parseBigNumber: parseBigNumber,
    config: config,
    roundUp: roundUp,
    roundDown: roundDown,
    roundCeil: roundCeil,
    roundFloor: roundFloor,
    roundHalfUp: roundHalfUp,
    roundHalfDown: roundHalfDown,
    roundHalfEven: roundHalfEven,
    roundHalfCeil: roundHalfCeil,
    roundHalfFloor: roundHalfFloor,
    modRoundUp: modRoundUp,
    modRoundDown: modRoundDown,
    modRoundFloor: modRoundFloor,
    modRoundHalfEven: modRoundHalfEven,
    modEuclid: modEuclid,
    toFraction: toFraction,
    "abs'": abs$prime,
    "negate'": negate$prime,
    idiv: idiv,
    pow: pow,
    precision: precision,
    decimalPlaces: decimalPlaces,
    shiftedBy: shiftedBy,
    genericBigNumber: genericBigNumber,
    eqBigNumber: eqBigNumber,
    ordBigNumber: ordBigNumber,
    showBigNumber: showBigNumber,
    semiringBigNumber: semiringBigNumber,
    ringBigNumber: ringBigNumber,
    commutativeRingBigNumber: commutativeRingBigNumber,
    divisionRingBigNumber: divisionRingBigNumber,
    euclideanRingBigNumber: euclideanRingBigNumber,
    isBigNumber: $foreign.isBigNumber,
    isInteger: $foreign.isInteger,
    "isFinite": $foreign["isFinite"],
    "isNaN": $foreign["isNaN"],
    isNegative: $foreign.isNegative,
    isPositive: $foreign.isPositive,
    isZero: $foreign.isZero,
    toNumber: $foreign.toNumber,
    toString: $foreign.toString,
    toExponential: $foreign.toExponential,
    toFixed: $foreign.toFixed,
    toFormat: $foreign.toFormat,
    valueOf: $foreign.valueOf,
    sqrt: $foreign.sqrt,
    intValue: $foreign.intValue,
    randomBigNumber: $foreign.randomBigNumber
};
var _c, _c1;
$RefreshReg$(_c, "RoundingMode");
$RefreshReg$(_c1, "ModuloMode");

},{"./foreign.js":"dTFeF","../Data.CommutativeRing/index.js":"2q7tT","../Data.DivisionRing/index.js":"lOLLF","../Data.Either/index.js":"3WZha","../Data.Eq/index.js":"c3b8F","../Data.EuclideanRing/index.js":"fTU7A","../Data.Function.Uncurried/index.js":"69cE7","../Data.Generic.Rep/index.js":"2rL8E","../Data.Int/index.js":"7DHYL","../Data.Ord/index.js":"f14nh","../Data.Ordering/index.js":"lEtyd","../Data.Ring/index.js":"2x2oG","../Data.Semiring/index.js":"39btI","../Data.Show/index.js":"b6tNW","../Data.Tuple/index.js":"eOBbM","../Data.Tuple.Native/index.js":"6M6MW","../Data.Typelevel.Num.Reps/index.js":"4V3ku","../Data.Typelevel.Num.Sets/index.js":"533yn","../Effect.Uncurried/index.js":"33Dai"}],"dTFeF":[function(require,module,exports) {
"use strict";
var BigNumber = require('bignumber.js');
exports.parseBigNumberImpl = function parseBigNumberImpl(Left, Right, s) {
    var x;
    try {
        x = new BigNumber(s);
    } catch (e) {
        return Left(e);
    }
    return Right(x);
};
exports.configImpl = function configImpl(cfg) {
    BigNumber.config(cfg);
};
exports.isBigNumber = function isBigNumber(x) {
    return BigNumber.isBigNumber(x);
};
exports.randomBigNumber = function randomBigNumber() {
    return BigNumber.random();
};
exports.absImpl = function absImpl(x) {
    return x.abs();
};
exports.compareBigNumberImpl = function compareBigNumberImpl(LT, EQ, GT, x, y) {
    var r = x.comparedTo(y);
    if (r === -1) return LT;
    else if (r === 0) return EQ;
    else if (r === 1) return GT;
};
exports.decimalPlacesImpl = function decimalPlacesImpl(x, y) {
    return x.decimalPlaces(y);
};
exports.divBigNumberImpl = function divBigNumberImpl(x, y) {
    return x.div(y);
};
exports.idivBigNumberImpl = function idivBigNumberImpl(x, y) {
    return x.idiv(y);
};
exports.powBigNumberImpl = function powBigNumberImpl(x, y) {
    return x.pow(y);
};
exports.intValue = function intValue(x) {
    return x.integerValue();
};
exports.eqBigNumberImpl = function eqBigNumberImpl(x, y) {
    return x.eq(y);
};
exports.isFinite = function isFinite(x) {
    return x.isFinite();
};
exports.gtBigNumberImpl = function gtBigNumberImpl(x, y) {
    return x.gt(y);
};
exports.gteBigNumberImpl = function gteBigNumberImpl(x, y) {
    return x.gte(y);
};
exports.isInteger = function isInteger(x) {
    return x.isInteger();
};
exports.ltBigNumberImpl = function ltBigNumberImpl(x, y) {
    return x.lt(y);
};
exports.lteBigNumberImpl = function lteBigNumberImpl(x, y) {
    return x.lte(y);
};
exports.isNaN = function isNaN(x) {
    return x.isNaN();
};
exports.isNegative = function isNegative(x) {
    return x.isNegative();
};
exports.isPositive = function isPositive(x) {
    return x.isPositive();
};
exports.isZero = function isZero(x) {
    return x.isZero();
};
exports.minusBigNumberImpl = function minusBigNumberImpl(x, y) {
    return x.minus(y);
};
exports.moduloBigNumberImpl = function moduloBigNumberImpl(x, y) {
    return x.modulo(y);
};
exports.timesBigNumberImpl = function timesBigNumberImpl(x, y) {
    return x.times(y);
};
exports.negateImpl = function negateImpl(x) {
    return x.negated();
};
exports.plusBigNumberImpl = function plusBigNumberImpl(x, y) {
    return x.plus(y);
};
exports.precisionImpl = function precisionImpl(x, y) {
    return x.precision(y);
};
exports.shiftedByImpl = function shiftedByImpl(x, y) {
    return x.shiftedBy(y);
};
exports.toNumber = function toNumber(x) {
    return x.toNumber();
};
exports.toString = function toString(x) {
    return x.toString();
};
exports.toExponential = function toExponential(x) {
    return x.toExponential();
};
exports.toFixed = function toFixed(x) {
    return x.toFixed();
};
exports.toFormat = function toFormat(x) {
    return x.toFormat();
};
exports.toFractionImpl = function toFractionImpl(x) {
    return x.toFraction();
};
exports.valueOf = function valueOf(x) {
    return x.valueOf();
};
exports.sqrt = function sqrt(x) {
    return x.sqrt();
};

},{"bignumber.js":"4Fwbu"}],"4Fwbu":[function(require,module,exports) {
(function(globalObject) {
    /*
 *      bignumber.js v9.0.1
 *      A JavaScript library for arbitrary-precision arithmetic.
 *      https://github.com/MikeMcl/bignumber.js
 *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>
 *      MIT Licensed.
 *
 *      BigNumber.prototype methods     |  BigNumber methods
 *                                      |
 *      absoluteValue            abs    |  clone
 *      comparedTo                      |  config               set
 *      decimalPlaces            dp     |      DECIMAL_PLACES
 *      dividedBy                div    |      ROUNDING_MODE
 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
 *      exponentiatedBy          pow    |      RANGE
 *      integerValue                    |      CRYPTO
 *      isEqualTo                eq     |      MODULO_MODE
 *      isFinite                        |      POW_PRECISION
 *      isGreaterThan            gt     |      FORMAT
 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
 *      isInteger                       |  isBigNumber
 *      isLessThan               lt     |  maximum              max
 *      isLessThanOrEqualTo      lte    |  minimum              min
 *      isNaN                           |  random
 *      isNegative                      |  sum
 *      isPositive                      |
 *      isZero                          |
 *      minus                           |
 *      modulo                   mod    |
 *      multipliedBy             times  |
 *      negated                         |
 *      plus                            |
 *      precision                sd     |
 *      shiftedBy                       |
 *      squareRoot               sqrt   |
 *      toExponential                   |
 *      toFixed                         |
 *      toFormat                        |
 *      toFraction                      |
 *      toJSON                          |
 *      toNumber                        |
 *      toPrecision                     |
 *      toString                        |
 *      valueOf                         |
 *
 */ var BigNumber1, isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = '[BigNumber Error] ', tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ', BASE = 100000000000000, LOG_BASE = 14, MAX_SAFE_INTEGER = 9007199254740991, // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
    POWS_TEN = [
        1,
        10,
        100,
        1000,
        10000,
        100000,
        1000000,
        10000000,
        100000000,
        1000000000,
        10000000000,
        100000000000,
        1000000000000,
        10000000000000
    ], SQRT_BASE = 10000000, // EDITABLE
    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
    // the arguments to toExponential, toFixed, toFormat, and toPrecision.
    MAX = 1000000000; // 0 to MAX_INT32
    /*
   * Create and return a BigNumber constructor.
   */ function clone(configObject) {
        var div, convertBase, parseNumeric, P = BigNumber2.prototype = {
            constructor: BigNumber2,
            toString: null,
            valueOf: null
        }, ONE = new BigNumber2(1), //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------
        // The default values below must be integers within the inclusive ranges stated.
        // The values can also be changed at run-time using BigNumber.set.
        // The maximum number of decimal places for operations involving division.
        DECIMAL_PLACES = 20, // The rounding mode used when rounding to the above decimal places, and when using
        // toExponential, toFixed, toFormat and toPrecision, and round (default value).
        // UP         0 Away from zero.
        // DOWN       1 Towards zero.
        // CEIL       2 Towards +Infinity.
        // FLOOR      3 Towards -Infinity.
        // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
        // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
        // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
        // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
        // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
        ROUNDING_MODE = 4, // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]
        // The exponent value at and beneath which toString returns exponential notation.
        // Number type: -7
        TO_EXP_NEG = -7, // The exponent value at and above which toString returns exponential notation.
        // Number type: 21
        TO_EXP_POS = 21, // RANGE : [MIN_EXP, MAX_EXP]
        // The minimum exponent value, beneath which underflow to zero occurs.
        // Number type: -324  (5e-324)
        MIN_EXP = -10000000, // The maximum exponent value, above which overflow to Infinity occurs.
        // Number type:  308  (1.7976931348623157e+308)
        // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
        MAX_EXP = 10000000, // Whether to use cryptographically-secure random number generation, if available.
        CRYPTO = false, // The modulo mode used when calculating the modulus: a mod n.
        // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
        // The remainder (r) is calculated as: r = a - n * q.
        //
        // UP        0 The remainder is positive if the dividend is negative, else is negative.
        // DOWN      1 The remainder has the same sign as the dividend.
        //             This modulo mode is commonly known as 'truncated division' and is
        //             equivalent to (a % n) in JavaScript.
        // FLOOR     3 The remainder has the same sign as the divisor (Python %).
        // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
        // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
        //             The remainder is always positive.
        //
        // The truncated division, floored division, Euclidian division and IEEE 754 remainder
        // modes are commonly used for the modulus operation.
        // Although the other rounding modes can also be used, they may not give useful results.
        MODULO_MODE = 1, // The maximum number of significant digits of the result of the exponentiatedBy operation.
        // If POW_PRECISION is 0, there will be unlimited significant digits.
        POW_PRECISION = 0, // The format specification used by the BigNumber.prototype.toFormat method.
        FORMAT = {
            prefix: '',
            groupSize: 3,
            secondaryGroupSize: 0,
            groupSeparator: ',',
            decimalSeparator: '.',
            fractionGroupSize: 0,
            fractionGroupSeparator: '\xA0',
            suffix: ''
        }, // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
        // '-', '.', whitespace, or repeated character.
        // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';
        //------------------------------------------------------------------------------------------
        // CONSTRUCTOR
        /*
     * The BigNumber constructor and exported function.
     * Create and return a new instance of a BigNumber object.
     *
     * v {number|string|BigNumber} A numeric value.
     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
     */ function BigNumber2(v, b) {
            var alphabet, c, caseChanged, e, i, isNum, len, str, x = this;
            // Enable constructor call without `new`.
            if (!(x instanceof BigNumber2)) return new BigNumber2(v, b);
            if (b == null) {
                if (v && v._isBigNumber === true) {
                    x.s = v.s;
                    if (!v.c || v.e > MAX_EXP) x.c = x.e = null;
                    else if (v.e < MIN_EXP) x.c = [
                        x.e = 0
                    ];
                    else {
                        x.e = v.e;
                        x.c = v.c.slice();
                    }
                    return;
                }
                if ((isNum = typeof v == 'number') && v * 0 == 0) {
                    // Use `1 / n` to handle minus zero also.
                    x.s = 1 / v < 0 ? (v = -v, -1) : 1;
                    // Fast path for integers, where n < 2147483648 (2**31).
                    if (v === ~~v) {
                        for(e = 0, i = v; i >= 10; i /= 10, e++);
                        if (e > MAX_EXP) x.c = x.e = null;
                        else {
                            x.e = e;
                            x.c = [
                                v
                            ];
                        }
                        return;
                    }
                    str = String(v);
                } else {
                    if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);
                    x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
                }
                // Decimal point?
                if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
                // Exponential form?
                if ((i = str.search(/e/i)) > 0) {
                    // Determine exponent.
                    if (e < 0) e = i;
                    e += +str.slice(i + 1);
                    str = str.substring(0, i);
                } else if (e < 0) // Integer.
                e = str.length;
            } else {
                // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
                intCheck(b, 2, ALPHABET.length, 'Base');
                // Allow exponential notation to be used with base 10 argument, while
                // also rounding to DECIMAL_PLACES as with other bases.
                if (b == 10) {
                    x = new BigNumber2(v);
                    return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
                }
                str = String(v);
                if (isNum = typeof v == 'number') {
                    // Avoid potential interpretation of Infinity and NaN as base 44+ values.
                    if (v * 0 != 0) return parseNumeric(x, str, isNum, b);
                    x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;
                    // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                    if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) throw Error(tooManyDigits + v);
                } else x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
                alphabet = ALPHABET.slice(0, b);
                e = i = 0;
                // Check that str is a valid base b number.
                // Don't use RegExp, so alphabet can contain special characters.
                for(len = str.length; i < len; i++)if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                    if (c == '.') // If '.' is not the first character and it has not be found before.
                    {
                        if (i > e) {
                            e = len;
                            continue;
                        }
                    } else if (!caseChanged) // Allow e.g. hexadecimal 'FF' as well as 'ff'.
                    {
                        if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                            caseChanged = true;
                            i = -1;
                            e = 0;
                            continue;
                        }
                    }
                    return parseNumeric(x, String(v), isNum, b);
                }
                // Prevent later check for length on converted number.
                isNum = false;
                str = convertBase(str, b, 10, x.s);
                // Decimal point?
                if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
                else e = str.length;
            }
            // Determine leading zeros.
            for(i = 0; str.charCodeAt(i) === 48; i++);
            // Determine trailing zeros.
            for(len = str.length; str.charCodeAt(--len) === 48;);
            if (str = str.slice(i, ++len)) {
                len -= i;
                // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                if (isNum && BigNumber2.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) throw Error(tooManyDigits + x.s * v);
                // Overflow?
                if ((e = e - i - 1) > MAX_EXP) // Infinity.
                x.c = x.e = null;
                else if (e < MIN_EXP) // Zero.
                x.c = [
                    x.e = 0
                ];
                else {
                    x.e = e;
                    x.c = [];
                    // Transform base
                    // e is the base 10 exponent.
                    // i is where to slice str to get the first element of the coefficient array.
                    i = (e + 1) % LOG_BASE;
                    if (e < 0) i += LOG_BASE; // i < 1
                    if (i < len) {
                        if (i) x.c.push(+str.slice(0, i));
                        for(len -= LOG_BASE; i < len;)x.c.push(+str.slice(i, i += LOG_BASE));
                        i = LOG_BASE - (str = str.slice(i)).length;
                    } else i -= len;
                    for(; i--; str += '0');
                    x.c.push(+str);
                }
            } else // Zero.
            x.c = [
                x.e = 0
            ];
        }
        // CONSTRUCTOR PROPERTIES
        BigNumber2.clone = clone;
        BigNumber2.ROUND_UP = 0;
        BigNumber2.ROUND_DOWN = 1;
        BigNumber2.ROUND_CEIL = 2;
        BigNumber2.ROUND_FLOOR = 3;
        BigNumber2.ROUND_HALF_UP = 4;
        BigNumber2.ROUND_HALF_DOWN = 5;
        BigNumber2.ROUND_HALF_EVEN = 6;
        BigNumber2.ROUND_HALF_CEIL = 7;
        BigNumber2.ROUND_HALF_FLOOR = 8;
        BigNumber2.EUCLID = 9;
        /*
     * Configure infrequently-changing library-wide settings.
     *
     * Accept an object with the following optional properties (if the value of a property is
     * a number, it must be an integer within the inclusive range stated):
     *
     *   DECIMAL_PLACES   {number}           0 to MAX
     *   ROUNDING_MODE    {number}           0 to 8
     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
     *   CRYPTO           {boolean}          true or false
     *   MODULO_MODE      {number}           0 to 9
     *   POW_PRECISION       {number}           0 to MAX
     *   ALPHABET         {string}           A string of two or more unique characters which does
     *                                       not contain '.'.
     *   FORMAT           {object}           An object with some of the following properties:
     *     prefix                 {string}
     *     groupSize              {number}
     *     secondaryGroupSize     {number}
     *     groupSeparator         {string}
     *     decimalSeparator       {string}
     *     fractionGroupSize      {number}
     *     fractionGroupSeparator {string}
     *     suffix                 {string}
     *
     * (The values assigned to the above FORMAT object properties are not checked for validity.)
     *
     * E.g.
     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
     *
     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
     *
     * Return an object with the properties current values.
     */ BigNumber2.config = BigNumber2.set = function(obj) {
            var p, v;
            if (obj != null) {
                if (typeof obj == 'object') {
                    // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
                    // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
                        v = obj[p];
                        intCheck(v, 0, MAX, p);
                        DECIMAL_PLACES = v;
                    }
                    // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
                    // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
                        v = obj[p];
                        intCheck(v, 0, 8, p);
                        ROUNDING_MODE = v;
                    }
                    // EXPONENTIAL_AT {number|number[]}
                    // Integer, -MAX to MAX inclusive or
                    // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
                    // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
                        v = obj[p];
                        if (v && v.pop) {
                            intCheck(v[0], -MAX, 0, p);
                            intCheck(v[1], 0, MAX, p);
                            TO_EXP_NEG = v[0];
                            TO_EXP_POS = v[1];
                        } else {
                            intCheck(v, -MAX, MAX, p);
                            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                        }
                    }
                    // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
                    // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
                    // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
                    if (obj.hasOwnProperty(p = 'RANGE')) {
                        v = obj[p];
                        if (v && v.pop) {
                            intCheck(v[0], -MAX, -1, p);
                            intCheck(v[1], 1, MAX, p);
                            MIN_EXP = v[0];
                            MAX_EXP = v[1];
                        } else {
                            intCheck(v, -MAX, MAX, p);
                            if (v) MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                            else throw Error(bignumberError + p + ' cannot be zero: ' + v);
                        }
                    }
                    // CRYPTO {boolean} true or false.
                    // '[BigNumber Error] CRYPTO not true or false: {v}'
                    // '[BigNumber Error] crypto unavailable'
                    if (obj.hasOwnProperty(p = 'CRYPTO')) {
                        v = obj[p];
                        if (v === !!v) {
                            if (v) {
                                if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) CRYPTO = v;
                                else {
                                    CRYPTO = !v;
                                    throw Error(bignumberError + 'crypto unavailable');
                                }
                            } else CRYPTO = v;
                        } else throw Error(bignumberError + p + ' not true or false: ' + v);
                    }
                    // MODULO_MODE {number} Integer, 0 to 9 inclusive.
                    // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
                        v = obj[p];
                        intCheck(v, 0, 9, p);
                        MODULO_MODE = v;
                    }
                    // POW_PRECISION {number} Integer, 0 to MAX inclusive.
                    // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
                        v = obj[p];
                        intCheck(v, 0, MAX, p);
                        POW_PRECISION = v;
                    }
                    // FORMAT {object}
                    // '[BigNumber Error] FORMAT not an object: {v}'
                    if (obj.hasOwnProperty(p = 'FORMAT')) {
                        v = obj[p];
                        if (typeof v == 'object') FORMAT = v;
                        else throw Error(bignumberError + p + ' not an object: ' + v);
                    }
                    // ALPHABET {string}
                    // '[BigNumber Error] ALPHABET invalid: {v}'
                    if (obj.hasOwnProperty(p = 'ALPHABET')) {
                        v = obj[p];
                        // Disallow if less than two characters,
                        // or if it contains '+', '-', '.', whitespace, or a repeated character.
                        if (typeof v == 'string' && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) ALPHABET = v;
                        else throw Error(bignumberError + p + ' invalid: ' + v);
                    }
                } else // '[BigNumber Error] Object expected: {v}'
                throw Error(bignumberError + 'Object expected: ' + obj);
            }
            return {
                DECIMAL_PLACES: DECIMAL_PLACES,
                ROUNDING_MODE: ROUNDING_MODE,
                EXPONENTIAL_AT: [
                    TO_EXP_NEG,
                    TO_EXP_POS
                ],
                RANGE: [
                    MIN_EXP,
                    MAX_EXP
                ],
                CRYPTO: CRYPTO,
                MODULO_MODE: MODULO_MODE,
                POW_PRECISION: POW_PRECISION,
                FORMAT: FORMAT,
                ALPHABET: ALPHABET
            };
        };
        /*
     * Return true if v is a BigNumber instance, otherwise return false.
     *
     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
     *
     * v {any}
     *
     * '[BigNumber Error] Invalid BigNumber: {v}'
     */ BigNumber2.isBigNumber = function(v) {
            if (!v || v._isBigNumber !== true) return false;
            if (!BigNumber2.DEBUG) return true;
            var i, n, c = v.c, e = v.e, s = v.s;
            out: if (({
            }).toString.call(c) == '[object Array]') {
                if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
                    // If the first element is zero, the BigNumber value must be zero.
                    if (c[0] === 0) {
                        if (e === 0 && c.length === 1) return true;
                        break out;
                    }
                    // Calculate number of digits that c[0] should have, based on the exponent.
                    i = (e + 1) % LOG_BASE;
                    if (i < 1) i += LOG_BASE;
                    // Calculate number of digits of c[0].
                    //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
                    if (String(c[0]).length == i) {
                        for(i = 0; i < c.length; i++){
                            n = c[i];
                            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
                        }
                        // Last element cannot be zero, unless it is the only element.
                        if (n !== 0) return true;
                    }
                }
            } else if (c === null && e === null && (s === null || s === 1 || s === -1)) return true;
            throw Error(bignumberError + 'Invalid BigNumber: ' + v);
        };
        /*
     * Return a new BigNumber whose value is the maximum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */ BigNumber2.maximum = BigNumber2.max = function() {
            return maxOrMin(arguments, P.lt);
        };
        /*
     * Return a new BigNumber whose value is the minimum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */ BigNumber2.minimum = BigNumber2.min = function() {
            return maxOrMin(arguments, P.gt);
        };
        /*
     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
     * zeros are produced).
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
     * '[BigNumber Error] crypto unavailable'
     */ BigNumber2.random = (function() {
            var pow2_53 = 9007199254740992;
            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
            // Check if Math.random() produces more than 32 bits of randomness.
            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
            var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
                return mathfloor(Math.random() * pow2_53);
            } : function() {
                return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
            };
            return function(dp) {
                var a, b, e, k, v, i = 0, c = [], rand = new BigNumber2(ONE);
                if (dp == null) dp = DECIMAL_PLACES;
                else intCheck(dp, 0, MAX);
                k = mathceil(dp / LOG_BASE);
                if (CRYPTO) {
                    // Browsers supporting crypto.getRandomValues.
                    if (crypto.getRandomValues) {
                        a = crypto.getRandomValues(new Uint32Array(k *= 2));
                        for(; i < k;){
                            // 53 bits:
                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                            //                                     11111 11111111 11111111
                            // 0x20000 is 2^21.
                            v = a[i] * 131072 + (a[i + 1] >>> 11);
                            // Rejection sampling:
                            // 0 <= v < 9007199254740992
                            // Probability that v >= 9e15, is
                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                            if (v >= 9000000000000000) {
                                b = crypto.getRandomValues(new Uint32Array(2));
                                a[i] = b[0];
                                a[i + 1] = b[1];
                            } else {
                                // 0 <= v <= 8999999999999999
                                // 0 <= (v % 1e14) <= 99999999999999
                                c.push(v % 100000000000000);
                                i += 2;
                            }
                        }
                        i = k / 2;
                    // Node.js supporting crypto.randomBytes.
                    } else if (crypto.randomBytes) {
                        // buffer
                        a = crypto.randomBytes(k *= 7);
                        for(; i < k;){
                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                            // 0x100000000 is 2^32, 0x1000000 is 2^24
                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                            // 0 <= v < 9007199254740992
                            v = (a[i] & 31) * 281474976710656 + a[i + 1] * 1099511627776 + a[i + 2] * 4294967296 + a[i + 3] * 16777216 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
                            if (v >= 9000000000000000) crypto.randomBytes(7).copy(a, i);
                            else {
                                // 0 <= (v % 1e14) <= 99999999999999
                                c.push(v % 100000000000000);
                                i += 7;
                            }
                        }
                        i = k / 7;
                    } else {
                        CRYPTO = false;
                        throw Error(bignumberError + 'crypto unavailable');
                    }
                }
                // Use Math.random.
                if (!CRYPTO) for(; i < k;){
                    v = random53bitInt();
                    if (v < 9000000000000000) c[i++] = v % 100000000000000;
                }
                k = c[--i];
                dp %= LOG_BASE;
                // Convert trailing digits to zeros according to dp.
                if (k && dp) {
                    v = POWS_TEN[LOG_BASE - dp];
                    c[i] = mathfloor(k / v) * v;
                }
                // Remove trailing elements which are zero.
                for(; c[i] === 0; c.pop(), i--);
                // Zero?
                if (i < 0) c = [
                    e = 0
                ];
                else {
                    // Remove leading elements which are zero and adjust exponent accordingly.
                    for(e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);
                    // Count the digits of the first element of c to determine leading zeros, and...
                    for(i = 1, v = c[0]; v >= 10; v /= 10, i++);
                    // adjust the exponent accordingly.
                    if (i < LOG_BASE) e -= LOG_BASE - i;
                }
                rand.e = e;
                rand.c = c;
                return rand;
            };
        })();
        /*
     * Return a BigNumber whose value is the sum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */ BigNumber2.sum = function() {
            var i = 1, args = arguments, sum = new BigNumber2(args[0]);
            for(; i < args.length;)sum = sum.plus(args[i++]);
            return sum;
        };
        // PRIVATE FUNCTIONS
        // Called by BigNumber and BigNumber.prototype.toString.
        convertBase = (function() {
            var decimal = '0123456789';
            /*
       * Convert string of baseIn to an array of numbers of baseOut.
       * Eg. toBaseOut('255', 10, 16) returns [15, 15].
       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
       */ function toBaseOut(str, baseIn, baseOut, alphabet) {
                var j, arr = [
                    0
                ], arrL, i = 0, len = str.length;
                for(; i < len;){
                    for(arrL = arr.length; arrL--; arr[arrL] *= baseIn);
                    arr[0] += alphabet.indexOf(str.charAt(i++));
                    for(j = 0; j < arr.length; j++)if (arr[j] > baseOut - 1) {
                        if (arr[j + 1] == null) arr[j + 1] = 0;
                        arr[j + 1] += arr[j] / baseOut | 0;
                        arr[j] %= baseOut;
                    }
                }
                return arr.reverse();
            }
            // Convert a numeric string of baseIn to a numeric string of baseOut.
            // If the caller is toString, we are converting from base 10 to baseOut.
            // If the caller is BigNumber, we are converting from baseIn to base 10.
            return function(str, baseIn, baseOut, sign, callerIsToString) {
                var alphabet, d, e, k, r, x, xc, y, i = str.indexOf('.'), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
                // Non-integer.
                if (i >= 0) {
                    k = POW_PRECISION;
                    // Unlimited precision.
                    POW_PRECISION = 0;
                    str = str.replace('.', '');
                    y = new BigNumber2(baseIn);
                    x = y.pow(str.length - i);
                    POW_PRECISION = k;
                    // Convert str as if an integer, then restore the fraction part by dividing the
                    // result by its base raised to a power.
                    y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);
                    y.e = y.c.length;
                }
                // Convert the number as integer.
                xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
                // xc now represents str as an integer and converted to baseOut. e is the exponent.
                e = k = xc.length;
                // Remove trailing zeros.
                for(; xc[--k] == 0; xc.pop());
                // Zero?
                if (!xc[0]) return alphabet.charAt(0);
                // Does str represent an integer? If so, no need for the division.
                if (i < 0) --e;
                else {
                    x.c = xc;
                    x.e = e;
                    // The sign is needed for correct rounding.
                    x.s = sign;
                    x = div(x, y, dp, rm, baseOut);
                    xc = x.c;
                    r = x.r;
                    e = x.e;
                }
                // xc now represents str converted to baseOut.
                // THe index of the rounding digit.
                d = e + dp + 1;
                // The rounding digit: the digit to the right of the digit that may be rounded up.
                i = xc[d];
                // Look at the rounding digits and mode to determine whether to round up.
                k = baseOut / 2;
                r = r || d < 0 || xc[d + 1] != null;
                r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
                // If the index of the rounding digit is not greater than zero, or xc represents
                // zero, then the result of the base conversion is zero or, if rounding up, a value
                // such as 0.00001.
                if (d < 1 || !xc[0]) // 1^-dp or 0
                str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
                else {
                    // Truncate xc to the required number of decimal places.
                    xc.length = d;
                    // Round up?
                    if (r) // Rounding up may mean the previous digit has to be rounded up and so on.
                    for(--baseOut; (++xc[--d]) > baseOut;){
                        xc[d] = 0;
                        if (!d) {
                            ++e;
                            xc = [
                                1
                            ].concat(xc);
                        }
                    }
                    // Determine trailing zeros.
                    for(k = xc.length; !xc[--k];);
                    // E.g. [4, 11, 15] becomes 4bf.
                    for(i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));
                    // Add leading zeros, decimal point and trailing zeros as required.
                    str = toFixedPoint(str, e, alphabet.charAt(0));
                }
                // The caller will add the sign.
                return str;
            };
        })();
        // Perform division in the specified base. Called by div and convertBase.
        div = (function() {
            // Assume non-zero x and k.
            function multiply(x, k, base) {
                var m, temp, xlo, xhi, carry = 0, i = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
                for(x = x.slice(); i--;){
                    xlo = x[i] % SQRT_BASE;
                    xhi = x[i] / SQRT_BASE | 0;
                    m = khi * xlo + xhi * klo;
                    temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
                    carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
                    x[i] = temp % base;
                }
                if (carry) x = [
                    carry
                ].concat(x);
                return x;
            }
            function compare(a, b, aL, bL) {
                var i, cmp;
                if (aL != bL) cmp = aL > bL ? 1 : -1;
                else {
                    for(i = cmp = 0; i < aL; i++)if (a[i] != b[i]) {
                        cmp = a[i] > b[i] ? 1 : -1;
                        break;
                    }
                }
                return cmp;
            }
            function subtract(a, b, aL, base) {
                var i = 0;
                // Subtract b from a.
                for(; aL--;){
                    a[aL] -= i;
                    i = a[aL] < b[aL] ? 1 : 0;
                    a[aL] = i * base + a[aL] - b[aL];
                }
                // Remove leading zeros.
                for(; !a[0] && a.length > 1; a.splice(0, 1));
            }
            // x: dividend, y: divisor.
            return function(x, y, dp, rm, base) {
                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
                // Either NaN, Infinity or 0?
                if (!xc || !xc[0] || !yc || !yc[0]) return new BigNumber2(// Return NaN if either NaN, or both Infinity or 0.
                !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                xc && xc[0] == 0 || !yc ? s * 0 : s / 0);
                q = new BigNumber2(s);
                qc = q.c = [];
                e = x.e - y.e;
                s = dp + e + 1;
                if (!base) {
                    base = BASE;
                    e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
                    s = s / LOG_BASE | 0;
                }
                // Result exponent may be one less then the current value of e.
                // The coefficients of the BigNumbers from convertBase may have trailing zeros.
                for(i = 0; yc[i] == (xc[i] || 0); i++);
                if (yc[i] > (xc[i] || 0)) e--;
                if (s < 0) {
                    qc.push(1);
                    more = true;
                } else {
                    xL = xc.length;
                    yL = yc.length;
                    i = 0;
                    s += 2;
                    // Normalise xc and yc so highest order digit of yc is >= base / 2.
                    n = mathfloor(base / (yc[0] + 1));
                    // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
                    // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
                    if (n > 1) {
                        yc = multiply(yc, n, base);
                        xc = multiply(xc, n, base);
                        yL = yc.length;
                        xL = xc.length;
                    }
                    xi = yL;
                    rem = xc.slice(0, yL);
                    remL = rem.length;
                    // Add zeros to make remainder as long as divisor.
                    for(; remL < yL; rem[remL++] = 0);
                    yz = yc.slice();
                    yz = [
                        0
                    ].concat(yz);
                    yc0 = yc[0];
                    if (yc[1] >= base / 2) yc0++;
                    // Not necessary, but to prevent trial digit n > base, when using base 3.
                    // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;
                    do {
                        n = 0;
                        // Compare divisor and remainder.
                        cmp = compare(yc, rem, yL, remL);
                        // If divisor < remainder.
                        if (cmp < 0) {
                            // Calculate trial digit, n.
                            rem0 = rem[0];
                            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);
                            // n is how many times the divisor goes into the current remainder.
                            n = mathfloor(rem0 / yc0);
                            //  Algorithm:
                            //  product = divisor multiplied by trial digit (n).
                            //  Compare product and remainder.
                            //  If product is greater than remainder:
                            //    Subtract divisor from product, decrement trial digit.
                            //  Subtract product from remainder.
                            //  If product was less than remainder at the last compare:
                            //    Compare new remainder and divisor.
                            //    If remainder is greater than divisor:
                            //      Subtract divisor from remainder, increment trial digit.
                            if (n > 1) {
                                // n may be > base only when base is 3.
                                if (n >= base) n = base - 1;
                                // product = divisor * trial digit.
                                prod = multiply(yc, n, base);
                                prodL = prod.length;
                                remL = rem.length;
                                // Compare product and remainder.
                                // If product > remainder then trial digit n too high.
                                // n is 1 too high about 5% of the time, and is not known to have
                                // ever been more than 1 too high.
                                while(compare(prod, rem, prodL, remL) == 1){
                                    n--;
                                    // Subtract divisor from product.
                                    subtract(prod, yL < prodL ? yz : yc, prodL, base);
                                    prodL = prod.length;
                                    cmp = 1;
                                }
                            } else {
                                // n is 0 or 1, cmp is -1.
                                // If n is 0, there is no need to compare yc and rem again below,
                                // so change cmp to 1 to avoid it.
                                // If n is 1, leave cmp as -1, so yc and rem are compared again.
                                if (n == 0) // divisor < remainder, so n must be at least 1.
                                cmp = n = 1;
                                // product = divisor
                                prod = yc.slice();
                                prodL = prod.length;
                            }
                            if (prodL < remL) prod = [
                                0
                            ].concat(prod);
                            // Subtract product from remainder.
                            subtract(rem, prod, remL, base);
                            remL = rem.length;
                            // If product was < remainder.
                            if (cmp == -1) // Compare divisor and new remainder.
                            // If divisor < new remainder, subtract divisor from remainder.
                            // Trial digit n too low.
                            // n is 1 too low about 5% of the time, and very rarely 2 too low.
                            while(compare(yc, rem, yL, remL) < 1){
                                n++;
                                // Subtract divisor from remainder.
                                subtract(rem, yL < remL ? yz : yc, remL, base);
                                remL = rem.length;
                            }
                        } else if (cmp === 0) {
                            n++;
                            rem = [
                                0
                            ];
                        } // else cmp === 1 and n will be 0
                        // Add the next digit, n, to the result array.
                        qc[i++] = n;
                        // Update the remainder.
                        if (rem[0]) rem[remL++] = xc[xi] || 0;
                        else {
                            rem = [
                                xc[xi]
                            ];
                            remL = 1;
                        }
                    }while (((xi++) < xL || rem[0] != null) && s--)
                    more = rem[0] != null;
                    // Leading zero?
                    if (!qc[0]) qc.splice(0, 1);
                }
                if (base == BASE) {
                    // To calculate q.e, first get the number of digits of qc[0].
                    for(i = 1, s = qc[0]; s >= 10; s /= 10, i++);
                    round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);
                // Caller is convertBase.
                } else {
                    q.e = e;
                    q.r = +more;
                }
                return q;
            };
        })();
        /*
     * Return a string representing the value of BigNumber n in fixed-point or exponential
     * notation rounded to the specified decimal places or significant digits.
     *
     * n: a BigNumber.
     * i: the index of the last digit required (i.e. the digit that may be rounded up).
     * rm: the rounding mode.
     * id: 1 (toExponential) or 2 (toPrecision).
     */ function format(n, i, rm, id) {
            var c0, e, ne, len, str;
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            if (!n.c) return n.toString();
            c0 = n.c[0];
            ne = n.e;
            if (i == null) {
                str = coeffToString(n.c);
                str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, '0');
            } else {
                n = round(new BigNumber2(n), i, rm);
                // n.e may have changed if the value was rounded up.
                e = n.e;
                str = coeffToString(n.c);
                len = str.length;
                // toPrecision returns exponential notation if the number of significant digits
                // specified is less than the number of digits necessary to represent the integer
                // part of the value in fixed-point notation.
                // Exponential notation.
                if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
                    // Append zeros?
                    for(; len < i; str += '0', len++);
                    str = toExponential(str, e);
                // Fixed-point notation.
                } else {
                    i -= ne;
                    str = toFixedPoint(str, e, '0');
                    // Append zeros?
                    if (e + 1 > len) {
                        if ((--i) > 0) for(str += '.'; i--; str += '0');
                    } else {
                        i += e - len;
                        if (i > 0) {
                            if (e + 1 == len) str += '.';
                            for(; i--; str += '0');
                        }
                    }
                }
            }
            return n.s < 0 && c0 ? '-' + str : str;
        }
        // Handle BigNumber.max and BigNumber.min.
        function maxOrMin(args, method) {
            var n, i = 1, m = new BigNumber2(args[0]);
            for(; i < args.length; i++){
                n = new BigNumber2(args[i]);
                // If any number is NaN, return NaN.
                if (!n.s) {
                    m = n;
                    break;
                } else if (method.call(m, n)) m = n;
            }
            return m;
        }
        /*
     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
     * Called by minus, plus and times.
     */ function normalise(n, c, e) {
            var i = 1, j = c.length;
            // Remove trailing zeros.
            for(; !c[--j]; c.pop());
            // Calculate the base 10 exponent. First get the number of digits of c[0].
            for(j = c[0]; j >= 10; j /= 10, i++);
            // Overflow?
            if ((e = i + e * LOG_BASE - 1) > MAX_EXP) // Infinity.
            n.c = n.e = null;
            else if (e < MIN_EXP) // Zero.
            n.c = [
                n.e = 0
            ];
            else {
                n.e = e;
                n.c = c;
            }
            return n;
        }
        // Handle values that fail the validity test in BigNumber.
        parseNumeric = (function() {
            var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
            return function(x, str, isNum, b) {
                var base, s = isNum ? str : str.replace(whitespaceOrPlus, '');
                // No exception on ±Infinity or NaN.
                if (isInfinityOrNaN.test(s)) x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
                else {
                    if (!isNum) {
                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                        s = s.replace(basePrefix, function(m, p1, p2) {
                            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                            return !b || b == base ? p1 : m;
                        });
                        if (b) {
                            base = b;
                            // E.g. '1.' to '1', '.1' to '0.1'
                            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
                        }
                        if (str != s) return new BigNumber2(s, base);
                    }
                    // '[BigNumber Error] Not a number: {n}'
                    // '[BigNumber Error] Not a base {b} number: {n}'
                    if (BigNumber2.DEBUG) throw Error(bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
                    // NaN
                    x.s = null;
                }
                x.c = x.e = null;
            };
        })();
        /*
     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
     * If r is truthy, it is known that there are more digits after the rounding digit.
     */ function round(x, sd, rm, r) {
            var d, i, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
            // if x is not Infinity or NaN...
            if (xc) {
                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
                // n is a base 1e14 number, the value of the element of array x.c containing rd.
                // ni is the index of n within x.c.
                // d is the number of digits of n.
                // i is the index of rd within n including leading zeros.
                // j is the actual index of rd within n (if < 0, rd is a leading zero).
                out: {
                    // Get the number of digits of the first element of xc.
                    for(d = 1, k = xc[0]; k >= 10; k /= 10, d++);
                    i = sd - d;
                    // If the rounding digit is in the first element of xc...
                    if (i < 0) {
                        i += LOG_BASE;
                        j = sd;
                        n = xc[ni = 0];
                        // Get the rounding digit at index j of n.
                        rd = n / pows10[d - j - 1] % 10 | 0;
                    } else {
                        ni = mathceil((i + 1) / LOG_BASE);
                        if (ni >= xc.length) {
                            if (r) {
                                // Needed by sqrt.
                                for(; xc.length <= ni; xc.push(0));
                                n = rd = 0;
                                d = 1;
                                i %= LOG_BASE;
                                j = i - LOG_BASE + 1;
                            } else break out;
                        } else {
                            n = k = xc[ni];
                            // Get the number of digits of n.
                            for(d = 1; k >= 10; k /= 10, d++);
                            // Get the index of rd within n.
                            i %= LOG_BASE;
                            // Get the index of rd within n, adjusted for leading zeros.
                            // The number of leading zeros of n is given by LOG_BASE - d.
                            j = i - LOG_BASE + d;
                            // Get the rounding digit at index j of n.
                            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
                        }
                    }
                    r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
                    // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                    xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
                    r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
                    (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
                    if (sd < 1 || !xc[0]) {
                        xc.length = 0;
                        if (r) {
                            // Convert sd to decimal places.
                            sd -= x.e + 1;
                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                            x.e = -sd || 0;
                        } else // Zero.
                        xc[0] = x.e = 0;
                        return x;
                    }
                    // Remove excess digits.
                    if (i == 0) {
                        xc.length = ni;
                        k = 1;
                        ni--;
                    } else {
                        xc.length = ni + 1;
                        k = pows10[LOG_BASE - i];
                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                        // j > 0 means i > number of leading zeros of n.
                        xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
                    }
                    // Round up?
                    if (r) {
                        for(;;)// If the digit to be rounded up is in the first element of xc...
                        if (ni == 0) {
                            // i will be the length of xc[0] before k is added.
                            for(i = 1, j = xc[0]; j >= 10; j /= 10, i++);
                            j = xc[0] += k;
                            for(k = 1; j >= 10; j /= 10, k++);
                            // if i != k the length has increased.
                            if (i != k) {
                                x.e++;
                                if (xc[0] == BASE) xc[0] = 1;
                            }
                            break;
                        } else {
                            xc[ni] += k;
                            if (xc[ni] != BASE) break;
                            xc[ni--] = 0;
                            k = 1;
                        }
                    }
                    // Remove trailing zeros.
                    for(i = xc.length; xc[--i] === 0; xc.pop());
                }
                // Overflow? Infinity.
                if (x.e > MAX_EXP) x.c = x.e = null;
                else if (x.e < MIN_EXP) x.c = [
                    x.e = 0
                ];
            }
            return x;
        }
        function valueOf(n) {
            var str, e = n.e;
            if (e === null) return n.toString();
            str = coeffToString(n.c);
            str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');
            return n.s < 0 ? '-' + str : str;
        }
        // PROTOTYPE/INSTANCE METHODS
        /*
     * Return a new BigNumber whose value is the absolute value of this BigNumber.
     */ P.absoluteValue = P.abs = function() {
            var x = new BigNumber2(this);
            if (x.s < 0) x.s = 1;
            return x;
        };
        /*
     * Return
     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
     *   0 if they have the same value,
     *   or null if the value of either is NaN.
     */ P.comparedTo = function(y, b) {
            return compare(this, new BigNumber2(y, b));
        };
        /*
     * If dp is undefined or null or true or false, return the number of decimal places of the
     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     *
     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */ P.decimalPlaces = P.dp = function(dp, rm) {
            var c, n, v, x = this;
            if (dp != null) {
                intCheck(dp, 0, MAX);
                if (rm == null) rm = ROUNDING_MODE;
                else intCheck(rm, 0, 8);
                return round(new BigNumber2(x), dp + x.e + 1, rm);
            }
            if (!(c = x.c)) return null;
            n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
            // Subtract the number of trailing zeros of the last number.
            if (v = c[v]) for(; v % 10 == 0; v /= 10, n--);
            if (n < 0) n = 0;
            return n;
        };
        /*
     *  n / 0 = I
     *  n / N = N
     *  n / I = 0
     *  0 / n = 0
     *  0 / 0 = N
     *  0 / N = N
     *  0 / I = 0
     *  N / n = N
     *  N / 0 = N
     *  N / N = N
     *  N / I = N
     *  I / n = I
     *  I / 0 = I
     *  I / N = N
     *  I / I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */ P.dividedBy = P.div = function(y, b) {
            return div(this, new BigNumber2(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };
        /*
     * Return a new BigNumber whose value is the integer part of dividing the value of this
     * BigNumber by the value of BigNumber(y, b).
     */ P.dividedToIntegerBy = P.idiv = function(y, b) {
            return div(this, new BigNumber2(y, b), 0, 1);
        };
        /*
     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
     *
     * If m is present, return the result modulo m.
     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
     *
     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
     *
     * n {number|string|BigNumber} The exponent. An integer.
     * [m] {number|string|BigNumber} The modulus.
     *
     * '[BigNumber Error] Exponent not an integer: {n}'
     */ P.exponentiatedBy = P.pow = function(n, m) {
            var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
            n = new BigNumber2(n);
            // Allow NaN and ±Infinity, but not other non-integers.
            if (n.c && !n.isInteger()) throw Error(bignumberError + 'Exponent not an integer: ' + valueOf(n));
            if (m != null) m = new BigNumber2(m);
            // Exponent of MAX_SAFE_INTEGER is 15.
            nIsBig = n.e > 14;
            // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
            if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
                // The sign of the result of pow when x is negative depends on the evenness of n.
                // If +n overflows to ±Infinity, the evenness of n would be not be known.
                y = new BigNumber2(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));
                return m ? y.mod(m) : y;
            }
            nIsNeg = n.s < 0;
            if (m) {
                // x % m returns NaN if abs(m) is zero, or m is NaN.
                if (m.c ? !m.c[0] : !m.s) return new BigNumber2(NaN);
                isModExp = !nIsNeg && x.isInteger() && m.isInteger();
                if (isModExp) x = x.mod(m);
            // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
            // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
            } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 240000000 : x.c[0] < 80000000000000 || nIsBig && x.c[0] <= 99999750000000))) {
                // If x is negative and n is odd, k = -0, else k = 0.
                k = x.s < 0 && isOdd(n) ? -0 : 0;
                // If x >= 1, k = ±Infinity.
                if (x.e > -1) k = 1 / k;
                // If n is negative return ±0, else return ±Infinity.
                return new BigNumber2(nIsNeg ? 1 / k : k);
            } else if (POW_PRECISION) // Truncating each coefficient array to a length of k after each multiplication
            // equates to truncating significant digits to POW_PRECISION + [28, 41],
            // i.e. there will be a minimum of 28 guard digits retained.
            k = mathceil(POW_PRECISION / LOG_BASE + 2);
            if (nIsBig) {
                half = new BigNumber2(0.5);
                if (nIsNeg) n.s = 1;
                nIsOdd = isOdd(n);
            } else {
                i = Math.abs(+valueOf(n));
                nIsOdd = i % 2;
            }
            y = new BigNumber2(ONE);
            // Performs 54 loop iterations for n of 9007199254740991.
            for(;;){
                if (nIsOdd) {
                    y = y.times(x);
                    if (!y.c) break;
                    if (k) {
                        if (y.c.length > k) y.c.length = k;
                    } else if (isModExp) y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
                }
                if (i) {
                    i = mathfloor(i / 2);
                    if (i === 0) break;
                    nIsOdd = i % 2;
                } else {
                    n = n.times(half);
                    round(n, n.e + 1, 1);
                    if (n.e > 14) nIsOdd = isOdd(n);
                    else {
                        i = +valueOf(n);
                        if (i === 0) break;
                        nIsOdd = i % 2;
                    }
                }
                x = x.times(x);
                if (k) {
                    if (x.c && x.c.length > k) x.c.length = k;
                } else if (isModExp) x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
            }
            if (isModExp) return y;
            if (nIsNeg) y = ONE.div(y);
            return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
        };
        /*
     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
     */ P.integerValue = function(rm) {
            var n = new BigNumber2(this);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            return round(n, n.e + 1, rm);
        };
        /*
     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
     * otherwise return false.
     */ P.isEqualTo = P.eq = function(y, b) {
            return compare(this, new BigNumber2(y, b)) === 0;
        };
        /*
     * Return true if the value of this BigNumber is a finite number, otherwise return false.
     */ P.isFinite = function() {
            return !!this.c;
        };
        /*
     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
     * otherwise return false.
     */ P.isGreaterThan = P.gt = function(y, b) {
            return compare(this, new BigNumber2(y, b)) > 0;
        };
        /*
     * Return true if the value of this BigNumber is greater than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */ P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
            return (b = compare(this, new BigNumber2(y, b))) === 1 || b === 0;
        };
        /*
     * Return true if the value of this BigNumber is an integer, otherwise return false.
     */ P.isInteger = function() {
            return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };
        /*
     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
     * otherwise return false.
     */ P.isLessThan = P.lt = function(y, b) {
            return compare(this, new BigNumber2(y, b)) < 0;
        };
        /*
     * Return true if the value of this BigNumber is less than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */ P.isLessThanOrEqualTo = P.lte = function(y, b) {
            return (b = compare(this, new BigNumber2(y, b))) === -1 || b === 0;
        };
        /*
     * Return true if the value of this BigNumber is NaN, otherwise return false.
     */ P.isNaN = function() {
            return !this.s;
        };
        /*
     * Return true if the value of this BigNumber is negative, otherwise return false.
     */ P.isNegative = function() {
            return this.s < 0;
        };
        /*
     * Return true if the value of this BigNumber is positive, otherwise return false.
     */ P.isPositive = function() {
            return this.s > 0;
        };
        /*
     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
     */ P.isZero = function() {
            return !!this.c && this.c[0] == 0;
        };
        /*
     *  n - 0 = n
     *  n - N = N
     *  n - I = -I
     *  0 - n = -n
     *  0 - 0 = 0
     *  0 - N = N
     *  0 - I = -I
     *  N - n = N
     *  N - 0 = N
     *  N - N = N
     *  N - I = N
     *  I - n = I
     *  I - 0 = I
     *  I - N = N
     *  I - I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
     * BigNumber(y, b).
     */ P.minus = function(y, b) {
            var i, j, t, xLTy, x = this, a = x.s;
            y = new BigNumber2(y, b);
            b = y.s;
            // Either NaN?
            if (!a || !b) return new BigNumber2(NaN);
            // Signs differ?
            if (a != b) {
                y.s = -b;
                return x.plus(y);
            }
            var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
            if (!xe || !ye) {
                // Either Infinity?
                if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber2(yc ? x : NaN);
                // Either zero?
                if (!xc[0] || !yc[0]) // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                return yc[0] ? (y.s = -b, y) : new BigNumber2(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                ROUNDING_MODE == 3 ? -0 : 0);
            }
            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();
            // Determine which is the bigger number.
            if (a = xe - ye) {
                if (xLTy = a < 0) {
                    a = -a;
                    t = xc;
                } else {
                    ye = xe;
                    t = yc;
                }
                t.reverse();
                // Prepend zeros to equalise exponents.
                for(b = a; b--; t.push(0));
                t.reverse();
            } else {
                // Exponents equal. Check digit by digit.
                j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
                for(a = b = 0; b < j; b++)if (xc[b] != yc[b]) {
                    xLTy = xc[b] < yc[b];
                    break;
                }
            }
            // x < y? Point xc to the array of the bigger number.
            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;
            b = (j = yc.length) - (i = xc.length);
            // Append zeros to xc if shorter.
            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
            if (b > 0) for(; b--; xc[i++] = 0);
            b = BASE - 1;
            // Subtract yc from xc.
            for(; j > a;){
                if (xc[--j] < yc[j]) {
                    for(i = j; i && !xc[--i]; xc[i] = b);
                    --xc[i];
                    xc[j] += BASE;
                }
                xc[j] -= yc[j];
            }
            // Remove leading zeros and adjust exponent accordingly.
            for(; xc[0] == 0; xc.splice(0, 1), --ye);
            // Zero?
            if (!xc[0]) {
                // Following IEEE 754 (2008) 6.3,
                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
                y.s = ROUNDING_MODE == 3 ? -1 : 1;
                y.c = [
                    y.e = 0
                ];
                return y;
            }
            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
            // for finite x and y.
            return normalise(y, xc, ye);
        };
        /*
     *   n % 0 =  N
     *   n % N =  N
     *   n % I =  n
     *   0 % n =  0
     *  -0 % n = -0
     *   0 % 0 =  N
     *   0 % N =  N
     *   0 % I =  0
     *   N % n =  N
     *   N % 0 =  N
     *   N % N =  N
     *   N % I =  N
     *   I % n =  N
     *   I % 0 =  N
     *   I % N =  N
     *   I % I =  N
     *
     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
     */ P.modulo = P.mod = function(y, b) {
            var q, s, x = this;
            y = new BigNumber2(y, b);
            // Return NaN if x is Infinity or NaN, or y is NaN or zero.
            if (!x.c || !y.s || y.c && !y.c[0]) return new BigNumber2(NaN);
            else if (!y.c || x.c && !x.c[0]) return new BigNumber2(x);
            if (MODULO_MODE == 9) {
                // Euclidian division: q = sign(y) * floor(x / abs(y))
                // r = x - qy    where  0 <= r < abs(y)
                s = y.s;
                y.s = 1;
                q = div(x, y, 0, 3);
                y.s = s;
                q.s *= s;
            } else q = div(x, y, 0, MODULO_MODE);
            y = x.minus(q.times(y));
            // To match JavaScript %, ensure sign of zero is sign of dividend.
            if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;
            return y;
        };
        /*
     *  n * 0 = 0
     *  n * N = N
     *  n * I = I
     *  0 * n = 0
     *  0 * 0 = 0
     *  0 * N = N
     *  0 * I = N
     *  N * n = N
     *  N * 0 = N
     *  N * N = N
     *  N * I = N
     *  I * n = I
     *  I * 0 = N
     *  I * N = N
     *  I * I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
     * of BigNumber(y, b).
     */ P.multipliedBy = P.times = function(y, b) {
            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber2(y, b)).c;
            // Either NaN, ±Infinity or ±0?
            if (!xc || !yc || !xc[0] || !yc[0]) {
                // Return NaN if either is NaN, or one is 0 and the other is Infinity.
                if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) y.c = y.e = y.s = null;
                else {
                    y.s *= x.s;
                    // Return ±Infinity if either is ±Infinity.
                    if (!xc || !yc) y.c = y.e = null;
                    else {
                        y.c = [
                            0
                        ];
                        y.e = 0;
                    }
                }
                return y;
            }
            e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
            y.s *= x.s;
            xcL = xc.length;
            ycL = yc.length;
            // Ensure xc points to longer array and xcL to its length.
            if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;
            // Initialise the result array with zeros.
            for(i = xcL + ycL, zc = []; i--; zc.push(0));
            base = BASE;
            sqrtBase = SQRT_BASE;
            for(i = ycL; (--i) >= 0;){
                c = 0;
                ylo = yc[i] % sqrtBase;
                yhi = yc[i] / sqrtBase | 0;
                for(k = xcL, j = i + k; j > i;){
                    xlo = xc[--k] % sqrtBase;
                    xhi = xc[k] / sqrtBase | 0;
                    m = yhi * xlo + xhi * ylo;
                    xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
                    c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
                    zc[j--] = xlo % base;
                }
                zc[j] = c;
            }
            if (c) ++e;
            else zc.splice(0, 1);
            return normalise(y, zc, e);
        };
        /*
     * Return a new BigNumber whose value is the value of this BigNumber negated,
     * i.e. multiplied by -1.
     */ P.negated = function() {
            var x = new BigNumber2(this);
            x.s = -x.s || null;
            return x;
        };
        /*
     *  n + 0 = n
     *  n + N = N
     *  n + I = I
     *  0 + n = n
     *  0 + 0 = 0
     *  0 + N = N
     *  0 + I = I
     *  N + n = N
     *  N + 0 = N
     *  N + N = N
     *  N + I = N
     *  I + n = I
     *  I + 0 = I
     *  I + N = N
     *  I + I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
     * BigNumber(y, b).
     */ P.plus = function(y, b) {
            var t, x = this, a = x.s;
            y = new BigNumber2(y, b);
            b = y.s;
            // Either NaN?
            if (!a || !b) return new BigNumber2(NaN);
            // Signs differ?
            if (a != b) {
                y.s = -b;
                return x.minus(y);
            }
            var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
            if (!xe || !ye) {
                // Return ±Infinity if either ±Infinity.
                if (!xc || !yc) return new BigNumber2(a / 0);
                // Either zero?
                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber2(xc[0] ? x : a * 0);
            }
            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();
            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
            if (a = xe - ye) {
                if (a > 0) {
                    ye = xe;
                    t = yc;
                } else {
                    a = -a;
                    t = xc;
                }
                t.reverse();
                for(; a--; t.push(0));
                t.reverse();
            }
            a = xc.length;
            b = yc.length;
            // Point xc to the longer array, and b to the shorter length.
            if (a - b < 0) t = yc, yc = xc, xc = t, b = a;
            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
            for(a = 0; b;){
                a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
            }
            if (a) {
                xc = [
                    a
                ].concat(xc);
                ++ye;
            }
            // No need to check for zero, as +x + +y != 0 && -x + -y != 0
            // ye = MAX_EXP + 1 possible
            return normalise(y, xc, ye);
        };
        /*
     * If sd is undefined or null or true or false, return the number of significant digits of
     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     * If sd is true include integer-part trailing zeros in the count.
     *
     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
     *                     boolean: whether to count integer-part trailing zeros: true or false.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */ P.precision = P.sd = function(sd, rm) {
            var c, n, v, x = this;
            if (sd != null && sd !== !!sd) {
                intCheck(sd, 1, MAX);
                if (rm == null) rm = ROUNDING_MODE;
                else intCheck(rm, 0, 8);
                return round(new BigNumber2(x), sd, rm);
            }
            if (!(c = x.c)) return null;
            v = c.length - 1;
            n = v * LOG_BASE + 1;
            if (v = c[v]) {
                // Subtract the number of trailing zeros of the last element.
                for(; v % 10 == 0; v /= 10, n--);
                // Add the number of digits of the first element.
                for(v = c[0]; v >= 10; v /= 10, n++);
            }
            if (sd && x.e + 1 > n) n = x.e + 1;
            return n;
        };
        /*
     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
     *
     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
     */ P.shiftedBy = function(k) {
            intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
            return this.times('1e' + k);
        };
        /*
     *  sqrt(-n) =  N
     *  sqrt(N) =  N
     *  sqrt(-I) =  N
     *  sqrt(I) =  I
     *  sqrt(0) =  0
     *  sqrt(-0) = -0
     *
     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */ P.squareRoot = P.sqrt = function() {
            var m, n, r, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2('0.5');
            // Negative/NaN/Infinity/zero?
            if (s !== 1 || !c || !c[0]) return new BigNumber2(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
            // Initial estimate.
            s = Math.sqrt(+valueOf(x));
            // Math.sqrt underflow/overflow?
            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
            if (s == 0 || s == 1 / 0) {
                n = coeffToString(c);
                if ((n.length + e) % 2 == 0) n += '0';
                s = Math.sqrt(+n);
                e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
                if (s == 1 / 0) n = '5e' + e;
                else {
                    n = s.toExponential();
                    n = n.slice(0, n.indexOf('e') + 1) + e;
                }
                r = new BigNumber2(n);
            } else r = new BigNumber2(s + '');
            // Check for zero.
            // r could be zero if MIN_EXP is changed after the this value was created.
            // This would cause a division by zero (x/t) and hence Infinity below, which would cause
            // coeffToString to throw.
            if (r.c[0]) {
                e = r.e;
                s = e + dp;
                if (s < 3) s = 0;
                // Newton-Raphson iteration.
                for(;;){
                    t = r;
                    r = half.times(t.plus(div(x, t, dp, 1)));
                    if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
                        // The exponent of r may here be one less than the final result exponent,
                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                        // are indexed correctly.
                        if (r.e < e) --s;
                        n = n.slice(s - 3, s + 1);
                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                        // iteration.
                        if (n == '9999' || !rep && n == '4999') {
                            // On the first iteration only, check to see if rounding up gives the
                            // exact result as the nines may infinitely repeat.
                            if (!rep) {
                                round(t, t.e + DECIMAL_PLACES + 2, 0);
                                if (t.times(t).eq(x)) {
                                    r = t;
                                    break;
                                }
                            }
                            dp += 4;
                            s += 4;
                            rep = 1;
                        } else {
                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                            // result. If not, then there are further digits and m will be truthy.
                            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
                                // Truncate to the first rounding digit.
                                round(r, r.e + DECIMAL_PLACES + 2, 1);
                                m = !r.times(r).eq(x);
                            }
                            break;
                        }
                    }
                }
            }
            return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };
        /*
     * Return a string representing the value of this BigNumber in exponential notation and
     * rounded using ROUNDING_MODE to dp fixed decimal places.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */ P.toExponential = function(dp, rm) {
            if (dp != null) {
                intCheck(dp, 0, MAX);
                dp++;
            }
            return format(this, dp, rm, 1);
        };
        /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounding
     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
     * but e.g. (-0.00001).toFixed(0) is '-0'.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */ P.toFixed = function(dp, rm) {
            if (dp != null) {
                intCheck(dp, 0, MAX);
                dp = dp + this.e + 1;
            }
            return format(this, dp, rm);
        };
        /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounded
     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
     * of the format or FORMAT object (see BigNumber.set).
     *
     * The formatting object may contain some or all of the properties shown below.
     *
     * FORMAT = {
     *   prefix: '',
     *   groupSize: 3,
     *   secondaryGroupSize: 0,
     *   groupSeparator: ',',
     *   decimalSeparator: '.',
     *   fractionGroupSize: 0,
     *   fractionGroupSeparator: '\xA0',      // non-breaking space
     *   suffix: ''
     * };
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     * [format] {object} Formatting options. See FORMAT pbject above.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     * '[BigNumber Error] Argument not an object: {format}'
     */ P.toFormat = function(dp, rm, format1) {
            var str, x = this;
            if (format1 == null) {
                if (dp != null && rm && typeof rm == 'object') {
                    format1 = rm;
                    rm = null;
                } else if (dp && typeof dp == 'object') {
                    format1 = dp;
                    dp = rm = null;
                } else format1 = FORMAT;
            } else if (typeof format1 != 'object') throw Error(bignumberError + 'Argument not an object: ' + format1);
            str = x.toFixed(dp, rm);
            if (x.c) {
                var i, arr = str.split('.'), g1 = +format1.groupSize, g2 = +format1.secondaryGroupSize, groupSeparator = format1.groupSeparator || '', intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
                if (g2) i = g1, g1 = g2, g2 = i, len -= i;
                if (g1 > 0 && len > 0) {
                    i = len % g1 || g1;
                    intPart = intDigits.substr(0, i);
                    for(; i < len; i += g1)intPart += groupSeparator + intDigits.substr(i, g1);
                    if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
                    if (isNeg) intPart = '-' + intPart;
                }
                str = fractionPart ? intPart + (format1.decimalSeparator || '') + ((g2 = +format1.fractionGroupSize) ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'), '$&' + (format1.fractionGroupSeparator || '')) : fractionPart) : intPart;
            }
            return (format1.prefix || '') + str + (format1.suffix || '');
        };
        /*
     * Return an array of two BigNumbers representing the value of this BigNumber as a simple
     * fraction with an integer numerator and an integer denominator.
     * The denominator will be a positive non-zero value less than or equal to the specified
     * maximum denominator. If a maximum denominator is not specified, the denominator will be
     * the lowest value necessary to represent the number exactly.
     *
     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
     *
     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
     */ P.toFraction = function(md) {
            var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s, x = this, xc = x.c;
            if (md != null) {
                n = new BigNumber2(md);
                // Throw if md is less than one or is not an integer, unless it is Infinity.
                if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) throw Error(bignumberError + 'Argument ' + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
            }
            if (!xc) return new BigNumber2(x);
            d = new BigNumber2(ONE);
            n1 = d0 = new BigNumber2(ONE);
            d1 = n0 = new BigNumber2(ONE);
            s = coeffToString(xc);
            // Determine initial denominator.
            // d is a power of 10 and the minimum max denominator that specifies the value exactly.
            e = d.e = s.length - x.e - 1;
            d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
            md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
            exp = MAX_EXP;
            MAX_EXP = 1 / 0;
            n = new BigNumber2(s);
            // n0 = d1 = 0
            n0.c[0] = 0;
            for(;;){
                q = div(n, d, 0, 1);
                d2 = d0.plus(q.times(d1));
                if (d2.comparedTo(md) == 1) break;
                d0 = d1;
                d1 = d2;
                n1 = n0.plus(q.times(d2 = n1));
                n0 = d2;
                d = n.minus(q.times(d2 = d));
                n = d2;
            }
            d2 = div(md.minus(d0), d1, 0, 1);
            n0 = n0.plus(d2.times(n1));
            d0 = d0.plus(d2.times(d1));
            n0.s = n1.s = x.s;
            e = e * 2;
            // Determine which fraction is closer to x, n0/d0 or n1/d1
            r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [
                n1,
                d1
            ] : [
                n0,
                d0
            ];
            MAX_EXP = exp;
            return r;
        };
        /*
     * Return the value of this BigNumber converted to a number primitive.
     */ P.toNumber = function() {
            return +valueOf(this);
        };
        /*
     * Return a string representing the value of this BigNumber rounded to sd significant digits
     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
     * necessary to represent the integer part of the value in fixed-point notation, then use
     * exponential notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */ P.toPrecision = function(sd, rm) {
            if (sd != null) intCheck(sd, 1, MAX);
            return format(this, sd, rm, 2);
        };
        /*
     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
     * TO_EXP_NEG, return exponential notation.
     *
     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
     *
     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
     */ P.toString = function(b) {
            var str, n = this, s = n.s, e = n.e;
            // Infinity or NaN?
            if (e === null) {
                if (s) {
                    str = 'Infinity';
                    if (s < 0) str = '-' + str;
                } else str = 'NaN';
            } else {
                if (b == null) str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, '0');
                else if (b === 10) {
                    n = round(new BigNumber2(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
                    str = toFixedPoint(coeffToString(n.c), n.e, '0');
                } else {
                    intCheck(b, 2, ALPHABET.length, 'Base');
                    str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
                }
                if (s < 0 && n.c[0]) str = '-' + str;
            }
            return str;
        };
        /*
     * Return as toString, but do not accept a base argument, and include the minus sign for
     * negative zero.
     */ P.valueOf = P.toJSON = function() {
            return valueOf(this);
        };
        P._isBigNumber = true;
        if (configObject != null) BigNumber2.set(configObject);
        return BigNumber2;
    }
    // PRIVATE HELPER FUNCTIONS
    // These functions don't need access to variables,
    // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.
    function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
    }
    // Return a coefficient array as a string of base 10 digits.
    function coeffToString(a) {
        var s, z, i = 1, j = a.length, r = a[0] + '';
        for(; i < j;){
            s = a[i++] + '';
            z = LOG_BASE - s.length;
            for(; z--; s = '0' + s);
            r += s;
        }
        // Determine trailing zeros.
        for(j = r.length; r.charCodeAt(--j) === 48;);
        return r.slice(0, j + 1 || 1);
    }
    // Compare the value of BigNumbers x and y.
    function compare(x, y) {
        var a, b, xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;
        // Either NaN?
        if (!i || !j) return null;
        a = xc && !xc[0];
        b = yc && !yc[0];
        // Either zero?
        if (a || b) return a ? b ? 0 : -j : i;
        // Signs differ?
        if (i != j) return i;
        a = i < 0;
        b = k == l;
        // Either Infinity?
        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;
        // Compare exponents.
        if (!b) return k > l ^ a ? 1 : -1;
        j = (k = xc.length) < (l = yc.length) ? k : l;
        // Compare digit by digit.
        for(i = 0; i < j; i++)if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;
        // Compare lengths.
        return k == l ? 0 : k > l ^ a ? 1 : -1;
    }
    /*
   * Check that n is a primitive number, an integer, and in range, otherwise throw.
   */ function intCheck(n, min, max, name) {
        if (n < min || n > max || n !== mathfloor(n)) throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + String(n));
    }
    // Assumes finite n.
    function isOdd(n) {
        var k = n.c.length - 1;
        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
    }
    function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;
    }
    function toFixedPoint(str, e, z) {
        var len, zs;
        // Negative exponent?
        if (e < 0) {
            // Prepend zeros.
            for(zs = z + '.'; ++e; zs += z);
            str = zs + str;
        // Positive exponent
        } else {
            len = str.length;
            // Append zeros.
            if ((++e) > len) {
                for(zs = z, e -= len; --e; zs += z);
                str += zs;
            } else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
        }
        return str;
    }
    // EXPORT
    BigNumber1 = clone();
    BigNumber1['default'] = BigNumber1.BigNumber = BigNumber1;
    // AMD.
    if (typeof define == 'function' && define.amd) define(function() {
        return BigNumber1;
    });
    else if (typeof module != 'undefined' && module.exports) module.exports = BigNumber1;
    else {
        if (!globalObject) globalObject = typeof self != 'undefined' && self ? self : window;
        globalObject.BigNumber = BigNumber1;
    }
})(this);

},{}],"lOLLF":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var DivisionRing = function(Ring0, recip) {
    this.Ring0 = Ring0;
    this.recip = recip;
};
_c = DivisionRing;
var recip = function(dict) {
    return dict.recip;
};
var rightDiv = function(dictDivisionRing) {
    return function(a) {
        return function(b) {
            return Data_Semiring.mul(dictDivisionRing.Ring0().Semiring0())(a)(recip(dictDivisionRing)(b));
        };
    };
};
var leftDiv = function(dictDivisionRing) {
    return function(a) {
        return function(b) {
            return Data_Semiring.mul(dictDivisionRing.Ring0().Semiring0())(recip(dictDivisionRing)(b))(a);
        };
    };
};
var divisionringNumber = new DivisionRing(function() {
    return Data_Ring.ringNumber;
}, function(x) {
    return 1 / x;
});
module.exports = {
    DivisionRing: DivisionRing,
    recip: recip,
    leftDiv: leftDiv,
    rightDiv: rightDiv,
    divisionringNumber: divisionringNumber
};
var _c;
$RefreshReg$(_c, "DivisionRing");

},{"../Data.Ring/index.js":"2x2oG","../Data.Semiring/index.js":"39btI"}],"69cE7":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var runFn1 = function(f) {
    return f;
};
var mkFn1 = function(f) {
    return f;
};
module.exports = {
    mkFn1: mkFn1,
    runFn1: runFn1,
    mkFn0: $foreign.mkFn0,
    mkFn2: $foreign.mkFn2,
    mkFn3: $foreign.mkFn3,
    mkFn4: $foreign.mkFn4,
    mkFn5: $foreign.mkFn5,
    mkFn6: $foreign.mkFn6,
    mkFn7: $foreign.mkFn7,
    mkFn8: $foreign.mkFn8,
    mkFn9: $foreign.mkFn9,
    mkFn10: $foreign.mkFn10,
    runFn0: $foreign.runFn0,
    runFn2: $foreign.runFn2,
    runFn3: $foreign.runFn3,
    runFn4: $foreign.runFn4,
    runFn5: $foreign.runFn5,
    runFn6: $foreign.runFn6,
    runFn7: $foreign.runFn7,
    runFn8: $foreign.runFn8,
    runFn9: $foreign.runFn9,
    runFn10: $foreign.runFn10
};

},{"./foreign.js":"4sQnn"}],"4sQnn":[function(require,module,exports) {
"use strict";
// module Data.Function.Uncurried
exports.mkFn0 = function(fn) {
    return function() {
        return fn({
        });
    };
};
exports.mkFn2 = function(fn) {
    /* jshint maxparams: 2 */ return function(a, b) {
        return fn(a)(b);
    };
};
exports.mkFn3 = function(fn) {
    /* jshint maxparams: 3 */ return function(a, b, c) {
        return fn(a)(b)(c);
    };
};
exports.mkFn4 = function(fn) {
    /* jshint maxparams: 4 */ return function(a, b, c, d) {
        return fn(a)(b)(c)(d);
    };
};
exports.mkFn5 = function(fn) {
    /* jshint maxparams: 5 */ return function(a, b, c, d, e) {
        return fn(a)(b)(c)(d)(e);
    };
};
exports.mkFn6 = function(fn) {
    /* jshint maxparams: 6 */ return function(a, b, c, d, e, f) {
        return fn(a)(b)(c)(d)(e)(f);
    };
};
exports.mkFn7 = function(fn) {
    /* jshint maxparams: 7 */ return function(a, b, c, d, e, f, g) {
        return fn(a)(b)(c)(d)(e)(f)(g);
    };
};
exports.mkFn8 = function(fn) {
    /* jshint maxparams: 8 */ return function(a, b, c, d, e, f, g, h) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h);
    };
};
exports.mkFn9 = function(fn) {
    /* jshint maxparams: 9 */ return function(a, b, c, d, e, f, g, h, i) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
    };
};
exports.mkFn10 = function(fn) {
    /* jshint maxparams: 10 */ return function(a, b, c, d, e, f, g, h, i, j) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
    };
};
exports.runFn0 = function(fn) {
    return fn();
};
exports.runFn2 = function(fn) {
    return function(a) {
        return function(b) {
            return fn(a, b);
        };
    };
};
exports.runFn3 = function(fn) {
    return function(a) {
        return function(b) {
            return function(c) {
                return fn(a, b, c);
            };
        };
    };
};
exports.runFn4 = function(fn) {
    return function(a) {
        return function(b) {
            return function(c) {
                return function(d) {
                    return fn(a, b, c, d);
                };
            };
        };
    };
};
exports.runFn5 = function(fn) {
    return function(a) {
        return function(b) {
            return function(c) {
                return function(d) {
                    return function(e) {
                        return fn(a, b, c, d, e);
                    };
                };
            };
        };
    };
};
exports.runFn6 = function(fn) {
    return function(a) {
        return function(b) {
            return function(c) {
                return function(d) {
                    return function(e) {
                        return function(f) {
                            return fn(a, b, c, d, e, f);
                        };
                    };
                };
            };
        };
    };
};
exports.runFn7 = function(fn) {
    return function(a) {
        return function(b) {
            return function(c) {
                return function(d) {
                    return function(e) {
                        return function(f) {
                            return function(g) {
                                return fn(a, b, c, d, e, f, g);
                            };
                        };
                    };
                };
            };
        };
    };
};
exports.runFn8 = function(fn) {
    return function(a) {
        return function(b) {
            return function(c) {
                return function(d) {
                    return function(e) {
                        return function(f) {
                            return function(g) {
                                return function(h) {
                                    return fn(a, b, c, d, e, f, g, h);
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
exports.runFn9 = function(fn) {
    return function(a) {
        return function(b) {
            return function(c) {
                return function(d) {
                    return function(e) {
                        return function(f) {
                            return function(g) {
                                return function(h) {
                                    return function(i) {
                                        return fn(a, b, c, d, e, f, g, h, i);
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
exports.runFn10 = function(fn) {
    return function(a) {
        return function(b) {
            return function(c) {
                return function(d) {
                    return function(e) {
                        return function(f) {
                            return function(g) {
                                return function(h) {
                                    return function(i) {
                                        return function(j) {
                                            return fn(a, b, c, d, e, f, g, h, i, j);
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};

},{}],"2rL8E":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Maybe = require("../Data.Maybe/index.js");
var Inl = function() {
    function Inl1(value0) {
        this.value0 = value0;
    }
    Inl1.create = function(value0) {
        return new Inl1(value0);
    };
    return Inl1;
}();
var Inr = function() {
    function Inr1(value0) {
        this.value0 = value0;
    }
    Inr1.create = function(value0) {
        return new Inr1(value0);
    };
    return Inr1;
}();
var Product = function() {
    function Product1(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }
    Product1.create = function(value0) {
        return function(value1) {
            return new Product1(value0, value1);
        };
    };
    return Product1;
}();
var NoArguments = function() {
    function NoArguments1() {
    }
    NoArguments1.value = new NoArguments1();
    return NoArguments1;
}();
var Constructor = function(x) {
    return x;
};
_c = Constructor;
var Argument = function(x) {
    return x;
};
_c1 = Argument;
var Generic = function(from, to) {
    this.from = from;
    this.to = to;
};
_c2 = Generic;
var to = function(dict) {
    return dict.to;
};
var genericMaybe = new Generic(function(v) {
    if (v instanceof Data_Maybe.Nothing) return new Inl(NoArguments.value);
    if (v instanceof Data_Maybe.Just) return new Inr(v.value0);
    throw new Error("Failed pattern match at Data.Generic.Rep (line 40, column 1 - line 47, column 49): " + [
        v.constructor.name
    ]);
}, function(v) {
    if (v instanceof Inl) return Data_Maybe.Nothing.value;
    if (v instanceof Inr) return new Data_Maybe.Just(v.value0);
    throw new Error("Failed pattern match at Data.Generic.Rep (line 40, column 1 - line 47, column 49): " + [
        v.constructor.name
    ]);
});
var from = function(dict) {
    return dict.from;
};
module.exports = {
    Generic: Generic,
    to: to,
    from: from,
    NoArguments: NoArguments,
    Inl: Inl,
    Inr: Inr,
    Product: Product,
    Constructor: Constructor,
    Argument: Argument,
    genericMaybe: genericMaybe
};
var _c, _c1, _c2;
$RefreshReg$(_c, "Constructor");
$RefreshReg$(_c1, "Argument");
$RefreshReg$(_c2, "Generic");

},{"../Data.Maybe/index.js":"ePH81"}],"7DHYL":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");
var Data_DivisionRing = require("../Data.DivisionRing/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Global = require("../Global/index.js");
var $$Math = require("../Math/index.js");
var Radix = function(x) {
    return x;
};
_c = Radix;
var Even = function() {
    function Even1() {
    }
    Even1.value = new Even1();
    return Even1;
}();
var Odd = function() {
    function Odd1() {
    }
    Odd1.value = new Odd1();
    return Odd1;
}();
var showParity = new Data_Show.Show(function(v) {
    if (v instanceof Even) return "Even";
    if (v instanceof Odd) return "Odd";
    throw new Error("Failed pattern match at Data.Int (line 112, column 1 - line 114, column 19): " + [
        v.constructor.name
    ]);
});
var radix = function(n) {
    if (n >= 2 && n <= 36) return new Data_Maybe.Just(n);
    if (Data_Boolean.otherwise) return Data_Maybe.Nothing.value;
    throw new Error("Failed pattern match at Data.Int (line 193, column 1 - line 193, column 28): " + [
        n.constructor.name
    ]);
};
var odd = function(x) {
    return (x & 1) !== 0;
};
var octal = 8;
var hexadecimal = 16;
var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var fromString = fromStringAs(10);
var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var unsafeClamp = function(x) {
    if (x === Global.infinity) return 0;
    if (x === -Global.infinity) return 0;
    if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) return Data_Bounded.top(Data_Bounded.boundedInt);
    if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) return Data_Bounded.bottom(Data_Bounded.boundedInt);
    if (Data_Boolean.otherwise) return Data_Maybe.fromMaybe(0)(fromNumber(x));
    throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [
        x.constructor.name
    ]);
};
var round = function($23) {
    return unsafeClamp($$Math.round($23));
};
var floor = function($24) {
    return unsafeClamp($$Math.floor($24));
};
var even = function(x) {
    return (x & 1) === 0;
};
var parity = function(n) {
    var $14 = even(n);
    if ($14) return Even.value;
    return Odd.value;
};
var eqParity = new Data_Eq.Eq(function(x) {
    return function(y) {
        if (x instanceof Even && y instanceof Even) return true;
        if (x instanceof Odd && y instanceof Odd) return true;
        return false;
    };
});
var ordParity = new Data_Ord.Ord(function() {
    return eqParity;
}, function(x) {
    return function(y) {
        if (x instanceof Even && y instanceof Even) return Data_Ordering.EQ.value;
        if (x instanceof Even) return Data_Ordering.LT.value;
        if (y instanceof Even) return Data_Ordering.GT.value;
        if (x instanceof Odd && y instanceof Odd) return Data_Ordering.EQ.value;
        throw new Error("Failed pattern match at Data.Int (line 110, column 1 - line 110, column 40): " + [
            x.constructor.name,
            y.constructor.name
        ]);
    };
});
var semiringParity = new Data_Semiring.Semiring(function(x) {
    return function(y) {
        var $19 = Data_Eq.eq(eqParity)(x)(y);
        if ($19) return Even.value;
        return Odd.value;
    };
}, function(v) {
    return function(v1) {
        if (v instanceof Odd && v1 instanceof Odd) return Odd.value;
        return Even.value;
    };
}, Odd.value, Even.value);
var ringParity = new Data_Ring.Ring(function() {
    return semiringParity;
}, Data_Semiring.add(semiringParity));
var divisionRingParity = new Data_DivisionRing.DivisionRing(function() {
    return ringParity;
}, Control_Category.identity(Control_Category.categoryFn));
var decimal = 10;
var commutativeRingParity = new Data_CommutativeRing.CommutativeRing(function() {
    return ringParity;
});
var euclideanRingParity = new Data_EuclideanRing.EuclideanRing(function() {
    return commutativeRingParity;
}, function(v) {
    if (v instanceof Even) return 0;
    if (v instanceof Odd) return 1;
    throw new Error("Failed pattern match at Data.Int (line 132, column 1 - line 136, column 17): " + [
        v.constructor.name
    ]);
}, function(x) {
    return function(v) {
        return x;
    };
}, function(v) {
    return function(v1) {
        return Even.value;
    };
});
var ceil = function($25) {
    return unsafeClamp($$Math.ceil($25));
};
var boundedParity = new Data_Bounded.Bounded(function() {
    return ordParity;
}, Even.value, Odd.value);
var binary = 2;
var base36 = 36;
module.exports = {
    fromNumber: fromNumber,
    ceil: ceil,
    floor: floor,
    round: round,
    fromString: fromString,
    radix: radix,
    binary: binary,
    octal: octal,
    decimal: decimal,
    hexadecimal: hexadecimal,
    base36: base36,
    fromStringAs: fromStringAs,
    Even: Even,
    Odd: Odd,
    parity: parity,
    even: even,
    odd: odd,
    eqParity: eqParity,
    ordParity: ordParity,
    showParity: showParity,
    boundedParity: boundedParity,
    semiringParity: semiringParity,
    ringParity: ringParity,
    commutativeRingParity: commutativeRingParity,
    euclideanRingParity: euclideanRingParity,
    divisionRingParity: divisionRingParity,
    toNumber: $foreign.toNumber,
    toStringAs: $foreign.toStringAs,
    quot: $foreign.quot,
    rem: $foreign.rem,
    pow: $foreign.pow
};
var _c;
$RefreshReg$(_c, "Radix");

},{"./foreign.js":"eMOBE","../Control.Category/index.js":"dfcPK","../Data.Boolean/index.js":"lv1qw","../Data.Bounded/index.js":"jzt4h","../Data.CommutativeRing/index.js":"2q7tT","../Data.DivisionRing/index.js":"lOLLF","../Data.Eq/index.js":"c3b8F","../Data.EuclideanRing/index.js":"fTU7A","../Data.Maybe/index.js":"ePH81","../Data.Ord/index.js":"f14nh","../Data.Ordering/index.js":"lEtyd","../Data.Ring/index.js":"2x2oG","../Data.Semiring/index.js":"39btI","../Data.Show/index.js":"b6tNW","../Global/index.js":"1mjIx","../Math/index.js":"aCTFh"}],"eMOBE":[function(require,module,exports) {
"use strict";
exports.fromNumberImpl = function(just) {
    return function(nothing) {
        return function(n) {
            /* jshint bitwise: false */ return (n | 0) === n ? just(n) : nothing;
        };
    };
};
exports.toNumber = function(n) {
    return n;
};
exports.fromStringAsImpl = function(just) {
    return function(nothing) {
        return function(radix) {
            var digits;
            if (radix < 11) digits = "[0-" + (radix - 1).toString() + "]";
            else if (radix === 11) digits = "[0-9a]";
            else digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
            var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");
            return function(s) {
                /* jshint bitwise: false */ if (pattern.test(s)) {
                    var i = parseInt(s, radix);
                    return (i | 0) === i ? just(i) : nothing;
                } else return nothing;
            };
        };
    };
};
exports.toStringAs = function(radix) {
    return function(i) {
        return i.toString(radix);
    };
};
exports.quot = function(x) {
    return function(y) {
        /* jshint bitwise: false */ return x / y | 0;
    };
};
exports.rem = function(x) {
    return function(y) {
        return x % y;
    };
};
exports.pow = function(x) {
    return function(y) {
        /* jshint bitwise: false */ return Math.pow(x, y) | 0;
    };
};

},{}],"1mjIx":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var toPrecision = function(digits) {
    return function(n) {
        return $foreign["_toPrecision"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, digits, n);
    };
};
var toFixed = function(digits) {
    return function(n) {
        return $foreign["_toFixed"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, digits, n);
    };
};
var toExponential = function(digits) {
    return function(n) {
        return $foreign["_toExponential"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, digits, n);
    };
};
var $$encodeURIComponent = function(s) {
    return $foreign["_encodeURIComponent"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, s);
};
var $$encodeURI = function(s) {
    return $foreign["_encodeURI"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, s);
};
var $$decodeURIComponent = function(s) {
    return $foreign["_decodeURIComponent"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, s);
};
var $$decodeURI = function(s) {
    return $foreign["_decodeURI"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, s);
};
module.exports = {
    toFixed: toFixed,
    toExponential: toExponential,
    toPrecision: toPrecision,
    "decodeURI": $$decodeURI,
    "encodeURI": $$encodeURI,
    "decodeURIComponent": $$decodeURIComponent,
    "encodeURIComponent": $$encodeURIComponent,
    nan: $foreign.nan,
    "isNaN": $foreign["isNaN"],
    infinity: $foreign.infinity,
    "isFinite": $foreign["isFinite"],
    readInt: $foreign.readInt,
    readFloat: $foreign.readFloat
};

},{"./foreign.js":"lmP55","../Data.Function/index.js":"cuwEt","../Data.Maybe/index.js":"ePH81"}],"lmP55":[function(require,module,exports) {
/* globals exports */ "use strict";
exports.nan = NaN;
exports.isNaN = isNaN;
exports.infinity = Infinity;
exports.isFinite = isFinite;
exports.readInt = function(radix) {
    return function(n) {
        return parseInt(n, radix);
    };
};
exports.readFloat = parseFloat;
var formatNumber = function(format) {
    return function(fail, succ, digits, n) {
        try {
            return succ(n[format](digits));
        } catch (e) {
            return fail(e.message);
        }
    };
};
exports._toFixed = formatNumber("toFixed");
exports._toExponential = formatNumber("toExponential");
exports._toPrecision = formatNumber("toPrecision");
var encdecURI = function(encdec) {
    return function(fail, succ, s) {
        try {
            return succ(encdec(s));
        } catch (e) {
            return fail(e.message);
        }
    };
};
exports._decodeURI = encdecURI(decodeURI);
exports._encodeURI = encdecURI(encodeURI);
exports._decodeURIComponent = encdecURI(decodeURIComponent);
exports._encodeURIComponent = encdecURI(encodeURIComponent);

},{}],"aCTFh":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    abs: $foreign.abs,
    acos: $foreign.acos,
    asin: $foreign.asin,
    atan: $foreign.atan,
    atan2: $foreign.atan2,
    ceil: $foreign.ceil,
    cos: $foreign.cos,
    exp: $foreign.exp,
    floor: $foreign.floor,
    log: $foreign.log,
    max: $foreign.max,
    min: $foreign.min,
    pow: $foreign.pow,
    round: $foreign.round,
    sin: $foreign.sin,
    sqrt: $foreign.sqrt,
    tan: $foreign.tan,
    trunc: $foreign.trunc,
    remainder: $foreign.remainder,
    e: $foreign.e,
    ln2: $foreign.ln2,
    ln10: $foreign.ln10,
    log2e: $foreign.log2e,
    log10e: $foreign.log10e,
    pi: $foreign.pi,
    tau: $foreign.tau,
    sqrt1_2: $foreign.sqrt1_2,
    sqrt2: $foreign.sqrt2
};

},{"./foreign.js":"kz1Jg"}],"kz1Jg":[function(require,module,exports) {
"use strict";
// module Math
exports.abs = Math.abs;
exports.acos = Math.acos;
exports.asin = Math.asin;
exports.atan = Math.atan;
exports.atan2 = function(y) {
    return function(x) {
        return Math.atan2(y, x);
    };
};
exports.ceil = Math.ceil;
exports.cos = Math.cos;
exports.exp = Math.exp;
exports.floor = Math.floor;
exports.trunc = Math.trunc || function(n) {
    return n < 0 ? Math.ceil(n) : Math.floor(n);
};
exports.log = Math.log;
exports.max = function(n1) {
    return function(n2) {
        return Math.max(n1, n2);
    };
};
exports.min = function(n1) {
    return function(n2) {
        return Math.min(n1, n2);
    };
};
exports.pow = function(n) {
    return function(p) {
        return Math.pow(n, p);
    };
};
exports.remainder = function(n) {
    return function(m) {
        return n % m;
    };
};
exports.round = Math.round;
exports.sin = Math.sin;
exports.sqrt = Math.sqrt;
exports.tan = Math.tan;
exports.e = Math.E;
exports.ln2 = Math.LN2;
exports.ln10 = Math.LN10;
exports.log2e = Math.LOG2E;
exports.log10e = Math.LOG10E;
exports.pi = Math.PI;
exports.tau = 2 * Math.PI;
exports.sqrt1_2 = Math.SQRT1_2;
exports.sqrt2 = Math.SQRT2;

},{}],"6M6MW":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Tuple_Nested = require("../Data.Tuple.Nested/index.js");
var Data_Typelevel_Num_Reps = require("../Data.Typelevel.Num.Reps/index.js");
var Data_Typelevel_Num_Sets = require("../Data.Typelevel.Num.Sets/index.js");
var TupleSize = {
};
var ShowNat = {
};
var tupleSizeT9 = TupleSize;
var tupleSizeT8 = TupleSize;
var tupleSizeT7 = TupleSize;
var tupleSizeT6 = TupleSize;
var tupleSizeT5 = TupleSize;
var tupleSizeT4 = TupleSize;
var tupleSizeT3 = TupleSize;
var tupleSizeT2 = TupleSize;
var showNatD8 = ShowNat;
var showNatD7 = ShowNat;
var showNatD6 = ShowNat;
var showNatD5 = ShowNat;
var showNatD4 = ShowNat;
var showNatD3 = ShowNat;
var showNatD2 = ShowNat;
var showNatD1 = ShowNat;
var showNatD0 = ShowNat;
var prj = function(dictTupleSize) {
    return function(dictLt) {
        return function(dictShowNat) {
            return function(dictListToRow) {
                return function(dictCons) {
                    return function(dictNat) {
                        return function(n) {
                            return function(t) {
                                return $foreign.prjImpl(Data_Typelevel_Num_Sets.toInt(dictNat)(n))(t);
                            };
                        };
                    };
                };
            };
        };
    };
};
var xt = function(t) {
    return new Data_Tuple.Tuple(prj()()()()()(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Reps.d0)(t), prj()()()()()(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Reps.d1)(t));
};
var xt2 = function(t) {
    return Data_Tuple_Nested.tuple2(prj()()()()()(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Reps.d0)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Reps.d1)(t));
};
var xt3 = function(t) {
    return Data_Tuple_Nested.tuple3(prj()()()()()(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Reps.d0)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Reps.d1)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Reps.d2)(t));
};
var xt4 = function(t) {
    return Data_Tuple_Nested.tuple4(prj()()()()()(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Reps.d0)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Reps.d1)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Reps.d2)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Reps.d3)(t));
};
var xt5 = function(t) {
    return Data_Tuple_Nested.tuple5(prj()()()()()(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Reps.d0)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Reps.d1)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Reps.d2)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Reps.d3)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Reps.d4)(t));
};
var xt6 = function(t) {
    return Data_Tuple_Nested.tuple6(prj()()()()()(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Reps.d0)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Reps.d1)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Reps.d2)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Reps.d3)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Reps.d4)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD5)(Data_Typelevel_Num_Reps.d5)(t));
};
var xt7 = function(t) {
    return Data_Tuple_Nested.tuple7(prj()()()()()(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Reps.d0)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Reps.d1)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Reps.d2)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Reps.d3)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Reps.d4)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD5)(Data_Typelevel_Num_Reps.d5)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD6)(Data_Typelevel_Num_Reps.d6)(t));
};
var xt8 = function(t) {
    return Data_Tuple_Nested.tuple8(prj()()()()()(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Reps.d0)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Reps.d1)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Reps.d2)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Reps.d3)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Reps.d4)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD5)(Data_Typelevel_Num_Reps.d5)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD6)(Data_Typelevel_Num_Reps.d6)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD7)(Data_Typelevel_Num_Reps.d7)(t));
};
var xt9 = function(t) {
    return Data_Tuple_Nested.tuple9(prj()()()()()(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Reps.d0)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Reps.d1)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Reps.d2)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Reps.d3)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Reps.d4)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD5)(Data_Typelevel_Num_Reps.d5)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD6)(Data_Typelevel_Num_Reps.d6)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD7)(Data_Typelevel_Num_Reps.d7)(t))(prj()()()()()(Data_Typelevel_Num_Sets.natD8)(Data_Typelevel_Num_Reps.d8)(t));
};
var genericTuple9 = new Data_Generic_Rep.Generic(function(xs) {
    return Data_Generic_Rep.Constructor(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Reps.d0)(xs))(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Reps.d1)(xs))(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Reps.d2)(xs))(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Reps.d3)(xs))(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Reps.d4)(xs))(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD5)(Data_Typelevel_Num_Reps.d5)(xs))(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD6)(Data_Typelevel_Num_Reps.d6)(xs))(new Data_Generic_Rep.Product(prj()()()()()(Data_Typelevel_Num_Sets.natD7)(Data_Typelevel_Num_Reps.d7)(xs), prj()()()()()(Data_Typelevel_Num_Sets.natD8)(Data_Typelevel_Num_Reps.d8)(xs))))))))));
}, function(v) {
    return $foreign.t9(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1);
});
var genericTuple8 = new Data_Generic_Rep.Generic(function(xs) {
    return Data_Generic_Rep.Constructor(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Reps.d0)(xs))(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Reps.d1)(xs))(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Reps.d2)(xs))(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Reps.d3)(xs))(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Reps.d4)(xs))(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD5)(Data_Typelevel_Num_Reps.d5)(xs))(new Data_Generic_Rep.Product(prj()()()()()(Data_Typelevel_Num_Sets.natD6)(Data_Typelevel_Num_Reps.d6)(xs), prj()()()()()(Data_Typelevel_Num_Sets.natD7)(Data_Typelevel_Num_Reps.d7)(xs)))))))));
}, function(v) {
    return $foreign.t8(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1);
});
var genericTuple7 = new Data_Generic_Rep.Generic(function(xs) {
    return Data_Generic_Rep.Constructor(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Reps.d0)(xs))(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Reps.d1)(xs))(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Reps.d2)(xs))(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Reps.d3)(xs))(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Reps.d4)(xs))(new Data_Generic_Rep.Product(prj()()()()()(Data_Typelevel_Num_Sets.natD5)(Data_Typelevel_Num_Reps.d5)(xs), prj()()()()()(Data_Typelevel_Num_Sets.natD6)(Data_Typelevel_Num_Reps.d6)(xs))))))));
}, function(v) {
    return $foreign.t7(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1);
});
var genericTuple6 = new Data_Generic_Rep.Generic(function(xs) {
    return Data_Generic_Rep.Constructor(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Reps.d0)(xs))(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Reps.d1)(xs))(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Reps.d2)(xs))(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Reps.d3)(xs))(new Data_Generic_Rep.Product(prj()()()()()(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Reps.d4)(xs), prj()()()()()(Data_Typelevel_Num_Sets.natD5)(Data_Typelevel_Num_Reps.d5)(xs)))))));
}, function(v) {
    return $foreign.t6(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1);
});
var genericTuple5 = new Data_Generic_Rep.Generic(function(xs) {
    return Data_Generic_Rep.Constructor(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Reps.d0)(xs))(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Reps.d1)(xs))(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Reps.d2)(xs))(new Data_Generic_Rep.Product(prj()()()()()(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Reps.d3)(xs), prj()()()()()(Data_Typelevel_Num_Sets.natD4)(Data_Typelevel_Num_Reps.d4)(xs))))));
}, function(v) {
    return $foreign.t5(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1);
});
var genericTuple4 = new Data_Generic_Rep.Generic(function(xs) {
    return Data_Generic_Rep.Constructor(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Reps.d0)(xs))(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Reps.d1)(xs))(new Data_Generic_Rep.Product(prj()()()()()(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Reps.d2)(xs), prj()()()()()(Data_Typelevel_Num_Sets.natD3)(Data_Typelevel_Num_Reps.d3)(xs)))));
}, function(v) {
    return $foreign.t4(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1);
});
var genericTuple3 = new Data_Generic_Rep.Generic(function(xs) {
    return Data_Generic_Rep.Constructor(Data_Generic_Rep.Product.create(prj()()()()()(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Reps.d0)(xs))(new Data_Generic_Rep.Product(prj()()()()()(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Reps.d1)(xs), prj()()()()()(Data_Typelevel_Num_Sets.natD2)(Data_Typelevel_Num_Reps.d2)(xs))));
}, function(v) {
    return $foreign.t3(v.value0)(v.value1.value0)(v.value1.value1);
});
var genericTuple2 = new Data_Generic_Rep.Generic(function(xs) {
    return new Data_Generic_Rep.Product(prj()()()()()(Data_Typelevel_Num_Sets.natD0)(Data_Typelevel_Num_Reps.d0)(xs), prj()()()()()(Data_Typelevel_Num_Sets.natD1)(Data_Typelevel_Num_Reps.d1)(xs));
}, function(v) {
    return $foreign.t2(v.value0)(v.value1);
});
module.exports = {
    xt: xt,
    xt2: xt2,
    xt3: xt3,
    xt4: xt4,
    xt5: xt5,
    xt6: xt6,
    xt7: xt7,
    xt8: xt8,
    xt9: xt9,
    prj: prj,
    TupleSize: TupleSize,
    ShowNat: ShowNat,
    tupleSizeT2: tupleSizeT2,
    tupleSizeT3: tupleSizeT3,
    tupleSizeT4: tupleSizeT4,
    tupleSizeT5: tupleSizeT5,
    tupleSizeT6: tupleSizeT6,
    tupleSizeT7: tupleSizeT7,
    tupleSizeT8: tupleSizeT8,
    tupleSizeT9: tupleSizeT9,
    genericTuple2: genericTuple2,
    genericTuple3: genericTuple3,
    genericTuple4: genericTuple4,
    genericTuple5: genericTuple5,
    genericTuple6: genericTuple6,
    genericTuple7: genericTuple7,
    genericTuple8: genericTuple8,
    genericTuple9: genericTuple9,
    showNatD0: showNatD0,
    showNatD1: showNatD1,
    showNatD2: showNatD2,
    showNatD3: showNatD3,
    showNatD4: showNatD4,
    showNatD5: showNatD5,
    showNatD6: showNatD6,
    showNatD7: showNatD7,
    showNatD8: showNatD8,
    t2: $foreign.t2,
    t3: $foreign.t3,
    t4: $foreign.t4,
    t5: $foreign.t5,
    t6: $foreign.t6,
    t7: $foreign.t7,
    t8: $foreign.t8,
    t9: $foreign.t9
};

},{"./foreign.js":"lW7n2","../Data.Generic.Rep/index.js":"2rL8E","../Data.Tuple/index.js":"eOBbM","../Data.Tuple.Nested/index.js":"dkhPa","../Data.Typelevel.Num.Reps/index.js":"4V3ku","../Data.Typelevel.Num.Sets/index.js":"533yn"}],"lW7n2":[function(require,module,exports) {
'use strict';
exports.prjImpl = function projImpl1(n) {
    return function projImpl2(t) {
        return t[n];
    };
};
exports.t2 = function t21(a) {
    return function t22(b) {
        return [
            a,
            b
        ];
    };
};
exports.t3 = function t31(a) {
    return function t32(b) {
        return function t33(c) {
            return [
                a,
                b,
                c
            ];
        };
    };
};
exports.t4 = function t41(a) {
    return function t42(b) {
        return function t43(c) {
            return function t44(d) {
                return [
                    a,
                    b,
                    c,
                    d
                ];
            };
        };
    };
};
exports.t5 = function t51(a) {
    return function t52(b) {
        return function t53(c) {
            return function t54(d) {
                return function t55(e) {
                    return [
                        a,
                        b,
                        c,
                        d,
                        e
                    ];
                };
            };
        };
    };
};
exports.t6 = function t61(a) {
    return function t62(b) {
        return function t63(c) {
            return function t64(d) {
                return function t65(e) {
                    return function t66(f) {
                        return [
                            a,
                            b,
                            c,
                            d,
                            e,
                            f
                        ];
                    };
                };
            };
        };
    };
};
exports.t7 = function t71(a) {
    return function t72(b) {
        return function t73(c) {
            return function t74(d) {
                return function t75(e) {
                    return function t76(f) {
                        return function t77(g) {
                            return [
                                a,
                                b,
                                c,
                                d,
                                e,
                                f,
                                g
                            ];
                        };
                    };
                };
            };
        };
    };
};
exports.t8 = function t81(a) {
    return function t82(b) {
        return function t83(c) {
            return function t84(d) {
                return function t85(e) {
                    return function t86(f) {
                        return function t87(g) {
                            return function t88(h) {
                                return [
                                    a,
                                    b,
                                    c,
                                    d,
                                    e,
                                    f,
                                    g,
                                    h
                                ];
                            };
                        };
                    };
                };
            };
        };
    };
};
exports.t9 = function t91(a) {
    return function t92(b) {
        return function t93(c) {
            return function t94(d) {
                return function t95(e) {
                    return function t96(f) {
                        return function t97(g) {
                            return function t98(h) {
                                return function t99(i) {
                                    return [
                                        a,
                                        b,
                                        c,
                                        d,
                                        e,
                                        f,
                                        g,
                                        h,
                                        i
                                    ];
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};

},{}],"dkhPa":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var uncurry9 = function(f$prime) {
    return function(v) {
        return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value0);
    };
};
var uncurry8 = function(f$prime) {
    return function(v) {
        return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0);
    };
};
var uncurry7 = function(f$prime) {
    return function(v) {
        return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0);
    };
};
var uncurry6 = function(f$prime) {
    return function(v) {
        return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0);
    };
};
var uncurry5 = function(f) {
    return function(v) {
        return f(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0);
    };
};
var uncurry4 = function(f) {
    return function(v) {
        return f(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0);
    };
};
var uncurry3 = function(f) {
    return function(v) {
        return f(v.value0)(v.value1.value0)(v.value1.value1.value0);
    };
};
var uncurry2 = function(f) {
    return function(v) {
        return f(v.value0)(v.value1.value0);
    };
};
var uncurry10 = function(f$prime) {
    return function(v) {
        return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0);
    };
};
var uncurry1 = function(f) {
    return function(v) {
        return f(v.value0);
    };
};
var tuple9 = function(a) {
    return function(b) {
        return function(c) {
            return function(d) {
                return function(e) {
                    return function(f) {
                        return function(g) {
                            return function(h) {
                                return function(i) {
                                    return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, Data_Unit.unit)))))))));
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var tuple8 = function(a) {
    return function(b) {
        return function(c) {
            return function(d) {
                return function(e) {
                    return function(f) {
                        return function(g) {
                            return function(h) {
                                return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, Data_Unit.unit))))))));
                            };
                        };
                    };
                };
            };
        };
    };
};
var tuple7 = function(a) {
    return function(b) {
        return function(c) {
            return function(d) {
                return function(e) {
                    return function(f) {
                        return function(g) {
                            return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, Data_Unit.unit)))))));
                        };
                    };
                };
            };
        };
    };
};
var tuple6 = function(a) {
    return function(b) {
        return function(c) {
            return function(d) {
                return function(e) {
                    return function(f) {
                        return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, Data_Unit.unit))))));
                    };
                };
            };
        };
    };
};
var tuple5 = function(a) {
    return function(b) {
        return function(c) {
            return function(d) {
                return function(e) {
                    return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, Data_Unit.unit)))));
                };
            };
        };
    };
};
var tuple4 = function(a) {
    return function(b) {
        return function(c) {
            return function(d) {
                return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, Data_Unit.unit))));
            };
        };
    };
};
var tuple3 = function(a) {
    return function(b) {
        return function(c) {
            return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, Data_Unit.unit)));
        };
    };
};
var tuple2 = function(a) {
    return function(b) {
        return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, Data_Unit.unit));
    };
};
var tuple10 = function(a) {
    return function(b) {
        return function(c) {
            return function(d) {
                return function(e) {
                    return function(f) {
                        return function(g) {
                            return function(h) {
                                return function(i) {
                                    return function(j) {
                                        return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, new Data_Tuple.Tuple(j, Data_Unit.unit))))))))));
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var tuple1 = function(a) {
    return new Data_Tuple.Tuple(a, Data_Unit.unit);
};
var over9 = function(o) {
    return function(v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1.value1)))))))));
    };
};
var over8 = function(o) {
    return function(v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1))))))));
    };
};
var over7 = function(o) {
    return function(v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1)))))));
    };
};
var over6 = function(o) {
    return function(v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1))))));
    };
};
var over5 = function(o) {
    return function(v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1)))));
    };
};
var over4 = function(o) {
    return function(v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value0), v.value1.value1.value1.value1))));
    };
};
var over3 = function(o) {
    return function(v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value0), v.value1.value1.value1)));
    };
};
var over2 = function(o) {
    return function(v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(o(v.value1.value0), v.value1.value1));
    };
};
var over10 = function(o) {
    return function(v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1))))))))));
    };
};
var over1 = function(o) {
    return function(v) {
        return new Data_Tuple.Tuple(o(v.value0), v.value1);
    };
};
var get9 = function(v) {
    return v.value1.value1.value1.value1.value1.value1.value1.value1.value0;
};
var get8 = function(v) {
    return v.value1.value1.value1.value1.value1.value1.value1.value0;
};
var get7 = function(v) {
    return v.value1.value1.value1.value1.value1.value1.value0;
};
var get6 = function(v) {
    return v.value1.value1.value1.value1.value1.value0;
};
var get5 = function(v) {
    return v.value1.value1.value1.value1.value0;
};
var get4 = function(v) {
    return v.value1.value1.value1.value0;
};
var get3 = function(v) {
    return v.value1.value1.value0;
};
var get2 = function(v) {
    return v.value1.value0;
};
var get10 = function(v) {
    return v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0;
};
var get1 = function(v) {
    return v.value0;
};
var curry9 = function(z) {
    return function(f$prime) {
        return function(a) {
            return function(b) {
                return function(c) {
                    return function(d) {
                        return function(e) {
                            return function(f) {
                                return function(g) {
                                    return function(h) {
                                        return function(i) {
                                            return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, z))))))))));
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var curry8 = function(z) {
    return function(f$prime) {
        return function(a) {
            return function(b) {
                return function(c) {
                    return function(d) {
                        return function(e) {
                            return function(f) {
                                return function(g) {
                                    return function(h) {
                                        return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, z)))))))));
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var curry7 = function(z) {
    return function(f$prime) {
        return function(a) {
            return function(b) {
                return function(c) {
                    return function(d) {
                        return function(e) {
                            return function(f) {
                                return function(g) {
                                    return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, z))))))));
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var curry6 = function(z) {
    return function(f$prime) {
        return function(a) {
            return function(b) {
                return function(c) {
                    return function(d) {
                        return function(e) {
                            return function(f) {
                                return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, z)))))));
                            };
                        };
                    };
                };
            };
        };
    };
};
var curry5 = function(z) {
    return function(f) {
        return function(a) {
            return function(b) {
                return function(c) {
                    return function(d) {
                        return function(e) {
                            return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, z))))));
                        };
                    };
                };
            };
        };
    };
};
var curry4 = function(z) {
    return function(f) {
        return function(a) {
            return function(b) {
                return function(c) {
                    return function(d) {
                        return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, z)))));
                    };
                };
            };
        };
    };
};
var curry3 = function(z) {
    return function(f) {
        return function(a) {
            return function(b) {
                return function(c) {
                    return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, z))));
                };
            };
        };
    };
};
var curry2 = function(z) {
    return function(f) {
        return function(a) {
            return function(b) {
                return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, z)));
            };
        };
    };
};
var curry10 = function(z) {
    return function(f$prime) {
        return function(a) {
            return function(b) {
                return function(c) {
                    return function(d) {
                        return function(e) {
                            return function(f) {
                                return function(g) {
                                    return function(h) {
                                        return function(i) {
                                            return function(j) {
                                                return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, new Data_Tuple.Tuple(j, z)))))))))));
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var curry1 = function(z) {
    return function(f) {
        return function(a) {
            return f(new Data_Tuple.Tuple(a, z));
        };
    };
};
module.exports = {
    tuple1: tuple1,
    tuple2: tuple2,
    tuple3: tuple3,
    tuple4: tuple4,
    tuple5: tuple5,
    tuple6: tuple6,
    tuple7: tuple7,
    tuple8: tuple8,
    tuple9: tuple9,
    tuple10: tuple10,
    get1: get1,
    get2: get2,
    get3: get3,
    get4: get4,
    get5: get5,
    get6: get6,
    get7: get7,
    get8: get8,
    get9: get9,
    get10: get10,
    over1: over1,
    over2: over2,
    over3: over3,
    over4: over4,
    over5: over5,
    over6: over6,
    over7: over7,
    over8: over8,
    over9: over9,
    over10: over10,
    uncurry1: uncurry1,
    uncurry2: uncurry2,
    uncurry3: uncurry3,
    uncurry4: uncurry4,
    uncurry5: uncurry5,
    uncurry6: uncurry6,
    uncurry7: uncurry7,
    uncurry8: uncurry8,
    uncurry9: uncurry9,
    uncurry10: uncurry10,
    curry1: curry1,
    curry2: curry2,
    curry3: curry3,
    curry4: curry4,
    curry5: curry5,
    curry6: curry6,
    curry7: curry7,
    curry8: curry8,
    curry9: curry9,
    curry10: curry10
};

},{"../Data.Tuple/index.js":"eOBbM","../Data.Unit/index.js":"d7oKp"}],"4V3ku":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Show = require("../Data.Show/index.js");
var Data_Typelevel_Undefined = require("../Data.Typelevel.Undefined/index.js");
var NumCons = function() {
    function NumCons1(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }
    NumCons1.create = function(value0) {
        return function(value1) {
            return new NumCons1(value0, value1);
        };
    };
    return NumCons1;
}();
var showDaDb = function(dictShow) {
    return function(dictShow1) {
        return new Data_Show.Show(function(v) {
            return Data_Show.show(dictShow)(Data_Typelevel_Undefined["undefined"]) + Data_Show.show(dictShow1)(Data_Typelevel_Undefined["undefined"]);
        });
    };
};
var showD9 = new Data_Show.Show(function(v) {
    return "9";
});
var showD8 = new Data_Show.Show(function(v) {
    return "8";
});
var showD7 = new Data_Show.Show(function(v) {
    return "7";
});
var showD6 = new Data_Show.Show(function(v) {
    return "6";
});
var showD5 = new Data_Show.Show(function(v) {
    return "5";
});
var showD4 = new Data_Show.Show(function(v) {
    return "4";
});
var showD3 = new Data_Show.Show(function(v) {
    return "3";
});
var showD2 = new Data_Show.Show(function(v) {
    return "2";
});
var showD1 = new Data_Show.Show(function(v) {
    return "1";
});
var showD0 = new Data_Show.Show(function(v) {
    return "0";
});
var d9 = Data_Typelevel_Undefined["undefined"];
var d8 = Data_Typelevel_Undefined["undefined"];
var d7 = Data_Typelevel_Undefined["undefined"];
var d6 = Data_Typelevel_Undefined["undefined"];
var d5 = Data_Typelevel_Undefined["undefined"];
var d4 = Data_Typelevel_Undefined["undefined"];
var d3 = Data_Typelevel_Undefined["undefined"];
var d2 = Data_Typelevel_Undefined["undefined"];
var d1 = Data_Typelevel_Undefined["undefined"];
var d0 = Data_Typelevel_Undefined["undefined"];
module.exports = {
    d0: d0,
    d1: d1,
    d2: d2,
    d3: d3,
    d4: d4,
    d5: d5,
    d6: d6,
    d7: d7,
    d8: d8,
    d9: d9,
    NumCons: NumCons,
    showD0: showD0,
    showD1: showD1,
    showD2: showD2,
    showD3: showD3,
    showD4: showD4,
    showD5: showD5,
    showD6: showD6,
    showD7: showD7,
    showD8: showD8,
    showD9: showD9,
    showDaDb: showDaDb
};

},{"../Data.Show/index.js":"b6tNW","../Data.Typelevel.Undefined/index.js":"avUSa"}],"533yn":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Typelevel_Undefined = require("../Data.Typelevel.Undefined/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var Nat = function(toInt) {
    this.toInt = toInt;
};
_c = Nat;
var Pos = function(Nat0) {
    this.Nat0 = Nat0;
};
_c1 = Pos;
var toInt = function(dict) {
    return dict.toInt;
};
var toInt$prime = function(dictNat) {
    return function(v) {
        return toInt(dictNat)(Data_Typelevel_Undefined["undefined"]);
    };
};
var natD9 = new Nat(function(v) {
    return 9;
});
var posD9 = new Pos(function() {
    return natD9;
});
var natD8 = new Nat(function(v) {
    return 8;
});
var posD8 = new Pos(function() {
    return natD8;
});
var natD7 = new Nat(function(v) {
    return 7;
});
var posD7 = new Pos(function() {
    return natD7;
});
var natD6 = new Nat(function(v) {
    return 6;
});
var posD6 = new Pos(function() {
    return natD6;
});
var natD5 = new Nat(function(v) {
    return 5;
});
var posD5 = new Pos(function() {
    return natD5;
});
var natD4 = new Nat(function(v) {
    return 4;
});
var posD4 = new Pos(function() {
    return natD4;
});
var natD3 = new Nat(function(v) {
    return 3;
});
var posD3 = new Pos(function() {
    return natD3;
});
var natD2 = new Nat(function(v) {
    return 2;
});
var posD2 = new Pos(function() {
    return natD2;
});
var natD1 = new Nat(function(v) {
    return 1;
});
var posD1 = new Pos(function() {
    return natD1;
});
var natD0 = new Nat(function(v) {
    return 0;
});
var div10Dec = function(dictNat) {
    return function(v) {
        return Data_Typelevel_Undefined["undefined"];
    };
};
var subLastDec = function(dictNat) {
    return function(dictNat1) {
        var $77 = toInt(dictNat1);
        var $78 = div10Dec(dictNat);
        return function($79) {
            return (function(v) {
                return 10 * v | 0;
            })($77($78($79)));
        };
    };
};
var posNatD0 = function(dictPos) {
    return new Nat(function(n) {
        return subLastDec(posNatD0(dictPos))(dictPos.Nat0())(n);
    });
};
var posPosD0 = function(dictPos) {
    return new Pos(function() {
        return posNatD0(dictPos);
    });
};
var posNatD1 = function(dictPos) {
    return new Nat(function(n) {
        return subLastDec(posNatD1(dictPos))(dictPos.Nat0())(n) + 1 | 0;
    });
};
var posPosD1 = function(dictPos) {
    return new Pos(function() {
        return posNatD1(dictPos);
    });
};
var posNatD2 = function(dictPos) {
    return new Nat(function(n) {
        return subLastDec(posNatD2(dictPos))(dictPos.Nat0())(n) + 2 | 0;
    });
};
var posPosD2 = function(dictPos) {
    return new Pos(function() {
        return posNatD2(dictPos);
    });
};
var posNatD3 = function(dictPos) {
    return new Nat(function(n) {
        return subLastDec(posNatD3(dictPos))(dictPos.Nat0())(n) + 3 | 0;
    });
};
var posPosD3 = function(dictPos) {
    return new Pos(function() {
        return posNatD3(dictPos);
    });
};
var posNatD4 = function(dictPos) {
    return new Nat(function(n) {
        return subLastDec(posNatD4(dictPos))(dictPos.Nat0())(n) + 4 | 0;
    });
};
var posPosD4 = function(dictPos) {
    return new Pos(function() {
        return posNatD4(dictPos);
    });
};
var posNatD5 = function(dictPos) {
    return new Nat(function(n) {
        return subLastDec(posNatD5(dictPos))(dictPos.Nat0())(n) + 5 | 0;
    });
};
var posPosD5 = function(dictPos) {
    return new Pos(function() {
        return posNatD5(dictPos);
    });
};
var posNatD6 = function(dictPos) {
    return new Nat(function(n) {
        return subLastDec(posNatD6(dictPos))(dictPos.Nat0())(n) + 6 | 0;
    });
};
var posPosD6 = function(dictPos) {
    return new Pos(function() {
        return posNatD6(dictPos);
    });
};
var posNatD7 = function(dictPos) {
    return new Nat(function(n) {
        return subLastDec(posNatD7(dictPos))(dictPos.Nat0())(n) + 7 | 0;
    });
};
var posPosD7 = function(dictPos) {
    return new Pos(function() {
        return posNatD7(dictPos);
    });
};
var posNatD8 = function(dictPos) {
    return new Nat(function(n) {
        return subLastDec(posNatD8(dictPos))(dictPos.Nat0())(n) + 8 | 0;
    });
};
var posPosD8 = function(dictPos) {
    return new Pos(function() {
        return posNatD8(dictPos);
    });
};
var posNatD9 = function(dictPos) {
    return new Nat(function(n) {
        return subLastDec(posNatD9(dictPos))(dictPos.Nat0())(n) + 9 | 0;
    });
};
var posPosD9 = function(dictPos) {
    return new Pos(function() {
        return posNatD9(dictPos);
    });
};
var reifyIntP = function(i) {
    return function(f) {
        if (i < 1) return Partial_Unsafe.unsafeCrashWith("reifyIntP: integral < 1");
        if (i === 1) return f(posD1)(Data_Typelevel_Undefined["undefined"]);
        if (i === 2) return f(posD2)(Data_Typelevel_Undefined["undefined"]);
        if (i === 3) return f(posD3)(Data_Typelevel_Undefined["undefined"]);
        if (i === 4) return f(posD4)(Data_Typelevel_Undefined["undefined"]);
        if (i === 5) return f(posD5)(Data_Typelevel_Undefined["undefined"]);
        if (i === 6) return f(posD6)(Data_Typelevel_Undefined["undefined"]);
        if (i === 7) return f(posD7)(Data_Typelevel_Undefined["undefined"]);
        if (i === 8) return f(posD8)(Data_Typelevel_Undefined["undefined"]);
        if (i === 9) return f(posD9)(Data_Typelevel_Undefined["undefined"]);
        if (Data_Boolean.otherwise) {
            var f9 = function(dictPos) {
                return function(v) {
                    return f(posPosD9(dictPos))(Data_Typelevel_Undefined["undefined"]);
                };
            };
            var f8 = function(dictPos) {
                return function(v) {
                    return f(posPosD8(dictPos))(Data_Typelevel_Undefined["undefined"]);
                };
            };
            var f7 = function(dictPos) {
                return function(v) {
                    return f(posPosD7(dictPos))(Data_Typelevel_Undefined["undefined"]);
                };
            };
            var f6 = function(dictPos) {
                return function(v) {
                    return f(posPosD6(dictPos))(Data_Typelevel_Undefined["undefined"]);
                };
            };
            var f5 = function(dictPos) {
                return function(v) {
                    return f(posPosD5(dictPos))(Data_Typelevel_Undefined["undefined"]);
                };
            };
            var f4 = function(dictPos) {
                return function(v) {
                    return f(posPosD4(dictPos))(Data_Typelevel_Undefined["undefined"]);
                };
            };
            var f3 = function(dictPos) {
                return function(v) {
                    return f(posPosD3(dictPos))(Data_Typelevel_Undefined["undefined"]);
                };
            };
            var f2 = function(dictPos) {
                return function(v) {
                    return f(posPosD2(dictPos))(Data_Typelevel_Undefined["undefined"]);
                };
            };
            var f11 = function(dictPos) {
                return function(v) {
                    return f(posPosD1(dictPos))(Data_Typelevel_Undefined["undefined"]);
                };
            };
            var f0 = function(dictPos) {
                return function(v) {
                    return f(posPosD0(dictPos))(Data_Typelevel_Undefined["undefined"]);
                };
            };
            var m = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i)(10);
            var d = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(10);
            return (function(dictPartial) {
                if (m === 0) return reifyIntP(d)(function(dictPos) {
                    return f0(dictPos);
                });
                if (m === 1) return reifyIntP(d)(function(dictPos) {
                    return f11(dictPos);
                });
                if (m === 2) return reifyIntP(d)(function(dictPos) {
                    return f2(dictPos);
                });
                if (m === 3) return reifyIntP(d)(function(dictPos) {
                    return f3(dictPos);
                });
                if (m === 4) return reifyIntP(d)(function(dictPos) {
                    return f4(dictPos);
                });
                if (m === 5) return reifyIntP(d)(function(dictPos) {
                    return f5(dictPos);
                });
                if (m === 6) return reifyIntP(d)(function(dictPos) {
                    return f6(dictPos);
                });
                if (m === 7) return reifyIntP(d)(function(dictPos) {
                    return f7(dictPos);
                });
                if (m === 8) return reifyIntP(d)(function(dictPos) {
                    return f8(dictPos);
                });
                if (m === 9) return reifyIntP(d)(function(dictPos) {
                    return f9(dictPos);
                });
                throw new Error("Failed pattern match at Data.Typelevel.Num.Sets (line 88, column 24 - line 98, column 26): " + [
                    m.constructor.name
                ]);
            })();
        }
        throw new Error("Failed pattern match at Data.Typelevel.Num.Sets (line 73, column 1 - line 73, column 63): " + [
            i.constructor.name,
            f.constructor.name
        ]);
    };
};
var reifyInt = function(i) {
    return function(f) {
        if (i < 0) return Partial_Unsafe.unsafeCrashWith("reifyInt: integral < 0");
        if (i === 0) return f(natD0)(Data_Typelevel_Undefined["undefined"]);
        if (Data_Boolean.otherwise) return reifyIntP(i)(function(dictPos) {
            return f(dictPos.Nat0());
        });
        throw new Error("Failed pattern match at Data.Typelevel.Num.Sets (line 67, column 1 - line 67, column 62): " + [
            i.constructor.name,
            f.constructor.name
        ]);
    };
};
module.exports = {
    toInt: toInt,
    Nat: Nat,
    "toInt'": toInt$prime,
    Pos: Pos,
    subLastDec: subLastDec,
    div10Dec: div10Dec,
    reifyInt: reifyInt,
    reifyIntP: reifyIntP,
    natD0: natD0,
    natD1: natD1,
    natD2: natD2,
    natD3: natD3,
    natD4: natD4,
    natD5: natD5,
    natD6: natD6,
    natD7: natD7,
    natD8: natD8,
    natD9: natD9,
    posNatD0: posNatD0,
    posNatD1: posNatD1,
    posNatD2: posNatD2,
    posNatD3: posNatD3,
    posNatD4: posNatD4,
    posNatD5: posNatD5,
    posNatD6: posNatD6,
    posNatD7: posNatD7,
    posNatD8: posNatD8,
    posNatD9: posNatD9,
    posD1: posD1,
    posD2: posD2,
    posD3: posD3,
    posD4: posD4,
    posD5: posD5,
    posD6: posD6,
    posD7: posD7,
    posD8: posD8,
    posD9: posD9,
    posPosD0: posPosD0,
    posPosD1: posPosD1,
    posPosD2: posPosD2,
    posPosD3: posPosD3,
    posPosD4: posPosD4,
    posPosD5: posPosD5,
    posPosD6: posPosD6,
    posPosD7: posPosD7,
    posPosD8: posPosD8,
    posPosD9: posPosD9
};
var _c, _c1;
$RefreshReg$(_c, "Nat");
$RefreshReg$(_c1, "Pos");

},{"../Data.Boolean/index.js":"lv1qw","../Data.EuclideanRing/index.js":"fTU7A","../Data.Typelevel.Undefined/index.js":"avUSa","../Partial.Unsafe/index.js":"fE2bk"}],"fE2bk":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Partial = require("../Partial/index.js");
var unsafePartialBecause = function(v) {
    return function(x) {
        return $foreign.unsafePartial(function(dictPartial) {
            return x();
        });
    };
};
var unsafeCrashWith = function(msg) {
    return $foreign.unsafePartial(function(dictPartial) {
        return Partial.crashWith()(msg);
    });
};
module.exports = {
    unsafePartialBecause: unsafePartialBecause,
    unsafeCrashWith: unsafeCrashWith,
    unsafePartial: $foreign.unsafePartial
};

},{"./foreign.js":"903so","../Partial/index.js":"9VKad"}],"903so":[function(require,module,exports) {
"use strict";
// module Partial.Unsafe
exports.unsafePartial = function(f) {
    return f();
};

},{}],"9VKad":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var crash = function(dictPartial) {
    return $foreign.crashWith()("Partial.crash: partial function");
};
module.exports = {
    crash: crash,
    crashWith: $foreign.crashWith
};

},{"./foreign.js":"bY6Vs"}],"bY6Vs":[function(require,module,exports) {
"use strict";
// module Partial
exports.crashWith = function() {
    return function(msg) {
        throw new Error(msg);
    };
};

},{}],"33Dai":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    mkEffectFn1: $foreign.mkEffectFn1,
    mkEffectFn2: $foreign.mkEffectFn2,
    mkEffectFn3: $foreign.mkEffectFn3,
    mkEffectFn4: $foreign.mkEffectFn4,
    mkEffectFn5: $foreign.mkEffectFn5,
    mkEffectFn6: $foreign.mkEffectFn6,
    mkEffectFn7: $foreign.mkEffectFn7,
    mkEffectFn8: $foreign.mkEffectFn8,
    mkEffectFn9: $foreign.mkEffectFn9,
    mkEffectFn10: $foreign.mkEffectFn10,
    runEffectFn1: $foreign.runEffectFn1,
    runEffectFn2: $foreign.runEffectFn2,
    runEffectFn3: $foreign.runEffectFn3,
    runEffectFn4: $foreign.runEffectFn4,
    runEffectFn5: $foreign.runEffectFn5,
    runEffectFn6: $foreign.runEffectFn6,
    runEffectFn7: $foreign.runEffectFn7,
    runEffectFn8: $foreign.runEffectFn8,
    runEffectFn9: $foreign.runEffectFn9,
    runEffectFn10: $foreign.runEffectFn10
};

},{"./foreign.js":"6pHDC"}],"6pHDC":[function(require,module,exports) {
"use strict";
exports.mkEffectFn1 = function mkEffectFn1(fn) {
    return function(x) {
        return fn(x)();
    };
};
exports.mkEffectFn2 = function mkEffectFn2(fn) {
    return function(a, b) {
        return fn(a)(b)();
    };
};
exports.mkEffectFn3 = function mkEffectFn3(fn) {
    return function(a, b, c) {
        return fn(a)(b)(c)();
    };
};
exports.mkEffectFn4 = function mkEffectFn4(fn) {
    return function(a, b, c, d) {
        return fn(a)(b)(c)(d)();
    };
};
exports.mkEffectFn5 = function mkEffectFn5(fn) {
    return function(a, b, c, d, e) {
        return fn(a)(b)(c)(d)(e)();
    };
};
exports.mkEffectFn6 = function mkEffectFn6(fn) {
    return function(a, b, c, d, e, f) {
        return fn(a)(b)(c)(d)(e)(f)();
    };
};
exports.mkEffectFn7 = function mkEffectFn7(fn) {
    return function(a, b, c, d, e, f, g) {
        return fn(a)(b)(c)(d)(e)(f)(g)();
    };
};
exports.mkEffectFn8 = function mkEffectFn8(fn) {
    return function(a, b, c, d, e, f, g, h) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h)();
    };
};
exports.mkEffectFn9 = function mkEffectFn9(fn) {
    return function(a, b, c, d, e, f, g, h, i) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)();
    };
};
exports.mkEffectFn10 = function mkEffectFn10(fn) {
    return function(a, b, c, d, e, f, g, h, i, j) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)();
    };
};
exports.runEffectFn1 = function runEffectFn1(fn) {
    return function(a) {
        return function() {
            return fn(a);
        };
    };
};
exports.runEffectFn2 = function runEffectFn2(fn) {
    return function(a) {
        return function(b) {
            return function() {
                return fn(a, b);
            };
        };
    };
};
exports.runEffectFn3 = function runEffectFn3(fn) {
    return function(a) {
        return function(b) {
            return function(c) {
                return function() {
                    return fn(a, b, c);
                };
            };
        };
    };
};
exports.runEffectFn4 = function runEffectFn4(fn) {
    return function(a) {
        return function(b) {
            return function(c) {
                return function(d) {
                    return function() {
                        return fn(a, b, c, d);
                    };
                };
            };
        };
    };
};
exports.runEffectFn5 = function runEffectFn5(fn) {
    return function(a) {
        return function(b) {
            return function(c) {
                return function(d) {
                    return function(e) {
                        return function() {
                            return fn(a, b, c, d, e);
                        };
                    };
                };
            };
        };
    };
};
exports.runEffectFn6 = function runEffectFn6(fn) {
    return function(a) {
        return function(b) {
            return function(c) {
                return function(d) {
                    return function(e) {
                        return function(f) {
                            return function() {
                                return fn(a, b, c, d, e, f);
                            };
                        };
                    };
                };
            };
        };
    };
};
exports.runEffectFn7 = function runEffectFn7(fn) {
    return function(a) {
        return function(b) {
            return function(c) {
                return function(d) {
                    return function(e) {
                        return function(f) {
                            return function(g) {
                                return function() {
                                    return fn(a, b, c, d, e, f, g);
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
exports.runEffectFn8 = function runEffectFn8(fn) {
    return function(a) {
        return function(b) {
            return function(c) {
                return function(d) {
                    return function(e) {
                        return function(f) {
                            return function(g) {
                                return function(h) {
                                    return function() {
                                        return fn(a, b, c, d, e, f, g, h);
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
exports.runEffectFn9 = function runEffectFn9(fn) {
    return function(a) {
        return function(b) {
            return function(c) {
                return function(d) {
                    return function(e) {
                        return function(f) {
                            return function(g) {
                                return function(h) {
                                    return function(i) {
                                        return function() {
                                            return fn(a, b, c, d, e, f, g, h, i);
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
exports.runEffectFn10 = function runEffectFn10(fn) {
    return function(a) {
        return function(b) {
            return function(c) {
                return function(d) {
                    return function(e) {
                        return function(f) {
                            return function(g) {
                                return function(h) {
                                    return function(i) {
                                        return function(j) {
                                            return function() {
                                                return fn(a, b, c, d, e, f, g, h, i, j);
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};

},{}],"4pAZZ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var NonEmpty = function() {
    function NonEmpty1(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }
    NonEmpty1.create = function(value0) {
        return function(value1) {
            return new NonEmpty1(value0, value1);
        };
    };
    return NonEmpty1;
}();
var unfoldable1NonEmpty = function(dictUnfoldable) {
    return new Data_Unfoldable1.Unfoldable1(function(f) {
        return function(b) {
            return Data_Tuple.uncurry(NonEmpty.create)(Data_Functor.map(Data_Tuple.functorTuple)(Data_Unfoldable.unfoldr(dictUnfoldable)(Data_Functor.map(Data_Maybe.functorMaybe)(f)))(f(b)));
        };
    });
};
var tail = function(v) {
    return v.value1;
};
var singleton = function(dictPlus) {
    return function(a) {
        return new NonEmpty(a, Control_Plus.empty(dictPlus));
    };
};
var showNonEmpty = function(dictShow) {
    return function(dictShow1) {
        return new Data_Show.Show(function(v) {
            return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
        });
    };
};
var oneOf = function(dictAlternative) {
    return function(v) {
        return Control_Alt.alt(dictAlternative.Plus1().Alt0())(Control_Applicative.pure(dictAlternative.Applicative0())(v.value0))(v.value1);
    };
};
var head = function(v) {
    return v.value0;
};
var functorNonEmpty = function(dictFunctor) {
    return new Data_Functor.Functor(function(f) {
        return function(m) {
            return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
        };
    });
};
var functorWithIndex = function(dictFunctorWithIndex) {
    return new Data_FunctorWithIndex.FunctorWithIndex(function() {
        return functorNonEmpty(dictFunctorWithIndex.Functor0());
    }, function(f) {
        return function(v) {
            return new NonEmpty(f(Data_Maybe.Nothing.value)(v.value0), Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(function($146) {
                return f(Data_Maybe.Just.create($146));
            })(v.value1));
        };
    });
};
var fromNonEmpty = function(f) {
    return function(v) {
        return f(v.value0)(v.value1);
    };
};
var foldl1 = function(dictFoldable) {
    return function(f) {
        return function(v) {
            return Data_Foldable.foldl(dictFoldable)(f)(v.value0)(v.value1);
        };
    };
};
var foldableNonEmpty = function(dictFoldable) {
    return new Data_Foldable.Foldable(function(dictMonoid) {
        return function(f) {
            return function(v) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
            };
        };
    }, function(f) {
        return function(b) {
            return function(v) {
                return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
            };
        };
    }, function(f) {
        return function(b) {
            return function(v) {
                return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
            };
        };
    });
};
var foldableWithIndexNonEmpty = function(dictFoldableWithIndex) {
    return new Data_FoldableWithIndex.FoldableWithIndex(function() {
        return foldableNonEmpty(dictFoldableWithIndex.Foldable0());
    }, function(dictMonoid) {
        return function(f) {
            return function(v) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(Data_Maybe.Nothing.value)(v.value0))(Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function($147) {
                    return f(Data_Maybe.Just.create($147));
                })(v.value1));
            };
        };
    }, function(f) {
        return function(b) {
            return function(v) {
                return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function($148) {
                    return f(Data_Maybe.Just.create($148));
                })(f(Data_Maybe.Nothing.value)(b)(v.value0))(v.value1);
            };
        };
    }, function(f) {
        return function(b) {
            return function(v) {
                return f(Data_Maybe.Nothing.value)(v.value0)(Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex)(function($149) {
                    return f(Data_Maybe.Just.create($149));
                })(b)(v.value1));
            };
        };
    });
};
var traversableNonEmpty = function(dictTraversable) {
    return new Data_Traversable.Traversable(function() {
        return foldableNonEmpty(dictTraversable.Foldable1());
    }, function() {
        return functorNonEmpty(dictTraversable.Functor0());
    }, function(dictApplicative) {
        return function(v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(NonEmpty.create)(v.value0))(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v.value1));
        };
    }, function(dictApplicative) {
        return function(f) {
            return function(v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(NonEmpty.create)(f(v.value0)))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)(v.value1));
            };
        };
    });
};
var traversableWithIndexNonEmpty = function(dictTraversableWithIndex) {
    return new Data_TraversableWithIndex.TraversableWithIndex(function() {
        return foldableWithIndexNonEmpty(dictTraversableWithIndex.FoldableWithIndex1());
    }, function() {
        return functorWithIndex(dictTraversableWithIndex.FunctorWithIndex0());
    }, function() {
        return traversableNonEmpty(dictTraversableWithIndex.Traversable2());
    }, function(dictApplicative) {
        return function(f) {
            return function(v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(NonEmpty.create)(f(Data_Maybe.Nothing.value)(v.value0)))(Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function($150) {
                    return f(Data_Maybe.Just.create($150));
                })(v.value1));
            };
        };
    });
};
var foldable1NonEmpty = function(dictFoldable) {
    return new Data_Semigroup_Foldable.Foldable1(function() {
        return foldableNonEmpty(dictFoldable);
    }, function(dictSemigroup) {
        return Data_Semigroup_Foldable.foldMap1(foldable1NonEmpty(dictFoldable))(dictSemigroup)(Control_Category.identity(Control_Category.categoryFn));
    }, function(dictSemigroup) {
        return function(f) {
            return function(v) {
                return Data_Foldable.foldl(dictFoldable)(function(s) {
                    return function(a1) {
                        return Data_Semigroup.append(dictSemigroup)(s)(f(a1));
                    };
                })(f(v.value0))(v.value1);
            };
        };
    });
};
var eqNonEmpty = function(dictEq1) {
    return function(dictEq) {
        return new Data_Eq.Eq(function(x) {
            return function(y) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq1(dictEq1)(dictEq)(x.value1)(y.value1);
            };
        });
    };
};
var ordNonEmpty = function(dictOrd1) {
    return function(dictOrd) {
        return new Data_Ord.Ord(function() {
            return eqNonEmpty(dictOrd1.Eq10())(dictOrd.Eq0());
        }, function(x) {
            return function(y) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) return Data_Ordering.LT.value;
                if (v instanceof Data_Ordering.GT) return Data_Ordering.GT.value;
                return Data_Ord.compare1(dictOrd1)(dictOrd)(x.value1)(y.value1);
            };
        });
    };
};
var eq1NonEmpty = function(dictEq1) {
    return new Data_Eq.Eq1(function(dictEq) {
        return Data_Eq.eq(eqNonEmpty(dictEq1)(dictEq));
    });
};
var ord1NonEmpty = function(dictOrd1) {
    return new Data_Ord.Ord1(function() {
        return eq1NonEmpty(dictOrd1.Eq10());
    }, function(dictOrd) {
        return Data_Ord.compare(ordNonEmpty(dictOrd1)(dictOrd));
    });
};
module.exports = {
    NonEmpty: NonEmpty,
    singleton: singleton,
    foldl1: foldl1,
    fromNonEmpty: fromNonEmpty,
    oneOf: oneOf,
    head: head,
    tail: tail,
    showNonEmpty: showNonEmpty,
    eqNonEmpty: eqNonEmpty,
    eq1NonEmpty: eq1NonEmpty,
    ordNonEmpty: ordNonEmpty,
    ord1NonEmpty: ord1NonEmpty,
    functorNonEmpty: functorNonEmpty,
    functorWithIndex: functorWithIndex,
    foldableNonEmpty: foldableNonEmpty,
    foldableWithIndexNonEmpty: foldableWithIndexNonEmpty,
    traversableNonEmpty: traversableNonEmpty,
    traversableWithIndexNonEmpty: traversableWithIndexNonEmpty,
    foldable1NonEmpty: foldable1NonEmpty,
    unfoldable1NonEmpty: unfoldable1NonEmpty
};

},{"../Control.Alt/index.js":"82RIG","../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Category/index.js":"dfcPK","../Control.Plus/index.js":"5lCU5","../Data.Eq/index.js":"c3b8F","../Data.Foldable/index.js":"jWmFN","../Data.FoldableWithIndex/index.js":"b0hJn","../Data.Functor/index.js":"iy1jO","../Data.FunctorWithIndex/index.js":"9mTwC","../Data.Maybe/index.js":"ePH81","../Data.Ord/index.js":"f14nh","../Data.Ordering/index.js":"lEtyd","../Data.Semigroup/index.js":"4sNah","../Data.Semigroup.Foldable/index.js":"lM4gt","../Data.Show/index.js":"b6tNW","../Data.Traversable/index.js":"i5Kon","../Data.TraversableWithIndex/index.js":"bLveW","../Data.Tuple/index.js":"eOBbM","../Data.Unfoldable/index.js":"5NUrk","../Data.Unfoldable1/index.js":"Daf7x"}],"3DhL5":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Group = require("../Data.Group/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Utils = require("../Utils/index.js");
var Exponentials = function(x) {
    return x;
};
_c = Exponentials;
var superscript = function(v) {
    if (v === 0) return "\u2070";
    if (v === 1) return "\xb9";
    if (v === 2) return "\xb2";
    if (v === 3) return "\xb3";
    if (v === 4) return "\u2074";
    if (v === 5) return "\u2075";
    if (v === 6) return "\u2076";
    if (v === 7) return "\u2077";
    if (v === 8) return "\u2078";
    if (v === 9) return "\u2079";
    if (v < 0) return "\u207b" + superscript(-v | 0);
    if (v >= 10) return superscript(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v)(10)) + superscript(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v)(10));
    if (Data_Boolean.otherwise) return Utils.undefinedLog("all superscript cases already covered");
    throw new Error("Failed pattern match at Exponentials (line 112, column 1 - line 112, column 29): " + [
        v.constructor.name
    ]);
};
var singleton = function(a) {
    return Exponentials(Data_Map_Internal.singleton(a)(1));
};
var newtypeExponentials = new Data_Newtype.Newtype(function(n) {
    return n;
}, Exponentials);
var toArray = function() {
    var $50 = Data_Map_Internal.toUnfoldableUnordered(Data_Unfoldable.unfoldableArray);
    var $51 = Data_Newtype.unwrap(newtypeExponentials);
    return function($52) {
        return $50($51($52));
    };
}();
var showExponentialsString = new Data_Show.Show(function(v) {
    var showPower = function(v1) {
        if (v1.value1 === 1) return v1.value0;
        return v1.value0 + superscript(v1.value1);
    };
    var orderExponents = function(v1) {
        return function(v2) {
            if (v1.value1 === v2.value1) return Data_Ord.compare(Data_Ord.ordString)(v1.value0)(v2.value0);
            if (v1.value1 < 0 && v2.value1 < 0) return Data_Ord.compare(Data_Ord.ordInt)(-v1.value1 | 0)(-v2.value1 | 0);
            if (v1.value1 > 0 && v2.value1 > 0) return Data_Ord.compare(Data_Ord.ordInt)(v1.value1)(v2.value1);
            if (v1.value1 < 0 && v2.value1 > 0) return Data_Ordering.GT.value;
            if (v1.value1 > 0 && v2.value1 < 0) return Data_Ordering.LT.value;
            if (Data_Boolean.otherwise) return Utils.undefinedLog("exhaustive orderExponents search");
            throw new Error("Failed pattern match at Exponentials (line 32, column 7 - line 32, column 73): " + [
                v1.constructor.name,
                v2.constructor.name
            ]);
        };
    };
    var joinItems = function(acc) {
        return function(v1) {
            if (v1.value1 < 0) return acc + ("/" + showPower(new Data_Tuple.Tuple(v1.value0, -v1.value1 | 0)));
            if (Data_Boolean.otherwise) return acc + ("*" + showPower(new Data_Tuple.Tuple(v1.value0, v1.value1)));
            throw new Error("Failed pattern match at Exponentials (line 43, column 7 - line 43, column 56): " + [
                acc.constructor.name,
                v1.constructor.name
            ]);
        };
    };
    var items = Data_Array.sortBy(orderExponents)(toArray(v));
    var result = Data_Foldable.foldl(Data_Foldable.foldableArray)(joinItems)("")(items);
    var v1 = Data_String_CodePoints.take(1)(result);
    if (v1 === "*") return Data_String_CodePoints.drop(1)(result);
    if (v1 === "/") return "1" + result;
    return result;
});
var map = function(dictOrd) {
    return function(f) {
        return function(e) {
            return Exponentials(Data_Map_Internal.fromFoldable(dictOrd)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(function(v) {
                return new Data_Tuple.Tuple(f(v.value0), v.value1);
            })(toArray(e))));
        };
    };
};
var showExponentials = function(dictOrd) {
    return function(dictShow) {
        return new Data_Show.Show(function(v) {
            return Data_Show.show(showExponentialsString)(map(Data_Ord.ordString)(Data_Show.show(dictShow))(v));
        });
    };
};
var foldM = function(dictMonad) {
    return function(f) {
        return function(init) {
            var $53 = Data_Foldable.foldM(Data_Foldable.foldableArray)(dictMonad)(f)(init);
            return function($54) {
                return $53(toArray($54));
            };
        };
    };
};
var fold = function(f) {
    return function(init) {
        var $55 = Data_Foldable.foldl(Data_Foldable.foldableArray)(f)(init);
        return function($56) {
            return $55(toArray($56));
        };
    };
};
var eqExponentials = function(dictOrd) {
    return new Data_Eq.Eq(function(e1) {
        return function(e2) {
            return Data_Eq.eq(Data_Map_Internal.eqMap(dictOrd.Eq0())(Data_Eq.eqInt))(Data_Newtype.unwrap(newtypeExponentials)(e1))(Data_Newtype.unwrap(newtypeExponentials)(e2));
        };
    });
};
var cancel = function(dictOrd) {
    return Data_Newtype.over(newtypeExponentials)(newtypeExponentials)(Exponentials)(Data_Map_Internal.filter(dictOrd)(Data_Eq.notEq(Data_Eq.eqInt)(0)));
};
var semigroupExponentials = function(dictOrd) {
    return new Data_Semigroup.Semigroup(function(v) {
        return function(v1) {
            return cancel(dictOrd)(Exponentials(Data_Map_Internal.unionWith(dictOrd)(Data_Semiring.add(Data_Semiring.semiringInt))(v)(v1)));
        };
    });
};
var monoidExponentials = function(dictOrd) {
    return new Data_Monoid.Monoid(function() {
        return semigroupExponentials(dictOrd);
    }, Data_Monoid.mempty(Data_Map_Internal.monoidMap(dictOrd)));
};
var groupExponentials = function(dictOrd) {
    return new Data_Group.Group(function() {
        return monoidExponentials(dictOrd);
    }, Data_Newtype.over(newtypeExponentials)(newtypeExponentials)(Exponentials)(function(m) {
        return Data_Functor.map(Data_Map_Internal.functorMap)(Data_Ring.negate(Data_Ring.ringInt))(m);
    }));
};
var power = function(dictOrd) {
    return function(a) {
        return function(n) {
            return Data_Group.power(groupExponentials(dictOrd))(singleton(a))(n);
        };
    };
};
var quotient = function(dictOrd) {
    return function(num) {
        return function(den) {
            var foldProduct = function(p) {
                return Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Semigroup.append(semigroupExponentials(dictOrd)))(Data_Monoid.mempty(monoidExponentials(dictOrd)))(Data_Functor.map(Data_Functor.functorArray)(singleton)(p));
            };
            return Data_Semigroup.append(semigroupExponentials(dictOrd))(foldProduct(num))(Data_Group.ginverse(groupExponentials(dictOrd))(foldProduct(den)));
        };
    };
};
module.exports = {
    Exponentials: Exponentials,
    cancel: cancel,
    toArray: toArray,
    fold: fold,
    foldM: foldM,
    map: map,
    singleton: singleton,
    quotient: quotient,
    power: power,
    superscript: superscript,
    newtypeExponentials: newtypeExponentials,
    showExponentialsString: showExponentialsString,
    showExponentials: showExponentials,
    eqExponentials: eqExponentials,
    semigroupExponentials: semigroupExponentials,
    monoidExponentials: monoidExponentials,
    groupExponentials: groupExponentials
};
var _c;
$RefreshReg$(_c, "Exponentials");

},{"../Data.Array/index.js":"7x0bj","../Data.Boolean/index.js":"lv1qw","../Data.Eq/index.js":"c3b8F","../Data.EuclideanRing/index.js":"fTU7A","../Data.Foldable/index.js":"jWmFN","../Data.Functor/index.js":"iy1jO","../Data.Group/index.js":"2BG66","../Data.Map.Internal/index.js":"iS1Sf","../Data.Monoid/index.js":"94fxC","../Data.Newtype/index.js":"czJbt","../Data.Ord/index.js":"f14nh","../Data.Ordering/index.js":"lEtyd","../Data.Ring/index.js":"2x2oG","../Data.Semigroup/index.js":"4sNah","../Data.Semiring/index.js":"39btI","../Data.Show/index.js":"b6tNW","../Data.String.CodePoints/index.js":"3r2hK","../Data.Tuple/index.js":"eOBbM","../Data.Unfoldable/index.js":"5NUrk","../Utils/index.js":"liNIM"}],"2BG66":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Group = function(Monoid0, ginverse) {
    this.Monoid0 = Monoid0;
    this.ginverse = ginverse;
};
_c = Group;
var groupUnit = new Group(function() {
    return Data_Monoid.monoidUnit;
}, function(v) {
    return Data_Unit.unit;
});
var groupAdditive = function(dictRing) {
    return new Group(function() {
        return Data_Monoid_Additive.monoidAdditive(dictRing.Semiring0());
    }, function(v) {
        return Data_Ring.negate(dictRing)(v);
    });
};
var ginverse = function(dict) {
    return dict.ginverse;
};
var groupDual = function(dictGroup) {
    return new Group(function() {
        return Data_Monoid_Dual.monoidDual(dictGroup.Monoid0());
    }, function(v) {
        return ginverse(dictGroup)(v);
    });
};
var power = function(dictGroup) {
    return function(x) {
        return function(p) {
            if (p < 0) return Data_Monoid.power(dictGroup.Monoid0())(ginverse(dictGroup)(x))(-p | 0);
            if (Data_Boolean.otherwise) return Data_Monoid.power(dictGroup.Monoid0())(x)(p);
            throw new Error("Failed pattern match at Data.Group (line 32, column 1 - line 32, column 44): " + [
                x.constructor.name,
                p.constructor.name
            ]);
        };
    };
};
module.exports = {
    ginverse: ginverse,
    Group: Group,
    power: power,
    groupUnit: groupUnit,
    groupDual: groupDual,
    groupAdditive: groupAdditive
};
var _c;
$RefreshReg$(_c, "Group");

},{"../Data.Boolean/index.js":"lv1qw","../Data.Monoid/index.js":"94fxC","../Data.Monoid.Additive/index.js":"gMw6U","../Data.Monoid.Dual/index.js":"9K8EM","../Data.Ring/index.js":"2x2oG","../Data.Unit/index.js":"d7oKp"}],"iS1Sf":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Lazy = require("../Data.List.Lazy/index.js");
var Data_List_Lazy_Types = require("../Data.List.Lazy.Types/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Leaf = function() {
    function Leaf1() {
    }
    Leaf1.value = new Leaf1();
    return Leaf1;
}();
var Two = function() {
    function Two1(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    }
    Two1.create = function(value0) {
        return function(value1) {
            return function(value2) {
                return function(value3) {
                    return new Two1(value0, value1, value2, value3);
                };
            };
        };
    };
    return Two1;
}();
var Three = function() {
    function Three1(value0, value1, value2, value3, value4, value5, value6) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
        this.value6 = value6;
    }
    Three1.create = function(value0) {
        return function(value1) {
            return function(value2) {
                return function(value3) {
                    return function(value4) {
                        return function(value5) {
                            return function(value6) {
                                return new Three1(value0, value1, value2, value3, value4, value5, value6);
                            };
                        };
                    };
                };
            };
        };
    };
    return Three1;
}();
var TwoLeft = function() {
    function TwoLeft1(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    }
    TwoLeft1.create = function(value0) {
        return function(value1) {
            return function(value2) {
                return new TwoLeft1(value0, value1, value2);
            };
        };
    };
    return TwoLeft1;
}();
var TwoRight = function() {
    function TwoRight1(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    }
    TwoRight1.create = function(value0) {
        return function(value1) {
            return function(value2) {
                return new TwoRight1(value0, value1, value2);
            };
        };
    };
    return TwoRight1;
}();
var ThreeLeft = function() {
    function ThreeLeft1(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    }
    ThreeLeft1.create = function(value0) {
        return function(value1) {
            return function(value2) {
                return function(value3) {
                    return function(value4) {
                        return function(value5) {
                            return new ThreeLeft1(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    return ThreeLeft1;
}();
var ThreeMiddle = function() {
    function ThreeMiddle1(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    }
    ThreeMiddle1.create = function(value0) {
        return function(value1) {
            return function(value2) {
                return function(value3) {
                    return function(value4) {
                        return function(value5) {
                            return new ThreeMiddle1(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    return ThreeMiddle1;
}();
var ThreeRight = function() {
    function ThreeRight1(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    }
    ThreeRight1.create = function(value0) {
        return function(value1) {
            return function(value2) {
                return function(value3) {
                    return function(value4) {
                        return function(value5) {
                            return new ThreeRight1(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    return ThreeRight1;
}();
var KickUp = function() {
    function KickUp1(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    }
    KickUp1.create = function(value0) {
        return function(value1) {
            return function(value2) {
                return function(value3) {
                    return new KickUp1(value0, value1, value2, value3);
                };
            };
        };
    };
    return KickUp1;
}();
var values = function(v) {
    if (v instanceof Leaf) return Data_List_Types.Nil.value;
    if (v instanceof Two) return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
    if (v instanceof Three) return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
    throw new Error("Failed pattern match at Data.Map.Internal (line 612, column 1 - line 612, column 40): " + [
        v.constructor.name
    ]);
};
var size = function(v) {
    if (v instanceof Leaf) return 0;
    if (v instanceof Two) return (1 + size(v.value0) | 0) + size(v.value3) | 0;
    if (v instanceof Three) return ((2 + size(v.value0) | 0) + size(v.value3) | 0) + size(v.value6) | 0;
    throw new Error("Failed pattern match at Data.Map.Internal (line 662, column 1 - line 662, column 35): " + [
        v.constructor.name
    ]);
};
var singleton = function(k) {
    return function(v) {
        return new Two(Leaf.value, k, v, Leaf.value);
    };
};
var toUnfoldable = function(dictUnfoldable) {
    return function(m) {
        var go = function($copy_v) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                }
                if (v instanceof Data_List_Types.Cons) {
                    if (v.value0 instanceof Leaf) {
                        $copy_v = v.value1;
                        return;
                    }
                    if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf) {
                        $tco_done = true;
                        return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                    }
                    if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                        $tco_done = true;
                        return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                    }
                    if (v.value0 instanceof Two) {
                        $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                        return;
                    }
                    if (v.value0 instanceof Three) {
                        $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                        return;
                    }
                    throw new Error("Failed pattern match at Data.Map.Internal (line 577, column 18 - line 586, column 71): " + [
                        v.value0.constructor.name
                    ]);
                }
                throw new Error("Failed pattern match at Data.Map.Internal (line 576, column 3 - line 576, column 19): " + [
                    v.constructor.name
                ]);
            }
            while(!$tco_done)$tco_result = $tco_loop($copy_v);
            return $tco_result;
        };
        return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
    };
};
var toAscArray = toUnfoldable(Data_Unfoldable.unfoldableArray);
var toUnfoldableUnordered = function(dictUnfoldable) {
    return function(m) {
        var go = function($copy_v) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                }
                if (v instanceof Data_List_Types.Cons) {
                    if (v.value0 instanceof Leaf) {
                        $copy_v = v.value1;
                        return;
                    }
                    if (v.value0 instanceof Two) {
                        $tco_done = true;
                        return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value3, v.value1))));
                    }
                    if (v.value0 instanceof Three) {
                        $tco_done = true;
                        return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(v.value0.value6, v.value1))))));
                    }
                    throw new Error("Failed pattern match at Data.Map.Internal (line 598, column 18 - line 603, column 77): " + [
                        v.value0.constructor.name
                    ]);
                }
                throw new Error("Failed pattern match at Data.Map.Internal (line 597, column 3 - line 597, column 19): " + [
                    v.constructor.name
                ]);
            }
            while(!$tco_done)$tco_result = $tco_loop($copy_v);
            return $tco_result;
        };
        return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
    };
};
var showTree = function(dictShow) {
    return function(dictShow1) {
        return function(v) {
            if (v instanceof Leaf) return "Leaf";
            if (v instanceof Two) return "Two (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Data_Show.show(dictShow)(v.value1) + (") (" + (Data_Show.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + ")")))))));
            if (v instanceof Three) return "Three (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Data_Show.show(dictShow)(v.value1) + (") (" + (Data_Show.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + (") (" + (Data_Show.show(dictShow)(v.value4) + (") (" + (Data_Show.show(dictShow1)(v.value5) + (") (" + (showTree(dictShow)(dictShow1)(v.value6) + ")")))))))))))));
            throw new Error("Failed pattern match at Data.Map.Internal (line 153, column 1 - line 153, column 62): " + [
                v.constructor.name
            ]);
        };
    };
};
var showMap = function(dictShow) {
    return function(dictShow1) {
        return new Data_Show.Show(function(m) {
            return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(dictShow)(dictShow1)))(toAscArray(m)) + ")");
        });
    };
};
var lookupLE = function(dictOrd) {
    return function(k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function(v) {
            if (v instanceof Leaf) return Data_Maybe.Nothing.value;
            if (v instanceof Two) {
                var v2 = comp(k)(v.value1);
                if (v2 instanceof Data_Ordering.EQ) return new Data_Maybe.Just({
                    key: v.value1,
                    value: v.value2
                });
                if (v2 instanceof Data_Ordering.GT) return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                    key: v.value1,
                    value: v.value2
                })(go(v.value3)));
                if (v2 instanceof Data_Ordering.LT) return go(v.value0);
                throw new Error("Failed pattern match at Data.Map.Internal (line 225, column 33 - line 228, column 20): " + [
                    v2.constructor.name
                ]);
            }
            if (v instanceof Three) {
                var v3 = comp(k)(v.value4);
                if (v3 instanceof Data_Ordering.EQ) return new Data_Maybe.Just({
                    key: v.value4,
                    value: v.value5
                });
                if (v3 instanceof Data_Ordering.GT) return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                    key: v.value4,
                    value: v.value5
                })(go(v.value6)));
                if (v3 instanceof Data_Ordering.LT) return go(new Two(v.value0, v.value1, v.value2, v.value3));
                throw new Error("Failed pattern match at Data.Map.Internal (line 229, column 45 - line 232, column 36): " + [
                    v3.constructor.name
                ]);
            }
            throw new Error("Failed pattern match at Data.Map.Internal (line 224, column 5 - line 224, column 22): " + [
                v.constructor.name
            ]);
        };
        return go;
    };
};
var lookupGE = function(dictOrd) {
    return function(k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function(v) {
            if (v instanceof Leaf) return Data_Maybe.Nothing.value;
            if (v instanceof Two) {
                var v2 = comp(k)(v.value1);
                if (v2 instanceof Data_Ordering.EQ) return new Data_Maybe.Just({
                    key: v.value1,
                    value: v.value2
                });
                if (v2 instanceof Data_Ordering.LT) return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                    key: v.value1,
                    value: v.value2
                })(go(v.value0)));
                if (v2 instanceof Data_Ordering.GT) return go(v.value3);
                throw new Error("Failed pattern match at Data.Map.Internal (line 259, column 33 - line 262, column 21): " + [
                    v2.constructor.name
                ]);
            }
            if (v instanceof Three) {
                var v3 = comp(k)(v.value1);
                if (v3 instanceof Data_Ordering.EQ) return new Data_Maybe.Just({
                    key: v.value1,
                    value: v.value2
                });
                if (v3 instanceof Data_Ordering.LT) return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                    key: v.value1,
                    value: v.value2
                })(go(v.value0)));
                if (v3 instanceof Data_Ordering.GT) return go(new Two(v.value3, v.value4, v.value5, v.value6));
                throw new Error("Failed pattern match at Data.Map.Internal (line 263, column 45 - line 266, column 37): " + [
                    v3.constructor.name
                ]);
            }
            throw new Error("Failed pattern match at Data.Map.Internal (line 258, column 5 - line 258, column 22): " + [
                v.constructor.name
            ]);
        };
        return go;
    };
};
var lookup = function(dictOrd) {
    return function(k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function($copy_v) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v) {
                if (v instanceof Leaf) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                }
                if (v instanceof Two) {
                    var v2 = comp(k)(v.value1);
                    if (v2 instanceof Data_Ordering.EQ) {
                        $tco_done = true;
                        return new Data_Maybe.Just(v.value2);
                    }
                    if (v2 instanceof Data_Ordering.LT) {
                        $copy_v = v.value0;
                        return;
                    }
                    $copy_v = v.value3;
                    return;
                }
                if (v instanceof Three) {
                    var v3 = comp(k)(v.value1);
                    if (v3 instanceof Data_Ordering.EQ) {
                        $tco_done = true;
                        return new Data_Maybe.Just(v.value2);
                    }
                    var v4 = comp(k)(v.value4);
                    if (v4 instanceof Data_Ordering.EQ) {
                        $tco_done = true;
                        return new Data_Maybe.Just(v.value5);
                    }
                    if (v3 instanceof Data_Ordering.LT) {
                        $copy_v = v.value0;
                        return;
                    }
                    if (v4 instanceof Data_Ordering.GT) {
                        $copy_v = v.value6;
                        return;
                    }
                    $copy_v = v.value3;
                    return;
                }
                throw new Error("Failed pattern match at Data.Map.Internal (line 200, column 5 - line 200, column 22): " + [
                    v.constructor.name
                ]);
            }
            while(!$tco_done)$tco_result = $tco_loop($copy_v);
            return $tco_result;
        };
        return go;
    };
};
var member = function(dictOrd) {
    return function(k) {
        return function(m) {
            return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
        };
    };
};
var keys = function(v) {
    if (v instanceof Leaf) return Data_List_Types.Nil.value;
    if (v instanceof Two) return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
    if (v instanceof Three) return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
    throw new Error("Failed pattern match at Data.Map.Internal (line 606, column 1 - line 606, column 38): " + [
        v.constructor.name
    ]);
};
var isSubmap = function(dictOrd) {
    return function(dictEq) {
        return function(m1) {
            return function(m2) {
                var f = function(v) {
                    return Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(lookup(dictOrd)(v.value0)(m2))(new Data_Maybe.Just(v.value1));
                };
                return Data_Foldable.all(Data_List_Lazy_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(f)(toUnfoldable(Data_List_Lazy_Types.unfoldableList)(m1));
            };
        };
    };
};
var isEmpty = function(v) {
    if (v instanceof Leaf) return true;
    return false;
};
var functorMap = new Data_Functor.Functor(function(v) {
    return function(v1) {
        if (v1 instanceof Leaf) return Leaf.value;
        if (v1 instanceof Two) return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
        if (v1 instanceof Three) return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
        throw new Error("Failed pattern match at Data.Map.Internal (line 96, column 1 - line 99, column 110): " + [
            v.constructor.name,
            v1.constructor.name
        ]);
    };
});
var functorWithIndexMap = new Data_FunctorWithIndex.FunctorWithIndex(function() {
    return functorMap;
}, function(v) {
    return function(v1) {
        if (v1 instanceof Leaf) return Leaf.value;
        if (v1 instanceof Two) return new Two(Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value0), v1.value1, v(v1.value1)(v1.value2), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value3));
        if (v1 instanceof Three) return new Three(Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value0), v1.value1, v(v1.value1)(v1.value2), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value3), v1.value4, v(v1.value4)(v1.value5), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value6));
        throw new Error("Failed pattern match at Data.Map.Internal (line 101, column 1 - line 104, column 152): " + [
            v.constructor.name,
            v1.constructor.name
        ]);
    };
});
var fromZipper = function($copy_dictOrd) {
    return function($copy_v) {
        return function($copy_tree) {
            var $tco_var_dictOrd = $copy_dictOrd;
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(dictOrd, v, tree) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return tree;
                }
                if (v instanceof Data_List_Types.Cons) {
                    if (v.value0 instanceof TwoLeft) {
                        $tco_var_dictOrd = dictOrd;
                        $tco_var_v = v.value1;
                        $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                        return;
                    }
                    if (v.value0 instanceof TwoRight) {
                        $tco_var_dictOrd = dictOrd;
                        $tco_var_v = v.value1;
                        $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                        return;
                    }
                    if (v.value0 instanceof ThreeLeft) {
                        $tco_var_dictOrd = dictOrd;
                        $tco_var_v = v.value1;
                        $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                        return;
                    }
                    if (v.value0 instanceof ThreeMiddle) {
                        $tco_var_dictOrd = dictOrd;
                        $tco_var_v = v.value1;
                        $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                        return;
                    }
                    if (v.value0 instanceof ThreeRight) {
                        $tco_var_dictOrd = dictOrd;
                        $tco_var_v = v.value1;
                        $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                        return;
                    }
                    throw new Error("Failed pattern match at Data.Map.Internal (line 418, column 3 - line 423, column 88): " + [
                        v.value0.constructor.name
                    ]);
                }
                throw new Error("Failed pattern match at Data.Map.Internal (line 415, column 1 - line 415, column 80): " + [
                    v.constructor.name,
                    tree.constructor.name
                ]);
            }
            while(!$tco_done)$tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
            return $tco_result;
        };
    };
};
var insert = function(dictOrd) {
    return function(k) {
        return function(v) {
            var up = function($copy_v1) {
                return function($copy_v2) {
                    var $tco_var_v1 = $copy_v1;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(v1, v2) {
                        if (v1 instanceof Data_List_Types.Nil) {
                            $tco_done = true;
                            return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                        }
                        if (v1 instanceof Data_List_Types.Cons) {
                            if (v1.value0 instanceof TwoLeft) {
                                $tco_done = true;
                                return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                            }
                            if (v1.value0 instanceof TwoRight) {
                                $tco_done = true;
                                return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                            }
                            if (v1.value0 instanceof ThreeLeft) {
                                $tco_var_v1 = v1.value1;
                                $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                return;
                            }
                            if (v1.value0 instanceof ThreeMiddle) {
                                $tco_var_v1 = v1.value1;
                                $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                return;
                            }
                            if (v1.value0 instanceof ThreeRight) {
                                $tco_var_v1 = v1.value1;
                                $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                return;
                            }
                            throw new Error("Failed pattern match at Data.Map.Internal (line 454, column 5 - line 459, column 108): " + [
                                v1.value0.constructor.name,
                                v2.constructor.name
                            ]);
                        }
                        throw new Error("Failed pattern match at Data.Map.Internal (line 451, column 3 - line 451, column 56): " + [
                            v1.constructor.name,
                            v2.constructor.name
                        ]);
                    }
                    while(!$tco_done)$tco_result = $tco_loop($tco_var_v1, $copy_v2);
                    return $tco_result;
                };
            };
            var comp = Data_Ord.compare(dictOrd);
            var down = function($copy_ctx) {
                return function($copy_v1) {
                    var $tco_var_ctx = $copy_ctx;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(ctx, v1) {
                        if (v1 instanceof Leaf) {
                            $tco_done = true;
                            return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                        }
                        if (v1 instanceof Two) {
                            var v2 = comp(k)(v1.value1);
                            if (v2 instanceof Data_Ordering.EQ) {
                                $tco_done = true;
                                return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                            }
                            if (v2 instanceof Data_Ordering.LT) {
                                $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                $copy_v1 = v1.value0;
                                return;
                            }
                            $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                            $copy_v1 = v1.value3;
                            return;
                        }
                        if (v1 instanceof Three) {
                            var v3 = comp(k)(v1.value1);
                            if (v3 instanceof Data_Ordering.EQ) {
                                $tco_done = true;
                                return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                            }
                            var v4 = comp(k)(v1.value4);
                            if (v4 instanceof Data_Ordering.EQ) {
                                $tco_done = true;
                                return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                            }
                            if (v3 instanceof Data_Ordering.LT) {
                                $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                $copy_v1 = v1.value0;
                                return;
                            }
                            if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                $copy_v1 = v1.value3;
                                return;
                            }
                            $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                            $copy_v1 = v1.value6;
                            return;
                        }
                        throw new Error("Failed pattern match at Data.Map.Internal (line 434, column 3 - line 434, column 55): " + [
                            ctx.constructor.name,
                            v1.constructor.name
                        ]);
                    }
                    while(!$tco_done)$tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                    return $tco_result;
                };
            };
            return down(Data_List_Types.Nil.value);
        };
    };
};
var pop = function(dictOrd) {
    return function(k) {
        var up = function($copy_ctxs) {
            return function($copy_tree) {
                var $tco_var_ctxs = $copy_ctxs;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(ctxs, tree) {
                    if (ctxs instanceof Data_List_Types.Nil) {
                        $tco_done = true;
                        return tree;
                    }
                    if (ctxs instanceof Data_List_Types.Cons) {
                        if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                        }
                        if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                        }
                        if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                            $tco_var_ctxs = ctxs.value1;
                            $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                            return;
                        }
                        if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                            $tco_var_ctxs = ctxs.value1;
                            $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                            return;
                        }
                        if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                        }
                        if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                        }
                        if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Leaf && ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                        }
                        if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Leaf && ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                        }
                        if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value0 instanceof Leaf && ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                        }
                        if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                        }
                        if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                        }
                        if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                        }
                        if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                        }
                        if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                        }
                        if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                        }
                        if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                        }
                        if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                        }
                        throw new Error("Failed pattern match at Data.Map.Internal (line 511, column 9 - line 528, column 136): " + [
                            ctxs.value0.constructor.name,
                            tree.constructor.name
                        ]);
                    }
                    throw new Error("Failed pattern match at Data.Map.Internal (line 508, column 5 - line 528, column 136): " + [
                        ctxs.constructor.name
                    ]);
                }
                while(!$tco_done)$tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                return $tco_result;
            };
        };
        var removeMaxNode = function($copy_ctx) {
            return function($copy_m) {
                var $tco_var_ctx = $copy_ctx;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(ctx, m) {
                    if (m instanceof Two && m.value0 instanceof Leaf && m.value3 instanceof Leaf) {
                        $tco_done = true;
                        return up(ctx)(Leaf.value);
                    }
                    if (m instanceof Two) {
                        $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                        $copy_m = m.value3;
                        return;
                    }
                    if (m instanceof Three && m.value0 instanceof Leaf && m.value3 instanceof Leaf && m.value6 instanceof Leaf) {
                        $tco_done = true;
                        return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                    }
                    if (m instanceof Three) {
                        $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                        $copy_m = m.value6;
                        return;
                    }
                    throw new Error("Failed pattern match at Data.Map.Internal (line 540, column 5 - line 544, column 107): " + [
                        m.constructor.name
                    ]);
                }
                while(!$tco_done)$tco_result = $tco_loop($tco_var_ctx, $copy_m);
                return $tco_result;
            };
        };
        var maxNode = function($copy_m) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(m) {
                if (m instanceof Two && m.value3 instanceof Leaf) {
                    $tco_done = true;
                    return {
                        key: m.value1,
                        value: m.value2
                    };
                }
                if (m instanceof Two) {
                    $copy_m = m.value3;
                    return;
                }
                if (m instanceof Three && m.value6 instanceof Leaf) {
                    $tco_done = true;
                    return {
                        key: m.value4,
                        value: m.value5
                    };
                }
                if (m instanceof Three) {
                    $copy_m = m.value6;
                    return;
                }
                throw new Error("Failed pattern match at Data.Map.Internal (line 531, column 33 - line 535, column 45): " + [
                    m.constructor.name
                ]);
            }
            while(!$tco_done)$tco_result = $tco_loop($copy_m);
            return $tco_result;
        };
        var comp = Data_Ord.compare(dictOrd);
        var down = function($copy_ctx) {
            return function($copy_m) {
                var $tco_var_ctx = $copy_ctx;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(ctx, m) {
                    if (m instanceof Leaf) {
                        $tco_done = true;
                        return Data_Maybe.Nothing.value;
                    }
                    if (m instanceof Two) {
                        var v = comp(k)(m.value1);
                        if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                        }
                        if (v instanceof Data_Ordering.EQ) {
                            var max = maxNode(m.value0);
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                        }
                        if (v instanceof Data_Ordering.LT) {
                            $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                            $copy_m = m.value0;
                            return;
                        }
                        $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                        $copy_m = m.value3;
                        return;
                    }
                    if (m instanceof Three) {
                        var leaves = function() {
                            if (m.value0 instanceof Leaf && m.value3 instanceof Leaf && m.value6 instanceof Leaf) return true;
                            return false;
                        }();
                        var v = comp(k)(m.value4);
                        var v3 = comp(k)(m.value1);
                        if (leaves && v3 instanceof Data_Ordering.EQ) {
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                        }
                        if (leaves && v instanceof Data_Ordering.EQ) {
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                        }
                        if (v3 instanceof Data_Ordering.EQ) {
                            var max = maxNode(m.value0);
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                        }
                        if (v instanceof Data_Ordering.EQ) {
                            var max = maxNode(m.value3);
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                        }
                        if (v3 instanceof Data_Ordering.LT) {
                            $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                            $copy_m = m.value0;
                            return;
                        }
                        if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                            $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                            $copy_m = m.value3;
                            return;
                        }
                        $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                        $copy_m = m.value6;
                        return;
                    }
                    throw new Error("Failed pattern match at Data.Map.Internal (line 481, column 34 - line 504, column 80): " + [
                        m.constructor.name
                    ]);
                }
                while(!$tco_done)$tco_result = $tco_loop($tco_var_ctx, $copy_m);
                return $tco_result;
            };
        };
        return down(Data_List_Types.Nil.value);
    };
};
var foldableMap = new Data_Foldable.Foldable(function(dictMonoid) {
    return function(f) {
        return function(m) {
            return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
        };
    };
}, function(f) {
    return function(z) {
        return function(m) {
            return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
        };
    };
}, function(f) {
    return function(z) {
        return function(m) {
            return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
        };
    };
});
var traversableMap = new Data_Traversable.Traversable(function() {
    return foldableMap;
}, function() {
    return functorMap;
}, function(dictApplicative) {
    return Data_Traversable.traverse(traversableMap)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
}, function(dictApplicative) {
    return function(f) {
        return function(v) {
            if (v instanceof Leaf) return Control_Applicative.pure(dictApplicative)(Leaf.value);
            if (v instanceof Two) return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Two.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value3));
            if (v instanceof Three) return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Three.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value3)))(Control_Applicative.pure(dictApplicative)(v.value4)))(f(v.value5)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value6));
            throw new Error("Failed pattern match at Data.Map.Internal (line 119, column 1 - line 134, column 31): " + [
                f.constructor.name,
                v.constructor.name
            ]);
        };
    };
});
var foldSubmap = function(dictOrd) {
    return function(dictMonoid) {
        return function(kmin) {
            return function(kmax) {
                return function(f) {
                    var tooSmall = function() {
                        if (kmin instanceof Data_Maybe.Just) return function(k) {
                            return Data_Ord.lessThan(dictOrd)(k)(kmin.value0);
                        };
                        if (kmin instanceof Data_Maybe.Nothing) return Data_Function["const"](false);
                        throw new Error("Failed pattern match at Data.Map.Internal (line 319, column 7 - line 323, column 22): " + [
                            kmin.constructor.name
                        ]);
                    }();
                    var tooLarge = function() {
                        if (kmax instanceof Data_Maybe.Just) return function(k) {
                            return Data_Ord.greaterThan(dictOrd)(k)(kmax.value0);
                        };
                        if (kmax instanceof Data_Maybe.Nothing) return Data_Function["const"](false);
                        throw new Error("Failed pattern match at Data.Map.Internal (line 326, column 7 - line 330, column 22): " + [
                            kmax.constructor.name
                        ]);
                    }();
                    var inBounds = function() {
                        if (kmin instanceof Data_Maybe.Just && kmax instanceof Data_Maybe.Just) return function(k) {
                            return Data_Ord.lessThanOrEq(dictOrd)(kmin.value0)(k) && Data_Ord.lessThanOrEq(dictOrd)(k)(kmax.value0);
                        };
                        if (kmin instanceof Data_Maybe.Just && kmax instanceof Data_Maybe.Nothing) return function(k) {
                            return Data_Ord.lessThanOrEq(dictOrd)(kmin.value0)(k);
                        };
                        if (kmin instanceof Data_Maybe.Nothing && kmax instanceof Data_Maybe.Just) return function(k) {
                            return Data_Ord.lessThanOrEq(dictOrd)(k)(kmax.value0);
                        };
                        if (kmin instanceof Data_Maybe.Nothing && kmax instanceof Data_Maybe.Nothing) return Data_Function["const"](true);
                        throw new Error("Failed pattern match at Data.Map.Internal (line 333, column 7 - line 341, column 21): " + [
                            kmin.constructor.name,
                            kmax.constructor.name
                        ]);
                    }();
                    var go = function(v) {
                        if (v instanceof Leaf) return Data_Monoid.mempty(dictMonoid);
                        if (v instanceof Two) return Data_Semigroup.append(dictMonoid.Semigroup0())(function() {
                            var $633 = tooSmall(v.value1);
                            if ($633) return Data_Monoid.mempty(dictMonoid);
                            return go(v.value0);
                        }())(Data_Semigroup.append(dictMonoid.Semigroup0())(function() {
                            var $634 = inBounds(v.value1);
                            if ($634) return f(v.value1)(v.value2);
                            return Data_Monoid.mempty(dictMonoid);
                        }())(function() {
                            var $635 = tooLarge(v.value1);
                            if ($635) return Data_Monoid.mempty(dictMonoid);
                            return go(v.value3);
                        }()));
                        if (v instanceof Three) return Data_Semigroup.append(dictMonoid.Semigroup0())(function() {
                            var $640 = tooSmall(v.value1);
                            if ($640) return Data_Monoid.mempty(dictMonoid);
                            return go(v.value0);
                        }())(Data_Semigroup.append(dictMonoid.Semigroup0())(function() {
                            var $641 = inBounds(v.value1);
                            if ($641) return f(v.value1)(v.value2);
                            return Data_Monoid.mempty(dictMonoid);
                        }())(Data_Semigroup.append(dictMonoid.Semigroup0())(function() {
                            var $642 = tooSmall(v.value4) || tooLarge(v.value1);
                            if ($642) return Data_Monoid.mempty(dictMonoid);
                            return go(v.value3);
                        }())(Data_Semigroup.append(dictMonoid.Semigroup0())(function() {
                            var $643 = inBounds(v.value4);
                            if ($643) return f(v.value4)(v.value5);
                            return Data_Monoid.mempty(dictMonoid);
                        }())(function() {
                            var $644 = tooLarge(v.value4);
                            if ($644) return Data_Monoid.mempty(dictMonoid);
                            return go(v.value6);
                        }()))));
                        throw new Error("Failed pattern match at Data.Map.Internal (line 359, column 10 - line 371, column 54): " + [
                            v.constructor.name
                        ]);
                    };
                    return go;
                };
            };
        };
    };
};
var findMin = function() {
    var go = function($copy_v) {
        return function($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
                if (v1 instanceof Leaf) {
                    $tco_done = true;
                    return v;
                }
                if (v1 instanceof Two) {
                    $tco_var_v = new Data_Maybe.Just({
                        key: v1.value1,
                        value: v1.value2
                    });
                    $copy_v1 = v1.value0;
                    return;
                }
                if (v1 instanceof Three) {
                    $tco_var_v = new Data_Maybe.Just({
                        key: v1.value1,
                        value: v1.value2
                    });
                    $copy_v1 = v1.value0;
                    return;
                }
                throw new Error("Failed pattern match at Data.Map.Internal (line 297, column 5 - line 297, column 22): " + [
                    v.constructor.name,
                    v1.constructor.name
                ]);
            }
            while(!$tco_done)$tco_result = $tco_loop($tco_var_v, $copy_v1);
            return $tco_result;
        };
    };
    return go(Data_Maybe.Nothing.value);
}();
var lookupGT = function(dictOrd) {
    return function(k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function(v) {
            if (v instanceof Leaf) return Data_Maybe.Nothing.value;
            if (v instanceof Two) {
                var v2 = comp(k)(v.value1);
                if (v2 instanceof Data_Ordering.EQ) return findMin(v.value3);
                if (v2 instanceof Data_Ordering.LT) return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                    key: v.value1,
                    value: v.value2
                })(go(v.value0)));
                if (v2 instanceof Data_Ordering.GT) return go(v.value3);
                throw new Error("Failed pattern match at Data.Map.Internal (line 276, column 33 - line 279, column 21): " + [
                    v2.constructor.name
                ]);
            }
            if (v instanceof Three) {
                var v3 = comp(k)(v.value1);
                if (v3 instanceof Data_Ordering.EQ) return findMin(new Two(v.value3, v.value4, v.value5, v.value6));
                if (v3 instanceof Data_Ordering.LT) return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                    key: v.value1,
                    value: v.value2
                })(go(v.value0)));
                if (v3 instanceof Data_Ordering.GT) return go(new Two(v.value3, v.value4, v.value5, v.value6));
                throw new Error("Failed pattern match at Data.Map.Internal (line 280, column 45 - line 283, column 37): " + [
                    v3.constructor.name
                ]);
            }
            throw new Error("Failed pattern match at Data.Map.Internal (line 275, column 5 - line 275, column 22): " + [
                v.constructor.name
            ]);
        };
        return go;
    };
};
var findMax = function() {
    var go = function($copy_v) {
        return function($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
                if (v1 instanceof Leaf) {
                    $tco_done = true;
                    return v;
                }
                if (v1 instanceof Two) {
                    $tco_var_v = new Data_Maybe.Just({
                        key: v1.value1,
                        value: v1.value2
                    });
                    $copy_v1 = v1.value3;
                    return;
                }
                if (v1 instanceof Three) {
                    $tco_var_v = new Data_Maybe.Just({
                        key: v1.value4,
                        value: v1.value5
                    });
                    $copy_v1 = v1.value6;
                    return;
                }
                throw new Error("Failed pattern match at Data.Map.Internal (line 289, column 5 - line 289, column 22): " + [
                    v.constructor.name,
                    v1.constructor.name
                ]);
            }
            while(!$tco_done)$tco_result = $tco_loop($tco_var_v, $copy_v1);
            return $tco_result;
        };
    };
    return go(Data_Maybe.Nothing.value);
}();
var lookupLT = function(dictOrd) {
    return function(k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function(v) {
            if (v instanceof Leaf) return Data_Maybe.Nothing.value;
            if (v instanceof Two) {
                var v2 = comp(k)(v.value1);
                if (v2 instanceof Data_Ordering.EQ) return findMax(v.value0);
                if (v2 instanceof Data_Ordering.GT) return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                    key: v.value1,
                    value: v.value2
                })(go(v.value3)));
                if (v2 instanceof Data_Ordering.LT) return go(v.value0);
                throw new Error("Failed pattern match at Data.Map.Internal (line 242, column 33 - line 245, column 20): " + [
                    v2.constructor.name
                ]);
            }
            if (v instanceof Three) {
                var v3 = comp(k)(v.value4);
                if (v3 instanceof Data_Ordering.EQ) return findMax(new Two(v.value0, v.value1, v.value2, v.value3));
                if (v3 instanceof Data_Ordering.GT) return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                    key: v.value4,
                    value: v.value5
                })(go(v.value6)));
                if (v3 instanceof Data_Ordering.LT) return go(new Two(v.value0, v.value1, v.value2, v.value3));
                throw new Error("Failed pattern match at Data.Map.Internal (line 246, column 45 - line 249, column 36): " + [
                    v3.constructor.name
                ]);
            }
            throw new Error("Failed pattern match at Data.Map.Internal (line 241, column 5 - line 241, column 22): " + [
                v.constructor.name
            ]);
        };
        return go;
    };
};
var eqMap = function(dictEq) {
    return function(dictEq1) {
        return new Data_Eq.Eq(function(m1) {
            return function(m2) {
                return Data_Eq.eq(Data_Eq.eqArray(Data_Tuple.eqTuple(dictEq)(dictEq1)))(toAscArray(m1))(toAscArray(m2));
            };
        });
    };
};
var ordMap = function(dictOrd) {
    return function(dictOrd1) {
        return new Data_Ord.Ord(function() {
            return eqMap(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function(m1) {
            return function(m2) {
                return Data_Ord.compare(Data_Ord.ordArray(Data_Tuple.ordTuple(dictOrd)(dictOrd1)))(toAscArray(m1))(toAscArray(m2));
            };
        });
    };
};
var eq1Map = function(dictEq) {
    return new Data_Eq.Eq1(function(dictEq1) {
        return Data_Eq.eq(eqMap(dictEq)(dictEq1));
    });
};
var ord1Map = function(dictOrd) {
    return new Data_Ord.Ord1(function() {
        return eq1Map(dictOrd.Eq0());
    }, function(dictOrd1) {
        return Data_Ord.compare(ordMap(dictOrd)(dictOrd1));
    });
};
var empty = Leaf.value;
var fromFoldable = function(dictOrd) {
    return function(dictFoldable) {
        return Data_Foldable.foldl(dictFoldable)(function(m) {
            return function(v) {
                return insert(dictOrd)(v.value0)(v.value1)(m);
            };
        })(empty);
    };
};
var filterWithKey = function(dictOrd) {
    return function(predicate) {
        var $758 = fromFoldable(dictOrd)(Data_List_Lazy_Types.foldableList);
        var $759 = Data_List_Lazy.filter(Data_Tuple.uncurry(predicate));
        var $760 = toUnfoldable(Data_List_Lazy_Types.unfoldableList);
        return function($761) {
            return $758($759($760($761)));
        };
    };
};
var filter = function(dictOrd) {
    return function(predicate) {
        return filterWithKey(dictOrd)(Data_Function["const"](predicate));
    };
};
var filterKeys = function(dictOrd) {
    return function(predicate) {
        return filterWithKey(dictOrd)(function($762) {
            return Data_Function["const"](predicate($762));
        });
    };
};
var fromFoldableWithIndex = function(dictOrd) {
    return function(dictFoldableWithIndex) {
        return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function(k) {
            return function(m) {
                return function(v) {
                    return insert(dictOrd)(k)(v)(m);
                };
            };
        })(empty);
    };
};
var intersectionWith = function(dictOrd) {
    return function(f) {
        return function(m1) {
            return function(m2) {
                var go = function($copy_v) {
                    return function($copy_v1) {
                        return function($copy_m) {
                            var $tco_var_v = $copy_v;
                            var $tco_var_v1 = $copy_v1;
                            var $tco_done = false;
                            var $tco_result;
                            function $tco_loop(v, v1, m) {
                                if (v instanceof Data_List_Types.Nil) {
                                    $tco_done = true;
                                    return m;
                                }
                                if (v1 instanceof Data_List_Types.Nil) {
                                    $tco_done = true;
                                    return m;
                                }
                                if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                    var v2 = Data_Ord.compare(dictOrd)(v.value0.value0)(v1.value0.value0);
                                    if (v2 instanceof Data_Ordering.LT) {
                                        $tco_var_v = v.value1;
                                        $tco_var_v1 = v1;
                                        $copy_m = m;
                                        return;
                                    }
                                    if (v2 instanceof Data_Ordering.EQ) {
                                        $tco_var_v = v.value1;
                                        $tco_var_v1 = v1.value1;
                                        $copy_m = insert(dictOrd)(v.value0.value0)(f(v.value0.value1)(v1.value0.value1))(m);
                                        return;
                                    }
                                    if (v2 instanceof Data_Ordering.GT) {
                                        $tco_var_v = v;
                                        $tco_var_v1 = v1.value1;
                                        $copy_m = m;
                                        return;
                                    }
                                    throw new Error("Failed pattern match at Data.Map.Internal (line 641, column 5 - line 644, column 27): " + [
                                        v2.constructor.name
                                    ]);
                                }
                                throw new Error("Failed pattern match at Data.Map.Internal (line 638, column 3 - line 638, column 17): " + [
                                    v.constructor.name,
                                    v1.constructor.name,
                                    m.constructor.name
                                ]);
                            }
                            while(!$tco_done)$tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_m);
                            return $tco_result;
                        };
                    };
                };
                return go(toUnfoldable(Data_List_Types.unfoldableList)(m1))(toUnfoldable(Data_List_Types.unfoldableList)(m2))(empty);
            };
        };
    };
};
var intersection = function(dictOrd) {
    return intersectionWith(dictOrd)(Data_Function["const"]);
};
var $$delete = function(dictOrd) {
    return function(k) {
        return function(m) {
            return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
        };
    };
};
var difference = function(dictOrd) {
    return function(m1) {
        return function(m2) {
            return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictOrd)))(m1)(keys(m2));
        };
    };
};
var checkValid = function(tree) {
    var allHeights = function(v) {
        if (v instanceof Leaf) return Control_Applicative.pure(Data_List_Types.applicativeList)(0);
        if (v instanceof Two) return Data_Functor.map(Data_List_Types.functorList)(function(n) {
            return n + 1 | 0;
        })(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value0))(allHeights(v.value3)));
        if (v instanceof Three) return Data_Functor.map(Data_List_Types.functorList)(function(n) {
            return n + 1 | 0;
        })(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value3))(allHeights(v.value6))));
        throw new Error("Failed pattern match at Data.Map.Internal (line 188, column 3 - line 188, column 36): " + [
            v.constructor.name
        ]);
    };
    return Data_List.length(Data_List.nub(Data_Eq.eqInt)(allHeights(tree))) === 1;
};
var asList = Control_Category.identity(Control_Category.categoryFn);
var foldableWithIndexMap = new Data_FoldableWithIndex.FoldableWithIndex(function() {
    return foldableMap;
}, function(dictMonoid) {
    return function(f) {
        return function(m) {
            return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(Data_Tuple.uncurry(f))(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
        };
    };
}, function(f) {
    return function(z) {
        return function(m) {
            return Data_Foldable.foldl(Data_List_Types.foldableList)(function() {
                var $763 = Data_Function.flip(f);
                return function($764) {
                    return Data_Tuple.uncurry($763($764));
                };
            }())(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
        };
    };
}, function(f) {
    return function(z) {
        return function(m) {
            return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Tuple.uncurry(f))(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
        };
    };
});
var mapMaybeWithKey = function(dictOrd) {
    return function(f) {
        return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexMap)(function(k) {
            return function(a) {
                return function(acc) {
                    return Data_Maybe.maybe(acc)(function(b) {
                        return insert(dictOrd)(k)(b)(acc);
                    })(f(k)(a));
                };
            };
        })(empty);
    };
};
var mapMaybe = function(dictOrd) {
    var $765 = mapMaybeWithKey(dictOrd);
    return function($766) {
        return $765(Data_Function["const"]($766));
    };
};
var traversableWithIndexMap = new Data_TraversableWithIndex.TraversableWithIndex(function() {
    return foldableWithIndexMap;
}, function() {
    return functorWithIndexMap;
}, function() {
    return traversableMap;
}, function(dictApplicative) {
    return function(f) {
        return function(v) {
            if (v instanceof Leaf) return Control_Applicative.pure(dictApplicative)(Leaf.value);
            if (v instanceof Two) return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Two.create)(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value1)(v.value2)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value3));
            if (v instanceof Three) return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Three.create)(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value1)(v.value2)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value3)))(Control_Applicative.pure(dictApplicative)(v.value4)))(f(v.value4)(v.value5)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value6));
            throw new Error("Failed pattern match at Data.Map.Internal (line 136, column 1 - line 150, column 40): " + [
                f.constructor.name,
                v.constructor.name
            ]);
        };
    };
});
var alter = function(dictOrd) {
    return function(f) {
        return function(k) {
            return function(m) {
                var v = f(lookup(dictOrd)(k)(m));
                if (v instanceof Data_Maybe.Nothing) return $$delete(dictOrd)(k)(m);
                if (v instanceof Data_Maybe.Just) return insert(dictOrd)(k)(v.value0)(m);
                throw new Error("Failed pattern match at Data.Map.Internal (line 549, column 15 - line 551, column 25): " + [
                    v.constructor.name
                ]);
            };
        };
    };
};
var fromFoldableWith = function(dictOrd) {
    return function(dictFoldable) {
        return function(f) {
            var combine = function(v) {
                return function(v1) {
                    if (v1 instanceof Data_Maybe.Just) return Data_Maybe.Just.create(f(v)(v1.value0));
                    if (v1 instanceof Data_Maybe.Nothing) return new Data_Maybe.Just(v);
                    throw new Error("Failed pattern match at Data.Map.Internal (line 566, column 3 - line 566, column 38): " + [
                        v.constructor.name,
                        v1.constructor.name
                    ]);
                };
            };
            return Data_Foldable.foldl(dictFoldable)(function(m) {
                return function(v) {
                    return alter(dictOrd)(combine(v.value1))(v.value0)(m);
                };
            })(empty);
        };
    };
};
var insertWith = function(dictOrd) {
    return function(f) {
        return function(k) {
            return function(v) {
                return alter(dictOrd)(function() {
                    var $767 = Data_Maybe.maybe(v)(Data_Function.flip(f)(v));
                    return function($768) {
                        return Data_Maybe.Just.create($767($768));
                    };
                }())(k);
            };
        };
    };
};
var unionWith = function(dictOrd) {
    return function(f) {
        return function(m1) {
            return function(m2) {
                var go = function(m) {
                    return function(v) {
                        return alter(dictOrd)(function() {
                            var $769 = Data_Maybe.maybe(v.value1)(f(v.value1));
                            return function($770) {
                                return Data_Maybe.Just.create($769($770));
                            };
                        }())(v.value0)(m);
                    };
                };
                return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
            };
        };
    };
};
var union = function(dictOrd) {
    return unionWith(dictOrd)(Data_Function["const"]);
};
var semigroupMap = function(dictOrd) {
    return new Data_Semigroup.Semigroup(union(dictOrd));
};
var monoidMap = function(dictOrd) {
    return new Data_Monoid.Monoid(function() {
        return semigroupMap(dictOrd);
    }, empty);
};
var submap = function(dictOrd) {
    return function(kmin) {
        return function(kmax) {
            return foldSubmap(dictOrd)(monoidMap(dictOrd))(kmin)(kmax)(singleton);
        };
    };
};
var unions = function(dictOrd) {
    return function(dictFoldable) {
        return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
    };
};
var update = function(dictOrd) {
    return function(f) {
        return function(k) {
            return function(m) {
                return alter(dictOrd)(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
            };
        };
    };
};
module.exports = {
    showTree: showTree,
    empty: empty,
    isEmpty: isEmpty,
    singleton: singleton,
    checkValid: checkValid,
    insert: insert,
    insertWith: insertWith,
    lookup: lookup,
    lookupLE: lookupLE,
    lookupLT: lookupLT,
    lookupGE: lookupGE,
    lookupGT: lookupGT,
    findMin: findMin,
    findMax: findMax,
    foldSubmap: foldSubmap,
    submap: submap,
    fromFoldable: fromFoldable,
    fromFoldableWith: fromFoldableWith,
    fromFoldableWithIndex: fromFoldableWithIndex,
    toUnfoldable: toUnfoldable,
    toUnfoldableUnordered: toUnfoldableUnordered,
    "delete": $$delete,
    pop: pop,
    member: member,
    alter: alter,
    update: update,
    keys: keys,
    values: values,
    union: union,
    unionWith: unionWith,
    unions: unions,
    intersection: intersection,
    intersectionWith: intersectionWith,
    difference: difference,
    isSubmap: isSubmap,
    size: size,
    filterWithKey: filterWithKey,
    filterKeys: filterKeys,
    filter: filter,
    mapMaybeWithKey: mapMaybeWithKey,
    mapMaybe: mapMaybe,
    eq1Map: eq1Map,
    eqMap: eqMap,
    ord1Map: ord1Map,
    ordMap: ordMap,
    showMap: showMap,
    semigroupMap: semigroupMap,
    monoidMap: monoidMap,
    functorMap: functorMap,
    functorWithIndexMap: functorWithIndexMap,
    foldableMap: foldableMap,
    foldableWithIndexMap: foldableWithIndexMap,
    traversableMap: traversableMap,
    traversableWithIndexMap: traversableWithIndexMap
};

},{"../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Category/index.js":"dfcPK","../Data.Eq/index.js":"c3b8F","../Data.Foldable/index.js":"jWmFN","../Data.FoldableWithIndex/index.js":"b0hJn","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO","../Data.FunctorWithIndex/index.js":"9mTwC","../Data.HeytingAlgebra/index.js":"8Mx0E","../Data.List/index.js":"iZK6y","../Data.List.Lazy/index.js":"7KbOn","../Data.List.Lazy.Types/index.js":"95AMQ","../Data.List.Types/index.js":"80Bba","../Data.Maybe/index.js":"ePH81","../Data.Monoid/index.js":"94fxC","../Data.Ord/index.js":"f14nh","../Data.Ordering/index.js":"lEtyd","../Data.Semigroup/index.js":"4sNah","../Data.Show/index.js":"b6tNW","../Data.Traversable/index.js":"i5Kon","../Data.TraversableWithIndex/index.js":"bLveW","../Data.Tuple/index.js":"eOBbM","../Data.Unfoldable/index.js":"5NUrk"}],"iZK6y":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Pattern = function(x) {
    return x;
};
_c = Pattern;
var updateAt = function(v) {
    return function(v1) {
        return function(v2) {
            if (v === 0 && v2 instanceof Data_List_Types.Cons) return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2.value1));
            if (v2 instanceof Data_List_Types.Cons) return Data_Functor.map(Data_Maybe.functorMaybe)(function(v3) {
                return new Data_List_Types.Cons(v2.value0, v3);
            })(updateAt(v - 1 | 0)(v1)(v2.value1));
            return Data_Maybe.Nothing.value;
        };
    };
};
var unzip = Data_Foldable.foldr(Data_List_Types.foldableList)(function(v) {
    return function(v1) {
        return new Data_Tuple.Tuple(new Data_List_Types.Cons(v.value0, v1.value0), new Data_List_Types.Cons(v.value1, v1.value1));
    };
})(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_List_Types.Nil.value));
var uncons = function(v) {
    if (v instanceof Data_List_Types.Nil) return Data_Maybe.Nothing.value;
    if (v instanceof Data_List_Types.Cons) return new Data_Maybe.Just({
        head: v.value0,
        tail: v.value1
    });
    throw new Error("Failed pattern match at Data.List (line 259, column 1 - line 259, column 66): " + [
        v.constructor.name
    ]);
};
var toUnfoldable = function(dictUnfoldable) {
    return Data_Unfoldable.unfoldr(dictUnfoldable)(function(xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function(rec) {
            return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(uncons(xs));
    });
};
var tail = function(v) {
    if (v instanceof Data_List_Types.Nil) return Data_Maybe.Nothing.value;
    if (v instanceof Data_List_Types.Cons) return new Data_Maybe.Just(v.value1);
    throw new Error("Failed pattern match at Data.List (line 245, column 1 - line 245, column 43): " + [
        v.constructor.name
    ]);
};
var stripPrefix = function(dictEq) {
    return function(v) {
        return function(s) {
            var go = function(prefix) {
                return function(input) {
                    if (prefix instanceof Data_List_Types.Cons && input instanceof Data_List_Types.Cons && Data_Eq.eq(dictEq)(prefix.value0)(input.value0)) return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Loop({
                        a: prefix.value1,
                        b: input.value1
                    }));
                    if (prefix instanceof Data_List_Types.Nil) return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Done(input));
                    return Data_Maybe.Nothing.value;
                };
            };
            return Control_Monad_Rec_Class.tailRecM2(Control_Monad_Rec_Class.monadRecMaybe)(go)(v)(s);
        };
    };
};
var span = function(v) {
    return function(v1) {
        if (v1 instanceof Data_List_Types.Cons && v(v1.value0)) {
            var v2 = span(v)(v1.value1);
            return {
                init: new Data_List_Types.Cons(v1.value0, v2.init),
                rest: v2.rest
            };
        }
        return {
            init: Data_List_Types.Nil.value,
            rest: v1
        };
    };
};
var snoc = function(xs) {
    return function(x) {
        return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_List_Types.Cons.create)(new Data_List_Types.Cons(x, Data_List_Types.Nil.value))(xs);
    };
};
var singleton = function(a) {
    return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
};
var sortBy = function(cmp) {
    var merge = function(v) {
        return function(v1) {
            if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1.value0))(Data_Ordering.GT.value)) return new Data_List_Types.Cons(v1.value0, merge(v)(v1.value1));
                if (Data_Boolean.otherwise) return new Data_List_Types.Cons(v.value0, merge(v.value1)(v1));
            }
            if (v instanceof Data_List_Types.Nil) return v1;
            if (v1 instanceof Data_List_Types.Nil) return v;
            throw new Error("Failed pattern match at Data.List (line 473, column 3 - line 473, column 38): " + [
                v.constructor.name,
                v1.constructor.name
            ]);
        };
    };
    var mergePairs = function(v) {
        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) return new Data_List_Types.Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
        return v;
    };
    var mergeAll = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return v.value0;
            }
            $copy_v = mergePairs(v);
            return;
        }
        while(!$tco_done)$tco_result = $tco_loop($copy_v);
        return $tco_result;
    };
    var sequences = function(v) {
        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
            if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v.value1.value0))(Data_Ordering.GT.value)) return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
            if (Data_Boolean.otherwise) return ascending(v.value1.value0)(function(v1) {
                return new Data_List_Types.Cons(v.value0, v1);
            })(v.value1.value1);
        }
        return singleton(v);
    };
    var descending = function($copy_a) {
        return function($copy_as) {
            return function($copy_v) {
                var $tco_var_a = $copy_a;
                var $tco_var_as = $copy_as;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(a, as, v) {
                    if (v instanceof Data_List_Types.Cons && Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                        $tco_var_a = v.value0;
                        $tco_var_as = new Data_List_Types.Cons(a, as);
                        $copy_v = v.value1;
                        return;
                    }
                    $tco_done = true;
                    return new Data_List_Types.Cons(new Data_List_Types.Cons(a, as), sequences(v));
                }
                while(!$tco_done)$tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
                return $tco_result;
            };
        };
    };
    var ascending = function($copy_a) {
        return function($copy_as) {
            return function($copy_v) {
                var $tco_var_a = $copy_a;
                var $tco_var_as = $copy_as;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(a, as, v) {
                    if (v instanceof Data_List_Types.Cons && Data_Eq.notEq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                        $tco_var_a = v.value0;
                        $tco_var_as = function(ys) {
                            return as(new Data_List_Types.Cons(a, ys));
                        };
                        $copy_v = v.value1;
                        return;
                    }
                    $tco_done = true;
                    return new Data_List_Types.Cons(as(singleton(a)), sequences(v));
                }
                while(!$tco_done)$tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
                return $tco_result;
            };
        };
    };
    return function($331) {
        return mergeAll(sequences($331));
    };
};
var sort = function(dictOrd) {
    return function(xs) {
        return sortBy(Data_Ord.compare(dictOrd))(xs);
    };
};
var tails = function(v) {
    if (v instanceof Data_List_Types.Nil) return singleton(Data_List_Types.Nil.value);
    if (v instanceof Data_List_Types.Cons) return new Data_List_Types.Cons(v, tails(v.value1));
    throw new Error("Failed pattern match at Data.List (line 626, column 1 - line 626, column 43): " + [
        v.constructor.name
    ]);
};
var showPattern = function(dictShow) {
    return new Data_Show.Show(function(v) {
        return "(Pattern " + (Data_Show.show(Data_List_Types.showList(dictShow))(v) + ")");
    });
};
var reverse = function() {
    var go = function($copy_acc) {
        return function($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return acc;
                }
                if (v instanceof Data_List_Types.Cons) {
                    $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                    $copy_v = v.value1;
                    return;
                }
                throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [
                    acc.constructor.name,
                    v.constructor.name
                ]);
            }
            while(!$tco_done)$tco_result = $tco_loop($tco_var_acc, $copy_v);
            return $tco_result;
        };
    };
    return go(Data_List_Types.Nil.value);
}();
var take = function() {
    var go = function($copy_acc) {
        return function($copy_v) {
            return function($copy_v1) {
                var $tco_var_acc = $copy_acc;
                var $tco_var_v = $copy_v;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(acc, v, v1) {
                    if (v < 1) {
                        $tco_done = true;
                        return reverse(acc);
                    }
                    if (v1 instanceof Data_List_Types.Nil) {
                        $tco_done = true;
                        return reverse(acc);
                    }
                    if (v1 instanceof Data_List_Types.Cons) {
                        $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                        $tco_var_v = v - 1 | 0;
                        $copy_v1 = v1.value1;
                        return;
                    }
                    throw new Error("Failed pattern match at Data.List (line 520, column 3 - line 520, column 35): " + [
                        acc.constructor.name,
                        v.constructor.name,
                        v1.constructor.name
                    ]);
                }
                while(!$tco_done)$tco_result = $tco_loop($tco_var_acc, $tco_var_v, $copy_v1);
                return $tco_result;
            };
        };
    };
    return go(Data_List_Types.Nil.value);
}();
var takeWhile = function(p) {
    var go = function($copy_acc) {
        return function($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Cons && p(v.value0)) {
                    $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                    $copy_v = v.value1;
                    return;
                }
                $tco_done = true;
                return reverse(acc);
            }
            while(!$tco_done)$tco_result = $tco_loop($tco_var_acc, $copy_v);
            return $tco_result;
        };
    };
    return go(Data_List_Types.Nil.value);
};
var unsnoc = function(lst) {
    var go = function($copy_v) {
        return function($copy_acc) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, acc) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                }
                if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return new Data_Maybe.Just({
                        revInit: acc,
                        last: v.value0
                    });
                }
                if (v instanceof Data_List_Types.Cons) {
                    $tco_var_v = v.value1;
                    $copy_acc = new Data_List_Types.Cons(v.value0, acc);
                    return;
                }
                throw new Error("Failed pattern match at Data.List (line 270, column 3 - line 270, column 23): " + [
                    v.constructor.name,
                    acc.constructor.name
                ]);
            }
            while(!$tco_done)$tco_result = $tco_loop($tco_var_v, $copy_acc);
            return $tco_result;
        };
    };
    return Data_Functor.map(Data_Maybe.functorMaybe)(function(h) {
        return {
            init: reverse(h.revInit),
            last: h.last
        };
    })(go(lst)(Data_List_Types.Nil.value));
};
var zipWith = function(f) {
    return function(xs) {
        return function(ys) {
            var go = function($copy_v) {
                return function($copy_v1) {
                    return function($copy_acc) {
                        var $tco_var_v = $copy_v;
                        var $tco_var_v1 = $copy_v1;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(v, v1, acc) {
                            if (v instanceof Data_List_Types.Nil) {
                                $tco_done = true;
                                return acc;
                            }
                            if (v1 instanceof Data_List_Types.Nil) {
                                $tco_done = true;
                                return acc;
                            }
                            if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                $tco_var_v = v.value1;
                                $tco_var_v1 = v1.value1;
                                $copy_acc = new Data_List_Types.Cons(f(v.value0)(v1.value0), acc);
                                return;
                            }
                            throw new Error("Failed pattern match at Data.List (line 718, column 3 - line 718, column 21): " + [
                                v.constructor.name,
                                v1.constructor.name,
                                acc.constructor.name
                            ]);
                        }
                        while(!$tco_done)$tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_acc);
                        return $tco_result;
                    };
                };
            };
            return reverse(go(xs)(ys)(Data_List_Types.Nil.value));
        };
    };
};
var zip = zipWith(Data_Tuple.Tuple.create);
var zipWithA = function(dictApplicative) {
    return function(f) {
        return function(xs) {
            return function(ys) {
                return Data_Traversable.sequence(Data_List_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
            };
        };
    };
};
var range = function(start) {
    return function(end) {
        if (start === end) return singleton(start);
        if (Data_Boolean.otherwise) {
            var go = function($copy_s) {
                return function($copy_e) {
                    return function($copy_step) {
                        return function($copy_rest) {
                            var $tco_var_s = $copy_s;
                            var $tco_var_e = $copy_e;
                            var $tco_var_step = $copy_step;
                            var $tco_done = false;
                            var $tco_result;
                            function $tco_loop(s, e, step, rest) {
                                if (s === e) {
                                    $tco_done = true;
                                    return new Data_List_Types.Cons(s, rest);
                                }
                                if (Data_Boolean.otherwise) {
                                    $tco_var_s = s + step | 0;
                                    $tco_var_e = e;
                                    $tco_var_step = step;
                                    $copy_rest = new Data_List_Types.Cons(s, rest);
                                    return;
                                }
                                throw new Error("Failed pattern match at Data.List (line 148, column 3 - line 149, column 65): " + [
                                    s.constructor.name,
                                    e.constructor.name,
                                    step.constructor.name,
                                    rest.constructor.name
                                ]);
                            }
                            while(!$tco_done)$tco_result = $tco_loop($tco_var_s, $tco_var_e, $tco_var_step, $copy_rest);
                            return $tco_result;
                        };
                    };
                };
            };
            return go(end)(start)(function() {
                var $220 = start > end;
                if ($220) return 1;
                return -1;
            }())(Data_List_Types.Nil.value);
        }
        throw new Error("Failed pattern match at Data.List (line 144, column 1 - line 144, column 32): " + [
            start.constructor.name,
            end.constructor.name
        ]);
    };
};
var partition = function(p) {
    return function(xs) {
        var select = function(x) {
            return function(v) {
                var $223 = p(x);
                if ($223) return {
                    no: v.no,
                    yes: new Data_List_Types.Cons(x, v.yes)
                };
                return {
                    no: new Data_List_Types.Cons(x, v.no),
                    yes: v.yes
                };
            };
        };
        return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
            no: Data_List_Types.Nil.value,
            yes: Data_List_Types.Nil.value
        })(xs);
    };
};
var $$null = function(v) {
    if (v instanceof Data_List_Types.Nil) return true;
    return false;
};
var newtypePattern = new Data_Newtype.Newtype(function(n) {
    return n;
}, Pattern);
var mapWithIndex = Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexList);
var mapMaybe = function(f) {
    var go = function($copy_acc) {
        return function($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return reverse(acc);
                }
                if (v instanceof Data_List_Types.Cons) {
                    var v1 = f(v.value0);
                    if (v1 instanceof Data_Maybe.Nothing) {
                        $tco_var_acc = acc;
                        $copy_v = v.value1;
                        return;
                    }
                    if (v1 instanceof Data_Maybe.Just) {
                        $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                        $copy_v = v.value1;
                        return;
                    }
                    throw new Error("Failed pattern match at Data.List (line 419, column 5 - line 421, column 32): " + [
                        v1.constructor.name
                    ]);
                }
                throw new Error("Failed pattern match at Data.List (line 417, column 3 - line 417, column 27): " + [
                    acc.constructor.name,
                    v.constructor.name
                ]);
            }
            while(!$tco_done)$tco_result = $tco_loop($tco_var_acc, $copy_v);
            return $tco_result;
        };
    };
    return go(Data_List_Types.Nil.value);
};
var manyRec = function(dictMonadRec) {
    return function(dictAlternative) {
        return function(p) {
            var go = function(acc) {
                return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(Control_Alt.alt(dictAlternative.Plus1().Alt0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(dictAlternative.Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit))))(function(aa) {
                    return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function(v) {
                        return new Data_List_Types.Cons(v, acc);
                    })(function(v) {
                        return reverse(acc);
                    })(aa));
                });
            };
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_List_Types.Nil.value);
        };
    };
};
var someRec = function(dictMonadRec) {
    return function(dictAlternative) {
        return function(v) {
            return Control_Apply.apply(dictAlternative.Applicative0().Apply0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(Data_List_Types.Cons.create)(v))(manyRec(dictMonadRec)(dictAlternative)(v));
        };
    };
};
var some = function(dictAlternative) {
    return function(dictLazy) {
        return function(v) {
            return Control_Apply.apply(dictAlternative.Applicative0().Apply0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(Data_List_Types.Cons.create)(v))(Control_Lazy.defer(dictLazy)(function(v1) {
                return many(dictAlternative)(dictLazy)(v);
            }));
        };
    };
};
var many = function(dictAlternative) {
    return function(dictLazy) {
        return function(v) {
            return Control_Alt.alt(dictAlternative.Plus1().Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value));
        };
    };
};
var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function(acc) {
    return function(v) {
        return acc + 1 | 0;
    };
})(0);
var last = function($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
            $tco_done = true;
            return new Data_Maybe.Just(v.value0);
        }
        if (v instanceof Data_List_Types.Cons) {
            $copy_v = v.value1;
            return;
        }
        $tco_done = true;
        return Data_Maybe.Nothing.value;
    }
    while(!$tco_done)$tco_result = $tco_loop($copy_v);
    return $tco_result;
};
var insertBy = function(v) {
    return function(x) {
        return function(v1) {
            if (v1 instanceof Data_List_Types.Nil) return singleton(x);
            if (v1 instanceof Data_List_Types.Cons) {
                var v2 = v(x)(v1.value0);
                if (v2 instanceof Data_Ordering.GT) return new Data_List_Types.Cons(v1.value0, insertBy(v)(x)(v1.value1));
                return new Data_List_Types.Cons(x, v1);
            }
            throw new Error("Failed pattern match at Data.List (line 216, column 1 - line 216, column 68): " + [
                v.constructor.name,
                x.constructor.name,
                v1.constructor.name
            ]);
        };
    };
};
var insertAt = function(v) {
    return function(v1) {
        return function(v2) {
            if (v === 0) return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2));
            if (v2 instanceof Data_List_Types.Cons) return Data_Functor.map(Data_Maybe.functorMaybe)(function(v3) {
                return new Data_List_Types.Cons(v2.value0, v3);
            })(insertAt(v - 1 | 0)(v1)(v2.value1));
            return Data_Maybe.Nothing.value;
        };
    };
};
var insert = function(dictOrd) {
    return insertBy(Data_Ord.compare(dictOrd));
};
var init = function(lst) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function(v) {
        return v.init;
    })(unsnoc(lst));
};
var index = function($copy_v) {
    return function($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
            if (v instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return Data_Maybe.Nothing.value;
            }
            if (v instanceof Data_List_Types.Cons && v1 === 0) {
                $tco_done = true;
                return new Data_Maybe.Just(v.value0);
            }
            if (v instanceof Data_List_Types.Cons) {
                $tco_var_v = v.value1;
                $copy_v1 = v1 - 1 | 0;
                return;
            }
            throw new Error("Failed pattern match at Data.List (line 281, column 1 - line 281, column 44): " + [
                v.constructor.name,
                v1.constructor.name
            ]);
        }
        while(!$tco_done)$tco_result = $tco_loop($tco_var_v, $copy_v1);
        return $tco_result;
    };
};
var head = function(v) {
    if (v instanceof Data_List_Types.Nil) return Data_Maybe.Nothing.value;
    if (v instanceof Data_List_Types.Cons) return new Data_Maybe.Just(v.value0);
    throw new Error("Failed pattern match at Data.List (line 230, column 1 - line 230, column 22): " + [
        v.constructor.name
    ]);
};
var transpose = function(v) {
    if (v instanceof Data_List_Types.Nil) return Data_List_Types.Nil.value;
    if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Nil) return transpose(v.value1);
    if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Cons) return new Data_List_Types.Cons(new Data_List_Types.Cons(v.value0.value0, mapMaybe(head)(v.value1)), transpose(new Data_List_Types.Cons(v.value0.value1, mapMaybe(tail)(v.value1))));
    throw new Error("Failed pattern match at Data.List (line 752, column 1 - line 752, column 54): " + [
        v.constructor.name
    ]);
};
var groupBy = function(v) {
    return function(v1) {
        if (v1 instanceof Data_List_Types.Nil) return Data_List_Types.Nil.value;
        if (v1 instanceof Data_List_Types.Cons) {
            var v2 = span(v(v1.value0))(v1.value1);
            return new Data_List_Types.Cons(new Data_NonEmpty.NonEmpty(v1.value0, v2.init), groupBy(v)(v2.rest));
        }
        throw new Error("Failed pattern match at Data.List (line 605, column 1 - line 605, column 80): " + [
            v.constructor.name,
            v1.constructor.name
        ]);
    };
};
var group = function(dictEq) {
    return groupBy(Data_Eq.eq(dictEq));
};
var group$prime = function(dictOrd) {
    var $332 = group(dictOrd.Eq0());
    var $333 = sort(dictOrd);
    return function($334) {
        return $332($333($334));
    };
};
var fromFoldable = function(dictFoldable) {
    return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
};
var foldM = function(dictMonad) {
    return function(v) {
        return function(a) {
            return function(v1) {
                if (v1 instanceof Data_List_Types.Nil) return Control_Applicative.pure(dictMonad.Applicative0())(a);
                if (v1 instanceof Data_List_Types.Cons) return Control_Bind.bind(dictMonad.Bind1())(v(a)(v1.value0))(function(a$prime) {
                    return foldM(dictMonad)(v)(a$prime)(v1.value1);
                });
                throw new Error("Failed pattern match at Data.List (line 763, column 1 - line 763, column 72): " + [
                    v.constructor.name,
                    a.constructor.name,
                    v1.constructor.name
                ]);
            };
        };
    };
};
var findIndex = function(fn) {
    var go = function($copy_v) {
        return function($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
                if (v1 instanceof Data_List_Types.Cons) {
                    if (fn(v1.value0)) {
                        $tco_done = true;
                        return new Data_Maybe.Just(v);
                    }
                    if (Data_Boolean.otherwise) {
                        $tco_var_v = v + 1 | 0;
                        $copy_v1 = v1.value1;
                        return;
                    }
                }
                if (v1 instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                }
                throw new Error("Failed pattern match at Data.List (line 301, column 3 - line 301, column 35): " + [
                    v.constructor.name,
                    v1.constructor.name
                ]);
            }
            while(!$tco_done)$tco_result = $tco_loop($tco_var_v, $copy_v1);
            return $tco_result;
        };
    };
    return go(0);
};
var findLastIndex = function(fn) {
    return function(xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function(v) {
            return (length(xs) - 1 | 0) - v | 0;
        })(findIndex(fn)(reverse(xs)));
    };
};
var filterM = function(dictMonad) {
    return function(v) {
        return function(v1) {
            if (v1 instanceof Data_List_Types.Nil) return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Types.Nil.value);
            if (v1 instanceof Data_List_Types.Cons) return Control_Bind.bind(dictMonad.Bind1())(v(v1.value0))(function(b) {
                return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(v)(v1.value1))(function(xs$prime) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(function() {
                        if (b) return new Data_List_Types.Cons(v1.value0, xs$prime);
                        return xs$prime;
                    }());
                });
            });
            throw new Error("Failed pattern match at Data.List (line 403, column 1 - line 403, column 75): " + [
                v.constructor.name,
                v1.constructor.name
            ]);
        };
    };
};
var filter = function(p) {
    var go = function($copy_acc) {
        return function($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return reverse(acc);
                }
                if (v instanceof Data_List_Types.Cons) {
                    if (p(v.value0)) {
                        $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                        $copy_v = v.value1;
                        return;
                    }
                    if (Data_Boolean.otherwise) {
                        $tco_var_acc = acc;
                        $copy_v = v.value1;
                        return;
                    }
                }
                throw new Error("Failed pattern match at Data.List (line 390, column 3 - line 390, column 27): " + [
                    acc.constructor.name,
                    v.constructor.name
                ]);
            }
            while(!$tco_done)$tco_result = $tco_loop($tco_var_acc, $copy_v);
            return $tco_result;
        };
    };
    return go(Data_List_Types.Nil.value);
};
var intersectBy = function(v) {
    return function(v1) {
        return function(v2) {
            if (v1 instanceof Data_List_Types.Nil) return Data_List_Types.Nil.value;
            if (v2 instanceof Data_List_Types.Nil) return Data_List_Types.Nil.value;
            return filter(function(x) {
                return Data_Foldable.any(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(v(x))(v2);
            })(v1);
        };
    };
};
var intersect = function(dictEq) {
    return intersectBy(Data_Eq.eq(dictEq));
};
var nubBy = function(v) {
    return function(v1) {
        if (v1 instanceof Data_List_Types.Nil) return Data_List_Types.Nil.value;
        if (v1 instanceof Data_List_Types.Cons) return new Data_List_Types.Cons(v1.value0, nubBy(v)(filter(function(y) {
            return !v(v1.value0)(y);
        })(v1.value1)));
        throw new Error("Failed pattern match at Data.List (line 644, column 1 - line 644, column 59): " + [
            v.constructor.name,
            v1.constructor.name
        ]);
    };
};
var nub = function(dictEq) {
    return nubBy(Data_Eq.eq(dictEq));
};
var eqPattern = function(dictEq) {
    return new Data_Eq.Eq(function(x) {
        return function(y) {
            return Data_Eq.eq(Data_List_Types.eqList(dictEq))(x)(y);
        };
    });
};
var ordPattern = function(dictOrd) {
    return new Data_Ord.Ord(function() {
        return eqPattern(dictOrd.Eq0());
    }, function(x) {
        return function(y) {
            return Data_Ord.compare(Data_List_Types.ordList(dictOrd))(x)(y);
        };
    });
};
var elemLastIndex = function(dictEq) {
    return function(x) {
        return findLastIndex(function(v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var elemIndex = function(dictEq) {
    return function(x) {
        return findIndex(function(v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var dropWhile = function(p) {
    var go = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Types.Cons && p(v.value0)) {
                $copy_v = v.value1;
                return;
            }
            $tco_done = true;
            return v;
        }
        while(!$tco_done)$tco_result = $tco_loop($copy_v);
        return $tco_result;
    };
    return go;
};
var dropEnd = function(n) {
    return function(xs) {
        return take(length(xs) - n | 0)(xs);
    };
};
var drop = function($copy_v) {
    return function($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
            if (v < 1) {
                $tco_done = true;
                return v1;
            }
            if (v1 instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return Data_List_Types.Nil.value;
            }
            if (v1 instanceof Data_List_Types.Cons) {
                $tco_var_v = v - 1 | 0;
                $copy_v1 = v1.value1;
                return;
            }
            throw new Error("Failed pattern match at Data.List (line 543, column 1 - line 543, column 42): " + [
                v.constructor.name,
                v1.constructor.name
            ]);
        }
        while(!$tco_done)$tco_result = $tco_loop($tco_var_v, $copy_v1);
        return $tco_result;
    };
};
var slice = function(start) {
    return function(end) {
        return function(xs) {
            return take(end - start | 0)(drop(start)(xs));
        };
    };
};
var takeEnd = function(n) {
    return function(xs) {
        return drop(length(xs) - n | 0)(xs);
    };
};
var deleteBy = function(v) {
    return function(v1) {
        return function(v2) {
            if (v2 instanceof Data_List_Types.Nil) return Data_List_Types.Nil.value;
            if (v2 instanceof Data_List_Types.Cons && v(v1)(v2.value0)) return v2.value1;
            if (v2 instanceof Data_List_Types.Cons) return new Data_List_Types.Cons(v2.value0, deleteBy(v)(v1)(v2.value1));
            throw new Error("Failed pattern match at Data.List (line 671, column 1 - line 671, column 67): " + [
                v.constructor.name,
                v1.constructor.name,
                v2.constructor.name
            ]);
        };
    };
};
var unionBy = function(eq) {
    return function(xs) {
        return function(ys) {
            return Data_Semigroup.append(Data_List_Types.semigroupList)(xs)(Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};
var union = function(dictEq) {
    return unionBy(Data_Eq.eq(dictEq));
};
var deleteAt = function(v) {
    return function(v1) {
        if (v === 0 && v1 instanceof Data_List_Types.Cons) return new Data_Maybe.Just(v1.value1);
        if (v1 instanceof Data_List_Types.Cons) return Data_Functor.map(Data_Maybe.functorMaybe)(function(v2) {
            return new Data_List_Types.Cons(v1.value0, v2);
        })(deleteAt(v - 1 | 0)(v1.value1));
        return Data_Maybe.Nothing.value;
    };
};
var $$delete = function(dictEq) {
    return deleteBy(Data_Eq.eq(dictEq));
};
var difference = function(dictEq) {
    return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictEq)));
};
var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindList));
var concat = function(v) {
    return Control_Bind.bind(Data_List_Types.bindList)(v)(Control_Category.identity(Control_Category.categoryFn));
};
var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
var alterAt = function(v) {
    return function(v1) {
        return function(v2) {
            if (v === 0 && v2 instanceof Data_List_Types.Cons) return Data_Maybe.Just.create(function() {
                var v3 = v1(v2.value0);
                if (v3 instanceof Data_Maybe.Nothing) return v2.value1;
                if (v3 instanceof Data_Maybe.Just) return new Data_List_Types.Cons(v3.value0, v2.value1);
                throw new Error("Failed pattern match at Data.List (line 352, column 3 - line 354, column 23): " + [
                    v3.constructor.name
                ]);
            }());
            if (v2 instanceof Data_List_Types.Cons) return Data_Functor.map(Data_Maybe.functorMaybe)(function(v3) {
                return new Data_List_Types.Cons(v2.value0, v3);
            })(alterAt(v - 1 | 0)(v1)(v2.value1));
            return Data_Maybe.Nothing.value;
        };
    };
};
var modifyAt = function(n) {
    return function(f) {
        return alterAt(n)(function($335) {
            return Data_Maybe.Just.create(f($335));
        });
    };
};
module.exports = {
    toUnfoldable: toUnfoldable,
    fromFoldable: fromFoldable,
    singleton: singleton,
    range: range,
    some: some,
    someRec: someRec,
    many: many,
    manyRec: manyRec,
    "null": $$null,
    length: length,
    snoc: snoc,
    insert: insert,
    insertBy: insertBy,
    head: head,
    last: last,
    tail: tail,
    init: init,
    uncons: uncons,
    unsnoc: unsnoc,
    index: index,
    elemIndex: elemIndex,
    elemLastIndex: elemLastIndex,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    insertAt: insertAt,
    deleteAt: deleteAt,
    updateAt: updateAt,
    modifyAt: modifyAt,
    alterAt: alterAt,
    reverse: reverse,
    concat: concat,
    concatMap: concatMap,
    filter: filter,
    filterM: filterM,
    mapMaybe: mapMaybe,
    catMaybes: catMaybes,
    mapWithIndex: mapWithIndex,
    sort: sort,
    sortBy: sortBy,
    Pattern: Pattern,
    stripPrefix: stripPrefix,
    slice: slice,
    take: take,
    takeEnd: takeEnd,
    takeWhile: takeWhile,
    drop: drop,
    dropEnd: dropEnd,
    dropWhile: dropWhile,
    span: span,
    group: group,
    "group'": group$prime,
    groupBy: groupBy,
    partition: partition,
    nub: nub,
    nubBy: nubBy,
    union: union,
    unionBy: unionBy,
    "delete": $$delete,
    deleteBy: deleteBy,
    difference: difference,
    intersect: intersect,
    intersectBy: intersectBy,
    zipWith: zipWith,
    zipWithA: zipWithA,
    zip: zip,
    unzip: unzip,
    transpose: transpose,
    foldM: foldM,
    eqPattern: eqPattern,
    ordPattern: ordPattern,
    newtypePattern: newtypePattern,
    showPattern: showPattern
};
var _c;
$RefreshReg$(_c, "Pattern");

},{"../Control.Alt/index.js":"82RIG","../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Category/index.js":"dfcPK","../Control.Lazy/index.js":"chn7k","../Control.Monad.Rec.Class/index.js":"dMFG0","../Data.Bifunctor/index.js":"4aJ07","../Data.Boolean/index.js":"lv1qw","../Data.Eq/index.js":"c3b8F","../Data.Foldable/index.js":"jWmFN","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO","../Data.FunctorWithIndex/index.js":"9mTwC","../Data.HeytingAlgebra/index.js":"8Mx0E","../Data.List.Types/index.js":"80Bba","../Data.Maybe/index.js":"ePH81","../Data.Newtype/index.js":"czJbt","../Data.NonEmpty/index.js":"4pAZZ","../Data.Ord/index.js":"f14nh","../Data.Ordering/index.js":"lEtyd","../Data.Semigroup/index.js":"4sNah","../Data.Show/index.js":"b6tNW","../Data.Traversable/index.js":"i5Kon","../Data.Tuple/index.js":"eOBbM","../Data.Unfoldable/index.js":"5NUrk","../Data.Unit/index.js":"d7oKp"}],"80Bba":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var Nil = function() {
    function Nil1() {
    }
    Nil1.value = new Nil1();
    return Nil1;
}();
var Cons = function() {
    function Cons1(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }
    Cons1.create = function(value0) {
        return function(value1) {
            return new Cons1(value0, value1);
        };
    };
    return Cons1;
}();
var NonEmptyList = function(x) {
    return x;
};
_c = NonEmptyList;
var toList = function(v) {
    return new Cons(v.value0, v.value1);
};
var newtypeNonEmptyList = new Data_Newtype.Newtype(function(n) {
    return n;
}, NonEmptyList);
var nelCons = function(a) {
    return function(v) {
        return new Data_NonEmpty.NonEmpty(a, new Cons(v.value0, v.value1));
    };
};
var listMap = function(f) {
    var chunkedRevMap = function($copy_chunksAcc) {
        return function($copy_v) {
            var $tco_var_chunksAcc = $copy_chunksAcc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(chunksAcc, v) {
                if (v instanceof Cons && v.value1 instanceof Cons && v.value1.value1 instanceof Cons) {
                    $tco_var_chunksAcc = new Cons(v, chunksAcc);
                    $copy_v = v.value1.value1.value1;
                    return;
                }
                var unrolledMap = function(v1) {
                    if (v1 instanceof Cons && v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil) return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                    if (v1 instanceof Cons && v1.value1 instanceof Nil) return new Cons(f(v1.value0), Nil.value);
                    return Nil.value;
                };
                var reverseUnrolledMap = function($copy_v1) {
                    return function($copy_acc) {
                        var $tco_var_v1 = $copy_v1;
                        var $tco_done1 = false;
                        var $tco_result1;
                        function $tco_loop1(v1, acc) {
                            if (v1 instanceof Cons && v1.value0 instanceof Cons && v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons) {
                                $tco_var_v1 = v1.value1;
                                $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                return;
                            }
                            $tco_done1 = true;
                            return acc;
                        }
                        while(!$tco_done1)$tco_result1 = $tco_loop1($tco_var_v1, $copy_acc);
                        return $tco_result1;
                    };
                };
                $tco_done = true;
                return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
            }
            while(!$tco_done)$tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
            return $tco_result;
        };
    };
    return chunkedRevMap(Nil.value);
};
var functorList = new Data_Functor.Functor(listMap);
var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
var foldableList = new Data_Foldable.Foldable(function(dictMonoid) {
    return function(f) {
        return Data_Foldable.foldl(foldableList)(function(acc) {
            var $202 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
            return function($203) {
                return $202(f($203));
            };
        })(Data_Monoid.mempty(dictMonoid));
    };
}, function(f) {
    var go = function($copy_b) {
        return function($copy_v) {
            var $tco_var_b = $copy_b;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(b, v) {
                if (v instanceof Nil) {
                    $tco_done = true;
                    return b;
                }
                if (v instanceof Cons) {
                    $tco_var_b = f(b)(v.value0);
                    $copy_v = v.value1;
                    return;
                }
                throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [
                    v.constructor.name
                ]);
            }
            while(!$tco_done)$tco_result = $tco_loop($tco_var_b, $copy_v);
            return $tco_result;
        };
    };
    return go;
}, function(f) {
    return function(b) {
        var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
        var $204 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
        return function($205) {
            return $204(rev($205));
        };
    };
});
var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
var foldableWithIndexList = new Data_FoldableWithIndex.FoldableWithIndex(function() {
    return foldableList;
}, function(dictMonoid) {
    return function(f) {
        return Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function(i) {
            return function(acc) {
                var $206 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                var $207 = f(i);
                return function($208) {
                    return $206($207($208));
                };
            };
        })(Data_Monoid.mempty(dictMonoid));
    };
}, function(f) {
    return function(acc) {
        var $209 = Data_Foldable.foldl(foldableList)(function(v) {
            return function(a) {
                return new Data_Tuple.Tuple(v.value0 + 1 | 0, f(v.value0)(v.value1)(a));
            };
        })(new Data_Tuple.Tuple(0, acc));
        return function($210) {
            return Data_Tuple.snd($209($210));
        };
    };
}, function(f) {
    return function(b) {
        return function(xs) {
            var v = function() {
                var rev = Data_Foldable.foldl(foldableList)(function(v1) {
                    return function(a) {
                        return new Data_Tuple.Tuple(v1.value0 + 1 | 0, new Cons(a, v1.value1));
                    };
                });
                return rev(new Data_Tuple.Tuple(0, Nil.value))(xs);
            }();
            return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function(v1) {
                return function(a) {
                    return new Data_Tuple.Tuple(v1.value0 - 1 | 0, f(v1.value0 - 1 | 0)(a)(v1.value1));
                };
            })(new Data_Tuple.Tuple(v.value0, b))(v.value1));
        };
    };
});
var foldableWithIndexNonEmptyList = new Data_FoldableWithIndex.FoldableWithIndex(function() {
    return foldableNonEmptyList;
}, function(dictMonoid) {
    return function(f) {
        return function(v) {
            return Data_FoldableWithIndex.foldMapWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(dictMonoid)(function() {
                var $211 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function($212) {
                    return f($211($212));
                };
            }())(v);
        };
    };
}, function(f) {
    return function(b) {
        return function(v) {
            return Data_FoldableWithIndex.foldlWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function() {
                var $213 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function($214) {
                    return f($213($214));
                };
            }())(b)(v);
        };
    };
}, function(f) {
    return function(b) {
        return function(v) {
            return Data_FoldableWithIndex.foldrWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function() {
                var $215 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function($216) {
                    return f($215($216));
                };
            }())(b)(v);
        };
    };
});
var functorWithIndexList = new Data_FunctorWithIndex.FunctorWithIndex(function() {
    return functorList;
}, function(f) {
    return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function(i) {
        return function(x) {
            return function(acc) {
                return new Cons(f(i)(x), acc);
            };
        };
    })(Nil.value);
});
var functorWithIndexNonEmptyList = new Data_FunctorWithIndex.FunctorWithIndex(function() {
    return functorNonEmptyList;
}, function(fn) {
    return function(v) {
        return NonEmptyList(Data_FunctorWithIndex.mapWithIndex(Data_NonEmpty.functorWithIndex(functorWithIndexList))(function() {
            var $217 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
            return function($218) {
                return fn($217($218));
            };
        }())(v));
    };
});
var semigroupList = new Data_Semigroup.Semigroup(function(xs) {
    return function(ys) {
        return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
    };
});
var monoidList = new Data_Monoid.Monoid(function() {
    return semigroupList;
}, Nil.value);
var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function(v) {
    return function(as$prime) {
        return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
    };
});
var showList = function(dictShow) {
    return new Data_Show.Show(function(v) {
        if (v instanceof Nil) return "Nil";
        return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
    });
};
var showNonEmptyList = function(dictShow) {
    return new Data_Show.Show(function(v) {
        return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
    });
};
var traversableList = new Data_Traversable.Traversable(function() {
    return foldableList;
}, function() {
    return functorList;
}, function(dictApplicative) {
    return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
}, function(dictApplicative) {
    return function(f) {
        var $219 = Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value));
        var $220 = Data_Foldable.foldl(foldableList)(function(acc) {
            var $222 = Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc);
            return function($223) {
                return $222(f($223));
            };
        })(Control_Applicative.pure(dictApplicative)(Nil.value));
        return function($221) {
            return $219($220($221));
        };
    };
});
var traversableNonEmptyList = Data_NonEmpty.traversableNonEmpty(traversableList);
var traversableWithIndexList = new Data_TraversableWithIndex.TraversableWithIndex(function() {
    return foldableWithIndexList;
}, function() {
    return functorWithIndexList;
}, function() {
    return traversableList;
}, function(dictApplicative) {
    return function(f) {
        var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
        var $224 = Data_Functor.map(dictApplicative.Apply0().Functor0())(rev);
        var $225 = Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function(i) {
            return function(acc) {
                var $227 = Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc);
                var $228 = f(i);
                return function($229) {
                    return $227($228($229));
                };
            };
        })(Control_Applicative.pure(dictApplicative)(Nil.value));
        return function($226) {
            return $224($225($226));
        };
    };
});
var traversableWithIndexNonEmptyList = new Data_TraversableWithIndex.TraversableWithIndex(function() {
    return foldableWithIndexNonEmptyList;
}, function() {
    return functorWithIndexNonEmptyList;
}, function() {
    return traversableNonEmptyList;
}, function(dictApplicative) {
    return function(f) {
        return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(NonEmptyList)(Data_TraversableWithIndex.traverseWithIndex(Data_NonEmpty.traversableWithIndexNonEmpty(traversableWithIndexList))(dictApplicative)(function() {
                var $230 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function($231) {
                    return f($230($231));
                };
            }())(v));
        };
    };
});
var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function(f) {
    return function(b) {
        var go = function($copy_source) {
            return function($copy_memo) {
                var $tco_var_source = $copy_source;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(source, memo) {
                    var v = f(source);
                    if (v.value1 instanceof Data_Maybe.Just) {
                        $tco_var_source = v.value1.value0;
                        $copy_memo = new Cons(v.value0, memo);
                        return;
                    }
                    if (v.value1 instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                    }
                    throw new Error("Failed pattern match at Data.List.Types (line 133, column 22 - line 135, column 61): " + [
                        v.constructor.name
                    ]);
                }
                while(!$tco_done)$tco_result = $tco_loop($tco_var_source, $copy_memo);
                return $tco_result;
            };
        };
        return go(b)(Nil.value);
    };
});
var unfoldableList = new Data_Unfoldable.Unfoldable(function() {
    return unfoldable1List;
}, function(f) {
    return function(b) {
        var go = function($copy_source) {
            return function($copy_memo) {
                var $tco_var_source = $copy_source;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(source, memo) {
                    var v = f(source);
                    if (v instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                    }
                    if (v instanceof Data_Maybe.Just) {
                        $tco_var_source = v.value0.value1;
                        $copy_memo = new Cons(v.value0.value0, memo);
                        return;
                    }
                    throw new Error("Failed pattern match at Data.List.Types (line 140, column 22 - line 142, column 52): " + [
                        v.constructor.name
                    ]);
                }
                while(!$tco_done)$tco_result = $tco_loop($tco_var_source, $copy_memo);
                return $tco_result;
            };
        };
        return go(b)(Nil.value);
    };
});
var unfoldable1NonEmptyList = Data_NonEmpty.unfoldable1NonEmpty(unfoldableList);
var foldable1NonEmptyList = Data_NonEmpty.foldable1NonEmpty(foldableList);
var extendNonEmptyList = new Control_Extend.Extend(function() {
    return functorNonEmptyList;
}, function(f) {
    return function(v) {
        var go = function(a) {
            return function(v1) {
                return {
                    val: new Cons(f(new Data_NonEmpty.NonEmpty(a, v1.acc)), v1.val),
                    acc: new Cons(a, v1.acc)
                };
            };
        };
        return new Data_NonEmpty.NonEmpty(f(v), Data_Foldable.foldr(foldableList)(go)({
            val: Nil.value,
            acc: Nil.value
        })(v.value1).val);
    };
});
var extendList = new Control_Extend.Extend(function() {
    return functorList;
}, function(f) {
    return function(v) {
        if (v instanceof Nil) return Nil.value;
        if (v instanceof Cons) {
            var go = function(a$prime) {
                return function(v1) {
                    var acc$prime = new Cons(a$prime, v1.acc);
                    return {
                        val: new Cons(f(acc$prime), v1.val),
                        acc: acc$prime
                    };
                };
            };
            return new Cons(f(v), Data_Foldable.foldr(foldableList)(go)({
                val: Nil.value,
                acc: Nil.value
            })(v.value1).val);
        }
        throw new Error("Failed pattern match at Data.List.Types (line 180, column 1 - line 187, column 42): " + [
            f.constructor.name,
            v.constructor.name
        ]);
    };
});
var eq1List = new Data_Eq.Eq1(function(dictEq) {
    return function(xs) {
        return function(ys) {
            var go = function($copy_v) {
                return function($copy_v1) {
                    return function($copy_v2) {
                        var $tco_var_v = $copy_v;
                        var $tco_var_v1 = $copy_v1;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(v, v1, v2) {
                            if (!v2) {
                                $tco_done = true;
                                return false;
                            }
                            if (v instanceof Nil && v1 instanceof Nil) {
                                $tco_done = true;
                                return v2;
                            }
                            if (v instanceof Cons && v1 instanceof Cons) {
                                $tco_var_v = v.value1;
                                $tco_var_v1 = v1.value1;
                                $copy_v2 = v2 && Data_Eq.eq(dictEq)(v1.value0)(v.value0);
                                return;
                            }
                            $tco_done = true;
                            return false;
                        }
                        while(!$tco_done)$tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
                        return $tco_result;
                    };
                };
            };
            return go(xs)(ys)(true);
        };
    };
});
var eqList = function(dictEq) {
    return new Data_Eq.Eq(Data_Eq.eq1(eq1List)(dictEq));
};
var eqNonEmptyList = function(dictEq) {
    return Data_NonEmpty.eqNonEmpty(eq1List)(dictEq);
};
var ord1List = new Data_Ord.Ord1(function() {
    return eq1List;
}, function(dictOrd) {
    return function(xs) {
        return function(ys) {
            var go = function($copy_v) {
                return function($copy_v1) {
                    var $tco_var_v = $copy_v;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(v, v1) {
                        if (v instanceof Nil && v1 instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.EQ.value;
                        }
                        if (v instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.LT.value;
                        }
                        if (v1 instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.GT.value;
                        }
                        if (v instanceof Cons && v1 instanceof Cons) {
                            var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                            if (v2 instanceof Data_Ordering.EQ) {
                                $tco_var_v = v.value1;
                                $copy_v1 = v1.value1;
                                return;
                            }
                            $tco_done = true;
                            return v2;
                        }
                        throw new Error("Failed pattern match at Data.List.Types (line 61, column 5 - line 61, column 20): " + [
                            v.constructor.name,
                            v1.constructor.name
                        ]);
                    }
                    while(!$tco_done)$tco_result = $tco_loop($tco_var_v, $copy_v1);
                    return $tco_result;
                };
            };
            return go(xs)(ys);
        };
    };
});
var ordList = function(dictOrd) {
    return new Data_Ord.Ord(function() {
        return eqList(dictOrd.Eq0());
    }, Data_Ord.compare1(ord1List)(dictOrd));
};
var ordNonEmptyList = function(dictOrd) {
    return Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd);
};
var comonadNonEmptyList = new Control_Comonad.Comonad(function() {
    return extendNonEmptyList;
}, function(v) {
    return v.value0;
});
var applyList = new Control_Apply.Apply(function() {
    return functorList;
}, function(v) {
    return function(v1) {
        if (v instanceof Nil) return Nil.value;
        if (v instanceof Cons) return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
        throw new Error("Failed pattern match at Data.List.Types (line 155, column 1 - line 157, column 48): " + [
            v.constructor.name,
            v1.constructor.name
        ]);
    };
});
var applyNonEmptyList = new Control_Apply.Apply(function() {
    return functorNonEmptyList;
}, function(v) {
    return function(v1) {
        return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
    };
});
var bindList = new Control_Bind.Bind(function() {
    return applyList;
}, function(v) {
    return function(v1) {
        if (v instanceof Nil) return Nil.value;
        if (v instanceof Cons) return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
        throw new Error("Failed pattern match at Data.List.Types (line 162, column 1 - line 164, column 37): " + [
            v.constructor.name,
            v1.constructor.name
        ]);
    };
});
var bindNonEmptyList = new Control_Bind.Bind(function() {
    return applyNonEmptyList;
}, function(v) {
    return function(f) {
        var v1 = f(v.value0);
        return new Data_NonEmpty.NonEmpty(v1.value0, Data_Semigroup.append(semigroupList)(v1.value1)(Control_Bind.bind(bindList)(v.value1)(function($232) {
            return toList(f($232));
        })));
    };
});
var applicativeList = new Control_Applicative.Applicative(function() {
    return applyList;
}, function(a) {
    return new Cons(a, Nil.value);
});
var monadList = new Control_Monad.Monad(function() {
    return applicativeList;
}, function() {
    return bindList;
});
var altNonEmptyList = new Control_Alt.Alt(function() {
    return functorNonEmptyList;
}, Data_Semigroup.append(semigroupNonEmptyList));
var altList = new Control_Alt.Alt(function() {
    return functorList;
}, Data_Semigroup.append(semigroupList));
var plusList = new Control_Plus.Plus(function() {
    return altList;
}, Nil.value);
var alternativeList = new Control_Alternative.Alternative(function() {
    return applicativeList;
}, function() {
    return plusList;
});
var monadZeroList = new Control_MonadZero.MonadZero(function() {
    return alternativeList;
}, function() {
    return monadList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function() {
    return monadZeroList;
});
var applicativeNonEmptyList = new Control_Applicative.Applicative(function() {
    return applyNonEmptyList;
}, function() {
    var $233 = Data_NonEmpty.singleton(plusList);
    return function($234) {
        return NonEmptyList($233($234));
    };
}());
var monadNonEmptyList = new Control_Monad.Monad(function() {
    return applicativeNonEmptyList;
}, function() {
    return bindNonEmptyList;
});
var traversable1NonEmptyList = new Data_Semigroup_Traversable.Traversable1(function() {
    return foldable1NonEmptyList;
}, function() {
    return traversableNonEmptyList;
}, function(dictApply) {
    return Data_Semigroup_Traversable.traverse1(traversable1NonEmptyList)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
}, function(dictApply) {
    return function(f) {
        return function(v) {
            return Data_Functor.mapFlipped(dictApply.Functor0())(Data_Foldable.foldl(foldableList)(function(acc) {
                var $235 = Control_Apply.lift2(dictApply)(Data_Function.flip(nelCons))(acc);
                return function($236) {
                    return $235(f($236));
                };
            })(Data_Functor.map(dictApply.Functor0())(Control_Applicative.pure(applicativeNonEmptyList))(f(v.value0)))(v.value1))(function(v1) {
                return Data_Foldable.foldl(foldableList)(Data_Function.flip(nelCons))(Control_Applicative.pure(applicativeNonEmptyList)(v1.value0))(v1.value1);
            });
        };
    };
});
module.exports = {
    Nil: Nil,
    Cons: Cons,
    NonEmptyList: NonEmptyList,
    toList: toList,
    nelCons: nelCons,
    showList: showList,
    eqList: eqList,
    eq1List: eq1List,
    ordList: ordList,
    ord1List: ord1List,
    semigroupList: semigroupList,
    monoidList: monoidList,
    functorList: functorList,
    functorWithIndexList: functorWithIndexList,
    foldableList: foldableList,
    foldableWithIndexList: foldableWithIndexList,
    unfoldable1List: unfoldable1List,
    unfoldableList: unfoldableList,
    traversableList: traversableList,
    traversableWithIndexList: traversableWithIndexList,
    applyList: applyList,
    applicativeList: applicativeList,
    bindList: bindList,
    monadList: monadList,
    altList: altList,
    plusList: plusList,
    alternativeList: alternativeList,
    monadZeroList: monadZeroList,
    monadPlusList: monadPlusList,
    extendList: extendList,
    newtypeNonEmptyList: newtypeNonEmptyList,
    eqNonEmptyList: eqNonEmptyList,
    ordNonEmptyList: ordNonEmptyList,
    showNonEmptyList: showNonEmptyList,
    functorNonEmptyList: functorNonEmptyList,
    applyNonEmptyList: applyNonEmptyList,
    applicativeNonEmptyList: applicativeNonEmptyList,
    bindNonEmptyList: bindNonEmptyList,
    monadNonEmptyList: monadNonEmptyList,
    altNonEmptyList: altNonEmptyList,
    extendNonEmptyList: extendNonEmptyList,
    comonadNonEmptyList: comonadNonEmptyList,
    semigroupNonEmptyList: semigroupNonEmptyList,
    foldableNonEmptyList: foldableNonEmptyList,
    traversableNonEmptyList: traversableNonEmptyList,
    foldable1NonEmptyList: foldable1NonEmptyList,
    unfoldable1NonEmptyList: unfoldable1NonEmptyList,
    functorWithIndexNonEmptyList: functorWithIndexNonEmptyList,
    foldableWithIndexNonEmptyList: foldableWithIndexNonEmptyList,
    traversableWithIndexNonEmptyList: traversableWithIndexNonEmptyList,
    traversable1NonEmptyList: traversable1NonEmptyList
};
var _c;
$RefreshReg$(_c, "NonEmptyList");

},{"../Control.Alt/index.js":"82RIG","../Control.Alternative/index.js":"bgcOZ","../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Category/index.js":"dfcPK","../Control.Comonad/index.js":"hfPua","../Control.Extend/index.js":"kAltv","../Control.Monad/index.js":"alCn2","../Control.MonadPlus/index.js":"jUJh4","../Control.MonadZero/index.js":"aqmZo","../Control.Plus/index.js":"5lCU5","../Data.Eq/index.js":"c3b8F","../Data.Foldable/index.js":"jWmFN","../Data.FoldableWithIndex/index.js":"b0hJn","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO","../Data.FunctorWithIndex/index.js":"9mTwC","../Data.Maybe/index.js":"ePH81","../Data.Monoid/index.js":"94fxC","../Data.Newtype/index.js":"czJbt","../Data.NonEmpty/index.js":"4pAZZ","../Data.Ord/index.js":"f14nh","../Data.Ordering/index.js":"lEtyd","../Data.Semigroup/index.js":"4sNah","../Data.Semigroup.Traversable/index.js":"kPmtP","../Data.Semiring/index.js":"39btI","../Data.Show/index.js":"b6tNW","../Data.Traversable/index.js":"i5Kon","../Data.TraversableWithIndex/index.js":"bLveW","../Data.Tuple/index.js":"eOBbM","../Data.Unfoldable/index.js":"5NUrk","../Data.Unfoldable1/index.js":"Daf7x"}],"7KbOn":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_List_Lazy_Types = require("../Data.List.Lazy.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Pattern = function(x) {
    return x;
};
_c = Pattern;
var zipWith = function(f) {
    return function(xs) {
        return function(ys) {
            var go = function(v) {
                return function(v1) {
                    if (v instanceof Data_List_Lazy_Types.Nil) return Data_List_Lazy_Types.Nil.value;
                    if (v1 instanceof Data_List_Lazy_Types.Nil) return Data_List_Lazy_Types.Nil.value;
                    if (v instanceof Data_List_Lazy_Types.Cons && v1 instanceof Data_List_Lazy_Types.Cons) return new Data_List_Lazy_Types.Cons(f(v.value0)(v1.value0), zipWith(f)(v.value1)(v1.value1));
                    throw new Error("Failed pattern match at Data.List.Lazy (line 693, column 3 - line 693, column 35): " + [
                        v.constructor.name,
                        v1.constructor.name
                    ]);
                };
            };
            return Control_Apply.apply(Data_Lazy.applyLazy)(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs)))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(ys));
        };
    };
};
var zipWithA = function(dictApplicative) {
    return function(f) {
        return function(xs) {
            return function(ys) {
                return Data_Traversable.sequence(Data_List_Lazy_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
            };
        };
    };
};
var zip = zipWith(Data_Tuple.Tuple.create);
var updateAt = function(n) {
    return function(x) {
        return function(xs) {
            var go = function(v) {
                return function(v1) {
                    if (v1 instanceof Data_List_Lazy_Types.Nil) return Data_List_Lazy_Types.Nil.value;
                    if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) return new Data_List_Lazy_Types.Cons(x, v1.value1);
                    if (v1 instanceof Data_List_Lazy_Types.Cons) return new Data_List_Lazy_Types.Cons(v1.value0, updateAt(v - 1 | 0)(x)(v1.value1));
                    throw new Error("Failed pattern match at Data.List.Lazy (line 367, column 3 - line 367, column 17): " + [
                        v.constructor.name,
                        v1.constructor.name
                    ]);
                };
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var unzip = Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(function(v) {
    return function(v1) {
        return new Data_Tuple.Tuple(Data_List_Lazy_Types.cons(v.value0)(v1.value0), Data_List_Lazy_Types.cons(v.value1)(v1.value1));
    };
})(new Data_Tuple.Tuple(Data_List_Lazy_Types.nil, Data_List_Lazy_Types.nil));
var uncons = function(xs) {
    var v = Data_List_Lazy_Types.step(xs);
    if (v instanceof Data_List_Lazy_Types.Nil) return Data_Maybe.Nothing.value;
    if (v instanceof Data_List_Lazy_Types.Cons) return new Data_Maybe.Just({
        head: v.value0,
        tail: v.value1
    });
    throw new Error("Failed pattern match at Data.List.Lazy (line 285, column 13 - line 287, column 44): " + [
        v.constructor.name
    ]);
};
var toUnfoldable = function(dictUnfoldable) {
    return Data_Unfoldable.unfoldr(dictUnfoldable)(function(xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function(rec) {
            return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(uncons(xs));
    });
};
var takeWhile = function(p) {
    var go = function(v) {
        if (v instanceof Data_List_Lazy_Types.Cons && p(v.value0)) return new Data_List_Lazy_Types.Cons(v.value0, takeWhile(p)(v.value1));
        return Data_List_Lazy_Types.Nil.value;
    };
    var $239 = Data_Functor.map(Data_Lazy.functorLazy)(go);
    var $240 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
    return function($241) {
        return Data_List_Lazy_Types.List($239($240($241)));
    };
};
var take = function(n) {
    var go = function(v) {
        return function(v1) {
            if (v1 instanceof Data_List_Lazy_Types.Nil) return Data_List_Lazy_Types.Nil.value;
            if (v1 instanceof Data_List_Lazy_Types.Cons) return new Data_List_Lazy_Types.Cons(v1.value0, take(v - 1 | 0)(v1.value1));
            throw new Error("Failed pattern match at Data.List.Lazy (line 517, column 3 - line 517, column 32): " + [
                v.constructor.name,
                v1.constructor.name
            ]);
        };
    };
    var $119 = n <= 0;
    if ($119) return Data_Function["const"](Data_List_Lazy_Types.nil);
    var $242 = Data_Functor.map(Data_Lazy.functorLazy)(go(n));
    var $243 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
    return function($244) {
        return Data_List_Lazy_Types.List($242($243($244)));
    };
};
var tail = function(xs) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function(v) {
        return v.tail;
    })(uncons(xs));
};
var stripPrefix = function(dictEq) {
    return function(v) {
        return function(s) {
            var go = function(prefix) {
                return function(input) {
                    var v1 = Data_List_Lazy_Types.step(prefix);
                    if (v1 instanceof Data_List_Lazy_Types.Nil) return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Done(input));
                    if (v1 instanceof Data_List_Lazy_Types.Cons) {
                        var v2 = Data_List_Lazy_Types.step(input);
                        if (v2 instanceof Data_List_Lazy_Types.Cons && Data_Eq.eq(dictEq)(v1.value0)(v2.value0)) return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Loop({
                            a: v1.value1,
                            b: v2.value1
                        }));
                        return Data_Maybe.Nothing.value;
                    }
                    throw new Error("Failed pattern match at Data.List.Lazy (line 499, column 21 - line 503, column 19): " + [
                        v1.constructor.name
                    ]);
                };
            };
            return Control_Monad_Rec_Class.tailRecM2(Control_Monad_Rec_Class.monadRecMaybe)(go)(v)(s);
        };
    };
};
var span = function(p) {
    return function(xs) {
        var v = uncons(xs);
        if (v instanceof Data_Maybe.Just && p(v.value0.head)) {
            var v1 = span(p)(v.value0.tail);
            return {
                init: Data_List_Lazy_Types.cons(v.value0.head)(v1.init),
                rest: v1.rest
            };
        }
        return {
            init: Data_List_Lazy_Types.nil,
            rest: xs
        };
    };
};
var snoc = function(xs) {
    return function(x) {
        return Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(Data_List_Lazy_Types.cons)(Data_List_Lazy_Types.cons(x)(Data_List_Lazy_Types.nil))(xs);
    };
};
var singleton = function(a) {
    return Data_List_Lazy_Types.cons(a)(Data_List_Lazy_Types.nil);
};
var showPattern = function(dictShow) {
    return new Data_Show.Show(function(v) {
        return "(Pattern " + (Data_Show.show(Data_List_Lazy_Types.showList(dictShow))(v) + ")");
    });
};
var scanrLazy = function(f) {
    return function(acc) {
        return function(xs) {
            var go = function(v) {
                if (v instanceof Data_List_Lazy_Types.Nil) return Data_List_Lazy_Types.Nil.value;
                if (v instanceof Data_List_Lazy_Types.Cons) {
                    var acc$prime = f(v.value0)(acc);
                    return Data_List_Lazy_Types.Cons.create(acc$prime)(scanrLazy(f)(acc$prime)(v.value1));
                }
                throw new Error("Failed pattern match at Data.List.Lazy (line 764, column 5 - line 764, column 27): " + [
                    v.constructor.name
                ]);
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var reverse = function(xs) {
    return Control_Lazy.defer(Data_List_Lazy_Types.lazyList)(function(v) {
        return Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip(Data_List_Lazy_Types.cons))(Data_List_Lazy_Types.nil)(xs);
    });
};
var replicateM = function(dictMonad) {
    return function(n) {
        return function(m) {
            if (n < 1) return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.nil);
            if (Data_Boolean.otherwise) return Control_Bind.bind(dictMonad.Bind1())(m)(function(a) {
                return Control_Bind.bind(dictMonad.Bind1())(replicateM(dictMonad)(n - 1 | 0)(m))(function(as) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.cons(a)(as));
                });
            });
            throw new Error("Failed pattern match at Data.List.Lazy (line 161, column 1 - line 161, column 62): " + [
                n.constructor.name,
                m.constructor.name
            ]);
        };
    };
};
var repeat = function(x) {
    return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function(xs) {
        return Data_List_Lazy_Types.cons(x)(xs);
    });
};
var replicate = function(i) {
    return function(xs) {
        return take(i)(repeat(xs));
    };
};
var range = function(start) {
    return function(end) {
        if (start > end) {
            var g = function(x) {
                if (x >= end) return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x - 1 | 0));
                if (Data_Boolean.otherwise) return Data_Maybe.Nothing.value;
                throw new Error("Failed pattern match at Data.List.Lazy (line 148, column 13 - line 149, column 38): " + [
                    x.constructor.name
                ]);
            };
            return Data_Unfoldable.unfoldr(Data_List_Lazy_Types.unfoldableList)(g)(start);
        }
        if (Data_Boolean.otherwise) {
            var f = function(x) {
                if (x <= end) return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x + 1 | 0));
                if (Data_Boolean.otherwise) return Data_Maybe.Nothing.value;
                throw new Error("Failed pattern match at Data.List.Lazy (line 153, column 5 - line 154, column 30): " + [
                    x.constructor.name
                ]);
            };
            return Data_Unfoldable.unfoldr(Data_List_Lazy_Types.unfoldableList)(f)(start);
        }
        throw new Error("Failed pattern match at Data.List.Lazy (line 145, column 1 - line 145, column 32): " + [
            start.constructor.name,
            end.constructor.name
        ]);
    };
};
var partition = function(f) {
    var go = function(x) {
        return function(v) {
            var $147 = f(x);
            if ($147) return {
                yes: Data_List_Lazy_Types.cons(x)(v.yes),
                no: v.no
            };
            return {
                yes: v.yes,
                no: Data_List_Lazy_Types.cons(x)(v.no)
            };
        };
    };
    return Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(go)({
        yes: Data_List_Lazy_Types.nil,
        no: Data_List_Lazy_Types.nil
    });
};
var $$null = function($245) {
    return Data_Maybe.isNothing(uncons($245));
};
var newtypePattern = new Data_Newtype.Newtype(function(n) {
    return n;
}, Pattern);
var mapMaybe = function(f) {
    var go = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Lazy_Types.Nil) {
                $tco_done = true;
                return Data_List_Lazy_Types.Nil.value;
            }
            if (v instanceof Data_List_Lazy_Types.Cons) {
                var v1 = f(v.value0);
                if (v1 instanceof Data_Maybe.Nothing) {
                    $copy_v = Data_List_Lazy_Types.step(v.value1);
                    return;
                }
                if (v1 instanceof Data_Maybe.Just) {
                    $tco_done = true;
                    return new Data_List_Lazy_Types.Cons(v1.value0, mapMaybe(f)(v.value1));
                }
                throw new Error("Failed pattern match at Data.List.Lazy (line 460, column 5 - line 462, column 39): " + [
                    v1.constructor.name
                ]);
            }
            throw new Error("Failed pattern match at Data.List.Lazy (line 458, column 3 - line 458, column 15): " + [
                v.constructor.name
            ]);
        }
        while(!$tco_done)$tco_result = $tco_loop($copy_v);
        return $tco_result;
    };
    var $246 = Data_Functor.map(Data_Lazy.functorLazy)(go);
    var $247 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
    return function($248) {
        return Data_List_Lazy_Types.List($246($247($248)));
    };
};
var some = function(dictAlternative) {
    return function(dictLazy) {
        return function(v) {
            return Control_Apply.apply(dictAlternative.Applicative0().Apply0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(Data_List_Lazy_Types.cons)(v))(Control_Lazy.defer(dictLazy)(function(v1) {
                return many(dictAlternative)(dictLazy)(v);
            }));
        };
    };
};
var many = function(dictAlternative) {
    return function(dictLazy) {
        return function(v) {
            return Control_Alt.alt(dictAlternative.Plus1().Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Lazy_Types.nil));
        };
    };
};
var length = Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(function(l) {
    return function(v) {
        return l + 1 | 0;
    };
})(0);
var last = function() {
    var go = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Lazy_Types.Cons) {
                if ($$null(v.value1)) {
                    $tco_done = true;
                    return new Data_Maybe.Just(v.value0);
                }
                if (Data_Boolean.otherwise) {
                    $copy_v = Data_List_Lazy_Types.step(v.value1);
                    return;
                }
            }
            $tco_done = true;
            return Data_Maybe.Nothing.value;
        }
        while(!$tco_done)$tco_result = $tco_loop($copy_v);
        return $tco_result;
    };
    return function($249) {
        return go(Data_List_Lazy_Types.step($249));
    };
}();
var iterate = function(f) {
    return function(x) {
        return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function(xs) {
            return Data_List_Lazy_Types.cons(x)(Data_Functor.map(Data_List_Lazy_Types.functorList)(f)(xs));
        });
    };
};
var insertAt = function(v) {
    return function(x) {
        return function(xs) {
            if (v === 0) return Data_List_Lazy_Types.cons(x)(xs);
            var go = function(v1) {
                if (v1 instanceof Data_List_Lazy_Types.Nil) return new Data_List_Lazy_Types.Cons(x, Data_List_Lazy_Types.nil);
                if (v1 instanceof Data_List_Lazy_Types.Cons) return new Data_List_Lazy_Types.Cons(v1.value0, insertAt(v - 1 | 0)(x)(v1.value1));
                throw new Error("Failed pattern match at Data.List.Lazy (line 340, column 3 - line 340, column 22): " + [
                    v1.constructor.name
                ]);
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var init = function() {
    var go = function(v) {
        if (v instanceof Data_List_Lazy_Types.Cons) {
            if ($$null(v.value1)) return new Data_Maybe.Just(Data_List_Lazy_Types.nil);
            if (Data_Boolean.otherwise) return Data_Functor.map(Data_Maybe.functorMaybe)(Data_List_Lazy_Types.cons(v.value0))(go(Data_List_Lazy_Types.step(v.value1)));
        }
        return Data_Maybe.Nothing.value;
    };
    return function($250) {
        return go(Data_List_Lazy_Types.step($250));
    };
}();
var index = function(xs) {
    var go = function($copy_v) {
        return function($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
                if (v instanceof Data_List_Lazy_Types.Nil) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                }
                if (v instanceof Data_List_Lazy_Types.Cons && v1 === 0) {
                    $tco_done = true;
                    return new Data_Maybe.Just(v.value0);
                }
                if (v instanceof Data_List_Lazy_Types.Cons) {
                    $tco_var_v = Data_List_Lazy_Types.step(v.value1);
                    $copy_v1 = v1 - 1 | 0;
                    return;
                }
                throw new Error("Failed pattern match at Data.List.Lazy (line 299, column 3 - line 299, column 21): " + [
                    v.constructor.name,
                    v1.constructor.name
                ]);
            }
            while(!$tco_done)$tco_result = $tco_loop($tco_var_v, $copy_v1);
            return $tco_result;
        };
    };
    return go(Data_List_Lazy_Types.step(xs));
};
var head = function(xs) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function(v) {
        return v.head;
    })(uncons(xs));
};
var transpose = function(xs) {
    var v = uncons(xs);
    if (v instanceof Data_Maybe.Nothing) return xs;
    if (v instanceof Data_Maybe.Just) {
        var v1 = uncons(v.value0.head);
        if (v1 instanceof Data_Maybe.Nothing) return transpose(v.value0.tail);
        if (v1 instanceof Data_Maybe.Just) return Data_List_Lazy_Types.cons(Data_List_Lazy_Types.cons(v1.value0.head)(mapMaybe(head)(v.value0.tail)))(transpose(Data_List_Lazy_Types.cons(v1.value0.tail)(mapMaybe(tail)(v.value0.tail))));
        throw new Error("Failed pattern match at Data.List.Lazy (line 734, column 7 - line 738, column 72): " + [
            v1.constructor.name
        ]);
    }
    throw new Error("Failed pattern match at Data.List.Lazy (line 730, column 3 - line 738, column 72): " + [
        v.constructor.name
    ]);
};
var groupBy = function(eq) {
    var go = function(v) {
        if (v instanceof Data_List_Lazy_Types.Nil) return Data_List_Lazy_Types.Nil.value;
        if (v instanceof Data_List_Lazy_Types.Cons) {
            var v1 = span(eq(v.value0))(v.value1);
            return new Data_List_Lazy_Types.Cons(Data_Lazy.defer(function(v2) {
                return new Data_NonEmpty.NonEmpty(v.value0, v1.init);
            }), groupBy(eq)(v1.rest));
        }
        throw new Error("Failed pattern match at Data.List.Lazy (line 588, column 3 - line 588, column 15): " + [
            v.constructor.name
        ]);
    };
    var $251 = Data_Functor.map(Data_Lazy.functorLazy)(go);
    var $252 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
    return function($253) {
        return Data_List_Lazy_Types.List($251($252($253)));
    };
};
var group = function(dictEq) {
    return groupBy(Data_Eq.eq(dictEq));
};
var fromStep = function() {
    var $254 = Control_Applicative.pure(Data_Lazy.applicativeLazy);
    return function($255) {
        return Data_List_Lazy_Types.List($254($255));
    };
}();
var insertBy = function(cmp) {
    return function(x) {
        return function(xs) {
            var go = function(v) {
                if (v instanceof Data_List_Lazy_Types.Nil) return new Data_List_Lazy_Types.Cons(x, Data_List_Lazy_Types.nil);
                if (v instanceof Data_List_Lazy_Types.Cons) {
                    var v1 = cmp(x)(v.value0);
                    if (v1 instanceof Data_Ordering.GT) return new Data_List_Lazy_Types.Cons(v.value0, insertBy(cmp)(x)(v.value1));
                    return new Data_List_Lazy_Types.Cons(x, fromStep(v));
                }
                throw new Error("Failed pattern match at Data.List.Lazy (line 235, column 3 - line 235, column 22): " + [
                    v.constructor.name
                ]);
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var insert = function(dictOrd) {
    return insertBy(Data_Ord.compare(dictOrd));
};
var fromFoldable = function(dictFoldable) {
    return Data_Foldable.foldr(dictFoldable)(Data_List_Lazy_Types.cons)(Data_List_Lazy_Types.nil);
};
var foldrLazy = function(dictLazy) {
    return function(op) {
        return function(z) {
            var go = function(xs) {
                var v = Data_List_Lazy_Types.step(xs);
                if (v instanceof Data_List_Lazy_Types.Cons) return Control_Lazy.defer(dictLazy)(function(v1) {
                    return op(v.value0)(go(v.value1));
                });
                if (v instanceof Data_List_Lazy_Types.Nil) return z;
                throw new Error("Failed pattern match at Data.List.Lazy (line 756, column 13 - line 758, column 15): " + [
                    v.constructor.name
                ]);
            };
            return go;
        };
    };
};
var foldM = function(dictMonad) {
    return function(f) {
        return function(a) {
            return function(xs) {
                var v = uncons(xs);
                if (v instanceof Data_Maybe.Nothing) return Control_Applicative.pure(dictMonad.Applicative0())(a);
                if (v instanceof Data_Maybe.Just) return Control_Bind.bind(dictMonad.Bind1())(f(a)(v.value0.head))(function(a$prime) {
                    return foldM(dictMonad)(f)(a$prime)(v.value0.tail);
                });
                throw new Error("Failed pattern match at Data.List.Lazy (line 747, column 5 - line 750, column 54): " + [
                    v.constructor.name
                ]);
            };
        };
    };
};
var findIndex = function(fn) {
    var go = function(n) {
        return function(list) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)(uncons(list))(function(o) {
                var $199 = fn(o.head);
                if ($199) return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(n);
                return go(n + 1 | 0)(o.tail);
            });
        };
    };
    return go(0);
};
var findLastIndex = function(fn) {
    return function(xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function(v) {
            return (length(xs) - 1 | 0) - v | 0;
        })(findIndex(fn)(reverse(xs)));
    };
};
var filterM = function(dictMonad) {
    return function(p) {
        return function(list) {
            var v = uncons(list);
            if (v instanceof Data_Maybe.Nothing) return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.nil);
            if (v instanceof Data_Maybe.Just) return Control_Bind.bind(dictMonad.Bind1())(p(v.value0.head))(function(b) {
                return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(p)(v.value0.tail))(function(xs$prime) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(function() {
                        if (b) return Data_List_Lazy_Types.cons(v.value0.head)(xs$prime);
                        return xs$prime;
                    }());
                });
            });
            throw new Error("Failed pattern match at Data.List.Lazy (line 443, column 5 - line 448, column 48): " + [
                v.constructor.name
            ]);
        };
    };
};
var filter = function(p) {
    var go = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Lazy_Types.Nil) {
                $tco_done = true;
                return Data_List_Lazy_Types.Nil.value;
            }
            if (v instanceof Data_List_Lazy_Types.Cons) {
                if (p(v.value0)) {
                    $tco_done = true;
                    return new Data_List_Lazy_Types.Cons(v.value0, filter(p)(v.value1));
                }
                if (Data_Boolean.otherwise) {
                    $copy_v = Data_List_Lazy_Types.step(v.value1);
                    return;
                }
            }
            throw new Error("Failed pattern match at Data.List.Lazy (line 428, column 3 - line 428, column 15): " + [
                v.constructor.name
            ]);
        }
        while(!$tco_done)$tco_result = $tco_loop($copy_v);
        return $tco_result;
    };
    var $256 = Data_Functor.map(Data_Lazy.functorLazy)(go);
    var $257 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
    return function($258) {
        return Data_List_Lazy_Types.List($256($257($258)));
    };
};
var intersectBy = function(eq) {
    return function(xs) {
        return function(ys) {
            return filter(function(x) {
                return Data_Foldable.any(Data_List_Lazy_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(eq(x))(ys);
            })(xs);
        };
    };
};
var intersect = function(dictEq) {
    return intersectBy(Data_Eq.eq(dictEq));
};
var nubBy = function(eq) {
    var go = function(v) {
        if (v instanceof Data_List_Lazy_Types.Nil) return Data_List_Lazy_Types.Nil.value;
        if (v instanceof Data_List_Lazy_Types.Cons) return new Data_List_Lazy_Types.Cons(v.value0, nubBy(eq)(filter(function(y) {
            return !eq(v.value0)(y);
        })(v.value1)));
        throw new Error("Failed pattern match at Data.List.Lazy (line 621, column 3 - line 621, column 15): " + [
            v.constructor.name
        ]);
    };
    var $259 = Data_Functor.map(Data_Lazy.functorLazy)(go);
    var $260 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
    return function($261) {
        return Data_List_Lazy_Types.List($259($260($261)));
    };
};
var nub = function(dictEq) {
    return nubBy(Data_Eq.eq(dictEq));
};
var eqPattern = function(dictEq) {
    return new Data_Eq.Eq(function(x) {
        return function(y) {
            return Data_Eq.eq(Data_List_Lazy_Types.eqList(dictEq))(x)(y);
        };
    });
};
var ordPattern = function(dictOrd) {
    return new Data_Ord.Ord(function() {
        return eqPattern(dictOrd.Eq0());
    }, function(x) {
        return function(y) {
            return Data_Ord.compare(Data_List_Lazy_Types.ordList(dictOrd))(x)(y);
        };
    });
};
var elemLastIndex = function(dictEq) {
    return function(x) {
        return findLastIndex(function(v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var elemIndex = function(dictEq) {
    return function(x) {
        return findIndex(function(v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var dropWhile = function(p) {
    var go = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Lazy_Types.Cons && p(v.value0)) {
                $copy_v = Data_List_Lazy_Types.step(v.value1);
                return;
            }
            $tco_done = true;
            return fromStep(v);
        }
        while(!$tco_done)$tco_result = $tco_loop($copy_v);
        return $tco_result;
    };
    return function($262) {
        return go(Data_List_Lazy_Types.step($262));
    };
};
var drop = function(n) {
    var go = function($copy_v) {
        return function($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
                if (v === 0) {
                    $tco_done = true;
                    return v1;
                }
                if (v1 instanceof Data_List_Lazy_Types.Nil) {
                    $tco_done = true;
                    return Data_List_Lazy_Types.Nil.value;
                }
                if (v1 instanceof Data_List_Lazy_Types.Cons) {
                    $tco_var_v = v - 1 | 0;
                    $copy_v1 = Data_List_Lazy_Types.step(v1.value1);
                    return;
                }
                throw new Error("Failed pattern match at Data.List.Lazy (line 536, column 3 - line 536, column 15): " + [
                    v.constructor.name,
                    v1.constructor.name
                ]);
            }
            while(!$tco_done)$tco_result = $tco_loop($tco_var_v, $copy_v1);
            return $tco_result;
        };
    };
    var $263 = Data_Functor.map(Data_Lazy.functorLazy)(go(n));
    var $264 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
    return function($265) {
        return Data_List_Lazy_Types.List($263($264($265)));
    };
};
var slice = function(start) {
    return function(end) {
        return function(xs) {
            return take(end - start | 0)(drop(start)(xs));
        };
    };
};
var deleteBy = function(eq) {
    return function(x) {
        return function(xs) {
            var go = function(v) {
                if (v instanceof Data_List_Lazy_Types.Nil) return Data_List_Lazy_Types.Nil.value;
                if (v instanceof Data_List_Lazy_Types.Cons) {
                    if (eq(x)(v.value0)) return Data_List_Lazy_Types.step(v.value1);
                    if (Data_Boolean.otherwise) return new Data_List_Lazy_Types.Cons(v.value0, deleteBy(eq)(x)(v.value1));
                }
                throw new Error("Failed pattern match at Data.List.Lazy (line 650, column 3 - line 650, column 15): " + [
                    v.constructor.name
                ]);
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var unionBy = function(eq) {
    return function(xs) {
        return function(ys) {
            return Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(xs)(Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};
var union = function(dictEq) {
    return unionBy(Data_Eq.eq(dictEq));
};
var deleteAt = function(n) {
    return function(xs) {
        var go = function(v) {
            return function(v1) {
                if (v1 instanceof Data_List_Lazy_Types.Nil) return Data_List_Lazy_Types.Nil.value;
                if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) return Data_List_Lazy_Types.step(v1.value1);
                if (v1 instanceof Data_List_Lazy_Types.Cons) return new Data_List_Lazy_Types.Cons(v1.value0, deleteAt(v - 1 | 0)(v1.value1));
                throw new Error("Failed pattern match at Data.List.Lazy (line 353, column 3 - line 353, column 17): " + [
                    v.constructor.name,
                    v1.constructor.name
                ]);
            };
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
    };
};
var $$delete = function(dictEq) {
    return deleteBy(Data_Eq.eq(dictEq));
};
var difference = function(dictEq) {
    return Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip($$delete(dictEq)));
};
var cycle = function(xs) {
    return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function(ys) {
        return Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(xs)(ys);
    });
};
var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Lazy_Types.bindList));
var concat = function(v) {
    return Control_Bind.bind(Data_List_Lazy_Types.bindList)(v)(Control_Category.identity(Control_Category.categoryFn));
};
var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
var alterAt = function(n) {
    return function(f) {
        return function(xs) {
            var go = function(v) {
                return function(v1) {
                    if (v1 instanceof Data_List_Lazy_Types.Nil) return Data_List_Lazy_Types.Nil.value;
                    if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
                        var v2 = f(v1.value0);
                        if (v2 instanceof Data_Maybe.Nothing) return Data_List_Lazy_Types.step(v1.value1);
                        if (v2 instanceof Data_Maybe.Just) return new Data_List_Lazy_Types.Cons(v2.value0, v1.value1);
                        throw new Error("Failed pattern match at Data.List.Lazy (line 394, column 22 - line 396, column 26): " + [
                            v2.constructor.name
                        ]);
                    }
                    if (v1 instanceof Data_List_Lazy_Types.Cons) return new Data_List_Lazy_Types.Cons(v1.value0, alterAt(v - 1 | 0)(f)(v1.value1));
                    throw new Error("Failed pattern match at Data.List.Lazy (line 393, column 3 - line 393, column 17): " + [
                        v.constructor.name,
                        v1.constructor.name
                    ]);
                };
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var modifyAt = function(n) {
    return function(f) {
        return alterAt(n)(function($266) {
            return Data_Maybe.Just.create(f($266));
        });
    };
};
module.exports = {
    toUnfoldable: toUnfoldable,
    fromFoldable: fromFoldable,
    singleton: singleton,
    range: range,
    replicate: replicate,
    replicateM: replicateM,
    some: some,
    many: many,
    repeat: repeat,
    iterate: iterate,
    cycle: cycle,
    "null": $$null,
    length: length,
    snoc: snoc,
    insert: insert,
    insertBy: insertBy,
    head: head,
    last: last,
    tail: tail,
    init: init,
    uncons: uncons,
    index: index,
    elemIndex: elemIndex,
    elemLastIndex: elemLastIndex,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    insertAt: insertAt,
    deleteAt: deleteAt,
    updateAt: updateAt,
    modifyAt: modifyAt,
    alterAt: alterAt,
    reverse: reverse,
    concat: concat,
    concatMap: concatMap,
    filter: filter,
    filterM: filterM,
    mapMaybe: mapMaybe,
    catMaybes: catMaybes,
    Pattern: Pattern,
    stripPrefix: stripPrefix,
    slice: slice,
    take: take,
    takeWhile: takeWhile,
    drop: drop,
    dropWhile: dropWhile,
    span: span,
    group: group,
    groupBy: groupBy,
    partition: partition,
    nub: nub,
    nubBy: nubBy,
    union: union,
    unionBy: unionBy,
    "delete": $$delete,
    deleteBy: deleteBy,
    difference: difference,
    intersect: intersect,
    intersectBy: intersectBy,
    zipWith: zipWith,
    zipWithA: zipWithA,
    zip: zip,
    unzip: unzip,
    transpose: transpose,
    foldM: foldM,
    foldrLazy: foldrLazy,
    scanrLazy: scanrLazy,
    eqPattern: eqPattern,
    ordPattern: ordPattern,
    newtypePattern: newtypePattern,
    showPattern: showPattern
};
var _c;
$RefreshReg$(_c, "Pattern");

},{"../Control.Alt/index.js":"82RIG","../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Category/index.js":"dfcPK","../Control.Lazy/index.js":"chn7k","../Control.Monad.Rec.Class/index.js":"dMFG0","../Data.Boolean/index.js":"lv1qw","../Data.Eq/index.js":"c3b8F","../Data.Foldable/index.js":"jWmFN","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO","../Data.HeytingAlgebra/index.js":"8Mx0E","../Data.Lazy/index.js":"520Le","../Data.List.Lazy.Types/index.js":"95AMQ","../Data.Maybe/index.js":"ePH81","../Data.Newtype/index.js":"czJbt","../Data.NonEmpty/index.js":"4pAZZ","../Data.Ord/index.js":"f14nh","../Data.Ordering/index.js":"lEtyd","../Data.Semigroup/index.js":"4sNah","../Data.Show/index.js":"b6tNW","../Data.Traversable/index.js":"i5Kon","../Data.Tuple/index.js":"eOBbM","../Data.Unfoldable/index.js":"5NUrk"}],"520Le":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_BooleanAlgebra = require("../Data.BooleanAlgebra/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var showLazy = function(dictShow) {
    return new Data_Show.Show(function(x) {
        return "(defer \\_ -> " + (Data_Show.show(dictShow)($foreign.force(x)) + ")");
    });
};
var semiringLazy = function(dictSemiring) {
    return new Data_Semiring.Semiring(function(a) {
        return function(b) {
            return $foreign.defer(function(v) {
                return Data_Semiring.add(dictSemiring)($foreign.force(a))($foreign.force(b));
            });
        };
    }, function(a) {
        return function(b) {
            return $foreign.defer(function(v) {
                return Data_Semiring.mul(dictSemiring)($foreign.force(a))($foreign.force(b));
            });
        };
    }, $foreign.defer(function(v) {
        return Data_Semiring.one(dictSemiring);
    }), $foreign.defer(function(v) {
        return Data_Semiring.zero(dictSemiring);
    }));
};
var semigroupLazy = function(dictSemigroup) {
    return new Data_Semigroup.Semigroup(function(a) {
        return function(b) {
            return $foreign.defer(function(v) {
                return Data_Semigroup.append(dictSemigroup)($foreign.force(a))($foreign.force(b));
            });
        };
    });
};
var ringLazy = function(dictRing) {
    return new Data_Ring.Ring(function() {
        return semiringLazy(dictRing.Semiring0());
    }, function(a) {
        return function(b) {
            return $foreign.defer(function(v) {
                return Data_Ring.sub(dictRing)($foreign.force(a))($foreign.force(b));
            });
        };
    });
};
var monoidLazy = function(dictMonoid) {
    return new Data_Monoid.Monoid(function() {
        return semigroupLazy(dictMonoid.Semigroup0());
    }, $foreign.defer(function(v) {
        return Data_Monoid.mempty(dictMonoid);
    }));
};
var lazyLazy = new Control_Lazy.Lazy(function(f) {
    return $foreign.defer(function(v) {
        return $foreign.force(f(Data_Unit.unit));
    });
});
var functorLazy = new Data_Functor.Functor(function(f) {
    return function(l) {
        return $foreign.defer(function(v) {
            return f($foreign.force(l));
        });
    };
});
var functorWithIndexLazy = new Data_FunctorWithIndex.FunctorWithIndex(function() {
    return functorLazy;
}, function(f) {
    return Data_Functor.map(functorLazy)(f(Data_Unit.unit));
});
var invariantLazy = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorLazy));
var foldableLazy = new Data_Foldable.Foldable(function(dictMonoid) {
    return function(f) {
        return function(l) {
            return f($foreign.force(l));
        };
    };
}, function(f) {
    return function(z) {
        return function(l) {
            return f(z)($foreign.force(l));
        };
    };
}, function(f) {
    return function(z) {
        return function(l) {
            return f($foreign.force(l))(z);
        };
    };
});
var foldableWithIndexLazy = new Data_FoldableWithIndex.FoldableWithIndex(function() {
    return foldableLazy;
}, function(dictMonoid) {
    return function(f) {
        return Data_Foldable.foldMap(foldableLazy)(dictMonoid)(f(Data_Unit.unit));
    };
}, function(f) {
    return Data_Foldable.foldl(foldableLazy)(f(Data_Unit.unit));
}, function(f) {
    return Data_Foldable.foldr(foldableLazy)(f(Data_Unit.unit));
});
var traversableLazy = new Data_Traversable.Traversable(function() {
    return foldableLazy;
}, function() {
    return functorLazy;
}, function(dictApplicative) {
    return function(l) {
        return Data_Functor.map(dictApplicative.Apply0().Functor0())(function($42) {
            return $foreign.defer(Data_Function["const"]($42));
        })($foreign.force(l));
    };
}, function(dictApplicative) {
    return function(f) {
        return function(l) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(function($43) {
                return $foreign.defer(Data_Function["const"]($43));
            })(f($foreign.force(l)));
        };
    };
});
var traversableWithIndexLazy = new Data_TraversableWithIndex.TraversableWithIndex(function() {
    return foldableWithIndexLazy;
}, function() {
    return functorWithIndexLazy;
}, function() {
    return traversableLazy;
}, function(dictApplicative) {
    return function(f) {
        return Data_Traversable.traverse(traversableLazy)(dictApplicative)(f(Data_Unit.unit));
    };
});
var foldable1Lazy = new Data_Semigroup_Foldable.Foldable1(function() {
    return foldableLazy;
}, function(dictSemigroup) {
    return Data_Semigroup_Foldable.fold1Default(foldable1Lazy)(dictSemigroup);
}, function(dictSemigroup) {
    return function(f) {
        return function(l) {
            return f($foreign.force(l));
        };
    };
});
var traversable1Lazy = new Data_Semigroup_Traversable.Traversable1(function() {
    return foldable1Lazy;
}, function() {
    return traversableLazy;
}, function(dictApply) {
    return function(l) {
        return Data_Functor.map(dictApply.Functor0())(function($44) {
            return $foreign.defer(Data_Function["const"]($44));
        })($foreign.force(l));
    };
}, function(dictApply) {
    return function(f) {
        return function(l) {
            return Data_Functor.map(dictApply.Functor0())(function($45) {
                return $foreign.defer(Data_Function["const"]($45));
            })(f($foreign.force(l)));
        };
    };
});
var extendLazy = new Control_Extend.Extend(function() {
    return functorLazy;
}, function(f) {
    return function(x) {
        return $foreign.defer(function(v) {
            return f(x);
        });
    };
});
var eqLazy = function(dictEq) {
    return new Data_Eq.Eq(function(x) {
        return function(y) {
            return Data_Eq.eq(dictEq)($foreign.force(x))($foreign.force(y));
        };
    });
};
var ordLazy = function(dictOrd) {
    return new Data_Ord.Ord(function() {
        return eqLazy(dictOrd.Eq0());
    }, function(x) {
        return function(y) {
            return Data_Ord.compare(dictOrd)($foreign.force(x))($foreign.force(y));
        };
    });
};
var eq1Lazy = new Data_Eq.Eq1(function(dictEq) {
    return Data_Eq.eq(eqLazy(dictEq));
});
var ord1Lazy = new Data_Ord.Ord1(function() {
    return eq1Lazy;
}, function(dictOrd) {
    return Data_Ord.compare(ordLazy(dictOrd));
});
var comonadLazy = new Control_Comonad.Comonad(function() {
    return extendLazy;
}, $foreign.force);
var commutativeRingLazy = function(dictCommutativeRing) {
    return new Data_CommutativeRing.CommutativeRing(function() {
        return ringLazy(dictCommutativeRing.Ring0());
    });
};
var euclideanRingLazy = function(dictEuclideanRing) {
    return new Data_EuclideanRing.EuclideanRing(function() {
        return commutativeRingLazy(dictEuclideanRing.CommutativeRing0());
    }, function() {
        var $46 = Data_EuclideanRing.degree(dictEuclideanRing);
        return function($47) {
            return $46($foreign.force($47));
        };
    }(), function(a) {
        return function(b) {
            return $foreign.defer(function(v) {
                return Data_EuclideanRing.div(dictEuclideanRing)($foreign.force(a))($foreign.force(b));
            });
        };
    }, function(a) {
        return function(b) {
            return $foreign.defer(function(v) {
                return Data_EuclideanRing.mod(dictEuclideanRing)($foreign.force(a))($foreign.force(b));
            });
        };
    });
};
var boundedLazy = function(dictBounded) {
    return new Data_Bounded.Bounded(function() {
        return ordLazy(dictBounded.Ord0());
    }, $foreign.defer(function(v) {
        return Data_Bounded.bottom(dictBounded);
    }), $foreign.defer(function(v) {
        return Data_Bounded.top(dictBounded);
    }));
};
var applyLazy = new Control_Apply.Apply(function() {
    return functorLazy;
}, function(f) {
    return function(x) {
        return $foreign.defer(function(v) {
            return $foreign.force(f)($foreign.force(x));
        });
    };
});
var bindLazy = new Control_Bind.Bind(function() {
    return applyLazy;
}, function(l) {
    return function(f) {
        return $foreign.defer(function(v) {
            return $foreign.force(f($foreign.force(l)));
        });
    };
});
var heytingAlgebraLazy = function(dictHeytingAlgebra) {
    return new Data_HeytingAlgebra.HeytingAlgebra(function(a) {
        return function(b) {
            return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.conj(dictHeytingAlgebra))(a))(b);
        };
    }, function(a) {
        return function(b) {
            return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.disj(dictHeytingAlgebra))(a))(b);
        };
    }, $foreign.defer(function(v) {
        return Data_HeytingAlgebra.ff(dictHeytingAlgebra);
    }), function(a) {
        return function(b) {
            return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.implies(dictHeytingAlgebra))(a))(b);
        };
    }, function(a) {
        return Data_Functor.map(functorLazy)(Data_HeytingAlgebra.not(dictHeytingAlgebra))(a);
    }, $foreign.defer(function(v) {
        return Data_HeytingAlgebra.tt(dictHeytingAlgebra);
    }));
};
var booleanAlgebraLazy = function(dictBooleanAlgebra) {
    return new Data_BooleanAlgebra.BooleanAlgebra(function() {
        return heytingAlgebraLazy(dictBooleanAlgebra.HeytingAlgebra0());
    });
};
var applicativeLazy = new Control_Applicative.Applicative(function() {
    return applyLazy;
}, function(a) {
    return $foreign.defer(function(v) {
        return a;
    });
});
var monadLazy = new Control_Monad.Monad(function() {
    return applicativeLazy;
}, function() {
    return bindLazy;
});
module.exports = {
    semiringLazy: semiringLazy,
    ringLazy: ringLazy,
    commutativeRingLazy: commutativeRingLazy,
    euclideanRingLazy: euclideanRingLazy,
    eqLazy: eqLazy,
    eq1Lazy: eq1Lazy,
    ordLazy: ordLazy,
    ord1Lazy: ord1Lazy,
    boundedLazy: boundedLazy,
    semigroupLazy: semigroupLazy,
    monoidLazy: monoidLazy,
    heytingAlgebraLazy: heytingAlgebraLazy,
    booleanAlgebraLazy: booleanAlgebraLazy,
    functorLazy: functorLazy,
    functorWithIndexLazy: functorWithIndexLazy,
    foldableLazy: foldableLazy,
    foldableWithIndexLazy: foldableWithIndexLazy,
    foldable1Lazy: foldable1Lazy,
    traversableLazy: traversableLazy,
    traversableWithIndexLazy: traversableWithIndexLazy,
    traversable1Lazy: traversable1Lazy,
    invariantLazy: invariantLazy,
    applyLazy: applyLazy,
    applicativeLazy: applicativeLazy,
    bindLazy: bindLazy,
    monadLazy: monadLazy,
    extendLazy: extendLazy,
    comonadLazy: comonadLazy,
    showLazy: showLazy,
    lazyLazy: lazyLazy,
    defer: $foreign.defer,
    force: $foreign.force
};

},{"./foreign.js":"dhwHC","../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Comonad/index.js":"hfPua","../Control.Extend/index.js":"kAltv","../Control.Lazy/index.js":"chn7k","../Control.Monad/index.js":"alCn2","../Data.BooleanAlgebra/index.js":"l0dkx","../Data.Bounded/index.js":"jzt4h","../Data.CommutativeRing/index.js":"2q7tT","../Data.Eq/index.js":"c3b8F","../Data.EuclideanRing/index.js":"fTU7A","../Data.Foldable/index.js":"jWmFN","../Data.FoldableWithIndex/index.js":"b0hJn","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO","../Data.Functor.Invariant/index.js":"hYAzT","../Data.FunctorWithIndex/index.js":"9mTwC","../Data.HeytingAlgebra/index.js":"8Mx0E","../Data.Monoid/index.js":"94fxC","../Data.Ord/index.js":"f14nh","../Data.Ring/index.js":"2x2oG","../Data.Semigroup/index.js":"4sNah","../Data.Semigroup.Foldable/index.js":"lM4gt","../Data.Semigroup.Traversable/index.js":"kPmtP","../Data.Semiring/index.js":"39btI","../Data.Show/index.js":"b6tNW","../Data.Traversable/index.js":"i5Kon","../Data.TraversableWithIndex/index.js":"bLveW","../Data.Unit/index.js":"d7oKp"}],"dhwHC":[function(require,module,exports) {
"use strict";
exports.defer = function(thunk) {
    var v = null;
    return function() {
        if (thunk === undefined) return v;
        v = thunk();
        thunk = undefined; // eslint-disable-line no-param-reassign
        return v;
    };
};
exports.force = function(l) {
    return l();
};

},{}],"95AMQ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var List = function(x) {
    return x;
};
_c = List;
var Nil = function() {
    function Nil1() {
    }
    Nil1.value = new Nil1();
    return Nil1;
}();
var Cons = function() {
    function Cons1(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }
    Cons1.create = function(value0) {
        return function(value1) {
            return new Cons1(value0, value1);
        };
    };
    return Cons1;
}();
var NonEmptyList = function(x) {
    return x;
};
_c1 = NonEmptyList;
var nil = List(Data_Lazy.defer(function(v) {
    return Nil.value;
}));
var newtypeNonEmptyList = new Data_Newtype.Newtype(function(n) {
    return n;
}, NonEmptyList);
var newtypeList = new Data_Newtype.Newtype(function(n) {
    return n;
}, List);
var step = function() {
    var $215 = Data_Newtype.unwrap(newtypeList);
    return function($216) {
        return Data_Lazy.force($215($216));
    };
}();
var semigroupList = new Data_Semigroup.Semigroup(function(xs) {
    return function(ys) {
        var go = function(v) {
            if (v instanceof Nil) return step(ys);
            if (v instanceof Cons) return new Cons(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(ys));
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 98, column 5 - line 98, column 21): " + [
                v.constructor.name
            ]);
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
    };
});
var showList = function(dictShow) {
    return new Data_Show.Show(function(xs) {
        var go = function(v) {
            if (v instanceof Nil) return "Nil";
            if (v instanceof Cons) return "(Cons " + (Data_Show.show(dictShow)(v.value0) + (" " + (go(step(v.value1)) + ")")));
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 64, column 5 - line 64, column 19): " + [
                v.constructor.name
            ]);
        };
        return "fromStrict (" + (go(step(xs)) + ")");
    });
};
var showNonEmptyList = function(dictShow) {
    return new Data_Show.Show(function(v) {
        return "(NonEmptyList " + (Data_Show.show(Data_Lazy.showLazy(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow))))(v) + ")");
    });
};
var monoidList = new Data_Monoid.Monoid(function() {
    return semigroupList;
}, nil);
var lazyList = new Control_Lazy.Lazy(function(f) {
    return List(Data_Lazy.defer(function($217) {
        return step(f($217));
    }));
});
var functorList = new Data_Functor.Functor(function(f) {
    return function(xs) {
        var go = function(v) {
            if (v instanceof Nil) return Nil.value;
            if (v instanceof Cons) return new Cons(f(v.value0), Data_Functor.map(functorList)(f)(v.value1));
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 107, column 5 - line 107, column 17): " + [
                v.constructor.name
            ]);
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
    };
});
var functorNonEmptyList = new Data_Functor.Functor(function(f) {
    return function(v) {
        return Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(Data_NonEmpty.functorNonEmpty(functorList))(f))(v);
    };
});
var eq1List = new Data_Eq.Eq1(function(dictEq) {
    return function(xs) {
        return function(ys) {
            var go = function($copy_v) {
                return function($copy_v1) {
                    var $tco_var_v = $copy_v;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(v, v1) {
                        if (v instanceof Nil && v1 instanceof Nil) {
                            $tco_done = true;
                            return true;
                        }
                        if (v instanceof Cons && v1 instanceof Cons && Data_Eq.eq(dictEq)(v.value0)(v1.value0)) {
                            $tco_var_v = step(v.value1);
                            $copy_v1 = step(v1.value1);
                            return;
                        }
                        $tco_done = true;
                        return false;
                    }
                    while(!$tco_done)$tco_result = $tco_loop($tco_var_v, $copy_v1);
                    return $tco_result;
                };
            };
            return go(step(xs))(step(ys));
        };
    };
});
var eqList = function(dictEq) {
    return new Data_Eq.Eq(Data_Eq.eq1(eq1List)(dictEq));
};
var eqNonEmptyList = function(dictEq) {
    return Data_Lazy.eqLazy(Data_NonEmpty.eqNonEmpty(eq1List)(dictEq));
};
var ord1List = new Data_Ord.Ord1(function() {
    return eq1List;
}, function(dictOrd) {
    return function(xs) {
        return function(ys) {
            var go = function($copy_v) {
                return function($copy_v1) {
                    var $tco_var_v = $copy_v;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(v, v1) {
                        if (v instanceof Nil && v1 instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.EQ.value;
                        }
                        if (v instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.LT.value;
                        }
                        if (v1 instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.GT.value;
                        }
                        if (v instanceof Cons && v1 instanceof Cons) {
                            var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                            if (v2 instanceof Data_Ordering.EQ) {
                                $tco_var_v = step(v.value1);
                                $copy_v1 = step(v1.value1);
                                return;
                            }
                            $tco_done = true;
                            return v2;
                        }
                        throw new Error("Failed pattern match at Data.List.Lazy.Types (line 84, column 5 - line 84, column 20): " + [
                            v.constructor.name,
                            v1.constructor.name
                        ]);
                    }
                    while(!$tco_done)$tco_result = $tco_loop($tco_var_v, $copy_v1);
                    return $tco_result;
                };
            };
            return go(step(xs))(step(ys));
        };
    };
});
var ordList = function(dictOrd) {
    return new Data_Ord.Ord(function() {
        return eqList(dictOrd.Eq0());
    }, Data_Ord.compare1(ord1List)(dictOrd));
};
var ordNonEmptyList = function(dictOrd) {
    return Data_Lazy.ordLazy(Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd));
};
var cons = function(x) {
    return function(xs) {
        return List(Data_Lazy.defer(function(v) {
            return new Cons(x, xs);
        }));
    };
};
var foldableList = new Data_Foldable.Foldable(function(dictMonoid) {
    return function(f) {
        return Data_Foldable.foldl(foldableList)(function(b) {
            return function(a) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(b)(f(a));
            };
        })(Data_Monoid.mempty(dictMonoid));
    };
}, function(op) {
    var go = function($copy_b) {
        return function($copy_xs) {
            var $tco_var_b = $copy_b;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(b, xs) {
                var v = step(xs);
                if (v instanceof Nil) {
                    $tco_done = true;
                    return b;
                }
                if (v instanceof Cons) {
                    $tco_var_b = op(b)(v.value0);
                    $copy_xs = v.value1;
                    return;
                }
                throw new Error("Failed pattern match at Data.List.Lazy.Types (line 122, column 7 - line 124, column 40): " + [
                    v.constructor.name
                ]);
            }
            while(!$tco_done)$tco_result = $tco_loop($tco_var_b, $copy_xs);
            return $tco_result;
        };
    };
    return go;
}, function(op) {
    return function(z) {
        return function(xs) {
            var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(cons))(nil);
            return Data_Foldable.foldl(foldableList)(Data_Function.flip(op))(z)(rev(xs));
        };
    };
});
var extendList = new Control_Extend.Extend(function() {
    return functorList;
}, function(f) {
    return function(l) {
        var go = function(a) {
            return function(v) {
                var acc$prime = cons(a)(v.acc);
                return {
                    val: cons(f(acc$prime))(v.val),
                    acc: acc$prime
                };
            };
        };
        var v = step(l);
        if (v instanceof Nil) return nil;
        if (v instanceof Cons) return cons(f(l))(Data_Foldable.foldr(foldableList)(go)({
            val: nil,
            acc: nil
        })(v.value1).val);
        throw new Error("Failed pattern match at Data.List.Lazy.Types (line 194, column 5 - line 197, column 55): " + [
            v.constructor.name
        ]);
    };
});
var extendNonEmptyList = new Control_Extend.Extend(function() {
    return functorNonEmptyList;
}, function(f) {
    return function(v) {
        var go = function(a) {
            return function(v1) {
                return {
                    val: cons(f(Data_Lazy.defer(function(v2) {
                        return new Data_NonEmpty.NonEmpty(a, v1.acc);
                    })))(v1.val),
                    acc: cons(a)(v1.acc)
                };
            };
        };
        var v1 = Data_Lazy.force(v);
        return NonEmptyList(Data_Lazy.defer(function(v2) {
            return new Data_NonEmpty.NonEmpty(f(v), Data_Foldable.foldr(foldableList)(go)({
                val: nil,
                acc: nil
            })(v1.value1).val);
        }));
    };
});
var foldableNonEmptyList = new Data_Foldable.Foldable(function(dictMonoid) {
    return function(f) {
        return function(v) {
            return Data_Foldable.foldMap(Data_NonEmpty.foldableNonEmpty(foldableList))(dictMonoid)(f)(Data_Lazy.force(v));
        };
    };
}, function(f) {
    return function(b) {
        return function(v) {
            return Data_Foldable.foldl(Data_NonEmpty.foldableNonEmpty(foldableList))(f)(b)(Data_Lazy.force(v));
        };
    };
}, function(f) {
    return function(b) {
        return function(v) {
            return Data_Foldable.foldr(Data_NonEmpty.foldableNonEmpty(foldableList))(f)(b)(Data_Lazy.force(v));
        };
    };
});
var foldableWithIndexList = new Data_FoldableWithIndex.FoldableWithIndex(function() {
    return foldableList;
}, function(dictMonoid) {
    return function(f) {
        return Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function(i) {
            return function(acc) {
                var $218 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                var $219 = f(i);
                return function($220) {
                    return $218($219($220));
                };
            };
        })(Data_Monoid.mempty(dictMonoid));
    };
}, function(f) {
    return function(acc) {
        var $221 = Data_Foldable.foldl(foldableList)(function(v) {
            return function(a) {
                return new Data_Tuple.Tuple(v.value0 + 1 | 0, f(v.value0)(v.value1)(a));
            };
        })(new Data_Tuple.Tuple(0, acc));
        return function($222) {
            return Data_Tuple.snd($221($222));
        };
    };
}, function(f) {
    return function(b) {
        return function(xs) {
            var v = function() {
                var rev = Data_Foldable.foldl(foldableList)(function(v1) {
                    return function(a) {
                        return new Data_Tuple.Tuple(v1.value0 + 1 | 0, cons(a)(v1.value1));
                    };
                });
                return rev(new Data_Tuple.Tuple(0, nil))(xs);
            }();
            return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function(v1) {
                return function(a) {
                    return new Data_Tuple.Tuple(v1.value0 - 1 | 0, f(v1.value0 - 1 | 0)(a)(v1.value1));
                };
            })(new Data_Tuple.Tuple(v.value0, b))(v.value1));
        };
    };
});
var foldableWithIndexNonEmptyList = new Data_FoldableWithIndex.FoldableWithIndex(function() {
    return foldableNonEmptyList;
}, function(dictMonoid) {
    return function(f) {
        return function(v) {
            return Data_FoldableWithIndex.foldMapWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(dictMonoid)(function() {
                var $223 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function($224) {
                    return f($223($224));
                };
            }())(Data_Lazy.force(v));
        };
    };
}, function(f) {
    return function(b) {
        return function(v) {
            return Data_FoldableWithIndex.foldlWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function() {
                var $225 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function($226) {
                    return f($225($226));
                };
            }())(b)(Data_Lazy.force(v));
        };
    };
}, function(f) {
    return function(b) {
        return function(v) {
            return Data_FoldableWithIndex.foldrWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function() {
                var $227 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function($228) {
                    return f($227($228));
                };
            }())(b)(Data_Lazy.force(v));
        };
    };
});
var functorWithIndexList = new Data_FunctorWithIndex.FunctorWithIndex(function() {
    return functorList;
}, function(f) {
    return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function(i) {
        return function(x) {
            return function(acc) {
                return cons(f(i)(x))(acc);
            };
        };
    })(nil);
});
var functorWithIndexNonEmptyList = new Data_FunctorWithIndex.FunctorWithIndex(function() {
    return functorNonEmptyList;
}, function(f) {
    return function(v) {
        return NonEmptyList(Data_Lazy.defer(function(v1) {
            return Data_FunctorWithIndex.mapWithIndex(Data_NonEmpty.functorWithIndex(functorWithIndexList))(function() {
                var $229 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function($230) {
                    return f($229($230));
                };
            }())(Data_Lazy.force(v));
        }));
    };
});
var toList = function(v) {
    return Control_Lazy.defer(lazyList)(function(v1) {
        var v2 = Data_Lazy.force(v);
        return cons(v2.value0)(v2.value1);
    });
};
var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function(v) {
    return function(as$prime) {
        var v1 = Data_Lazy.force(v);
        return Data_Lazy.defer(function(v2) {
            return new Data_NonEmpty.NonEmpty(v1.value0, Data_Semigroup.append(semigroupList)(v1.value1)(toList(as$prime)));
        });
    };
});
var traversableList = new Data_Traversable.Traversable(function() {
    return foldableList;
}, function() {
    return functorList;
}, function(dictApplicative) {
    return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
}, function(dictApplicative) {
    return function(f) {
        return Data_Foldable.foldr(foldableList)(function(a) {
            return function(b) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(cons)(f(a)))(b);
            };
        })(Control_Applicative.pure(dictApplicative)(nil));
    };
});
var traversableNonEmptyList = new Data_Traversable.Traversable(function() {
    return foldableNonEmptyList;
}, function() {
    return functorNonEmptyList;
}, function(dictApplicative) {
    return function(v) {
        return Data_Functor.map(dictApplicative.Apply0().Functor0())(function(xxs) {
            return NonEmptyList(Data_Lazy.defer(function(v1) {
                return xxs;
            }));
        })(Data_Traversable.sequence(Data_NonEmpty.traversableNonEmpty(traversableList))(dictApplicative)(Data_Lazy.force(v)));
    };
}, function(dictApplicative) {
    return function(f) {
        return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(function(xxs) {
                return NonEmptyList(Data_Lazy.defer(function(v1) {
                    return xxs;
                }));
            })(Data_Traversable.traverse(Data_NonEmpty.traversableNonEmpty(traversableList))(dictApplicative)(f)(Data_Lazy.force(v)));
        };
    };
});
var traversableWithIndexList = new Data_TraversableWithIndex.TraversableWithIndex(function() {
    return foldableWithIndexList;
}, function() {
    return functorWithIndexList;
}, function() {
    return traversableList;
}, function(dictApplicative) {
    return function(f) {
        return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function(i) {
            return function(a) {
                return function(b) {
                    return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(cons)(f(i)(a)))(b);
                };
            };
        })(Control_Applicative.pure(dictApplicative)(nil));
    };
});
var traversableWithIndexNonEmptyList = new Data_TraversableWithIndex.TraversableWithIndex(function() {
    return foldableWithIndexNonEmptyList;
}, function() {
    return functorWithIndexNonEmptyList;
}, function() {
    return traversableNonEmptyList;
}, function(dictApplicative) {
    return function(f) {
        return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(function(xxs) {
                return NonEmptyList(Data_Lazy.defer(function(v1) {
                    return xxs;
                }));
            })(Data_TraversableWithIndex.traverseWithIndex(Data_NonEmpty.traversableWithIndexNonEmpty(traversableWithIndexList))(dictApplicative)(function() {
                var $231 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function($232) {
                    return f($231($232));
                };
            }())(Data_Lazy.force(v)));
        };
    };
});
var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function() {
    var go = function(f) {
        return function(b) {
            return Control_Lazy.defer(lazyList)(function(v) {
                var v1 = f(b);
                if (v1.value1 instanceof Data_Maybe.Just) return cons(v1.value0)(go(f)(v1.value1.value0));
                if (v1.value1 instanceof Data_Maybe.Nothing) return cons(v1.value0)(nil);
                throw new Error("Failed pattern match at Data.List.Lazy.Types (line 146, column 28 - line 148, column 33): " + [
                    v1.constructor.name
                ]);
            });
        };
    };
    return go;
}());
var unfoldableList = new Data_Unfoldable.Unfoldable(function() {
    return unfoldable1List;
}, function() {
    var go = function(f) {
        return function(b) {
            return Control_Lazy.defer(lazyList)(function(v) {
                var v1 = f(b);
                if (v1 instanceof Data_Maybe.Nothing) return nil;
                if (v1 instanceof Data_Maybe.Just) return cons(v1.value0.value0)(go(f)(v1.value0.value1));
                throw new Error("Failed pattern match at Data.List.Lazy.Types (line 152, column 28 - line 154, column 39): " + [
                    v1.constructor.name
                ]);
            });
        };
    };
    return go;
}());
var unfoldable1NonEmptyList = new Data_Unfoldable1.Unfoldable1(function(f) {
    return function(b) {
        return NonEmptyList(Data_Lazy.defer(function(v) {
            return Data_Unfoldable1.unfoldr1(Data_NonEmpty.unfoldable1NonEmpty(unfoldableList))(f)(b);
        }));
    };
});
var comonadNonEmptyList = new Control_Comonad.Comonad(function() {
    return extendNonEmptyList;
}, function(v) {
    return Data_NonEmpty.head(Data_Lazy.force(v));
});
var monadList = new Control_Monad.Monad(function() {
    return applicativeList;
}, function() {
    return bindList;
});
var bindList = new Control_Bind.Bind(function() {
    return applyList;
}, function(xs) {
    return function(f) {
        var go = function(v) {
            if (v instanceof Nil) return Nil.value;
            if (v instanceof Cons) return step(Data_Semigroup.append(semigroupList)(f(v.value0))(Control_Bind.bind(bindList)(v.value1)(f)));
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 175, column 5 - line 175, column 17): " + [
                v.constructor.name
            ]);
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
    };
});
var applyList = new Control_Apply.Apply(function() {
    return functorList;
}, Control_Monad.ap(monadList));
var applicativeList = new Control_Applicative.Applicative(function() {
    return applyList;
}, function(a) {
    return cons(a)(nil);
});
var applyNonEmptyList = new Control_Apply.Apply(function() {
    return functorNonEmptyList;
}, function(v) {
    return function(v1) {
        var v2 = Data_Lazy.force(v1);
        var v3 = Data_Lazy.force(v);
        return Data_Lazy.defer(function(v4) {
            return new Data_NonEmpty.NonEmpty(v3.value0(v2.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v3.value1)(cons(v2.value0)(nil)))(Control_Apply.apply(applyList)(cons(v3.value0)(v3.value1))(v2.value1)));
        });
    };
});
var bindNonEmptyList = new Control_Bind.Bind(function() {
    return applyNonEmptyList;
}, function(v) {
    return function(f) {
        var v1 = Data_Lazy.force(v);
        var v2 = Data_Lazy.force(Data_Newtype.unwrap(newtypeNonEmptyList)(f(v1.value0)));
        return Data_Lazy.defer(function(v3) {
            return new Data_NonEmpty.NonEmpty(v2.value0, Data_Semigroup.append(semigroupList)(v2.value1)(Control_Bind.bind(bindList)(v1.value1)(function($233) {
                return toList(f($233));
            })));
        });
    };
});
var altNonEmptyList = new Control_Alt.Alt(function() {
    return functorNonEmptyList;
}, Data_Semigroup.append(semigroupNonEmptyList));
var altList = new Control_Alt.Alt(function() {
    return functorList;
}, Data_Semigroup.append(semigroupList));
var plusList = new Control_Plus.Plus(function() {
    return altList;
}, nil);
var alternativeList = new Control_Alternative.Alternative(function() {
    return applicativeList;
}, function() {
    return plusList;
});
var monadZeroList = new Control_MonadZero.MonadZero(function() {
    return alternativeList;
}, function() {
    return monadList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function() {
    return monadZeroList;
});
var applicativeNonEmptyList = new Control_Applicative.Applicative(function() {
    return applyNonEmptyList;
}, function(a) {
    return Data_Lazy.defer(function(v) {
        return Data_NonEmpty.singleton(plusList)(a);
    });
});
var monadNonEmptyList = new Control_Monad.Monad(function() {
    return applicativeNonEmptyList;
}, function() {
    return bindNonEmptyList;
});
module.exports = {
    List: List,
    Nil: Nil,
    Cons: Cons,
    step: step,
    nil: nil,
    cons: cons,
    NonEmptyList: NonEmptyList,
    toList: toList,
    newtypeList: newtypeList,
    showList: showList,
    eqList: eqList,
    eq1List: eq1List,
    ordList: ordList,
    ord1List: ord1List,
    lazyList: lazyList,
    semigroupList: semigroupList,
    monoidList: monoidList,
    functorList: functorList,
    functorWithIndexList: functorWithIndexList,
    foldableList: foldableList,
    foldableWithIndexList: foldableWithIndexList,
    unfoldable1List: unfoldable1List,
    unfoldableList: unfoldableList,
    traversableList: traversableList,
    traversableWithIndexList: traversableWithIndexList,
    applyList: applyList,
    applicativeList: applicativeList,
    bindList: bindList,
    monadList: monadList,
    altList: altList,
    plusList: plusList,
    alternativeList: alternativeList,
    monadZeroList: monadZeroList,
    monadPlusList: monadPlusList,
    extendList: extendList,
    newtypeNonEmptyList: newtypeNonEmptyList,
    eqNonEmptyList: eqNonEmptyList,
    ordNonEmptyList: ordNonEmptyList,
    showNonEmptyList: showNonEmptyList,
    functorNonEmptyList: functorNonEmptyList,
    applyNonEmptyList: applyNonEmptyList,
    applicativeNonEmptyList: applicativeNonEmptyList,
    bindNonEmptyList: bindNonEmptyList,
    monadNonEmptyList: monadNonEmptyList,
    altNonEmptyList: altNonEmptyList,
    extendNonEmptyList: extendNonEmptyList,
    comonadNonEmptyList: comonadNonEmptyList,
    semigroupNonEmptyList: semigroupNonEmptyList,
    foldableNonEmptyList: foldableNonEmptyList,
    traversableNonEmptyList: traversableNonEmptyList,
    unfoldable1NonEmptyList: unfoldable1NonEmptyList,
    functorWithIndexNonEmptyList: functorWithIndexNonEmptyList,
    foldableWithIndexNonEmptyList: foldableWithIndexNonEmptyList,
    traversableWithIndexNonEmptyList: traversableWithIndexNonEmptyList
};
var _c, _c1;
$RefreshReg$(_c, "List");
$RefreshReg$(_c1, "NonEmptyList");

},{"../Control.Alt/index.js":"82RIG","../Control.Alternative/index.js":"bgcOZ","../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Category/index.js":"dfcPK","../Control.Comonad/index.js":"hfPua","../Control.Extend/index.js":"kAltv","../Control.Lazy/index.js":"chn7k","../Control.Monad/index.js":"alCn2","../Control.MonadPlus/index.js":"jUJh4","../Control.MonadZero/index.js":"aqmZo","../Control.Plus/index.js":"5lCU5","../Data.Eq/index.js":"c3b8F","../Data.Foldable/index.js":"jWmFN","../Data.FoldableWithIndex/index.js":"b0hJn","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO","../Data.FunctorWithIndex/index.js":"9mTwC","../Data.Lazy/index.js":"520Le","../Data.Maybe/index.js":"ePH81","../Data.Monoid/index.js":"94fxC","../Data.Newtype/index.js":"czJbt","../Data.NonEmpty/index.js":"4pAZZ","../Data.Ord/index.js":"f14nh","../Data.Ordering/index.js":"lEtyd","../Data.Semigroup/index.js":"4sNah","../Data.Semiring/index.js":"39btI","../Data.Show/index.js":"b6tNW","../Data.Traversable/index.js":"i5Kon","../Data.TraversableWithIndex/index.js":"bLveW","../Data.Tuple/index.js":"eOBbM","../Data.Unfoldable/index.js":"5NUrk","../Data.Unfoldable1/index.js":"Daf7x"}],"3r2hK":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_String_Unsafe = require("../Data.String.Unsafe/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var CodePoint = function(x) {
    return x;
};
_c = CodePoint;
var unsurrogate = function(lead) {
    return function(trail) {
        return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
    };
};
var showCodePoint = new Data_Show.Show(function(v) {
    return "(CodePoint 0x" + (Data_String_Common.toUpper(Data_Int.toStringAs(Data_Int.hexadecimal)(v)) + ")");
});
var isTrail = function(cu) {
    return 56320 <= cu && cu <= 57343;
};
var isLead = function(cu) {
    return 55296 <= cu && cu <= 56319;
};
var uncons = function(s) {
    var v = Data_String_CodeUnits.length(s);
    if (v === 0) return Data_Maybe.Nothing.value;
    if (v === 1) return new Data_Maybe.Just({
        head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
        tail: ""
    });
    var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
    var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
    var $21 = isLead(cu0) && isTrail(cu1);
    if ($21) return new Data_Maybe.Just({
        head: unsurrogate(cu0)(cu1),
        tail: Data_String_CodeUnits.drop(2)(s)
    });
    return new Data_Maybe.Just({
        head: cu0,
        tail: Data_String_CodeUnits.drop(1)(s)
    });
};
var unconsButWithTuple = function(s) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function(v) {
        return new Data_Tuple.Tuple(v.head, v.tail);
    })(uncons(s));
};
var toCodePointArrayFallback = function(s) {
    return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
};
var unsafeCodePointAt0Fallback = function(s) {
    var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
    var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
    if ($25) {
        var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
        var $26 = isTrail(cu1);
        if ($26) return unsurrogate(cu0)(cu1);
        return cu0;
    }
    return cu0;
};
var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
var length = function($52) {
    return Data_Array.length(toCodePointArray($52));
};
var lastIndexOf = function(p) {
    return function(s) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function(i) {
            return length(Data_String_CodeUnits.take(i)(s));
        })(Data_String_CodeUnits.lastIndexOf(p)(s));
    };
};
var indexOf = function(p) {
    return function(s) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function(i) {
            return length(Data_String_CodeUnits.take(i)(s));
        })(Data_String_CodeUnits.indexOf(p)(s));
    };
};
var fromCharCode = function() {
    var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
    return function($54) {
        return Data_String_CodeUnits.singleton($53($54));
    };
}();
var singletonFallback = function(v) {
    if (v <= 65535) return fromCharCode(v);
    var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
    var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
    return fromCharCode(lead) + fromCharCode(trail);
};
var fromCodePointArray = $foreign["_fromCodePointArray"](singletonFallback);
var singleton = $foreign["_singleton"](singletonFallback);
var takeFallback = function(n) {
    return function(v) {
        if (n < 1) return "";
        var v1 = uncons(v);
        if (v1 instanceof Data_Maybe.Just) return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
        return v;
    };
};
var take = $foreign["_take"](takeFallback);
var lastIndexOf$prime = function(p) {
    return function(i) {
        return function(s) {
            var i$prime = Data_String_CodeUnits.length(take(i)(s));
            return Data_Functor.map(Data_Maybe.functorMaybe)(function(k) {
                return length(Data_String_CodeUnits.take(k)(s));
            })(Data_String_CodeUnits["lastIndexOf'"](p)(i$prime)(s));
        };
    };
};
var splitAt = function(i) {
    return function(s) {
        var before = take(i)(s);
        return {
            before: before,
            after: Data_String_CodeUnits.drop(Data_String_CodeUnits.length(before))(s)
        };
    };
};
var eqCodePoint = new Data_Eq.Eq(function(x) {
    return function(y) {
        return x === y;
    };
});
var ordCodePoint = new Data_Ord.Ord(function() {
    return eqCodePoint;
}, function(x) {
    return function(y) {
        return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
    };
});
var drop = function(n) {
    return function(s) {
        return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
    };
};
var indexOf$prime = function(p) {
    return function(i) {
        return function(s) {
            var s$prime = drop(i)(s);
            return Data_Functor.map(Data_Maybe.functorMaybe)(function(k) {
                return i + length(Data_String_CodeUnits.take(k)(s$prime)) | 0;
            })(Data_String_CodeUnits.indexOf(p)(s$prime));
        };
    };
};
var countTail = function($copy_p) {
    return function($copy_s) {
        return function($copy_accum) {
            var $tco_var_p = $copy_p;
            var $tco_var_s = $copy_s;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(p, s, accum) {
                var v = uncons(s);
                if (v instanceof Data_Maybe.Just) {
                    var $39 = p(v.value0.head);
                    if ($39) {
                        $tco_var_p = p;
                        $tco_var_s = v.value0.tail;
                        $copy_accum = accum + 1 | 0;
                        return;
                    }
                    $tco_done = true;
                    return accum;
                }
                $tco_done = true;
                return accum;
            }
            while(!$tco_done)$tco_result = $tco_loop($tco_var_p, $tco_var_s, $copy_accum);
            return $tco_result;
        };
    };
};
var countFallback = function(p) {
    return function(s) {
        return countTail(p)(s)(0);
    };
};
var countPrefix = $foreign["_countPrefix"](countFallback)(unsafeCodePointAt0);
var dropWhile = function(p) {
    return function(s) {
        return drop(countPrefix(p)(s))(s);
    };
};
var takeWhile = function(p) {
    return function(s) {
        return take(countPrefix(p)(s))(s);
    };
};
var codePointFromChar = function() {
    var $55 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
    return function($56) {
        return CodePoint($55($56));
    };
}();
var codePointAtFallback = function($copy_n) {
    return function($copy_s) {
        var $tco_var_n = $copy_n;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(n, s) {
            var v = uncons(s);
            if (v instanceof Data_Maybe.Just) {
                var $44 = n === 0;
                if ($44) {
                    $tco_done = true;
                    return new Data_Maybe.Just(v.value0.head);
                }
                $tco_var_n = n - 1 | 0;
                $copy_s = v.value0.tail;
                return;
            }
            $tco_done = true;
            return Data_Maybe.Nothing.value;
        }
        while(!$tco_done)$tco_result = $tco_loop($tco_var_n, $copy_s);
        return $tco_result;
    };
};
var codePointAt = function(v) {
    return function(v1) {
        if (v < 0) return Data_Maybe.Nothing.value;
        if (v === 0 && v1 === "") return Data_Maybe.Nothing.value;
        if (v === 0) return new Data_Maybe.Just(unsafeCodePointAt0(v1));
        return $foreign["_codePointAt"](codePointAtFallback)(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(unsafeCodePointAt0)(v)(v1);
    };
};
var boundedCodePoint = new Data_Bounded.Bounded(function() {
    return ordCodePoint;
}, 0, 1114111);
var boundedEnumCodePoint = new Data_Enum.BoundedEnum(function() {
    return boundedCodePoint;
}, function() {
    return enumCodePoint;
}, 1114112, function(v) {
    return v;
}, function(n) {
    if (n >= 0 && n <= 1114111) return new Data_Maybe.Just(n);
    if (Data_Boolean.otherwise) return Data_Maybe.Nothing.value;
    throw new Error("Failed pattern match at Data.String.CodePoints (line 63, column 1 - line 68, column 26): " + [
        n.constructor.name
    ]);
});
var enumCodePoint = new Data_Enum.Enum(function() {
    return ordCodePoint;
}, Data_Enum.defaultPred(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)), Data_Enum.defaultSucc(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)));
module.exports = {
    codePointFromChar: codePointFromChar,
    singleton: singleton,
    fromCodePointArray: fromCodePointArray,
    toCodePointArray: toCodePointArray,
    codePointAt: codePointAt,
    uncons: uncons,
    length: length,
    countPrefix: countPrefix,
    indexOf: indexOf,
    "indexOf'": indexOf$prime,
    lastIndexOf: lastIndexOf,
    "lastIndexOf'": lastIndexOf$prime,
    take: take,
    takeWhile: takeWhile,
    drop: drop,
    dropWhile: dropWhile,
    splitAt: splitAt,
    eqCodePoint: eqCodePoint,
    ordCodePoint: ordCodePoint,
    showCodePoint: showCodePoint,
    boundedCodePoint: boundedCodePoint,
    enumCodePoint: enumCodePoint,
    boundedEnumCodePoint: boundedEnumCodePoint
};
var _c;
$RefreshReg$(_c, "CodePoint");

},{"./foreign.js":"lm8TW","../Data.Array/index.js":"7x0bj","../Data.Boolean/index.js":"lv1qw","../Data.Bounded/index.js":"jzt4h","../Data.Enum/index.js":"1zIX3","../Data.Eq/index.js":"c3b8F","../Data.EuclideanRing/index.js":"fTU7A","../Data.Functor/index.js":"iy1jO","../Data.Int/index.js":"7DHYL","../Data.Maybe/index.js":"ePH81","../Data.Ord/index.js":"f14nh","../Data.Show/index.js":"b6tNW","../Data.String.CodeUnits/index.js":"8wheW","../Data.String.Common/index.js":"kcO4K","../Data.String.Unsafe/index.js":"3wlW6","../Data.Tuple/index.js":"eOBbM","../Data.Unfoldable/index.js":"5NUrk"}],"lm8TW":[function(require,module,exports) {
"use strict";
/* global Symbol */ var hasArrayFrom = typeof Array.from === "function";
var hasStringIterator = typeof Symbol !== "undefined" && Symbol != null && typeof Symbol.iterator !== "undefined" && typeof String.prototype[Symbol.iterator] === "function";
var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
var hasCodePointAt = typeof String.prototype.codePointAt === "function";
exports._unsafeCodePointAt0 = function(fallback) {
    return hasCodePointAt ? function(str) {
        return str.codePointAt(0);
    } : fallback;
};
exports._codePointAt = function(fallback) {
    return function(Just) {
        return function(Nothing) {
            return function(unsafeCodePointAt0) {
                return function(index) {
                    return function(str) {
                        var length = str.length;
                        if (index < 0 || index >= length) return Nothing;
                        if (hasStringIterator) {
                            var iter = str[Symbol.iterator]();
                            for(var i = index;; --i){
                                var o = iter.next();
                                if (o.done) return Nothing;
                                if (i === 0) return Just(unsafeCodePointAt0(o.value));
                            }
                        }
                        return fallback(index)(str);
                    };
                };
            };
        };
    };
};
exports._countPrefix = function(fallback) {
    return function(unsafeCodePointAt0) {
        if (hasStringIterator) return function(pred) {
            return function(str) {
                var iter = str[Symbol.iterator]();
                for(var cpCount = 0;; ++cpCount){
                    var o = iter.next();
                    if (o.done) return cpCount;
                    var cp = unsafeCodePointAt0(o.value);
                    if (!pred(cp)) return cpCount;
                }
            };
        };
        return fallback;
    };
};
exports._fromCodePointArray = function(singleton) {
    return hasFromCodePoint ? function(cps) {
        // Function.prototype.apply will fail for very large second parameters,
        // so we don't use it for arrays with 10,000 or more entries.
        if (cps.length < 10000) return String.fromCodePoint.apply(String, cps);
        return cps.map(singleton).join("");
    } : function(cps) {
        return cps.map(singleton).join("");
    };
};
exports._singleton = function(fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
};
exports._take = function(fallback) {
    return function(n) {
        if (hasStringIterator) return function(str) {
            var accum = "";
            var iter = str[Symbol.iterator]();
            for(var i = 0; i < n; ++i){
                var o = iter.next();
                if (o.done) return accum;
                accum += o.value;
            }
            return accum;
        };
        return fallback(n);
    };
};
exports._toCodePointArray = function(fallback) {
    return function(unsafeCodePointAt0) {
        if (hasArrayFrom) return function(str) {
            return Array.from(str, unsafeCodePointAt0);
        };
        return fallback;
    };
};

},{}],"1zIX3":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Cardinality = function(x) {
    return x;
};
_c = Cardinality;
var Enum = function(Ord0, pred, succ) {
    this.Ord0 = Ord0;
    this.pred = pred;
    this.succ = succ;
};
_c1 = Enum;
var BoundedEnum = function(Bounded0, Enum1, cardinality, fromEnum, toEnum) {
    this.Bounded0 = Bounded0;
    this.Enum1 = Enum1;
    this.cardinality = cardinality;
    this.fromEnum = fromEnum;
    this.toEnum = toEnum;
};
_c2 = BoundedEnum;
var toEnum = function(dict) {
    return dict.toEnum;
};
var succ = function(dict) {
    return dict.succ;
};
var upFromIncluding = function(dictEnum) {
    return function(dictUnfoldable1) {
        return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(Control_Apply.apply(Control_Apply.applyFn)(Data_Tuple.Tuple.create)(succ(dictEnum)));
    };
};
var showCardinality = new Data_Show.Show(function(v) {
    return "(Cardinality " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var pred = function(dict) {
    return dict.pred;
};
var ordCardinality = Data_Ord.ordInt;
var newtypeCardinality = new Data_Newtype.Newtype(function(n) {
    return n;
}, Cardinality);
var fromEnum = function(dict) {
    return dict.fromEnum;
};
var toEnumWithDefaults = function(dictBoundedEnum) {
    return function(low) {
        return function(high) {
            return function(x) {
                var v = toEnum(dictBoundedEnum)(x);
                if (v instanceof Data_Maybe.Just) return v.value0;
                if (v instanceof Data_Maybe.Nothing) {
                    var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                    if ($54) return low;
                    return high;
                }
                throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [
                    v.constructor.name
                ]);
            };
        };
    };
};
var eqCardinality = Data_Eq.eqInt;
var enumUnit = new Enum(function() {
    return Data_Ord.ordUnit;
}, Data_Function["const"](Data_Maybe.Nothing.value), Data_Function["const"](Data_Maybe.Nothing.value));
var enumTuple = function(dictEnum) {
    return function(dictBoundedEnum) {
        return new Enum(function() {
            return Data_Tuple.ordTuple(dictEnum.Ord0())(dictBoundedEnum.Enum1().Ord0());
        }, function(v) {
            return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.top(dictBoundedEnum.Bounded0())))(pred(dictEnum)(v.value0)))(function() {
                var $96 = Data_Tuple.Tuple.create(v.value0);
                return function($97) {
                    return Data_Maybe.Just.create($96($97));
                };
            }())(pred(dictBoundedEnum.Enum1())(v.value1));
        }, function(v) {
            return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.bottom(dictBoundedEnum.Bounded0())))(succ(dictEnum)(v.value0)))(function() {
                var $98 = Data_Tuple.Tuple.create(v.value0);
                return function($99) {
                    return Data_Maybe.Just.create($98($99));
                };
            }())(succ(dictBoundedEnum.Enum1())(v.value1));
        });
    };
};
var enumOrdering = new Enum(function() {
    return Data_Ord.ordOrdering;
}, function(v) {
    if (v instanceof Data_Ordering.LT) return Data_Maybe.Nothing.value;
    if (v instanceof Data_Ordering.EQ) return new Data_Maybe.Just(Data_Ordering.LT.value);
    if (v instanceof Data_Ordering.GT) return new Data_Maybe.Just(Data_Ordering.EQ.value);
    throw new Error("Failed pattern match at Data.Enum (line 72, column 1 - line 78, column 20): " + [
        v.constructor.name
    ]);
}, function(v) {
    if (v instanceof Data_Ordering.LT) return new Data_Maybe.Just(Data_Ordering.EQ.value);
    if (v instanceof Data_Ordering.EQ) return new Data_Maybe.Just(Data_Ordering.GT.value);
    if (v instanceof Data_Ordering.GT) return Data_Maybe.Nothing.value;
    throw new Error("Failed pattern match at Data.Enum (line 72, column 1 - line 78, column 20): " + [
        v.constructor.name
    ]);
});
var enumMaybe = function(dictBoundedEnum) {
    return new Enum(function() {
        return Data_Maybe.ordMaybe(dictBoundedEnum.Enum1().Ord0());
    }, function(v) {
        if (v instanceof Data_Maybe.Nothing) return Data_Maybe.Nothing.value;
        if (v instanceof Data_Maybe.Just) return new Data_Maybe.Just(pred(dictBoundedEnum.Enum1())(v.value0));
        throw new Error("Failed pattern match at Data.Enum (line 80, column 1 - line 84, column 32): " + [
            v.constructor.name
        ]);
    }, function(v) {
        if (v instanceof Data_Maybe.Nothing) return new Data_Maybe.Just(new Data_Maybe.Just(Data_Bounded.bottom(dictBoundedEnum.Bounded0())));
        if (v instanceof Data_Maybe.Just) return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(succ(dictBoundedEnum.Enum1())(v.value0));
        throw new Error("Failed pattern match at Data.Enum (line 80, column 1 - line 84, column 32): " + [
            v.constructor.name
        ]);
    });
};
var enumInt = new Enum(function() {
    return Data_Ord.ordInt;
}, function(n) {
    var $67 = n > Data_Bounded.bottom(Data_Bounded.boundedInt);
    if ($67) return new Data_Maybe.Just(n - 1 | 0);
    return Data_Maybe.Nothing.value;
}, function(n) {
    var $68 = n < Data_Bounded.top(Data_Bounded.boundedInt);
    if ($68) return new Data_Maybe.Just(n + 1 | 0);
    return Data_Maybe.Nothing.value;
});
var enumFromTo = function(dictEnum) {
    return function(dictUnfoldable1) {
        var go = function(step) {
            return function(op) {
                return function(to) {
                    return function(a) {
                        return new Data_Tuple.Tuple(a, Control_Bind.bind(Data_Maybe.bindMaybe)(step(a))(function(a$prime) {
                            return Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(op(a$prime)(to)))(a$prime);
                        }));
                    };
                };
            };
        };
        return function(v) {
            return function(v1) {
                if (Data_Eq.eq(dictEnum.Ord0().Eq0())(v)(v1)) return Data_Unfoldable1.singleton(dictUnfoldable1)(v);
                if (Data_Ord.lessThan(dictEnum.Ord0())(v)(v1)) return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(go(succ(dictEnum))(Data_Ord.lessThanOrEq(dictEnum.Ord0()))(v1))(v);
                if (Data_Boolean.otherwise) return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(go(pred(dictEnum))(Data_Ord.greaterThanOrEq(dictEnum.Ord0()))(v1))(v);
                throw new Error("Failed pattern match at Data.Enum (line 183, column 14 - line 187, column 51): " + [
                    v.constructor.name,
                    v1.constructor.name
                ]);
            };
        };
    };
};
var enumFromThenTo = function(dictUnfoldable) {
    return function(dictFunctor) {
        return function(dictBoundedEnum) {
            var go = function(step) {
                return function(to) {
                    return function(e) {
                        if (e <= to) return new Data_Maybe.Just(new Data_Tuple.Tuple(e, e + step | 0));
                        if (Data_Boolean.otherwise) return Data_Maybe.Nothing.value;
                        throw new Error("Failed pattern match at Data.Enum (line 214, column 5 - line 216, column 28): " + [
                            step.constructor.name,
                            to.constructor.name,
                            e.constructor.name
                        ]);
                    };
                };
            };
            return function(a) {
                return function(b) {
                    return function(c) {
                        var c$prime = fromEnum(dictBoundedEnum)(c);
                        var b$prime = fromEnum(dictBoundedEnum)(b);
                        var a$prime = fromEnum(dictBoundedEnum)(a);
                        return Data_Functor.map(dictFunctor)(function() {
                            var $100 = Data_Maybe.fromJust();
                            var $101 = toEnum(dictBoundedEnum);
                            return function($102) {
                                return $100($101($102));
                            };
                        }())(Data_Unfoldable.unfoldr(dictUnfoldable)(go(b$prime - a$prime | 0)(c$prime))(a$prime));
                    };
                };
            };
        };
    };
};
var enumEither = function(dictBoundedEnum) {
    return function(dictBoundedEnum1) {
        return new Enum(function() {
            return Data_Either.ordEither(dictBoundedEnum.Enum1().Ord0())(dictBoundedEnum1.Enum1().Ord0());
        }, function(v) {
            if (v instanceof Data_Either.Left) return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function($103) {
                return Data_Maybe.Just.create(Data_Either.Left.create($103));
            })(pred(dictBoundedEnum.Enum1())(v.value0));
            if (v instanceof Data_Either.Right) return Data_Maybe.maybe(new Data_Maybe.Just(new Data_Either.Left(Data_Bounded.top(dictBoundedEnum.Bounded0()))))(function($104) {
                return Data_Maybe.Just.create(Data_Either.Right.create($104));
            })(pred(dictBoundedEnum1.Enum1())(v.value0));
            throw new Error("Failed pattern match at Data.Enum (line 86, column 1 - line 90, column 69): " + [
                v.constructor.name
            ]);
        }, function(v) {
            if (v instanceof Data_Either.Left) return Data_Maybe.maybe(new Data_Maybe.Just(new Data_Either.Right(Data_Bounded.bottom(dictBoundedEnum1.Bounded0()))))(function($105) {
                return Data_Maybe.Just.create(Data_Either.Left.create($105));
            })(succ(dictBoundedEnum.Enum1())(v.value0));
            if (v instanceof Data_Either.Right) return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function($106) {
                return Data_Maybe.Just.create(Data_Either.Right.create($106));
            })(succ(dictBoundedEnum1.Enum1())(v.value0));
            throw new Error("Failed pattern match at Data.Enum (line 86, column 1 - line 90, column 69): " + [
                v.constructor.name
            ]);
        });
    };
};
var enumBoolean = new Enum(function() {
    return Data_Ord.ordBoolean;
}, function(v) {
    if (v) return new Data_Maybe.Just(false);
    return Data_Maybe.Nothing.value;
}, function(v) {
    if (!v) return new Data_Maybe.Just(true);
    return Data_Maybe.Nothing.value;
});
var downFromIncluding = function(dictEnum) {
    return function(dictUnfoldable1) {
        return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(Control_Apply.apply(Control_Apply.applyFn)(Data_Tuple.Tuple.create)(pred(dictEnum)));
    };
};
var diag = function(a) {
    return new Data_Tuple.Tuple(a, a);
};
var downFrom = function(dictEnum) {
    return function(dictUnfoldable) {
        return Data_Unfoldable.unfoldr(dictUnfoldable)(function() {
            var $107 = Data_Functor.map(Data_Maybe.functorMaybe)(diag);
            var $108 = pred(dictEnum);
            return function($109) {
                return $107($108($109));
            };
        }());
    };
};
var upFrom = function(dictEnum) {
    return function(dictUnfoldable) {
        return Data_Unfoldable.unfoldr(dictUnfoldable)(function() {
            var $110 = Data_Functor.map(Data_Maybe.functorMaybe)(diag);
            var $111 = succ(dictEnum);
            return function($112) {
                return $110($111($112));
            };
        }());
    };
};
var defaultToEnum = function(dictBounded) {
    return function(dictEnum) {
        return function(i$prime) {
            var go = function($copy_i) {
                return function($copy_x) {
                    var $tco_var_i = $copy_i;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(i, x) {
                        var $82 = i === 0;
                        if ($82) {
                            $tco_done = true;
                            return new Data_Maybe.Just(x);
                        }
                        var v = succ(dictEnum)(x);
                        if (v instanceof Data_Maybe.Just) {
                            $tco_var_i = i - 1 | 0;
                            $copy_x = v.value0;
                            return;
                        }
                        if (v instanceof Data_Maybe.Nothing) {
                            $tco_done = true;
                            return Data_Maybe.Nothing.value;
                        }
                        throw new Error("Failed pattern match at Data.Enum (line 293, column 12 - line 295, column 33): " + [
                            v.constructor.name
                        ]);
                    }
                    while(!$tco_done)$tco_result = $tco_loop($tco_var_i, $copy_x);
                    return $tco_result;
                };
            };
            var $85 = i$prime < 0;
            if ($85) return Data_Maybe.Nothing.value;
            return go(i$prime)(Data_Bounded.bottom(dictBounded));
        };
    };
};
var defaultSucc = function(toEnum$prime) {
    return function(fromEnum$prime) {
        return function(a) {
            return toEnum$prime(fromEnum$prime(a) + 1 | 0);
        };
    };
};
var defaultPred = function(toEnum$prime) {
    return function(fromEnum$prime) {
        return function(a) {
            return toEnum$prime(fromEnum$prime(a) - 1 | 0);
        };
    };
};
var defaultFromEnum = function(dictEnum) {
    var go = function($copy_i) {
        return function($copy_x) {
            var $tco_var_i = $copy_i;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(i, x) {
                var v = pred(dictEnum)(x);
                if (v instanceof Data_Maybe.Just) {
                    $tco_var_i = i + 1 | 0;
                    $copy_x = v.value0;
                    return;
                }
                if (v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return i;
                }
                throw new Error("Failed pattern match at Data.Enum (line 306, column 5 - line 308, column 19): " + [
                    v.constructor.name
                ]);
            }
            while(!$tco_done)$tco_result = $tco_loop($tco_var_i, $copy_x);
            return $tco_result;
        };
    };
    return go(0);
};
var defaultCardinality = function(dictBounded) {
    return function(dictEnum) {
        var go = function($copy_i) {
            return function($copy_x) {
                var $tco_var_i = $copy_i;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(i, x) {
                    var v = succ(dictEnum)(x);
                    if (v instanceof Data_Maybe.Just) {
                        $tco_var_i = i + 1 | 0;
                        $copy_x = v.value0;
                        return;
                    }
                    if (v instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return i;
                    }
                    throw new Error("Failed pattern match at Data.Enum (line 273, column 5 - line 275, column 19): " + [
                        v.constructor.name
                    ]);
                }
                while(!$tco_done)$tco_result = $tco_loop($tco_var_i, $copy_x);
                return $tco_result;
            };
        };
        return Cardinality(go(1)(Data_Bounded.bottom(dictBounded)));
    };
};
var charToEnum = function(v) {
    if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) return new Data_Maybe.Just($foreign.fromCharCode(v));
    return Data_Maybe.Nothing.value;
};
var enumChar = new Enum(function() {
    return Data_Ord.ordChar;
}, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
var cardinality = function(dict) {
    return dict.cardinality;
};
var boundedEnumUnit = new BoundedEnum(function() {
    return Data_Bounded.boundedUnit;
}, function() {
    return enumUnit;
}, 1, Data_Function["const"](0), function(v) {
    if (v === 0) return new Data_Maybe.Just(Data_Unit.unit);
    return Data_Maybe.Nothing.value;
});
var boundedEnumOrdering = new BoundedEnum(function() {
    return Data_Bounded.boundedOrdering;
}, function() {
    return enumOrdering;
}, 3, function(v) {
    if (v instanceof Data_Ordering.LT) return 0;
    if (v instanceof Data_Ordering.EQ) return 1;
    if (v instanceof Data_Ordering.GT) return 2;
    throw new Error("Failed pattern match at Data.Enum (line 137, column 1 - line 145, column 18): " + [
        v.constructor.name
    ]);
}, function(v) {
    if (v === 0) return new Data_Maybe.Just(Data_Ordering.LT.value);
    if (v === 1) return new Data_Maybe.Just(Data_Ordering.EQ.value);
    if (v === 2) return new Data_Maybe.Just(Data_Ordering.GT.value);
    return Data_Maybe.Nothing.value;
});
var boundedEnumChar = new BoundedEnum(function() {
    return Data_Bounded.boundedChar;
}, function() {
    return enumChar;
}, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
var boundedEnumBoolean = new BoundedEnum(function() {
    return Data_Bounded.boundedBoolean;
}, function() {
    return enumBoolean;
}, 2, function(v) {
    if (!v) return 0;
    if (v) return 1;
    throw new Error("Failed pattern match at Data.Enum (line 118, column 1 - line 124, column 20): " + [
        v.constructor.name
    ]);
}, function(v) {
    if (v === 0) return new Data_Maybe.Just(false);
    if (v === 1) return new Data_Maybe.Just(true);
    return Data_Maybe.Nothing.value;
});
module.exports = {
    Enum: Enum,
    succ: succ,
    pred: pred,
    BoundedEnum: BoundedEnum,
    cardinality: cardinality,
    toEnum: toEnum,
    fromEnum: fromEnum,
    toEnumWithDefaults: toEnumWithDefaults,
    Cardinality: Cardinality,
    enumFromTo: enumFromTo,
    enumFromThenTo: enumFromThenTo,
    upFrom: upFrom,
    upFromIncluding: upFromIncluding,
    downFrom: downFrom,
    downFromIncluding: downFromIncluding,
    defaultSucc: defaultSucc,
    defaultPred: defaultPred,
    defaultCardinality: defaultCardinality,
    defaultToEnum: defaultToEnum,
    defaultFromEnum: defaultFromEnum,
    enumBoolean: enumBoolean,
    enumInt: enumInt,
    enumChar: enumChar,
    enumUnit: enumUnit,
    enumOrdering: enumOrdering,
    enumMaybe: enumMaybe,
    enumEither: enumEither,
    enumTuple: enumTuple,
    boundedEnumBoolean: boundedEnumBoolean,
    boundedEnumChar: boundedEnumChar,
    boundedEnumUnit: boundedEnumUnit,
    boundedEnumOrdering: boundedEnumOrdering,
    newtypeCardinality: newtypeCardinality,
    eqCardinality: eqCardinality,
    ordCardinality: ordCardinality,
    showCardinality: showCardinality
};
var _c, _c1, _c2;
$RefreshReg$(_c, "Cardinality");
$RefreshReg$(_c1, "Enum");
$RefreshReg$(_c2, "BoundedEnum");

},{"./foreign.js":"jsWlJ","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.MonadZero/index.js":"aqmZo","../Data.Boolean/index.js":"lv1qw","../Data.Bounded/index.js":"jzt4h","../Data.Either/index.js":"3WZha","../Data.Eq/index.js":"c3b8F","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO","../Data.Maybe/index.js":"ePH81","../Data.Newtype/index.js":"czJbt","../Data.Ord/index.js":"f14nh","../Data.Ordering/index.js":"lEtyd","../Data.Show/index.js":"b6tNW","../Data.Tuple/index.js":"eOBbM","../Data.Unfoldable/index.js":"5NUrk","../Data.Unfoldable1/index.js":"Daf7x","../Data.Unit/index.js":"d7oKp"}],"jsWlJ":[function(require,module,exports) {
"use strict";
exports.toCharCode = function(c) {
    return c.charCodeAt(0);
};
exports.fromCharCode = function(c) {
    return String.fromCharCode(c);
};

},{}],"8wheW":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_String_Unsafe = require("../Data.String.Unsafe/index.js");
var uncons = function(v) {
    if (v === "") return Data_Maybe.Nothing.value;
    return new Data_Maybe.Just({
        head: Data_String_Unsafe.charAt(0)(v),
        tail: $foreign.drop(1)(v)
    });
};
var toChar = $foreign["_toChar"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var takeWhile = function(p) {
    return function(s) {
        return $foreign.take($foreign.countPrefix(p)(s))(s);
    };
};
var takeRight = function(i) {
    return function(s) {
        return $foreign.drop($foreign.length(s) - i | 0)(s);
    };
};
var stripSuffix = function(v) {
    return function(str) {
        var v1 = $foreign.splitAt($foreign.length(str) - $foreign.length(v) | 0)(str);
        var $9 = v1.after === v;
        if ($9) return new Data_Maybe.Just(v1.before);
        return Data_Maybe.Nothing.value;
    };
};
var stripPrefix = function(v) {
    return function(str) {
        var v1 = $foreign.splitAt($foreign.length(v))(str);
        var $15 = v1.before === v;
        if ($15) return new Data_Maybe.Just(v1.after);
        return Data_Maybe.Nothing.value;
    };
};
var slice = function(b) {
    return function(e) {
        return function(s) {
            var l = $foreign.length(s);
            var norm = function(x) {
                if (x < 0) return l + x | 0;
                if (Data_Boolean.otherwise) return x;
                throw new Error("Failed pattern match at Data.String.CodeUnits (line 312, column 5 - line 313, column 27): " + [
                    x.constructor.name
                ]);
            };
            var e$prime = norm(e);
            var b$prime = norm(b);
            var $19 = b$prime < 0 || b$prime >= l || e$prime < 0 || e$prime > l || b$prime > e$prime;
            if ($19) return Data_Maybe.Nothing.value;
            return new Data_Maybe.Just($foreign["_slice"](b)(e)(s));
        };
    };
};
var lastIndexOf$prime = $foreign["_lastIndexOfStartingAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var lastIndexOf = $foreign["_lastIndexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var indexOf$prime = $foreign["_indexOfStartingAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var dropWhile = function(p) {
    return function(s) {
        return $foreign.drop($foreign.countPrefix(p)(s))(s);
    };
};
var dropRight = function(i) {
    return function(s) {
        return $foreign.take($foreign.length(s) - i | 0)(s);
    };
};
var contains = function(pat) {
    var $20 = indexOf(pat);
    return function($21) {
        return Data_Maybe.isJust($20($21));
    };
};
var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
module.exports = {
    stripPrefix: stripPrefix,
    stripSuffix: stripSuffix,
    contains: contains,
    charAt: charAt,
    toChar: toChar,
    uncons: uncons,
    indexOf: indexOf,
    "indexOf'": indexOf$prime,
    lastIndexOf: lastIndexOf,
    "lastIndexOf'": lastIndexOf$prime,
    takeRight: takeRight,
    takeWhile: takeWhile,
    dropRight: dropRight,
    dropWhile: dropWhile,
    slice: slice,
    singleton: $foreign.singleton,
    fromCharArray: $foreign.fromCharArray,
    toCharArray: $foreign.toCharArray,
    length: $foreign.length,
    countPrefix: $foreign.countPrefix,
    take: $foreign.take,
    drop: $foreign.drop,
    splitAt: $foreign.splitAt
};

},{"./foreign.js":"ePAgD","../Data.Boolean/index.js":"lv1qw","../Data.Maybe/index.js":"ePH81","../Data.String.Unsafe/index.js":"3wlW6"}],"ePAgD":[function(require,module,exports) {
"use strict";
exports.fromCharArray = function(a) {
    return a.join("");
};
exports.toCharArray = function(s) {
    return s.split("");
};
exports.singleton = function(c) {
    return c;
};
exports._charAt = function(just) {
    return function(nothing) {
        return function(i) {
            return function(s) {
                return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
            };
        };
    };
};
exports._toChar = function(just) {
    return function(nothing) {
        return function(s) {
            return s.length === 1 ? just(s) : nothing;
        };
    };
};
exports.length = function(s) {
    return s.length;
};
exports.countPrefix = function(p) {
    return function(s) {
        var i = 0;
        while(i < s.length && p(s.charAt(i)))i++;
        return i;
    };
};
exports._indexOf = function(just) {
    return function(nothing) {
        return function(x) {
            return function(s) {
                var i = s.indexOf(x);
                return i === -1 ? nothing : just(i);
            };
        };
    };
};
exports._indexOfStartingAt = function(just) {
    return function(nothing) {
        return function(x) {
            return function(startAt) {
                return function(s) {
                    if (startAt < 0 || startAt > s.length) return nothing;
                    var i = s.indexOf(x, startAt);
                    return i === -1 ? nothing : just(i);
                };
            };
        };
    };
};
exports._lastIndexOf = function(just) {
    return function(nothing) {
        return function(x) {
            return function(s) {
                var i = s.lastIndexOf(x);
                return i === -1 ? nothing : just(i);
            };
        };
    };
};
exports._lastIndexOfStartingAt = function(just) {
    return function(nothing) {
        return function(x) {
            return function(startAt) {
                return function(s) {
                    if (startAt < 0 || startAt > s.length) return nothing;
                    var i = s.lastIndexOf(x, startAt);
                    return i === -1 ? nothing : just(i);
                };
            };
        };
    };
};
exports.take = function(n) {
    return function(s) {
        return s.substr(0, n);
    };
};
exports.drop = function(n) {
    return function(s) {
        return s.substring(n);
    };
};
exports._slice = function(b) {
    return function(e) {
        return function(s) {
            return s.slice(b, e);
        };
    };
};
exports.splitAt = function(i) {
    return function(s) {
        return {
            before: s.substring(0, i),
            after: s.substring(i)
        };
    };
};

},{}],"3wlW6":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    "char": $foreign["char"],
    charAt: $foreign.charAt
};

},{"./foreign.js":"cKssK"}],"cKssK":[function(require,module,exports) {
"use strict";
exports.charAt = function(i) {
    return function(s) {
        if (i >= 0 && i < s.length) return s.charAt(i);
        throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
};
exports.char = function(s) {
    if (s.length === 1) return s.charAt(0);
    throw new Error("Data.String.Unsafe.char: Expected string of length 1.");
};

},{}],"kcO4K":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var $$null = function(s) {
    return s === "";
};
var localeCompare = $foreign["_localeCompare"](Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
module.exports = {
    "null": $$null,
    localeCompare: localeCompare,
    replace: $foreign.replace,
    replaceAll: $foreign.replaceAll,
    split: $foreign.split,
    toLower: $foreign.toLower,
    toUpper: $foreign.toUpper,
    trim: $foreign.trim,
    joinWith: $foreign.joinWith
};

},{"./foreign.js":"8aln0","../Data.Ordering/index.js":"lEtyd"}],"8aln0":[function(require,module,exports) {
"use strict";
exports._localeCompare = function(lt) {
    return function(eq) {
        return function(gt) {
            return function(s1) {
                return function(s2) {
                    var result = s1.localeCompare(s2);
                    return result < 0 ? lt : result > 0 ? gt : eq;
                };
            };
        };
    };
};
exports.replace = function(s1) {
    return function(s2) {
        return function(s3) {
            return s3.replace(s1, s2);
        };
    };
};
exports.replaceAll = function(s1) {
    return function(s2) {
        return function(s3) {
            return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s2); // eslint-disable-line no-useless-escape
        };
    };
};
exports.split = function(sep) {
    return function(s) {
        return s.split(sep);
    };
};
exports.toLower = function(s) {
    return s.toLowerCase();
};
exports.toUpper = function(s) {
    return s.toUpperCase();
};
exports.trim = function(s) {
    return s.trim();
};
exports.joinWith = function(s) {
    return function(xs) {
        return xs.join(s);
    };
};

},{}],"liNIM":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var debugLogShow = function(dictShow) {
    return function(a) {
        return $foreign.debugLogAlt(Data_Show.show(dictShow)(a))(a);
    };
};
var combinationsWithIndex = function(a) {
    return function(b) {
        return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.mapWithIndex(Data_Tuple.Tuple.create)(a))(function(a$prime) {
            return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.mapWithIndex(Data_Tuple.Tuple.create)(b))(function(b$prime) {
                return Control_Applicative.pure(Control_Applicative.applicativeArray)(new Data_Tuple.Tuple(a$prime, b$prime));
            });
        });
    };
};
var nonrepeatedCombinations = function(arr) {
    var stripIndex = function(v) {
        return new Data_Tuple.Tuple(v.value0.value1, v.value1.value1);
    };
    var indexFn = function(f) {
        return function(v) {
            return f(v.value0.value0)(v.value1.value0);
        };
    };
    var nonrepeatedItems = Data_Array.filter(indexFn(Data_Ord.lessThan(Data_Ord.ordInt)))(combinationsWithIndex(arr)(arr));
    return Data_Functor.map(Data_Functor.functorArray)(stripIndex)(nonrepeatedItems);
};
module.exports = {
    debugLogShow: debugLogShow,
    combinationsWithIndex: combinationsWithIndex,
    nonrepeatedCombinations: nonrepeatedCombinations,
    bigNumberFormatFixed: $foreign.bigNumberFormatFixed,
    bigNumberFixed: $foreign.bigNumberFixed,
    parseBigNumber: $foreign.parseBigNumber,
    debugLog: $foreign.debugLog,
    debugLogAlt: $foreign.debugLogAlt,
    undefinedLog: $foreign.undefinedLog,
    definitionsFile: $foreign.definitionsFile,
    interpreterTestFile: $foreign.interpreterTestFile
};

},{"./foreign.js":"arM8n","../Control.Applicative/index.js":"dG9TO","../Control.Bind/index.js":"7Sory","../Data.Array/index.js":"7x0bj","../Data.Functor/index.js":"iy1jO","../Data.Ord/index.js":"f14nh","../Data.Show/index.js":"b6tNW","../Data.Tuple/index.js":"eOBbM"}],"arM8n":[function(require,module,exports) {
"use strict";
var fs = require("fs");
var bn = require("bignumber.js");
exports.debugLog = function(a) {
    console.log(a);
    return a;
};
exports.debugLogAlt = function(a) {
    console.log(a);
    return function(b) {
        return b;
    };
};
exports.undefinedLog = function(message) {
    throw new Error(message);
};
exports.bigNumberFormatFixed = function(n) {
    return function(b) {
        return b.toFormat(n);
    };
};
exports.bigNumberFixed = function(n) {
    return function(b) {
        var ret = b.toFixed(n);
        return b.toFixed(n);
    };
};
exports.parseBigNumber = function(s) {
    return bn.BigNumber(s);
};
exports.definitionsFile = "# Calq unit definitions\n# =====================\n\n# Note that this file is simply a calq program.\n\n\n# SI Prefixes\n# ---------------------------------------------------------------\n# TODO(advait): Support prefix aliases\nprefix yotta = 1e24                      # 1E24 Greek or Latin octo, \"eight\"\nprefix Y     = 1e24\nprefix zetta = 1e21                      # 1E21 Latin septem, \"seven\"\nprefix Z     = 1e21\nprefix exa   = 1e18                      # 1E18 Greek hex, \"six\"\nprefix E     = 1e18\nprefix peta  = 1e15                      # 1E15 Greek pente, \"five\"\nprefix P     = 1e15\nprefix tera  = 1e12                      # 1E12 Greek teras, \"monster\"\nprefix T     = 1e12\nprefix giga  = 1e9                       # 1E9  Greek gigas, \"giant\"\nprefix G     = 1e9\nprefix mega  = 1e6                       # 1E6  Greek megas, \"large\"\nprefix M     = 1e6\nprefix kilo  = 1000                      # 1E3  Greek chilioi, \"thousand\"\nprefix k     = 1e3\nprefix hecto = 100                       # 1E2  Greek hekaton, \"hundred\"\nprefix h     = 1e2\nprefix deca  = 10                        # 1E1  Greek deka, \"ten\"\nprefix da    = 1e1\nprefix deci  = 1/10                      # 1E-1 Latin decimus, \"tenth\"\nprefix d     = 1e-1\nprefix centi = 1/100                     # 1E-2 Latin centum, \"hundred\"\nprefix c     = 1e-2\nprefix milli = 1e-3                      # 1E-3 Latin mille, \"thousand\"\nprefix m     = 1e-3\nprefix micro = 1e-6                      # 1E-6 Latin micro/Greek mikros,\"small\"\nprefix u     = 1e-6\nprefix μ     = 1e-6\nprefix nano  = 1e-9                      # 1E-9 Latin nanus or Greek nanos,\"dwarf\"\nprefix n     = 1e-9\nprefix pico  = 1e-12                     # 1E-12 Spanish pico, \"a bit\"\nprefix p     = 1e-12\nprefix femto = 1e-15                     # 1E-15 Danish-Norwegian femten,\"fifteen\"\nprefix f     = 1e-15\nprefix atto  = 1e-18                     # 1E-18 Danish-Norwegian atten,\"eighteen\"\nprefix a     = 1e-18\nprefix zepto = 1e-21                     # 1E-21 Latin septem, \"seven\"\nprefix z     = 1e-21\nprefix yocto = 1e-24                     # 1E-24 Greek or Latin octo, \"eight\"\nprefix y     = 1e-24\n\n\n\n# Length\n# ---------------------------------------------------------------\nunit  m\nalias meter  = m\nalias meters = m\n\nunit  ft   = 0.3048 m\nalias feet = ft\nalias foot = ft\nalias '    = ft\n\nunit  inch   = (1/12) ft\nalias inches = inch\nalias \"      = inch\n\nunit  yard  = 3 ft\nalias yards = yard\nalias yd    = yard\n\nunit  mi    = 5280 ft\nalias mile  = mi\nalias miles = mi\n\nunit  lightyear  = 9460730472580800 m\nalias lightyears = lightyear\nalias ly = lightyear\n\nunit  au  = 149597870700 m\nalias aus = au\n\nunit  parsec  = 3.261563777 ly\nalias parsecs = parsec\n\nunit  thou       = 1/12000 ft\nunit  barleycorn = 1/36 ft\nunit  chain      = 66 ft\nalias chains     = chain\nunit  furlong    = 10 chain\nalias furlongs   = furlong\nunit  league     = 10 chains\nalias leagues    = league\nunit  fathom     = 1852 mm\nalias fathoms    = fathom\nunit  cable      = 100 fathoms\nalias cables     = cable\nunit  nauticalmile = 1852 m\nalias nauticalmiles = nauticalmile\nunit  link       = 1/100 chain\nalias links      = link\nunit  rod        = 5.5 yd\nalias rods       = rod\n\n\n# Time\n# ---------------------------------------------------------------\nunit  s\nalias second     = s\nalias seconds    = s\n\nunit  min        = 60s\nalias minute     = min\nalias minutes    = min\n\nunit  hr         = 60min\nalias h          = hr\nalias hrs        = hr\nalias hour       = hr\nalias hours      = hr\n\nunit  day        = 24hr\nalias days       = day\n\nunit  month      = 30 days\nalias months     = month\n\nunit  year       = 365 days\nalias years      = year\n\nunit  fortnight  = 14 days\nalias fortnights = fortnight\n\n\n# Mass\n# ---------------------------------------------------------------\nunit  g\nalias gram       = g\nalias grams      = g\n\nunit  lbs        = 0.45359237kg\nalias lb         = lbs\nalias pound      = lbs\nalias pounds     = lbs\n\nunit  ton        = 2000 lbs\nalias tons       = ton\n\nunit  ounce      = (1/16) lb\nalias ounces     = ounce\nalias oz         = ounce\n\nunit grain       = (1/7000) lb\nalias gr         = grain\nalias grains     = grain\n\nunit  troypound  = 5760 grain\nalias troypounds = troypound\n\nunit  troyounce  = 1/12 troypound\n\nunit  carat      = 2/10 gram\nalias carats     = carat\nalias ct         = carat\n\n\n# Area (length^2)\n# ---------------------------------------------------------------\nunit  acre       = 4840 yd^2\nalias acres      = acre\n\nunit  perch      = 1 rod^2\nalias perches    = perch\n\nunit  rood       = 1 furlong*rod\nalias roods      = rood\n\n\n# Scalar constants\n# ---------------------------------------------------------------\nzero =                0\none =                 1\ntwo =                 2\ndouble =              2\nthree =               3\ntriple =              3\ntreble =              3\nfour =                4\nquadruple =           4\nfive =                5\nquintuple =           5\nsix =                 6\nsextuple =            6\nseven =               7\nseptuple =            7\neight =               8\nnine =                9\nten =                 10\ntwenty =              20\nthirty =              30\nforty =               40\nfifty =               50\nsixty =               60\nseventy =             70\neighty =              80\nninety =              90\n\nhundred =             100\nthousand =            1000\nmillion =             1e6\nbillion =             1e9\ntrillion =            1e12\nquadrillion =         1e15\nquintillion =         1e18\nsextillion =          1e21\nseptillion =          1e24\noctillion =           1e27\nnonillion =           1e30\nnoventillion =        nonillion\ndecillion =           1e33\nundecillion =         1e36\nduodecillion =        1e39\ntredecillion =        1e42\nquattuordecillion =   1e45\nquindecillion =       1e48\nsexdecillion =        1e51\nseptendecillion =     1e54\noctodecillion =       1e57\nnovemdecillion =      1e60\nvigintillion =        1e63\ncentillion =          1e303\n\ngoogol =              1e100\ngoogle =              googol\n\npi = 3.14159265359\nπ = pi\n\ne = 2.718281828459\n\ngoldenratio = 1.6180339887498\n\n# Indian dimensionless numbers (used in English)\n# See: https://en.wikipedia.org/wiki/Indian_Numbering_System\nunit lakh        = 100 thousand\nunit crore       = 10 million\n\n\n# Speed\n# ---------------------------------------------------------------\nc = 299792458 m/s\nmph = miles/h\nkph = km/h\n\nkts = nauticalmile/h\nknots = kts\nknot = kts\n";
exports.interpreterTestFile = "# Tests for calq in the calq language\n\n# Simple expressions\nc\n1\nassertEqual(1, 1)\n\n# Whitespace\nassertEqual(1 ft, 1 ft)\nassertEqual(1ft, 1 ft)\nassertEqual(1ft, 1ft)\n\n# Variables\nd = 1\nassertEqual(d, 1.0)\n\n# Exponents\nhello = 1e7 feet\nassertEqual(hello, 1e+7 ft)\nassertEqual(ft*feet, foot^2)\n\n# Casting\nassertEqual(1e7 ft in lightyears, 3.221736e-10 lightyears)\n\n# Multiplication/Division\nassertEqual(2*2,4)\nb = 2 ft * 2 ft\nassertEqual(b, 4 ft^2)\nc = 2ft * 2ft\nassertEqual(c, 4ft^2)\nassertEqual(2ft * 2ft, 4ft^2)\nassertEqual(4 / 2, 2)\n\n# Addition/Subtraction\nassertEqual(reduce(2+2), 4)\nassertEqual(1 + 1, 2)\nassertEqual(1ft + 1m, 4.28083989ft)\nassertEqual(1m + 1ft, 1.3048m)\nassertEqual(1ft + 6inch, 1.5ft)\nassertEqual(1ft - 6inch, 0.5ft)\n\n# Functions\n#assertEqual(sqrt(2), 1.4142135623730950488)\n";

},{"fs":"8VSUO","bignumber.js":"4Fwbu"}],"8VSUO":[function(require,module,exports) {
"use strict";

},{}],"eQhPs":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_Gen_Class = require("../Control.Monad.Gen.Class/index.js");
var Control_Monad_Gen_Common = require("../Control.Monad.Gen.Common/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Array_ST = require("../Data.Array.ST/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_String_NonEmpty_CodeUnits = require("../Data.String.NonEmpty.CodeUnits/index.js");
var Data_String_NonEmpty_Internal = require("../Data.String.NonEmpty.Internal/index.js");
var Data_String_Pattern = require("../Data.String.Pattern/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Record = require("../Record/index.js");
var Test_QuickCheck_Gen = require("../Test.QuickCheck.Gen/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var Coarbitrary = function(coarbitrary) {
    this.coarbitrary = coarbitrary;
};
_c = Coarbitrary;
var ArbitraryRowList = function(arbitraryRecord) {
    this.arbitraryRecord = arbitraryRecord;
};
_c1 = ArbitraryRowList;
var ArbitraryGenericSum = function(arbitraryGenericSum) {
    this.arbitraryGenericSum = arbitraryGenericSum;
};
_c2 = ArbitraryGenericSum;
var Arbitrary = function(arbitrary) {
    this.arbitrary = arbitrary;
};
_c3 = Arbitrary;
var coarbitraryNoArguments = new Coarbitrary(function(v) {
    return Control_Category.identity(Control_Category.categoryFn);
});
var coarbitrary = function(dict) {
    return dict.coarbitrary;
};
var coarbitraryArgument = function(dictCoarbitrary) {
    return new Coarbitrary(function(v) {
        return coarbitrary(dictCoarbitrary)(v);
    });
};
var coarbitraryConstructor = function(dictCoarbitrary) {
    return new Coarbitrary(function(v) {
        return coarbitrary(dictCoarbitrary)(v);
    });
};
var coarbitraryProduct = function(dictCoarbitrary) {
    return function(dictCoarbitrary1) {
        return new Coarbitrary(function(v) {
            var $98 = coarbitrary(dictCoarbitrary1)(v.value1);
            var $99 = coarbitrary(dictCoarbitrary)(v.value0);
            return function($100) {
                return $98($99($100));
            };
        });
    };
};
var coarbitrarySum = function(dictCoarbitrary) {
    return function(dictCoarbitrary1) {
        return new Coarbitrary(function(v) {
            if (v instanceof Data_Generic_Rep.Inl) return coarbitrary(dictCoarbitrary)(v.value0);
            if (v instanceof Data_Generic_Rep.Inr) return coarbitrary(dictCoarbitrary1)(v.value0);
            throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary (line 216, column 1 - line 218, column 38): " + [
                v.constructor.name
            ]);
        });
    };
};
var genericCoarbitrary = function(dictGeneric) {
    return function(dictCoarbitrary) {
        return function(x) {
            return function(g) {
                return Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Data_Generic_Rep.to(dictGeneric))(coarbitrary(dictCoarbitrary)(Data_Generic_Rep.from(dictGeneric)(x))(Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Data_Generic_Rep.from(dictGeneric))(g)));
            };
        };
    };
};
var coarbUnit = new Coarbitrary(function(v) {
    return Test_QuickCheck_Gen.perturbGen(1);
});
var coarbTuple = function(dictCoarbitrary) {
    return function(dictCoarbitrary1) {
        return new Coarbitrary(function(v) {
            var $101 = coarbitrary(dictCoarbitrary1)(v.value1);
            var $102 = coarbitrary(dictCoarbitrary)(v.value0);
            return function($103) {
                return $101($102($103));
            };
        });
    };
};
var coarbOrdering = new Coarbitrary(function(v) {
    if (v instanceof Data_Ordering.LT) return Test_QuickCheck_Gen.perturbGen(1);
    if (v instanceof Data_Ordering.EQ) return Test_QuickCheck_Gen.perturbGen(2);
    if (v instanceof Data_Ordering.GT) return Test_QuickCheck_Gen.perturbGen(3);
    throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary (line 114, column 1 - line 117, column 34): " + [
        v.constructor.name
    ]);
});
var coarbNumber = new Coarbitrary(Test_QuickCheck_Gen.perturbGen);
var coarbNonEmpty = function(dictCoarbitrary) {
    return function(dictCoarbitrary1) {
        return new Coarbitrary(function(v) {
            var $104 = coarbitrary(dictCoarbitrary)(v.value1);
            var $105 = coarbitrary(dictCoarbitrary1)(v.value0);
            return function($106) {
                return $104($105($106));
            };
        });
    };
};
var coarbMaybe = function(dictCoarbitrary) {
    return new Coarbitrary(function(v) {
        if (v instanceof Data_Maybe.Nothing) return Test_QuickCheck_Gen.perturbGen(1);
        if (v instanceof Data_Maybe.Just) return coarbitrary(dictCoarbitrary)(v.value0);
        throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary (line 154, column 1 - line 156, column 39): " + [
            v.constructor.name
        ]);
    });
};
var coarbList = function(dictCoarbitrary) {
    return new Coarbitrary(Data_Foldable.foldl(Data_List_Types.foldableList)(function(f) {
        return function(x) {
            var $107 = coarbitrary(dictCoarbitrary)(x);
            return function($108) {
                return f($107($108));
            };
        };
    })(Control_Category.identity(Control_Category.categoryFn)));
};
var coarbNonEmptyList = function(dictCoarbitrary) {
    return new Coarbitrary(function(v) {
        return coarbitrary(coarbNonEmpty(coarbList(dictCoarbitrary))(dictCoarbitrary))(v);
    });
};
var coarbLazy = function(dictCoarbitrary) {
    return new Coarbitrary(function(a) {
        return coarbitrary(dictCoarbitrary)(Data_Lazy.force(a));
    });
};
var coarbInt = new Coarbitrary(function($109) {
    return Test_QuickCheck_Gen.perturbGen(Data_Int.toNumber($109));
});
var coarbIdentity = function(dictCoarbitrary) {
    return new Coarbitrary(function(v) {
        return coarbitrary(dictCoarbitrary)(v);
    });
};
var coarbEither = function(dictCoarbitrary) {
    return function(dictCoarbitrary1) {
        return new Coarbitrary(function(v) {
            if (v instanceof Data_Either.Left) return coarbitrary(dictCoarbitrary)(v.value0);
            if (v instanceof Data_Either.Right) return coarbitrary(dictCoarbitrary1)(v.value0);
            throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary (line 161, column 1 - line 163, column 40): " + [
                v.constructor.name
            ]);
        });
    };
};
var coarbChar = new Coarbitrary(function(c) {
    return coarbitrary(coarbInt)(Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(c));
});
var coarbBoolean = new Coarbitrary(function(v) {
    if (v) return Test_QuickCheck_Gen.perturbGen(1);
    if (!v) return Test_QuickCheck_Gen.perturbGen(2);
    throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary (line 71, column 1 - line 73, column 37): " + [
        v.constructor.name
    ]);
});
var coarbArray = function(dictCoarbitrary) {
    return new Coarbitrary(Data_Foldable.foldl(Data_Foldable.foldableArray)(function(f) {
        return function(x) {
            var $110 = coarbitrary(dictCoarbitrary)(x);
            return function($111) {
                return f($110($111));
            };
        };
    })(Control_Category.identity(Control_Category.categoryFn)));
};
var coarbNonEmptyArray = function(dictCoarbitrary) {
    return new Coarbitrary(function() {
        var $112 = coarbitrary(coarbArray(dictCoarbitrary));
        return function($113) {
            return $112(Data_Array_NonEmpty.toArray($113));
        };
    }());
};
var coarbString = new Coarbitrary(function(s) {
    return coarbitrary(coarbArray(coarbMaybe(coarbChar)))(Data_Functor.map(Data_Functor.functorArray)(Data_String_CodeUnits.charAt(0))(Data_String_Common.split(Data_Newtype.wrap(Data_String_Pattern.newtypePattern)(""))(s)));
});
var coarbNonEmptyString = new Coarbitrary(function() {
    var $114 = coarbitrary(coarbString);
    return function($115) {
        return $114(Data_String_NonEmpty_Internal.toString($115));
    };
}());
var arbitraryRowListNil = new ArbitraryRowList(function(v) {
    return Control_Applicative.pure(Test_QuickCheck_Gen.applicativeGen)({
    });
});
var arbitraryRecord = function(dict) {
    return dict.arbitraryRecord;
};
var arbitraryRecordInstance = function(dictRowToList) {
    return function(dictArbitraryRowList) {
        return new Arbitrary(arbitraryRecord(dictArbitraryRowList)(Type_Data_RowList.RLProxy.value));
    };
};
var arbitraryNoArguments = new Arbitrary(Control_Applicative.pure(Test_QuickCheck_Gen.applicativeGen)(Data_Generic_Rep.NoArguments.value));
var arbitraryGenericSum = function(dict) {
    return dict.arbitraryGenericSum;
};
var arbitrary = function(dict) {
    return dict.arbitrary;
};
var arbitraryArgument = function(dictArbitrary) {
    return new Arbitrary(Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Data_Generic_Rep.Argument)(arbitrary(dictArbitrary)));
};
var arbitraryConstructor = function(dictArbitrary) {
    return new Arbitrary(Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Data_Generic_Rep.Constructor)(arbitrary(dictArbitrary)));
};
var arbitraryIdentity = function(dictArbitrary) {
    return new Arbitrary(Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Data_Identity.Identity)(arbitrary(dictArbitrary)));
};
var arbitraryLazy = function(dictArbitrary) {
    return new Arbitrary(Control_Bind.bind(Test_QuickCheck_Gen.bindGen)(arbitrary(dictArbitrary))(function() {
        var $116 = Control_Applicative.pure(Test_QuickCheck_Gen.applicativeGen);
        return function($117) {
            return $116(Data_Lazy.defer(Data_Function["const"]($117)));
        };
    }()));
};
var arbitraryList = function(dictArbitrary) {
    return new Arbitrary(Test_QuickCheck_Gen.sized(function(n) {
        return Control_Bind.bind(Test_QuickCheck_Gen.bindGen)(Test_QuickCheck_Gen.chooseInt(0)(n))(Data_Function.flip(Test_QuickCheck_Gen.listOf)(arbitrary(dictArbitrary)));
    }));
};
var arbitraryProduct = function(dictArbitrary) {
    return function(dictArbitrary1) {
        return new Arbitrary(Control_Apply.apply(Test_QuickCheck_Gen.applyGen)(Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Data_Generic_Rep.Product.create)(arbitrary(dictArbitrary)))(arbitrary(dictArbitrary1)));
    };
};
var arbitraryRowListCons = function(dictArbitrary) {
    return function(dictArbitraryRowList) {
        return function(dictLacks) {
            return function(dictCons) {
                return function(dictRowToList) {
                    return function(dictIsSymbol) {
                        return new ArbitraryRowList(function(v) {
                            return Control_Bind.bind(Test_QuickCheck_Gen.bindGen)(arbitrary(dictArbitrary))(function(value) {
                                return Control_Bind.bind(Test_QuickCheck_Gen.bindGen)(arbitraryRecord(dictArbitraryRowList)(Type_Data_RowList.RLProxy.value))(function(previous) {
                                    return Control_Applicative.pure(Test_QuickCheck_Gen.applicativeGen)(Record.insert(dictIsSymbol)()()(Data_Symbol.SProxy.value)(value)(previous));
                                });
                            });
                        });
                    };
                };
            };
        };
    };
};
var arbitrarySum = function(dictArbitrary) {
    return function(dictArbitraryGenericSum) {
        return new Arbitrary(Test_QuickCheck_Gen.oneOf(new Data_NonEmpty.NonEmpty(Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Data_Generic_Rep.Inl.create)(arbitrary(dictArbitrary)), Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Data_Generic_Rep.Inr.create))(arbitraryGenericSum(dictArbitraryGenericSum)))));
    };
};
var genericArbitrary = function(dictGeneric) {
    return function(dictArbitrary) {
        return Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Data_Generic_Rep.to(dictGeneric))(arbitrary(dictArbitrary));
    };
};
var arbUnit = new Arbitrary(Control_Applicative.pure(Test_QuickCheck_Gen.applicativeGen)(Data_Unit.unit));
var arbTuple = function(dictArbitrary) {
    return function(dictArbitrary1) {
        return new Arbitrary(Control_Apply.apply(Test_QuickCheck_Gen.applyGen)(Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Data_Tuple.Tuple.create)(arbitrary(dictArbitrary)))(arbitrary(dictArbitrary1)));
    };
};
var arbOrdering = new Arbitrary(Test_QuickCheck_Gen.elements(new Data_NonEmpty.NonEmpty(Data_Ordering.LT.value, [
    Data_Ordering.EQ.value,
    Data_Ordering.GT.value
])));
var arbNumber = new Arbitrary(Test_QuickCheck_Gen.uniform);
var arbNonEmpty = function(dictArbitrary) {
    return function(dictArbitrary1) {
        return new Arbitrary(Control_Apply.apply(Test_QuickCheck_Gen.applyGen)(Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Data_NonEmpty.NonEmpty.create)(arbitrary(dictArbitrary1)))(arbitrary(dictArbitrary)));
    };
};
var arbNonEmptyList = function(dictArbitrary) {
    return new Arbitrary(Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Data_List_Types.NonEmptyList)(arbitrary(arbNonEmpty(arbitraryList(dictArbitrary))(dictArbitrary))));
};
var arbMaybe = function(dictArbitrary) {
    return new Arbitrary(Control_Monad_Gen_Common.genMaybe(Test_QuickCheck_Gen.monadGenGen)(arbitrary(dictArbitrary)));
};
var arbInt = new Arbitrary(Test_QuickCheck_Gen.chooseInt(-1000000)(1000000));
var arbGenSumSum = function(dictArbitrary) {
    return function(dictArbitraryGenericSum) {
        return new ArbitraryGenericSum(Data_Semigroup.append(Data_Semigroup.semigroupArray)([
            Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Data_Generic_Rep.Inl.create)(arbitrary(dictArbitrary))
        ])(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Data_Generic_Rep.Inr.create))(arbitraryGenericSum(dictArbitraryGenericSum))));
    };
};
var arbGenSumConstructor = function(dictArbitrary) {
    return new ArbitraryGenericSum([
        arbitrary(arbitraryConstructor(dictArbitrary))
    ]);
};
var arbFunction = function(dictCoarbitrary) {
    return function(dictArbitrary) {
        return new Arbitrary(Test_QuickCheck_Gen.repeatable(function(a) {
            return coarbitrary(dictCoarbitrary)(a)(arbitrary(dictArbitrary));
        }));
    };
};
var arbEither = function(dictArbitrary) {
    return function(dictArbitrary1) {
        return new Arbitrary(Control_Monad_Gen_Common.genEither(Test_QuickCheck_Gen.monadGenGen)(arbitrary(dictArbitrary))(arbitrary(dictArbitrary1)));
    };
};
var arbChar = new Arbitrary(Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar)))(Test_QuickCheck_Gen.chooseInt(0)(65536)));
var arbBoolean = new Arbitrary(Control_Monad_Gen_Class.chooseBool(Test_QuickCheck_Gen.monadGenGen));
var arbArray = function(dictArbitrary) {
    return new Arbitrary(Test_QuickCheck_Gen.arrayOf(arbitrary(dictArbitrary)));
};
var arbNonEmptyArray = function(dictArbitrary) {
    return new Arbitrary(Control_Bind.bind(Test_QuickCheck_Gen.bindGen)(arbitrary(dictArbitrary))(function(x) {
        return Control_Bind.bind(Test_QuickCheck_Gen.bindGen)(arbitrary(arbArray(dictArbitrary)))(function(xs) {
            return Control_Applicative.pure(Test_QuickCheck_Gen.applicativeGen)(Data_Maybe.fromJust()(Data_Array_NonEmpty.fromArray(function __do() {
                var mxs = Data_Array_ST.unsafeThaw(xs)();
                Data_Array_ST.push(x)(mxs)();
                return Data_Array_ST.unsafeFreeze(mxs)();
            }())));
        });
    }));
};
var arbString = new Arbitrary(Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Data_String_CodeUnits.fromCharArray)(arbitrary(arbArray(arbChar))));
var arbNonEmptyString = new Arbitrary(Control_Apply.apply(Test_QuickCheck_Gen.applyGen)(Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Data_String_NonEmpty_CodeUnits.cons)(arbitrary(arbChar)))(arbitrary(arbString)));
var coarbFunction = function(dictArbitrary) {
    return function(dictCoarbitrary) {
        return new Coarbitrary(function(f) {
            return function(gen) {
                return Control_Bind.bind(Test_QuickCheck_Gen.bindGen)(arbitrary(arbArray(dictArbitrary)))(function(xs) {
                    return coarbitrary(coarbArray(dictCoarbitrary))(Data_Functor.map(Data_Functor.functorArray)(f)(xs))(gen);
                });
            };
        });
    };
};
module.exports = {
    Arbitrary: Arbitrary,
    arbitrary: arbitrary,
    Coarbitrary: Coarbitrary,
    coarbitrary: coarbitrary,
    genericArbitrary: genericArbitrary,
    genericCoarbitrary: genericCoarbitrary,
    ArbitraryGenericSum: ArbitraryGenericSum,
    arbitraryGenericSum: arbitraryGenericSum,
    ArbitraryRowList: ArbitraryRowList,
    arbitraryRecord: arbitraryRecord,
    arbBoolean: arbBoolean,
    coarbBoolean: coarbBoolean,
    arbNumber: arbNumber,
    coarbNumber: coarbNumber,
    arbInt: arbInt,
    coarbInt: coarbInt,
    arbString: arbString,
    coarbString: coarbString,
    arbNonEmptyString: arbNonEmptyString,
    coarbNonEmptyString: coarbNonEmptyString,
    arbChar: arbChar,
    coarbChar: coarbChar,
    arbUnit: arbUnit,
    coarbUnit: coarbUnit,
    arbOrdering: arbOrdering,
    coarbOrdering: coarbOrdering,
    arbArray: arbArray,
    coarbArray: coarbArray,
    arbNonEmptyArray: arbNonEmptyArray,
    coarbNonEmptyArray: coarbNonEmptyArray,
    arbFunction: arbFunction,
    coarbFunction: coarbFunction,
    arbTuple: arbTuple,
    coarbTuple: coarbTuple,
    arbMaybe: arbMaybe,
    coarbMaybe: coarbMaybe,
    arbEither: arbEither,
    coarbEither: coarbEither,
    arbitraryList: arbitraryList,
    coarbList: coarbList,
    arbitraryIdentity: arbitraryIdentity,
    coarbIdentity: coarbIdentity,
    arbitraryLazy: arbitraryLazy,
    coarbLazy: coarbLazy,
    arbNonEmpty: arbNonEmpty,
    coarbNonEmpty: coarbNonEmpty,
    arbNonEmptyList: arbNonEmptyList,
    coarbNonEmptyList: coarbNonEmptyList,
    arbitraryNoArguments: arbitraryNoArguments,
    coarbitraryNoArguments: coarbitraryNoArguments,
    arbGenSumSum: arbGenSumSum,
    arbGenSumConstructor: arbGenSumConstructor,
    arbitrarySum: arbitrarySum,
    coarbitrarySum: coarbitrarySum,
    arbitraryProduct: arbitraryProduct,
    coarbitraryProduct: coarbitraryProduct,
    arbitraryConstructor: arbitraryConstructor,
    coarbitraryConstructor: coarbitraryConstructor,
    arbitraryArgument: arbitraryArgument,
    coarbitraryArgument: coarbitraryArgument,
    arbitraryRowListNil: arbitraryRowListNil,
    arbitraryRowListCons: arbitraryRowListCons,
    arbitraryRecordInstance: arbitraryRecordInstance
};
var _c, _c1, _c2, _c3;
$RefreshReg$(_c, "Coarbitrary");
$RefreshReg$(_c1, "ArbitraryRowList");
$RefreshReg$(_c2, "ArbitraryGenericSum");
$RefreshReg$(_c3, "Arbitrary");

},{"../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Category/index.js":"dfcPK","../Control.Monad.Gen.Class/index.js":"ciZI0","../Control.Monad.Gen.Common/index.js":"5pog8","../Data.Array.NonEmpty/index.js":"hKMv0","../Data.Array.ST/index.js":"4GJp8","../Data.Bounded/index.js":"jzt4h","../Data.Either/index.js":"3WZha","../Data.Enum/index.js":"1zIX3","../Data.Foldable/index.js":"jWmFN","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO","../Data.Generic.Rep/index.js":"2rL8E","../Data.Identity/index.js":"3qeSN","../Data.Int/index.js":"7DHYL","../Data.Lazy/index.js":"520Le","../Data.List.Types/index.js":"80Bba","../Data.Maybe/index.js":"ePH81","../Data.Newtype/index.js":"czJbt","../Data.NonEmpty/index.js":"4pAZZ","../Data.Ordering/index.js":"lEtyd","../Data.Semigroup/index.js":"4sNah","../Data.String.CodeUnits/index.js":"8wheW","../Data.String.Common/index.js":"kcO4K","../Data.String.NonEmpty.CodeUnits/index.js":"12fXb","../Data.String.NonEmpty.Internal/index.js":"i7Yrz","../Data.String.Pattern/index.js":"kTxxX","../Data.Symbol/index.js":"6s2wm","../Data.Tuple/index.js":"eOBbM","../Data.Unit/index.js":"d7oKp","../Record/index.js":"9Nvw8","../Test.QuickCheck.Gen/index.js":"dti6O","../Type.Data.RowList/index.js":"2WGhx"}],"ciZI0":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var MonadGen = function(Monad0, chooseBool, chooseFloat, chooseInt, resize, sized) {
    this.Monad0 = Monad0;
    this.chooseBool = chooseBool;
    this.chooseFloat = chooseFloat;
    this.chooseInt = chooseInt;
    this.resize = resize;
    this.sized = sized;
};
_c = MonadGen;
var sized = function(dict) {
    return dict.sized;
};
var resize = function(dict) {
    return dict.resize;
};
var chooseInt = function(dict) {
    return dict.chooseInt;
};
var chooseFloat = function(dict) {
    return dict.chooseFloat;
};
var chooseBool = function(dict) {
    return dict.chooseBool;
};
module.exports = {
    chooseBool: chooseBool,
    chooseFloat: chooseFloat,
    chooseInt: chooseInt,
    resize: resize,
    sized: sized,
    MonadGen: MonadGen
};
var _c;
$RefreshReg$(_c, "MonadGen");

},{}],"5pog8":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Gen = require("../Control.Monad.Gen/index.js");
var Control_Monad_Gen_Class = require("../Control.Monad.Gen.Class/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var genTuple = function(dictApply) {
    return Control_Apply.lift2(dictApply)(Data_Tuple.Tuple.create);
};
var genNonEmpty = function(dictMonadRec) {
    return function(dictMonadGen) {
        return function(dictUnfoldable) {
            return function(gen) {
                return Control_Apply.apply(dictMonadGen.Monad0().Bind1().Apply0())(Data_Functor.map(dictMonadGen.Monad0().Bind1().Apply0().Functor0())(Data_NonEmpty.NonEmpty.create)(gen))(Control_Monad_Gen_Class.resize(dictMonadGen)(function() {
                    var $12 = Data_Ord.max(Data_Ord.ordInt)(0);
                    return function($13) {
                        return $12(function(v) {
                            return v - 1 | 0;
                        }($13));
                    };
                }())(Control_Monad_Gen.unfoldable(dictMonadRec)(dictMonadGen)(dictUnfoldable)(gen)));
            };
        };
    };
};
var genMaybe$prime = function(dictMonadGen) {
    return function(bias) {
        return function(gen) {
            return Control_Bind.bind(dictMonadGen.Monad0().Bind1())(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(0)(1))(function(n) {
                var $10 = n < bias;
                if ($10) return Data_Functor.map(dictMonadGen.Monad0().Bind1().Apply0().Functor0())(Data_Maybe.Just.create)(gen);
                return Control_Applicative.pure(dictMonadGen.Monad0().Applicative0())(Data_Maybe.Nothing.value);
            });
        };
    };
};
var genMaybe = function(dictMonadGen) {
    return genMaybe$prime(dictMonadGen)(0.75);
};
var genIdentity = function(dictFunctor) {
    return Data_Functor.map(dictFunctor)(Data_Identity.Identity);
};
var genEither$prime = function(dictMonadGen) {
    return function(bias) {
        return function(genA) {
            return function(genB) {
                return Control_Bind.bind(dictMonadGen.Monad0().Bind1())(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(0)(1))(function(n) {
                    var $11 = n < bias;
                    if ($11) return Data_Functor.map(dictMonadGen.Monad0().Bind1().Apply0().Functor0())(Data_Either.Left.create)(genA);
                    return Data_Functor.map(dictMonadGen.Monad0().Bind1().Apply0().Functor0())(Data_Either.Right.create)(genB);
                });
            };
        };
    };
};
var genEither = function(dictMonadGen) {
    return genEither$prime(dictMonadGen)(0.5);
};
module.exports = {
    genEither: genEither,
    "genEither'": genEither$prime,
    genIdentity: genIdentity,
    genMaybe: genMaybe,
    "genMaybe'": genMaybe$prime,
    genTuple: genTuple,
    genNonEmpty: genNonEmpty
};

},{"../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Monad.Gen/index.js":"gOtNI","../Control.Monad.Gen.Class/index.js":"ciZI0","../Data.Either/index.js":"3WZha","../Data.Functor/index.js":"iy1jO","../Data.Identity/index.js":"3qeSN","../Data.Maybe/index.js":"ePH81","../Data.NonEmpty/index.js":"4pAZZ","../Data.Ord/index.js":"f14nh","../Data.Tuple/index.js":"eOBbM"}],"gOtNI":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Gen_Class = require("../Control.Monad.Gen.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Cons = function() {
    function Cons1(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }
    Cons1.create = function(value0) {
        return function(value1) {
            return new Cons1(value0, value1);
        };
    };
    return Cons1;
}();
var Nil = function() {
    function Nil1() {
    }
    Nil1.value = new Nil1();
    return Nil1;
}();
var FreqSemigroup = function(x) {
    return x;
};
_c = FreqSemigroup;
var AtIndex = function(x) {
    return x;
};
_c1 = AtIndex;
var unfoldable = function(dictMonadRec) {
    return function(dictMonadGen) {
        return function(dictUnfoldable) {
            return function(gen) {
                var unfold = function(v) {
                    if (v instanceof Nil) return Data_Maybe.Nothing.value;
                    if (v instanceof Cons) return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
                    throw new Error("Failed pattern match at Control.Monad.Gen (line 101, column 12 - line 103, column 35): " + [
                        v.constructor.name
                    ]);
                };
                var loopGen = function(v) {
                    if (v.value1 <= 0) return Control_Applicative.pure(dictMonadGen.Monad0().Applicative0())(new Control_Monad_Rec_Class.Done(v.value0));
                    if (Data_Boolean.otherwise) return Control_Bind.bind(dictMonadGen.Monad0().Bind1())(gen)(function(x) {
                        return Control_Applicative.pure(dictMonadGen.Monad0().Applicative0())(new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(new Cons(x, v.value0), v.value1 - 1 | 0)));
                    });
                    throw new Error("Failed pattern match at Control.Monad.Gen (line 93, column 3 - line 93, column 68): " + [
                        v.constructor.name
                    ]);
                };
                return Data_Functor.map(dictMonadGen.Monad0().Bind1().Apply0().Functor0())(Data_Unfoldable.unfoldr(dictUnfoldable)(unfold))(Control_Monad_Gen_Class.sized(dictMonadGen)(function() {
                    var $53 = Control_Monad_Rec_Class.tailRecM(dictMonadRec)(loopGen);
                    var $54 = Data_Tuple.Tuple.create(Nil.value);
                    return function($55) {
                        return $53($54($55));
                    };
                }()));
            };
        };
    };
};
var semigroupFreqSemigroup = new Data_Semigroup.Semigroup(function(v) {
    return function(v1) {
        return function(pos) {
            var v2 = v(pos);
            if (v2.value0 instanceof Data_Maybe.Just) return v1(v2.value0.value0);
            return v2;
        };
    };
});
var semigroupAtIndex = new Data_Semigroup.Semigroup(function(v) {
    return function(v1) {
        return function(i) {
            var $42 = i <= 0;
            if ($42) return v(i);
            return v1(i - 1 | 0);
        };
    };
});
var getFreqVal = function(v) {
    return function($56) {
        return Data_Tuple.snd(v($56));
    };
};
var getAtIndex = function(v) {
    return v;
};
var freqSemigroup = function(v) {
    return function(pos) {
        var $46 = pos >= v.value0;
        if ($46) return new Data_Tuple.Tuple(new Data_Maybe.Just(pos - v.value0), v.value1);
        return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, v.value1);
    };
};
var frequency = function(dictMonadGen) {
    return function(dictFoldable1) {
        return function(xs) {
            var total = Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeAdditive)(Data_Newtype.newtypeAdditive)(Data_Monoid_Additive.Additive)(Data_Foldable.foldMap(dictFoldable1.Foldable0())(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringNumber)))(Data_Tuple.fst)(xs);
            return Control_Bind.bind(dictMonadGen.Monad0().Bind1())(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(0)(total))(getFreqVal(Data_Semigroup_Foldable.foldMap1(dictFoldable1)(semigroupFreqSemigroup)(freqSemigroup)(xs)));
        };
    };
};
var filtered = function(dictMonadRec) {
    return function(dictMonadGen) {
        return function(gen) {
            var go = function(v) {
                return Data_Functor.mapFlipped(dictMonadGen.Monad0().Bind1().Apply0().Functor0())(gen)(function(a) {
                    if (a instanceof Data_Maybe.Nothing) return new Control_Monad_Rec_Class.Loop(Data_Unit.unit);
                    if (a instanceof Data_Maybe.Just) return new Control_Monad_Rec_Class.Done(a.value0);
                    throw new Error("Failed pattern match at Control.Monad.Gen (line 117, column 24 - line 119, column 23): " + [
                        a.constructor.name
                    ]);
                });
            };
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_Unit.unit);
        };
    };
};
var suchThat = function(dictMonadRec) {
    return function(dictMonadGen) {
        return function(gen) {
            return function(pred) {
                return filtered(dictMonadRec)(dictMonadGen)(Data_Functor.mapFlipped(dictMonadGen.Monad0().Bind1().Apply0().Functor0())(gen)(function(a) {
                    var $51 = pred(a);
                    if ($51) return new Data_Maybe.Just(a);
                    return Data_Maybe.Nothing.value;
                }));
            };
        };
    };
};
var choose = function(dictMonadGen) {
    return function(genA) {
        return function(genB) {
            return Control_Bind.bind(dictMonadGen.Monad0().Bind1())(Control_Monad_Gen_Class.chooseBool(dictMonadGen))(function(v) {
                if (v) return genA;
                return genB;
            });
        };
    };
};
var atIndex = function($57) {
    return AtIndex(Data_Function["const"]($57));
};
var fromIndex = function(dictFoldable1) {
    return function(i) {
        return function(xs) {
            return getAtIndex(Data_Semigroup_Foldable.foldMap1(dictFoldable1)(semigroupAtIndex)(atIndex)(xs))(i);
        };
    };
};
var elements = function(dictMonadGen) {
    return function(dictFoldable1) {
        return function(xs) {
            return Control_Bind.bind(dictMonadGen.Monad0().Bind1())(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(0)(Data_Foldable.length(dictFoldable1.Foldable0())(Data_Semiring.semiringInt)(xs) - 1 | 0))(function(n) {
                return Control_Applicative.pure(dictMonadGen.Monad0().Applicative0())(fromIndex(dictFoldable1)(n)(xs));
            });
        };
    };
};
var oneOf = function(dictMonadGen) {
    return function(dictFoldable1) {
        return function(xs) {
            return Control_Bind.bind(dictMonadGen.Monad0().Bind1())(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(0)(Data_Foldable.length(dictFoldable1.Foldable0())(Data_Semiring.semiringInt)(xs) - 1 | 0))(function(n) {
                return fromIndex(dictFoldable1)(n)(xs);
            });
        };
    };
};
module.exports = {
    choose: choose,
    oneOf: oneOf,
    frequency: frequency,
    elements: elements,
    unfoldable: unfoldable,
    suchThat: suchThat,
    filtered: filtered
};
var _c, _c1;
$RefreshReg$(_c, "FreqSemigroup");
$RefreshReg$(_c1, "AtIndex");

},{"../Control.Applicative/index.js":"dG9TO","../Control.Bind/index.js":"7Sory","../Control.Monad.Gen.Class/index.js":"ciZI0","../Control.Monad.Rec.Class/index.js":"dMFG0","../Data.Boolean/index.js":"lv1qw","../Data.Foldable/index.js":"jWmFN","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO","../Data.Maybe/index.js":"ePH81","../Data.Monoid.Additive/index.js":"gMw6U","../Data.Newtype/index.js":"czJbt","../Data.Semigroup/index.js":"4sNah","../Data.Semigroup.Foldable/index.js":"lM4gt","../Data.Semiring/index.js":"39btI","../Data.Tuple/index.js":"eOBbM","../Data.Unfoldable/index.js":"5NUrk","../Data.Unit/index.js":"d7oKp"}],"hKMv0":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var unsafeFromArrayF = Unsafe_Coerce.unsafeCoerce;
var unsafeFromArray = Unsafe_Coerce.unsafeCoerce;
var toArray = Unsafe_Coerce.unsafeCoerce;
var unionBy$prime = function(eq) {
    return function(xs) {
        var $39 = Data_Array.unionBy(eq)(toArray(xs));
        return function($40) {
            return unsafeFromArray($39($40));
        };
    };
};
var union$prime = function(dictEq) {
    return unionBy$prime(Data_Eq.eq(dictEq));
};
var unionBy = function(eq) {
    return function(xs) {
        var $41 = unionBy$prime(eq)(xs);
        return function($42) {
            return $41(toArray($42));
        };
    };
};
var union = function(dictEq) {
    return unionBy(Data_Eq.eq(dictEq));
};
var unzip = function() {
    var $43 = Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(unsafeFromArray)(unsafeFromArray);
    return function($44) {
        return $43(Data_Array.unzip(toArray($44)));
    };
}();
var updateAt = function(i) {
    return function(x) {
        var $45 = Data_Array.updateAt(i)(x);
        return function($46) {
            return unsafeFromArrayF($45(toArray($46)));
        };
    };
};
var zip = function(xs) {
    return function(ys) {
        return unsafeFromArray(Data_Array.zip(toArray(xs))(toArray(ys)));
    };
};
var zipWith = function(f) {
    return function(xs) {
        return function(ys) {
            return unsafeFromArray(Data_Array.zipWith(f)(toArray(xs))(toArray(ys)));
        };
    };
};
var zipWithA = function(dictApplicative) {
    return function(f) {
        return function(xs) {
            return function(ys) {
                return unsafeFromArrayF(Data_Array.zipWithA(dictApplicative)(f)(toArray(xs))(toArray(ys)));
            };
        };
    };
};
var some = function(dictAlternative) {
    return function(dictLazy) {
        var $47 = Data_Array.some(dictAlternative)(dictLazy);
        return function($48) {
            return unsafeFromArrayF($47($48));
        };
    };
};
var snoc$prime = function(xs) {
    return function(x) {
        return unsafeFromArray(Data_Array.snoc(xs)(x));
    };
};
var snoc = function(xs) {
    return function(x) {
        return unsafeFromArray(Data_Array.snoc(toArray(xs))(x));
    };
};
var singleton = function($49) {
    return unsafeFromArray(Data_Array.singleton($49));
};
var replicate = function(i) {
    return function(x) {
        return unsafeFromArray(Data_Array.replicate(Data_Ord.max(Data_Ord.ordInt)(1)(i))(x));
    };
};
var range = function(x) {
    return function(y) {
        return unsafeFromArray(Data_Array.range(x)(y));
    };
};
var modifyAt = function(i) {
    return function(f) {
        var $50 = Data_Array.modifyAt(i)(f);
        return function($51) {
            return unsafeFromArrayF($50(toArray($51)));
        };
    };
};
var intersectBy$prime = function(eq) {
    return function(xs) {
        return Data_Array.intersectBy(eq)(toArray(xs));
    };
};
var intersectBy = function(eq) {
    return function(xs) {
        var $52 = intersectBy$prime(eq)(xs);
        return function($53) {
            return $52(toArray($53));
        };
    };
};
var intersect$prime = function(dictEq) {
    return intersectBy$prime(Data_Eq.eq(dictEq));
};
var intersect = function(dictEq) {
    return intersectBy(Data_Eq.eq(dictEq));
};
var insertAt = function(i) {
    return function(x) {
        var $54 = Data_Array.insertAt(i)(x);
        return function($55) {
            return unsafeFromArrayF($54(toArray($55)));
        };
    };
};
var fromFoldable1 = function(dictFoldable1) {
    var $56 = Data_Array.fromFoldable(dictFoldable1.Foldable0());
    return function($57) {
        return unsafeFromArray($56($57));
    };
};
var fromArray = function(xs) {
    if (Data_Array.length(xs) > 0) return new Data_Maybe.Just(unsafeFromArray(xs));
    if (Data_Boolean.otherwise) return Data_Maybe.Nothing.value;
    throw new Error("Failed pattern match at Data.Array.NonEmpty (line 134, column 1 - line 134, column 58): " + [
        xs.constructor.name
    ]);
};
var fromFoldable = function(dictFoldable) {
    var $58 = Data_Array.fromFoldable(dictFoldable);
    return function($59) {
        return fromArray($58($59));
    };
};
var difference$prime = function(dictEq) {
    return function(xs) {
        return Data_Array.difference(dictEq)(toArray(xs));
    };
};
var cons$prime = function(x) {
    return function(xs) {
        return unsafeFromArray(Data_Array.cons(x)(xs));
    };
};
var fromNonEmpty = function(v) {
    return cons$prime(v.value0)(v.value1);
};
var concatMap = Data_Function.flip(Control_Bind.bind(Data_Array_NonEmpty_Internal.bindNonEmptyArray));
var concat = function() {
    var $60 = Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(toArray);
    return function($61) {
        return unsafeFromArray(Data_Array.concat(toArray($60($61))));
    };
}();
var appendArray = function(xs) {
    return function(ys) {
        return unsafeFromArray(Data_Semigroup.append(Data_Semigroup.semigroupArray)(toArray(xs))(ys));
    };
};
var alterAt = function(i) {
    return function(f) {
        var $62 = Data_Array.alterAt(i)(f);
        return function($63) {
            return $62(toArray($63));
        };
    };
};
var adaptMaybe = function(f) {
    var $64 = Data_Maybe.fromJust();
    return function($65) {
        return $64(f(toArray($65)));
    };
};
var head = adaptMaybe(Data_Array.head);
var init = adaptMaybe(Data_Array.init);
var last = adaptMaybe(Data_Array.last);
var tail = adaptMaybe(Data_Array.tail);
var uncons = adaptMaybe(Data_Array.uncons);
var toNonEmpty = function($66) {
    return (function(v) {
        return new Data_NonEmpty.NonEmpty(v.head, v.tail);
    })(uncons($66));
};
var unsnoc = adaptMaybe(Data_Array.unsnoc);
var adaptAny = function(f) {
    return function($67) {
        return f(toArray($67));
    };
};
var catMaybes = adaptAny(Data_Array.catMaybes);
var $$delete = function(dictEq) {
    return function(x) {
        return adaptAny(Data_Array["delete"](dictEq)(x));
    };
};
var deleteAt = function(i) {
    return adaptAny(Data_Array.deleteAt(i));
};
var deleteBy = function(f) {
    return function(x) {
        return adaptAny(Data_Array.deleteBy(f)(x));
    };
};
var difference = function(dictEq) {
    return function(xs) {
        return adaptAny(difference$prime(dictEq)(xs));
    };
};
var drop = function(i) {
    return adaptAny(Data_Array.drop(i));
};
var dropEnd = function(i) {
    return adaptAny(Data_Array.dropEnd(i));
};
var dropWhile = function(f) {
    return adaptAny(Data_Array.dropWhile(f));
};
var elemIndex = function(dictEq) {
    return function(x) {
        return adaptAny(Data_Array.elemIndex(dictEq)(x));
    };
};
var elemLastIndex = function(dictEq) {
    return function(x) {
        return adaptAny(Data_Array.elemLastIndex(dictEq)(x));
    };
};
var filter = function(f) {
    return adaptAny(Data_Array.filter(f));
};
var filterA = function(dictApplicative) {
    return function(f) {
        return adaptAny(Data_Array.filterA(dictApplicative)(f));
    };
};
var findIndex = function(x) {
    return adaptAny(Data_Array.findIndex(x));
};
var findLastIndex = function(x) {
    return adaptAny(Data_Array.findLastIndex(x));
};
var foldM = function(dictMonad) {
    return function(f) {
        return function(acc) {
            return adaptAny(Data_Array.foldM(dictMonad)(f)(acc));
        };
    };
};
var foldRecM = function(dictMonadRec) {
    return function(f) {
        return function(acc) {
            return adaptAny(Data_Array.foldRecM(dictMonadRec)(f)(acc));
        };
    };
};
var index = adaptAny(Data_Array.index);
var length = adaptAny(Data_Array.length);
var mapMaybe = function(f) {
    return adaptAny(Data_Array.mapMaybe(f));
};
var partition = function(f) {
    return adaptAny(Data_Array.partition(f));
};
var slice = function(start) {
    return function(end) {
        return adaptAny(Data_Array.slice(start)(end));
    };
};
var span = function(f) {
    return adaptAny(Data_Array.span(f));
};
var take = function(i) {
    return adaptAny(Data_Array.take(i));
};
var takeEnd = function(i) {
    return adaptAny(Data_Array.takeEnd(i));
};
var takeWhile = function(f) {
    return adaptAny(Data_Array.takeWhile(f));
};
var toUnfoldable = function(dictUnfoldable) {
    return adaptAny(Data_Array.toUnfoldable(dictUnfoldable));
};
var unsafeAdapt = function(f) {
    var $68 = adaptAny(f);
    return function($69) {
        return unsafeFromArray($68($69));
    };
};
var cons = function(x) {
    return unsafeAdapt(Data_Array.cons(x));
};
var insert = function(dictOrd) {
    return function(x) {
        return unsafeAdapt(Data_Array.insert(dictOrd)(x));
    };
};
var insertBy = function(f) {
    return function(x) {
        return unsafeAdapt(Data_Array.insertBy(f)(x));
    };
};
var modifyAtIndices = function(dictFoldable) {
    return function(is) {
        return function(f) {
            return unsafeAdapt(Data_Array.modifyAtIndices(dictFoldable)(is)(f));
        };
    };
};
var nub = function(dictOrd) {
    return unsafeAdapt(Data_Array.nub(dictOrd));
};
var nubBy = function(f) {
    return unsafeAdapt(Data_Array.nubBy(f));
};
var nubByEq = function(f) {
    return unsafeAdapt(Data_Array.nubByEq(f));
};
var nubEq = function(dictEq) {
    return unsafeAdapt(Data_Array.nubEq(dictEq));
};
var reverse = unsafeAdapt(Data_Array.reverse);
var sort = function(dictOrd) {
    return unsafeAdapt(Data_Array.sort(dictOrd));
};
var sortBy = function(f) {
    return unsafeAdapt(Data_Array.sortBy(f));
};
var sortWith = function(dictOrd) {
    return function(f) {
        return unsafeAdapt(Data_Array.sortWith(dictOrd)(f));
    };
};
var updateAtIndices = function(dictFoldable) {
    return function(pairs) {
        return unsafeAdapt(Data_Array.updateAtIndices(dictFoldable)(pairs));
    };
};
var unsafeIndex = function(dictPartial) {
    return adaptAny(Data_Array.unsafeIndex());
};
var toUnfoldable1 = function(dictUnfoldable1) {
    return function(xs) {
        var len = length(xs);
        var f = function(i) {
            return Data_Tuple.Tuple.create(unsafeIndex()(xs)(i))(function() {
                var $38 = i < (len - 1 | 0);
                if ($38) return new Data_Maybe.Just(i + 1 | 0);
                return Data_Maybe.Nothing.value;
            }());
        };
        return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(f)(0);
    };
};
module.exports = {
    fromArray: fromArray,
    fromNonEmpty: fromNonEmpty,
    toArray: toArray,
    toNonEmpty: toNonEmpty,
    fromFoldable: fromFoldable,
    fromFoldable1: fromFoldable1,
    toUnfoldable: toUnfoldable,
    toUnfoldable1: toUnfoldable1,
    singleton: singleton,
    range: range,
    replicate: replicate,
    some: some,
    length: length,
    cons: cons,
    "cons'": cons$prime,
    snoc: snoc,
    "snoc'": snoc$prime,
    appendArray: appendArray,
    insert: insert,
    insertBy: insertBy,
    head: head,
    last: last,
    tail: tail,
    init: init,
    uncons: uncons,
    unsnoc: unsnoc,
    index: index,
    elemIndex: elemIndex,
    elemLastIndex: elemLastIndex,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    insertAt: insertAt,
    deleteAt: deleteAt,
    updateAt: updateAt,
    updateAtIndices: updateAtIndices,
    modifyAt: modifyAt,
    modifyAtIndices: modifyAtIndices,
    alterAt: alterAt,
    reverse: reverse,
    concat: concat,
    concatMap: concatMap,
    filter: filter,
    partition: partition,
    filterA: filterA,
    mapMaybe: mapMaybe,
    catMaybes: catMaybes,
    sort: sort,
    sortBy: sortBy,
    sortWith: sortWith,
    slice: slice,
    take: take,
    takeEnd: takeEnd,
    takeWhile: takeWhile,
    drop: drop,
    dropEnd: dropEnd,
    dropWhile: dropWhile,
    span: span,
    nub: nub,
    nubBy: nubBy,
    nubEq: nubEq,
    nubByEq: nubByEq,
    union: union,
    "union'": union$prime,
    unionBy: unionBy,
    "unionBy'": unionBy$prime,
    "delete": $$delete,
    deleteBy: deleteBy,
    difference: difference,
    "difference'": difference$prime,
    intersect: intersect,
    "intersect'": intersect$prime,
    intersectBy: intersectBy,
    "intersectBy'": intersectBy$prime,
    zipWith: zipWith,
    zipWithA: zipWithA,
    zip: zip,
    unzip: unzip,
    foldM: foldM,
    foldRecM: foldRecM,
    unsafeIndex: unsafeIndex
};

},{"../Control.Bind/index.js":"7Sory","../Data.Array/index.js":"7x0bj","../Data.Array.NonEmpty.Internal/index.js":"57lC8","../Data.Bifunctor/index.js":"4aJ07","../Data.Boolean/index.js":"lv1qw","../Data.Eq/index.js":"c3b8F","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO","../Data.Maybe/index.js":"ePH81","../Data.NonEmpty/index.js":"4pAZZ","../Data.Ord/index.js":"f14nh","../Data.Semigroup/index.js":"4sNah","../Data.Tuple/index.js":"eOBbM","../Data.Unfoldable1/index.js":"Daf7x","../Unsafe.Coerce/index.js":"6gO81"}],"57lC8":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var NonEmptyArray = function(x) {
    return x;
};
_c = NonEmptyArray;
var unfoldable1NonEmptyArray = Data_Unfoldable1.unfoldable1Array;
var traversableWithIndexNonEmptyArray = Data_TraversableWithIndex.traversableWithIndexArray;
var traversableNonEmptyArray = Data_Traversable.traversableArray;
var showNonEmptyArray = function(dictShow) {
    return new Data_Show.Show(function(v) {
        return "(NonEmptyArray " + (Data_Show.show(Data_Show.showArray(dictShow))(v) + ")");
    });
};
var semigroupNonEmptyArray = Data_Semigroup.semigroupArray;
var ordNonEmptyArray = function(dictOrd) {
    return Data_Ord.ordArray(dictOrd);
};
var ord1NonEmptyArray = Data_Ord.ord1Array;
var monadNonEmptyArray = Control_Monad.monadArray;
var functorWithIndexNonEmptyArray = Data_FunctorWithIndex.functorWithIndexArray;
var functorNonEmptyArray = Data_Functor.functorArray;
var foldableWithIndexNonEmptyArray = Data_FoldableWithIndex.foldableWithIndexArray;
var foldableNonEmptyArray = Data_Foldable.foldableArray;
var foldable1NonEmptyArray = new Data_Semigroup_Foldable.Foldable1(function() {
    return foldableNonEmptyArray;
}, function(dictSemigroup) {
    return $foreign.fold1Impl(Data_Semigroup.append(dictSemigroup));
}, function(dictSemigroup) {
    return Data_Semigroup_Foldable.foldMap1Default(foldable1NonEmptyArray)(functorNonEmptyArray)(dictSemigroup);
});
var traversable1NonEmptyArray = new Data_Semigroup_Traversable.Traversable1(function() {
    return foldable1NonEmptyArray;
}, function() {
    return traversableNonEmptyArray;
}, function(dictApply) {
    return Data_Semigroup_Traversable.sequence1Default(traversable1NonEmptyArray)(dictApply);
}, function(dictApply) {
    return $foreign.traverse1Impl(Control_Apply.apply(dictApply))(Data_Functor.map(dictApply.Functor0()));
});
var eqNonEmptyArray = function(dictEq) {
    return Data_Eq.eqArray(dictEq);
};
var eq1NonEmptyArray = Data_Eq.eq1Array;
var bindNonEmptyArray = Control_Bind.bindArray;
var applyNonEmptyArray = Control_Apply.applyArray;
var applicativeNonEmptyArray = Control_Applicative.applicativeArray;
var altNonEmptyArray = Control_Alt.altArray;
module.exports = {
    showNonEmptyArray: showNonEmptyArray,
    eqNonEmptyArray: eqNonEmptyArray,
    eq1NonEmptyArray: eq1NonEmptyArray,
    ordNonEmptyArray: ordNonEmptyArray,
    ord1NonEmptyArray: ord1NonEmptyArray,
    semigroupNonEmptyArray: semigroupNonEmptyArray,
    functorNonEmptyArray: functorNonEmptyArray,
    functorWithIndexNonEmptyArray: functorWithIndexNonEmptyArray,
    foldableNonEmptyArray: foldableNonEmptyArray,
    foldableWithIndexNonEmptyArray: foldableWithIndexNonEmptyArray,
    foldable1NonEmptyArray: foldable1NonEmptyArray,
    unfoldable1NonEmptyArray: unfoldable1NonEmptyArray,
    traversableNonEmptyArray: traversableNonEmptyArray,
    traversableWithIndexNonEmptyArray: traversableWithIndexNonEmptyArray,
    traversable1NonEmptyArray: traversable1NonEmptyArray,
    applyNonEmptyArray: applyNonEmptyArray,
    applicativeNonEmptyArray: applicativeNonEmptyArray,
    bindNonEmptyArray: bindNonEmptyArray,
    monadNonEmptyArray: monadNonEmptyArray,
    altNonEmptyArray: altNonEmptyArray
};
var _c;
$RefreshReg$(_c, "NonEmptyArray");

},{"./foreign.js":"99Tgg","../Control.Alt/index.js":"82RIG","../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Monad/index.js":"alCn2","../Data.Eq/index.js":"c3b8F","../Data.Foldable/index.js":"jWmFN","../Data.FoldableWithIndex/index.js":"b0hJn","../Data.Functor/index.js":"iy1jO","../Data.FunctorWithIndex/index.js":"9mTwC","../Data.Ord/index.js":"f14nh","../Data.Semigroup/index.js":"4sNah","../Data.Semigroup.Foldable/index.js":"lM4gt","../Data.Semigroup.Traversable/index.js":"kPmtP","../Data.Show/index.js":"b6tNW","../Data.Traversable/index.js":"i5Kon","../Data.TraversableWithIndex/index.js":"bLveW","../Data.Unfoldable1/index.js":"Daf7x"}],"99Tgg":[function(require,module,exports) {
"use strict";
exports.fold1Impl = function(f) {
    return function(xs) {
        var acc = xs[0];
        var len = xs.length;
        for(var i = 1; i < len; i++)acc = f(acc)(xs[i]);
        return acc;
    };
};
exports.traverse1Impl = (function() {
    function Cont(fn) {
        this.fn = fn;
    }
    var emptyList = {
    };
    var ConsCell = function(head, tail) {
        this.head = head;
        this.tail = tail;
    };
    function finalCell(head) {
        return new ConsCell(head, emptyList);
    }
    function consList(x) {
        return function(xs) {
            return new ConsCell(x, xs);
        };
    }
    function listToArray(list) {
        var arr = [];
        var xs = list;
        while(xs !== emptyList){
            arr.push(xs.head);
            xs = xs.tail;
        }
        return arr;
    }
    return function(apply) {
        return function(map) {
            return function(f) {
                var buildFrom = function(x, ys) {
                    return apply(map(consList)(f(x)))(ys);
                };
                var go = function(acc, currentLen, xs) {
                    if (currentLen === 0) return acc;
                    else {
                        var last = xs[currentLen - 1];
                        return new Cont(function() {
                            var built = go(buildFrom(last, acc), currentLen - 1, xs);
                            return built;
                        });
                    }
                };
                return function(array) {
                    var acc = map(finalCell)(f(array[array.length - 1]));
                    var result = go(acc, array.length - 1, array);
                    while(result instanceof Cont)result = result.fn();
                    return map(listToArray)(result);
                };
            };
        };
    };
})();

},{}],"6gO81":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    unsafeCoerce: $foreign.unsafeCoerce
};

},{"./foreign.js":"2obab"}],"2obab":[function(require,module,exports) {
"use strict";
// module Unsafe.Coerce
exports.unsafeCoerce = function(x) {
    return x;
};

},{}],"12fXb":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_NonEmpty_Internal = require("../Data.String.NonEmpty.Internal/index.js");
var Data_String_Unsafe = require("../Data.String.Unsafe/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var toNonEmptyString = Unsafe_Coerce.unsafeCoerce;
var snoc = function(c) {
    return function(s) {
        return toNonEmptyString(s + Data_String_CodeUnits.singleton(c));
    };
};
var singleton = function($13) {
    return toNonEmptyString(Data_String_CodeUnits.singleton($13));
};
var liftS = Unsafe_Coerce.unsafeCoerce;
var takeWhile = function(f) {
    var $14 = liftS(Data_String_CodeUnits.takeWhile(f));
    return function($15) {
        return Data_String_NonEmpty_Internal.fromString($14($15));
    };
};
var lastIndexOf$prime = function(pat) {
    var $16 = Data_String_CodeUnits["lastIndexOf'"](pat);
    return function($17) {
        return liftS($16($17));
    };
};
var lastIndexOf = function($18) {
    return liftS(Data_String_CodeUnits.lastIndexOf($18));
};
var indexOf$prime = function(pat) {
    var $19 = Data_String_CodeUnits["indexOf'"](pat);
    return function($20) {
        return liftS($19($20));
    };
};
var indexOf = function($21) {
    return liftS(Data_String_CodeUnits.indexOf($21));
};
var fromNonEmptyString = Unsafe_Coerce.unsafeCoerce;
var length = function($22) {
    return Data_String_CodeUnits.length(fromNonEmptyString($22));
};
var splitAt = function(i) {
    return function(nes) {
        var v = Data_String_CodeUnits.splitAt(i)(fromNonEmptyString(nes));
        return {
            before: Data_String_NonEmpty_Internal.fromString(v.before),
            after: Data_String_NonEmpty_Internal.fromString(v.after)
        };
    };
};
var take = function(i) {
    return function(nes) {
        var s = fromNonEmptyString(nes);
        var $8 = i < 1;
        if ($8) return Data_Maybe.Nothing.value;
        return new Data_Maybe.Just(toNonEmptyString(Data_String_CodeUnits.take(i)(s)));
    };
};
var takeRight = function(i) {
    return function(nes) {
        var s = fromNonEmptyString(nes);
        var $9 = i < 1;
        if ($9) return Data_Maybe.Nothing.value;
        return new Data_Maybe.Just(toNonEmptyString(Data_String_CodeUnits.takeRight(i)(s)));
    };
};
var toChar = function($23) {
    return Data_String_CodeUnits.toChar(fromNonEmptyString($23));
};
var toCharArray = function($24) {
    return Data_String_CodeUnits.toCharArray(fromNonEmptyString($24));
};
var toNonEmptyCharArray = function() {
    var $25 = Data_Maybe.fromJust();
    return function($26) {
        return $25(Data_Array_NonEmpty.fromArray(toCharArray($26)));
    };
}();
var uncons = function(nes) {
    var s = fromNonEmptyString(nes);
    return {
        head: Data_String_Unsafe.charAt(0)(s),
        tail: Data_String_NonEmpty_Internal.fromString(Data_String_CodeUnits.drop(1)(s))
    };
};
var fromFoldable1 = function(dictFoldable1) {
    var $27 = Data_Semigroup_Foldable.fold1(dictFoldable1)(Data_String_NonEmpty_Internal.semigroupNonEmptyString);
    return function($28) {
        return $27($28);
    };
};
var fromCharArray = function(v) {
    if (v.length === 0) return Data_Maybe.Nothing.value;
    return new Data_Maybe.Just(toNonEmptyString(Data_String_CodeUnits.fromCharArray(v)));
};
var fromNonEmptyCharArray = function() {
    var $29 = Data_Maybe.fromJust();
    return function($30) {
        return $29(fromCharArray(Data_Array_NonEmpty.toArray($30)));
    };
}();
var dropWhile = function(f) {
    var $31 = liftS(Data_String_CodeUnits.dropWhile(f));
    return function($32) {
        return Data_String_NonEmpty_Internal.fromString($31($32));
    };
};
var dropRight = function(i) {
    return function(nes) {
        var s = fromNonEmptyString(nes);
        var $11 = i >= Data_String_CodeUnits.length(s);
        if ($11) return Data_Maybe.Nothing.value;
        return new Data_Maybe.Just(toNonEmptyString(Data_String_CodeUnits.dropRight(i)(s)));
    };
};
var drop = function(i) {
    return function(nes) {
        var s = fromNonEmptyString(nes);
        var $12 = i >= Data_String_CodeUnits.length(s);
        if ($12) return Data_Maybe.Nothing.value;
        return new Data_Maybe.Just(toNonEmptyString(Data_String_CodeUnits.drop(i)(s)));
    };
};
var countPrefix = function($33) {
    return liftS(Data_String_CodeUnits.countPrefix($33));
};
var cons = function(c) {
    return function(s) {
        return toNonEmptyString(Data_String_CodeUnits.singleton(c) + s);
    };
};
var charAt = function($34) {
    return liftS(Data_String_CodeUnits.charAt($34));
};
module.exports = {
    fromCharArray: fromCharArray,
    fromNonEmptyCharArray: fromNonEmptyCharArray,
    singleton: singleton,
    cons: cons,
    snoc: snoc,
    fromFoldable1: fromFoldable1,
    toCharArray: toCharArray,
    toNonEmptyCharArray: toNonEmptyCharArray,
    charAt: charAt,
    toChar: toChar,
    indexOf: indexOf,
    "indexOf'": indexOf$prime,
    lastIndexOf: lastIndexOf,
    "lastIndexOf'": lastIndexOf$prime,
    uncons: uncons,
    length: length,
    take: take,
    takeRight: takeRight,
    takeWhile: takeWhile,
    drop: drop,
    dropRight: dropRight,
    dropWhile: dropWhile,
    countPrefix: countPrefix,
    splitAt: splitAt
};

},{"../Data.Array.NonEmpty/index.js":"hKMv0","../Data.Maybe/index.js":"ePH81","../Data.Semigroup.Foldable/index.js":"lM4gt","../Data.String.CodeUnits/index.js":"8wheW","../Data.String.NonEmpty.Internal/index.js":"i7Yrz","../Data.String.Unsafe/index.js":"3wlW6","../Unsafe.Coerce/index.js":"6gO81"}],"i7Yrz":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var NonEmptyString = function(x) {
    return x;
};
_c = NonEmptyString;
var NonEmptyReplacement = function(x) {
    return x;
};
_c1 = NonEmptyReplacement;
var MakeNonEmpty = function(nes) {
    this.nes = nes;
};
_c2 = MakeNonEmpty;
var toUpper = function(v) {
    return Data_String_Common.toUpper(v);
};
var toString = function(v) {
    return v;
};
var toLower = function(v) {
    return Data_String_Common.toLower(v);
};
var showNonEmptyString = new Data_Show.Show(function(v) {
    return "(NonEmptyString.unsafeFromString " + (Data_Show.show(Data_Show.showString)(v) + ")");
});
var showNonEmptyReplacement = new Data_Show.Show(function(v) {
    return "(NonEmptyReplacement " + (Data_Show.show(showNonEmptyString)(v) + ")");
});
var semigroupNonEmptyString = Data_Semigroup.semigroupString;
var semigroupNonEmptyReplacement = semigroupNonEmptyString;
var replaceAll = function(pat) {
    return function(v) {
        return function(v1) {
            return Data_String_Common.replaceAll(pat)(v)(v1);
        };
    };
};
var replace = function(pat) {
    return function(v) {
        return function(v1) {
            return Data_String_Common.replace(pat)(v)(v1);
        };
    };
};
var prependString = function(s1) {
    return function(v) {
        return s1 + v;
    };
};
var ordNonEmptyString = Data_Ord.ordString;
var ordNonEmptyReplacement = ordNonEmptyString;
var nonEmptyNonEmpty = function(dictIsSymbol) {
    return new MakeNonEmpty(function(p) {
        return Data_Symbol.reflectSymbol(dictIsSymbol)(p);
    });
};
var nes = function(dict) {
    return dict.nes;
};
var makeNonEmptyBad = function(dictFail) {
    return new MakeNonEmpty(function(v) {
        return "";
    });
};
var localeCompare = function(v) {
    return function(v1) {
        return Data_String_Common.localeCompare(v)(v1);
    };
};
var liftS = function(f) {
    return function(v) {
        return f(v);
    };
};
var joinWith1 = function(dictFoldable1) {
    return function(v) {
        var $46 = Data_Foldable.intercalate(dictFoldable1.Foldable0())(Data_Monoid.monoidString)(v);
        return function($47) {
            return NonEmptyString($46($47));
        };
    };
};
var joinWith = function(dictFoldable) {
    return function(splice) {
        var $48 = Data_Foldable.intercalate(dictFoldable)(Data_Monoid.monoidString)(splice);
        return function($49) {
            return $48($49);
        };
    };
};
var join1With = function(dictFoldable1) {
    return function(splice) {
        var $50 = joinWith(dictFoldable1.Foldable0())(splice);
        return function($51) {
            return NonEmptyString($50($51));
        };
    };
};
var fromString = function(v) {
    if (v === "") return Data_Maybe.Nothing.value;
    return new Data_Maybe.Just(v);
};
var stripPrefix = function(pat) {
    return Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(fromString)(liftS(Data_String_CodeUnits.stripPrefix(pat)));
};
var stripSuffix = function(pat) {
    return Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(fromString)(liftS(Data_String_CodeUnits.stripSuffix(pat)));
};
var trim = function(v) {
    return fromString(Data_String_Common.trim(v));
};
var unsafeFromString = function(dictPartial) {
    var $52 = Data_Maybe.fromJust();
    return function($53) {
        return $52(fromString($53));
    };
};
var eqNonEmptyString = Data_Eq.eqString;
var eqNonEmptyReplacement = eqNonEmptyString;
var contains = function($54) {
    return liftS(Data_String_CodeUnits.contains($54));
};
var appendString = function(v) {
    return function(s2) {
        return v + s2;
    };
};
module.exports = {
    nes: nes,
    NonEmptyString: NonEmptyString,
    MakeNonEmpty: MakeNonEmpty,
    NonEmptyReplacement: NonEmptyReplacement,
    fromString: fromString,
    unsafeFromString: unsafeFromString,
    toString: toString,
    appendString: appendString,
    prependString: prependString,
    stripPrefix: stripPrefix,
    stripSuffix: stripSuffix,
    contains: contains,
    localeCompare: localeCompare,
    replace: replace,
    replaceAll: replaceAll,
    toLower: toLower,
    toUpper: toUpper,
    trim: trim,
    joinWith: joinWith,
    join1With: join1With,
    joinWith1: joinWith1,
    liftS: liftS,
    eqNonEmptyString: eqNonEmptyString,
    ordNonEmptyString: ordNonEmptyString,
    semigroupNonEmptyString: semigroupNonEmptyString,
    showNonEmptyString: showNonEmptyString,
    makeNonEmptyBad: makeNonEmptyBad,
    nonEmptyNonEmpty: nonEmptyNonEmpty,
    eqNonEmptyReplacement: eqNonEmptyReplacement,
    ordNonEmptyReplacement: ordNonEmptyReplacement,
    semigroupNonEmptyReplacement: semigroupNonEmptyReplacement,
    showNonEmptyReplacement: showNonEmptyReplacement
};
var _c, _c1, _c2;
$RefreshReg$(_c, "NonEmptyString");
$RefreshReg$(_c1, "NonEmptyReplacement");
$RefreshReg$(_c2, "MakeNonEmpty");

},{"../Control.Bind/index.js":"7Sory","../Data.Eq/index.js":"c3b8F","../Data.Foldable/index.js":"jWmFN","../Data.Maybe/index.js":"ePH81","../Data.Monoid/index.js":"94fxC","../Data.Ord/index.js":"f14nh","../Data.Semigroup/index.js":"4sNah","../Data.Show/index.js":"b6tNW","../Data.String.CodeUnits/index.js":"8wheW","../Data.String.Common/index.js":"kcO4K","../Data.Symbol/index.js":"6s2wm"}],"kTxxX":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Replacement = function(x) {
    return x;
};
_c = Replacement;
var Pattern = function(x) {
    return x;
};
_c1 = Pattern;
var showReplacement = new Data_Show.Show(function(v) {
    return "(Replacement " + (Data_Show.show(Data_Show.showString)(v) + ")");
});
var showPattern = new Data_Show.Show(function(v) {
    return "(Pattern " + (Data_Show.show(Data_Show.showString)(v) + ")");
});
var newtypeReplacement = new Data_Newtype.Newtype(function(n) {
    return n;
}, Replacement);
var newtypePattern = new Data_Newtype.Newtype(function(n) {
    return n;
}, Pattern);
var eqReplacement = new Data_Eq.Eq(function(x) {
    return function(y) {
        return x === y;
    };
});
var ordReplacement = new Data_Ord.Ord(function() {
    return eqReplacement;
}, function(x) {
    return function(y) {
        return Data_Ord.compare(Data_Ord.ordString)(x)(y);
    };
});
var eqPattern = new Data_Eq.Eq(function(x) {
    return function(y) {
        return x === y;
    };
});
var ordPattern = new Data_Ord.Ord(function() {
    return eqPattern;
}, function(x) {
    return function(y) {
        return Data_Ord.compare(Data_Ord.ordString)(x)(y);
    };
});
module.exports = {
    Pattern: Pattern,
    Replacement: Replacement,
    eqPattern: eqPattern,
    ordPattern: ordPattern,
    newtypePattern: newtypePattern,
    showPattern: showPattern,
    eqReplacement: eqReplacement,
    ordReplacement: ordReplacement,
    newtypeReplacement: newtypeReplacement,
    showReplacement: showReplacement
};
var _c, _c1;
$RefreshReg$(_c, "Replacement");
$RefreshReg$(_c1, "Pattern");

},{"../Data.Eq/index.js":"c3b8F","../Data.Newtype/index.js":"czJbt","../Data.Ord/index.js":"f14nh","../Data.Show/index.js":"b6tNW"}],"9Nvw8":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Record_Unsafe_Union = require("../Record.Unsafe.Union/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var EqualFields = function(equalFields) {
    this.equalFields = equalFields;
};
_c = EqualFields;
var union = function(dictUnion) {
    return function(l) {
        return function(r) {
            return Record_Unsafe_Union.unsafeUnionFn(l, r);
        };
    };
};
var set = function(dictIsSymbol) {
    return function(dictCons) {
        return function(dictCons1) {
            return function(l) {
                return function(b) {
                    return function(r) {
                        return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(b)(r);
                    };
                };
            };
        };
    };
};
var nub = function(dictNub) {
    return Unsafe_Coerce.unsafeCoerce;
};
var merge = function(dictUnion) {
    return function(dictNub) {
        return function(l) {
            return function(r) {
                return Record_Unsafe_Union.unsafeUnionFn(l, r);
            };
        };
    };
};
var insert = function(dictIsSymbol) {
    return function(dictLacks) {
        return function(dictCons) {
            return function(l) {
                return function(a) {
                    return function(r) {
                        return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r);
                    };
                };
            };
        };
    };
};
var get = function(dictIsSymbol) {
    return function(dictCons) {
        return function(l) {
            return function(r) {
                return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
            };
        };
    };
};
var modify = function(dictIsSymbol) {
    return function(dictCons) {
        return function(dictCons1) {
            return function(l) {
                return function(f) {
                    return function(r) {
                        return set(dictIsSymbol)()()(l)(f(get(dictIsSymbol)()(l)(r)))(r);
                    };
                };
            };
        };
    };
};
var equalFieldsNil = new EqualFields(function(v) {
    return function(v1) {
        return function(v2) {
            return true;
        };
    };
});
var equalFields = function(dict) {
    return dict.equalFields;
};
var equalFieldsCons = function(dictIsSymbol) {
    return function(dictEq) {
        return function(dictCons) {
            return function(dictEqualFields) {
                return new EqualFields(function(v) {
                    return function(a) {
                        return function(b) {
                            var get$prime = get(dictIsSymbol)()(Data_Symbol.SProxy.value);
                            var equalRest = equalFields(dictEqualFields)(Type_Data_RowList.RLProxy.value);
                            return Data_Eq.eq(dictEq)(get$prime(a))(get$prime(b)) && equalRest(a)(b);
                        };
                    };
                });
            };
        };
    };
};
var equal = function(dictRowToList) {
    return function(dictEqualFields) {
        return function(a) {
            return function(b) {
                return equalFields(dictEqualFields)(Type_Data_RowList.RLProxy.value)(a)(b);
            };
        };
    };
};
var disjointUnion = function(dictUnion) {
    return function(dictNub) {
        return function(l) {
            return function(r) {
                return Record_Unsafe_Union.unsafeUnionFn(l, r);
            };
        };
    };
};
var $$delete = function(dictIsSymbol) {
    return function(dictLacks) {
        return function(dictCons) {
            return function(l) {
                return function(r) {
                    return Record_Unsafe.unsafeDelete(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
                };
            };
        };
    };
};
var rename = function(dictIsSymbol) {
    return function(dictIsSymbol1) {
        return function(dictCons) {
            return function(dictLacks) {
                return function(dictCons1) {
                    return function(dictLacks1) {
                        return function(prev) {
                            return function(next) {
                                return function(record) {
                                    return insert(dictIsSymbol1)()()(next)(get(dictIsSymbol)()(prev)(record))($$delete(dictIsSymbol)()()(prev)(record));
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    get: get,
    set: set,
    modify: modify,
    insert: insert,
    "delete": $$delete,
    rename: rename,
    equal: equal,
    merge: merge,
    union: union,
    disjointUnion: disjointUnion,
    nub: nub,
    EqualFields: EqualFields,
    equalFields: equalFields,
    equalFieldsCons: equalFieldsCons,
    equalFieldsNil: equalFieldsNil
};
var _c;
$RefreshReg$(_c, "EqualFields");

},{"../Data.Eq/index.js":"c3b8F","../Data.Symbol/index.js":"6s2wm","../Record.Unsafe/index.js":"6NDQI","../Record.Unsafe.Union/index.js":"1AEzm","../Type.Data.RowList/index.js":"2WGhx","../Unsafe.Coerce/index.js":"6gO81"}],"1AEzm":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Function_Uncurried = require("../Data.Function.Uncurried/index.js");
var unsafeUnion = Data_Function_Uncurried.runFn2($foreign.unsafeUnionFn);
module.exports = {
    unsafeUnion: unsafeUnion,
    unsafeUnionFn: $foreign.unsafeUnionFn
};

},{"./foreign.js":"8WJqx","../Data.Function.Uncurried/index.js":"69cE7"}],"8WJqx":[function(require,module,exports) {
"use strict";
exports.unsafeUnionFn = function(r1, r2) {
    var copy = {
    };
    for(var k1 in r2)if (({
    }).hasOwnProperty.call(r2, k1)) copy[k1] = r2[k1];
    for(var k2 in r1)if (({
    }).hasOwnProperty.call(r1, k2)) copy[k2] = r1[k2];
    return copy;
};

},{}],"dti6O":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Gen_Class = require("../Control.Monad.Gen.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State = require("../Control.Monad.State/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var $$Math = require("../Math/index.js");
var Random_LCG = require("../Random.LCG/index.js");
var Gen = function(x) {
    return x;
};
_c = Gen;
var unGen = function(v) {
    return v;
};
var runGen = function($56) {
    return Control_Monad_State.runState(unGen($56));
};
var stateful = function(f) {
    return Gen(Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function(s) {
        return runGen(f(s))(s);
    }));
};
var sized = function(f) {
    return stateful(function(s) {
        return f(s.size);
    });
};
var variant = function(n) {
    return function(g) {
        return Gen(Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function(s) {
            return runGen(g)({
                newSeed: n,
                size: s.size
            });
        }));
    };
};
var resize = function(sz) {
    return function(g) {
        return Gen(Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function(v) {
            return Data_Functor.map(Data_Tuple.functorTuple)(function(v1) {
                return {
                    size: v.size,
                    newSeed: v1.newSeed
                };
            })(runGen(g)({
                newSeed: v.newSeed,
                size: sz
            }));
        }));
    };
};
var replicateMRec = function(dictMonadRec) {
    return function(k) {
        return function(v) {
            if (k <= 0) return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(Data_List_Types.Nil.value);
            var go = function(v1) {
                if (v1.value1 === 0) return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Control_Monad_Rec_Class.Done(v1.value0));
                return Data_Functor.mapFlipped(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(v)(function(x) {
                    return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(new Data_List_Types.Cons(x, v1.value0), v1.value1 - 1 | 0));
                });
            };
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(new Data_Tuple.Tuple(Data_List_Types.Nil.value, k));
        };
    };
};
var repeatable = function(f) {
    return Gen(Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function(s) {
        return new Data_Tuple.Tuple(function(a) {
            return Data_Tuple.fst(runGen(f(a))(s));
        }, {
            newSeed: Random_LCG.lcgNext(s.newSeed),
            size: s.size
        });
    }));
};
var perturbGen = function(n) {
    return function(gen) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Data_Functor["void"](Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function(s) {
            var $29 = {
            };
            for(var $30 in s)if (({
            }).hasOwnProperty.call(s, $30)) $29[$30] = s[$30];
            $29.newSeed = Random_LCG.lcgPerturb(Data_Int.toNumber($foreign.float32ToInt32(n)))(s.newSeed);
            return $29;
        })))(function() {
            return unGen(gen);
        });
    };
};
var monadRecGen = Control_Monad_State_Trans.monadRecStateT(Control_Monad_Rec_Class.monadRecIdentity);
var monadGen = Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity);
var listOf = replicateMRec(monadRecGen);
var lcgStep = function() {
    var f = function(s) {
        return new Data_Tuple.Tuple(Random_LCG.unSeed(s.newSeed), function() {
            var $32 = {
            };
            for(var $33 in s)if (({
            }).hasOwnProperty.call(s, $33)) $32[$33] = s[$33];
            $32.newSeed = Random_LCG.lcgNext(s.newSeed);
            return $32;
        }());
    };
    return Gen(Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(f));
}();
var lazyGen = Control_Monad_State_Trans.lazyStateT;
var functorGen = Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity);
var uniform = Data_Functor.map(functorGen)(function(n) {
    return Data_Int.toNumber(n) / Data_Int.toNumber(Random_LCG.lcgM);
})(lcgStep);
var vectorOf = function(k) {
    return function(g) {
        return Data_Functor.map(functorGen)(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray))(listOf(k)(g));
    };
};
var evalGen = function($57) {
    return Control_Monad_State.evalState(unGen($57));
};
var sample = function(seed) {
    return function(sz) {
        return function(g) {
            return evalGen(vectorOf(sz)(g))({
                newSeed: seed,
                size: sz
            });
        };
    };
};
var randomSample$prime = function(n) {
    return function(g) {
        return function __do() {
            var seed = Random_LCG.randomSeed();
            return sample(seed)(n)(g);
        };
    };
};
var randomSample = randomSample$prime(10);
var choose = function(a) {
    return function(b) {
        var min$prime = Data_Ord.min(Data_Ord.ordNumber)(a)(b);
        var max$prime = Data_Ord.max(Data_Ord.ordNumber)(a)(b);
        return Data_Functor.map(functorGen)(function() {
            var $58 = Data_Semiring.add(Data_Semiring.semiringNumber)(min$prime);
            var $59 = Data_Semiring.mul(Data_Semiring.semiringNumber)(max$prime - min$prime);
            return function($60) {
                return $58($59($60));
            };
        }())(uniform);
    };
};
var bindGen = Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity);
var frequency = function(v) {
    var xxs = new Data_List_Types.Cons(v.value0, v.value1);
    var total = Data_Newtype.unwrap(Data_Newtype.newtypeAdditive)(Data_Foldable.fold(Data_List_Types.foldableList)(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringNumber))(Data_Functor.map(Data_List_Types.functorList)(function($61) {
        return Data_Monoid_Additive.Additive(Data_Tuple.fst($61));
    })(xxs)));
    var pick = function($copy_n) {
        return function($copy_d) {
            return function($copy_v1) {
                var $tco_var_n = $copy_n;
                var $tco_var_d = $copy_d;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(n, d, v1) {
                    if (v1 instanceof Data_List_Types.Nil) {
                        $tco_done = true;
                        return d;
                    }
                    if (v1 instanceof Data_List_Types.Cons) {
                        var $39 = n <= v1.value0.value0;
                        if ($39) {
                            $tco_done = true;
                            return v1.value0.value1;
                        }
                        $tco_var_n = n - v1.value0.value0;
                        $tco_var_d = d;
                        $copy_v1 = v1.value1;
                        return;
                    }
                    throw new Error("Failed pattern match at Test.QuickCheck.Gen (line 162, column 5 - line 162, column 21): " + [
                        n.constructor.name,
                        d.constructor.name,
                        v1.constructor.name
                    ]);
                }
                while(!$tco_done)$tco_result = $tco_loop($tco_var_n, $tco_var_d, $copy_v1);
                return $tco_result;
            };
        };
    };
    return Control_Bind.bind(bindGen)(choose(0)(total))(function(n) {
        return pick(n)(Data_Tuple.snd(v.value0))(xxs);
    });
};
var applyGen = Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity);
var chooseInt$prime = function(a) {
    return function(b) {
        var numB = Data_Int.toNumber(b);
        var numA = Data_Int.toNumber(a);
        var clamp = function(x) {
            return numA + $$Math.remainder(x)(numB - numA + 1);
        };
        var choose31BitPosNumber = Data_Functor.map(functorGen)(Data_Int.toNumber)(lcgStep);
        var choose32BitPosNumber = Control_Apply.apply(applyGen)(Data_Functor.map(functorGen)(Data_Semiring.add(Data_Semiring.semiringNumber))(choose31BitPosNumber))(Data_Functor.map(functorGen)(Data_Semiring.mul(Data_Semiring.semiringNumber)(2))(choose31BitPosNumber));
        return Data_Functor.map(functorGen)(function($62) {
            return Data_Int.floor(clamp($62));
        })(choose32BitPosNumber);
    };
};
var chooseInt = function(a) {
    return function(b) {
        var $46 = a <= b;
        if ($46) return chooseInt$prime(a)(b);
        return chooseInt$prime(b)(a);
    };
};
var arrayOf = function(g) {
    return sized(function(n) {
        return Control_Bind.bind(bindGen)(chooseInt(0)(n))(function(k) {
            return vectorOf(k)(g);
        });
    });
};
var monadGenGen = new Control_Monad_Gen_Class.MonadGen(function() {
    return monadGen;
}, Data_Functor.map(functorGen)(function(v) {
    return v < 0.5;
})(uniform), choose, chooseInt, function(f) {
    return function(g) {
        return sized(function(s) {
            return resize(f(s))(g);
        });
    };
}, sized);
var oneOf = function(v) {
    return Control_Bind.bind(bindGen)(chooseInt(0)(Data_Array.length(v.value1)))(function(n) {
        var $48 = n < 1;
        if ($48) return v.value0;
        return Data_Maybe.fromMaybe(v.value0)(Data_Array.index(v.value1)(n - 1 | 0));
    });
};
var applicativeGen = Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity);
var arrayOf1 = function(g) {
    return sized(function(n) {
        return Control_Bind.bind(bindGen)(chooseInt(0)(n))(function(k) {
            return Control_Bind.bind(bindGen)(g)(function(x) {
                return Control_Bind.bind(bindGen)(vectorOf(k - 1 | 0)(g))(function(xs) {
                    return Control_Applicative.pure(applicativeGen)(new Data_NonEmpty.NonEmpty(x, xs));
                });
            });
        });
    });
};
var elements = function(v) {
    return Control_Bind.bind(bindGen)(chooseInt(0)(Data_Array.length(v.value1)))(function(n) {
        return Control_Applicative.pure(applicativeGen)(function() {
            var $52 = n === 0;
            if ($52) return v.value0;
            return Data_Maybe.fromMaybe(v.value0)(Data_Array.index(v.value1)(n - 1 | 0));
        }());
    });
};
var $$enum = function(dictBoundedEnum) {
    return Control_Bind.bind(bindGen)(chooseInt(Data_Enum.fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0())))(Data_Enum.fromEnum(dictBoundedEnum)(Data_Bounded.top(dictBoundedEnum.Bounded0()))))(function(i) {
        return Control_Applicative.pure(applicativeGen)(Data_Maybe.fromJust()(Data_Enum.toEnum(dictBoundedEnum)(i)));
    });
};
var shuffle = function(xs) {
    return Control_Bind.bind(bindGen)(vectorOf(Data_Array.length(xs))(chooseInt(0)(Data_Bounded.top(Data_Bounded.boundedInt))))(function(ns) {
        return Control_Applicative.pure(applicativeGen)(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(Data_Array.sortBy(Data_Ord.comparing(Data_Ord.ordInt)(Data_Tuple.fst))(Data_Array.zip(ns)(xs))));
    });
};
var suchThat = function(gen) {
    return function(pred) {
        var go = function(v) {
            return Control_Bind.bind(bindGen)(gen)(function(a) {
                return Control_Applicative.pure(applicativeGen)(function() {
                    var $55 = pred(a);
                    if ($55) return new Control_Monad_Rec_Class.Done(a);
                    return new Control_Monad_Rec_Class.Loop(Data_Unit.unit);
                }());
            });
        };
        return Control_Monad_Rec_Class.tailRecM(monadRecGen)(go)(Data_Unit.unit);
    };
};
var altGen = Control_Monad_State_Trans.altStateT(Data_Identity.monadIdentity)(Data_Identity.altIdentity);
module.exports = {
    unGen: unGen,
    repeatable: repeatable,
    stateful: stateful,
    variant: variant,
    suchThat: suchThat,
    sized: sized,
    resize: resize,
    choose: choose,
    chooseInt: chooseInt,
    oneOf: oneOf,
    frequency: frequency,
    arrayOf: arrayOf,
    arrayOf1: arrayOf1,
    listOf: listOf,
    vectorOf: vectorOf,
    elements: elements,
    shuffle: shuffle,
    runGen: runGen,
    evalGen: evalGen,
    perturbGen: perturbGen,
    uniform: uniform,
    sample: sample,
    randomSample: randomSample,
    "randomSample'": randomSample$prime,
    functorGen: functorGen,
    applyGen: applyGen,
    applicativeGen: applicativeGen,
    bindGen: bindGen,
    monadGen: monadGen,
    altGen: altGen,
    monadRecGen: monadRecGen,
    lazyGen: lazyGen,
    monadGenGen: monadGenGen
};
var _c;
$RefreshReg$(_c, "Gen");

},{"./foreign.js":"bpmKc","../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Monad.Gen.Class/index.js":"ciZI0","../Control.Monad.Rec.Class/index.js":"dMFG0","../Control.Monad.State/index.js":"l64va","../Control.Monad.State.Class/index.js":"enW6F","../Control.Monad.State.Trans/index.js":"3CUYm","../Data.Array/index.js":"7x0bj","../Data.Bounded/index.js":"jzt4h","../Data.Enum/index.js":"1zIX3","../Data.Foldable/index.js":"jWmFN","../Data.Functor/index.js":"iy1jO","../Data.Identity/index.js":"3qeSN","../Data.Int/index.js":"7DHYL","../Data.List/index.js":"iZK6y","../Data.List.Types/index.js":"80Bba","../Data.Maybe/index.js":"ePH81","../Data.Monoid.Additive/index.js":"gMw6U","../Data.Newtype/index.js":"czJbt","../Data.NonEmpty/index.js":"4pAZZ","../Data.Ord/index.js":"f14nh","../Data.Semiring/index.js":"39btI","../Data.Tuple/index.js":"eOBbM","../Data.Unfoldable/index.js":"5NUrk","../Data.Unit/index.js":"d7oKp","../Math/index.js":"aCTFh","../Random.LCG/index.js":"6vvnB"}],"bpmKc":[function(require,module,exports) {
/* global exports, ArrayBuffer, Float32Array, Int32Array */ "use strict";
// module Test.QuickCheck.Gen
exports.float32ToInt32 = function(n) {
    var arr = new ArrayBuffer(4);
    var fv = new Float32Array(arr);
    var iv = new Int32Array(arr);
    fv[0] = n;
    return iv[0];
};

},{}],"l64va":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var withState = Control_Monad_State_Trans.withStateT;
var runState = function(v) {
    var $16 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
    return function($17) {
        return $16(v($17));
    };
};
var mapState = function(f) {
    return Control_Monad_State_Trans.mapStateT(function() {
        var $18 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
        return function($19) {
            return Data_Identity.Identity(f($18($19)));
        };
    }());
};
var execState = function(v) {
    return function(s) {
        var v1 = v(s);
        return v1.value1;
    };
};
var evalState = function(v) {
    return function(s) {
        var v1 = v(s);
        return v1.value0;
    };
};
module.exports = {
    runState: runState,
    evalState: evalState,
    execState: execState,
    mapState: mapState,
    withState: withState
};

},{"../Control.Monad.State.Trans/index.js":"3CUYm","../Data.Identity/index.js":"3qeSN","../Data.Newtype/index.js":"czJbt"}],"6vvnB":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Effect = require("../Effect/index.js");
var Effect_Random = require("../Effect.Random/index.js");
var $$Math = require("../Math/index.js");
var Seed = function(x) {
    return x;
};
_c = Seed;
var unSeed = function(v) {
    return v;
};
var showSeed = new Data_Show.Show(function(v) {
    return "Seed " + Data_Show.show(Data_Show.showInt)(v);
});
var seedMin = 1;
var lcgM = 2147483647;
var seedMax = lcgM - 1 | 0;
var mkSeed = function(x) {
    var ensureBetween = function(min) {
        return function(max) {
            return function(n) {
                var rangeSize = max - min | 0;
                var n$prime = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(n)(rangeSize);
                var $14 = n$prime < min;
                if ($14) return n$prime + max | 0;
                return n$prime;
            };
        };
    };
    return ensureBetween(seedMin)(seedMax)(x);
};
var randomSeed = Data_Functor.map(Effect.functorEffect)(mkSeed)(Effect_Random.randomInt(seedMin)(seedMax));
var lcgC = 0;
var lcgA = 48271;
var lcgPerturb = function(d) {
    return function(v) {
        return Seed(Data_Maybe.fromJust()(Data_Int.fromNumber($$Math.remainder(Data_Int.toNumber(lcgA) * Data_Int.toNumber(v) + d)(Data_Int.toNumber(lcgM)))));
    };
};
var lcgNext = lcgPerturb(Data_Int.toNumber(lcgC));
var eqSeed = new Data_Eq.Eq(function(x) {
    return function(y) {
        return x === y;
    };
});
var ordSeed = new Data_Ord.Ord(function() {
    return eqSeed;
}, function(x) {
    return function(y) {
        return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
    };
});
module.exports = {
    mkSeed: mkSeed,
    unSeed: unSeed,
    randomSeed: randomSeed,
    lcgA: lcgA,
    lcgC: lcgC,
    lcgM: lcgM,
    lcgNext: lcgNext,
    lcgPerturb: lcgPerturb,
    eqSeed: eqSeed,
    ordSeed: ordSeed,
    showSeed: showSeed
};
var _c;
$RefreshReg$(_c, "Seed");

},{"../Data.Eq/index.js":"c3b8F","../Data.EuclideanRing/index.js":"fTU7A","../Data.Functor/index.js":"iy1jO","../Data.Int/index.js":"7DHYL","../Data.Maybe/index.js":"ePH81","../Data.Ord/index.js":"f14nh","../Data.Show/index.js":"b6tNW","../Effect/index.js":"bKbtZ","../Effect.Random/index.js":"1Qtpk","../Math/index.js":"aCTFh"}],"1Qtpk":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Effect = require("../Effect/index.js");
var randomRange = function(min) {
    return function(max) {
        return function __do() {
            var n = $foreign.random();
            return n * (max - min) + min;
        };
    };
};
var randomInt = function(low) {
    return function(high) {
        return function __do() {
            var n = $foreign.random();
            var asNumber = (Data_Int.toNumber(high) - Data_Int.toNumber(low) + 1) * n + Data_Int.toNumber(low);
            return Data_Int.floor(asNumber);
        };
    };
};
var randomBool = Data_Functor.map(Effect.functorEffect)(function(v) {
    return v < 0.5;
})($foreign.random);
module.exports = {
    randomInt: randomInt,
    randomRange: randomRange,
    randomBool: randomBool,
    random: $foreign.random
};

},{"./foreign.js":"7XGnc","../Data.Functor/index.js":"iy1jO","../Data.Int/index.js":"7DHYL","../Effect/index.js":"bKbtZ"}],"7XGnc":[function(require,module,exports) {
"use strict";
exports.random = Math.random;

},{}],"c7UuF":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_BigNumber = require("../Data.BigNumber/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Group = require("../Data.Group/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Exponentials = require("../Exponentials/index.js");
var Expression = require("../Expression/index.js");
var $$Math = require("../Math/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var TokenParser = require("../TokenParser/index.js");
var Tokenizer = require("../Tokenizer/index.js");
var Utils = require("../Utils/index.js");
var Unreduced = function() {
    function Unreduced1() {
    }
    Unreduced1.value = new Unreduced1();
    return Unreduced1;
}();
var Reduced = function() {
    function Reduced1() {
    }
    Reduced1.value = new Reduced1();
    return Reduced1;
}();
var RootUnit = function() {
    function RootUnit1() {
    }
    RootUnit1.value = new RootUnit1();
    return RootUnit1;
}();
var UnitBinding = function() {
    function UnitBinding1(value0) {
        this.value0 = value0;
    }
    UnitBinding1.create = function(value0) {
        return new UnitBinding1(value0);
    };
    return UnitBinding1;
}();
var NamedAlias = function() {
    function NamedAlias1(value0) {
        this.value0 = value0;
    }
    NamedAlias1.create = function(value0) {
        return new NamedAlias1(value0);
    };
    return NamedAlias1;
}();
var Variable = function() {
    function Variable1(value0) {
        this.value0 = value0;
    }
    Variable1.create = function(value0) {
        return new Variable1(value0);
    };
    return Variable1;
}();
var times = function(v) {
    return function(v1) {
        return {
            scalar: Data_Semiring.mul(Data_BigNumber.semiringBigNumber)(v.scalar)(v1.scalar),
            units: Data_Semigroup.append(Exponentials.semigroupExponentials(Data_Ord.ordString))(v.units)(v1.units)
        };
    };
};
var power = function(v) {
    return function(n) {
        return {
            scalar: Data_BigNumber.pow(v.scalar)(Utils.parseBigNumber(Data_Show.show(Data_Show.showInt)(n))),
            units: Data_Group.power(Exponentials.groupExponentials(Data_Ord.ordString))(v.units)(n)
        };
    };
};
var dividedBy = function(v) {
    return function(v1) {
        return {
            scalar: Data_EuclideanRing.div(Data_BigNumber.euclideanRingBigNumber)(v.scalar)(v1.scalar),
            units: Data_Semigroup.append(Exponentials.semigroupExponentials(Data_Ord.ordString))(v.units)(Data_Group.ginverse(Exponentials.groupExponentials(Data_Ord.ordString))(v1.units))
        };
    };
};
var reduce = function(v) {
    var foldFn = function(v1) {
        return function(v2) {
            return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))(dereferenceName(v2.value0)(Reduced.value))(function(value) {
                return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(times(v1)(power(value)(v2.value1)));
            });
        };
    };
    return Exponentials.foldM(Control_Monad_State_Trans.monadStateT(Data_Either.monadEither))(foldFn)({
        scalar: v.scalar,
        units: Data_Monoid.mempty(Exponentials.monoidExponentials(Data_Ord.ordString))
    })(v.units);
};
var dereferenceName = function(name) {
    return function(form) {
        return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Either.monadEither)))(function(v) {
            var v1 = Data_Map_Internal.lookup(Data_Ord.ordString)(name)(v.bindings);
            if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof RootUnit) return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(Expression.singletonUnit(name));
            if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof UnitBinding) {
                if (form instanceof Unreduced) return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(Expression.singletonUnit(name));
                if (form instanceof Reduced) return reduce(v1.value0.value0);
                throw new Error("Failed pattern match at Interpreter (line 73, column 35 - line 75, column 32): " + [
                    form.constructor.name
                ]);
            }
            if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof NamedAlias) {
                if (form instanceof Unreduced) return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(Expression.singletonUnit(v1.value0.value0));
                if (form instanceof Reduced) return dereferenceName(v1.value0.value0)(form);
                throw new Error("Failed pattern match at Interpreter (line 76, column 33 - line 78, column 45): " + [
                    form.constructor.name
                ]);
            }
            if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof Variable) {
                if (form instanceof Unreduced) return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(v1.value0.value0);
                if (form instanceof Reduced) return reduce(v1.value0.value0);
                throw new Error("Failed pattern match at Interpreter (line 79, column 33 - line 81, column 33): " + [
                    form.constructor.name
                ]);
            }
            if (v1 instanceof Data_Maybe.Nothing) {
                var searchPrefixes = function($copy_v2) {
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(v2) {
                        if (v2 instanceof Data_List_Types.Nil) {
                            $tco_done = true;
                            return Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Data_Either.monadEither)(new Data_Either.Left("Undefined variable " + Data_Show.show(Data_Show.showString)(name)));
                        }
                        if (v2 instanceof Data_List_Types.Cons) {
                            var v3 = Data_String_CodeUnits.stripPrefix(v2.value0.value0)(name);
                            if (v3 instanceof Data_Maybe.Nothing) {
                                $copy_v2 = v2.value1;
                                return;
                            }
                            if (v3 instanceof Data_Maybe.Just) {
                                var v4 = Data_Map_Internal.lookup(Data_Ord.ordString)(v3.value0)(v.bindings);
                                if (v4 instanceof Data_Maybe.Nothing) {
                                    $copy_v2 = v2.value1;
                                    return;
                                }
                                if (v4 instanceof Data_Maybe.Just && v4.value0 instanceof RootUnit) {
                                    if (form instanceof Unreduced) {
                                        $tco_done = true;
                                        return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(Expression.singletonUnit(name));
                                    }
                                    if (form instanceof Reduced) {
                                        $tco_done = true;
                                        return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(times(v2.value0.value1)(Expression.singletonUnit(v3.value0)));
                                    }
                                    throw new Error("Failed pattern match at Interpreter (line 92, column 28 - line 94, column 73): " + [
                                        form.constructor.name
                                    ]);
                                }
                                if (v4 instanceof Data_Maybe.Just && v4.value0 instanceof UnitBinding) {
                                    if (form instanceof Unreduced) {
                                        $tco_done = true;
                                        return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(Expression.singletonUnit(name));
                                    }
                                    if (form instanceof Reduced) {
                                        $tco_done = true;
                                        return reduce(times(v2.value0.value1)(v4.value0.value0));
                                    }
                                    throw new Error("Failed pattern match at Interpreter (line 95, column 41 - line 97, column 60): " + [
                                        form.constructor.name
                                    ]);
                                }
                                if (v4 instanceof Data_Maybe.Just && v4.value0 instanceof NamedAlias) {
                                    $tco_done = true;
                                    return dereferenceName(v2.value0.value0 + v4.value0.value0)(form);
                                }
                                if (v4 instanceof Data_Maybe.Just && v4.value0 instanceof Variable) {
                                    $tco_done = true;
                                    return Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Data_Either.monadEither)(new Data_Either.Left("Undefined variable " + Data_Show.show(Data_Show.showString)(name)));
                                }
                                throw new Error("Failed pattern match at Interpreter (line 90, column 24 - line 99, column 82): " + [
                                    v4.constructor.name
                                ]);
                            }
                            throw new Error("Failed pattern match at Interpreter (line 88, column 60 - line 99, column 82): " + [
                                v3.constructor.name
                            ]);
                        }
                        throw new Error("Failed pattern match at Interpreter (line 85, column 7 - line 85, column 71): " + [
                            v2.constructor.name
                        ]);
                    }
                    while(!$tco_done)$tco_result = $tco_loop($copy_v2);
                    return $tco_result;
                };
                return searchPrefixes(v.prefixes);
            }
            throw new Error("Failed pattern match at Interpreter (line 71, column 3 - line 99, column 82): " + [
                v1.constructor.name
            ]);
        });
    };
};
var createBinding = function(name) {
    return function(value) {
        return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(Data_Either.monadEither))(function(state) {
            var $85 = {
            };
            for(var $86 in state)if (({
            }).hasOwnProperty.call(state, $86)) $85[$86] = state[$86];
            $85.bindings = Data_Map_Internal.insert(Data_Ord.ordString)(name)(value)(state.bindings);
            return $85;
        }))(function() {
            return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(Data_Unit.unit);
        });
    };
};
var convertible = function(u1) {
    return function(u2) {
        return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))(reduce(dividedBy(Expression.singletonUnit(u1))(Expression.singletonUnit(u2))))(function(v) {
            return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(Data_Eq.eq(Exponentials.eqExponentials(Data_Ord.ordString))(v.units)(Data_Monoid.mempty(Exponentials.monoidExponentials(Data_Ord.ordString))));
        });
    };
};
var mergeConvertible = function(v) {
    var rec = function(v1) {
        if (v1 instanceof Data_List_Types.Nil) return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(v);
        if (v1 instanceof Data_List_Types.Cons) return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))(convertible(v1.value0.value0.value0)(v1.value0.value1.value0))(function(isConvertible) {
            if (isConvertible) {
                var unitsToMerge = {
                    scalar: Utils.parseBigNumber("1"),
                    units: Data_Semigroup.append(Exponentials.semigroupExponentials(Data_Ord.ordString))(Exponentials.power(Data_Ord.ordString)(v1.value0.value0.value0)(v1.value0.value0.value1))(Exponentials.power(Data_Ord.ordString)(v1.value0.value1.value0)(v1.value0.value1.value1))
                };
                return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))(reduce(unitsToMerge))(function(conversionFactor) {
                    return mergeConvertible(times(dividedBy(v)(unitsToMerge))(conversionFactor));
                });
            }
            return rec(v1.value1);
        });
        throw new Error("Failed pattern match at Interpreter (line 253, column 5 - line 253, column 95): " + [
            v1.constructor.name
        ]);
    };
    var pairs = Data_List.fromFoldable(Data_Foldable.foldableArray)(Utils.nonrepeatedCombinations(Exponentials.toArray(v.units)));
    return rec(pairs);
};
var cast = function(value) {
    return function(desiredUnits) {
        return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))(reduce(dividedBy(value)({
            scalar: Utils.parseBigNumber("1"),
            units: desiredUnits
        })))(function(v) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))(Control_Applicative.when(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(Data_Eq.notEq(Exponentials.eqExponentials(Data_Ord.ordString))(v.units)(Data_Monoid.mempty(Exponentials.monoidExponentials(Data_Ord.ordString))))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Data_Either.monadEither)(Data_Either.Left.create("Cannot convert from " + (Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function() {
                return "scalar";
            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function() {
                return "units";
            }))(Data_Show.showRecordFieldsNil)(Exponentials.showExponentialsString))(Data_BigNumber.showBigNumber)))(value) + (" to " + Data_Show.show(Exponentials.showExponentialsString)(desiredUnits)))))))(function() {
                return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))({
                    scalar: v.scalar,
                    units: desiredUnits
                });
            });
        });
    };
};
var approxEqual = function(v) {
    return function(v1) {
        if (Data_Eq.notEq(Exponentials.eqExponentials(Data_Ord.ordString))(v.units)(v1.units)) return false;
        if (Data_Eq.eq(Data_BigNumber.eqBigNumber)(v.scalar)(Utils.parseBigNumber("0"))) return Data_Eq.eq(Data_BigNumber.eqBigNumber)(v.scalar)(v1.scalar);
        if (Data_Boolean.otherwise) return Data_Ord.lessThan(Data_BigNumber.ordBigNumber)(Data_EuclideanRing.div(Data_BigNumber.euclideanRingBigNumber)(Data_Ord.abs(Data_BigNumber.ordBigNumber)(Data_BigNumber.ringBigNumber)(Data_Ring.sub(Data_BigNumber.ringBigNumber)(v.scalar)(v1.scalar)))(v.scalar))(Utils.parseBigNumber("1e-5"));
        throw new Error("Failed pattern match at Interpreter (line 215, column 1 - line 215, column 41): " + [
            v.constructor.name,
            v1.constructor.name
        ]);
    };
};
var $$eval = function(v) {
    if (v instanceof Expression.Scalar) return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))({
        scalar: v.value0,
        units: Data_Monoid.mempty(Exponentials.monoidExponentials(Data_Ord.ordString))
    });
    if (v instanceof Expression.BindRootUnit) return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))(createBinding(v.value0.name)(RootUnit.value))(function() {
        return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(Expression.singletonUnit(v.value0.name));
    });
    if (v instanceof Expression.BindUnit) return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))($$eval(v.value0.expr))(function(value) {
        return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))(createBinding(v.value0.name)(new UnitBinding(value)))(function() {
            return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(Expression.singletonUnit(v.value0.name));
        });
    });
    if (v instanceof Expression.BindAlias) return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))(createBinding(v.value0.name)(new NamedAlias(v.value0.target)))(function() {
        return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(Expression.singletonUnit(v.value0.target));
    });
    if (v instanceof Expression.BindVariable) return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))($$eval(v.value0.expr))(function(value) {
        return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))(createBinding(v.value0.name)(new Variable(value)))(function() {
            return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(value);
        });
    });
    if (v instanceof Expression.BindPrefix) return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))($$eval(v.value0.expr))(function(value) {
        return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(Data_Either.monadEither))(function(state) {
            var $126 = {
            };
            for(var $127 in state)if (({
            }).hasOwnProperty.call(state, $127)) $126[$127] = state[$127];
            $126.prefixes = Data_List.snoc(state.prefixes)(new Data_Tuple.Tuple(v.value0.name, value));
            return $126;
        }))(function() {
            return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(value);
        });
    });
    if (v instanceof Expression.Name) return dereferenceName(v.value0)(Unreduced.value);
    if (v instanceof Expression.Fn1 && v.value0.name === "reduce") return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))($$eval(v.value0.p1))(reduce);
    if (v instanceof Expression.Fn1 && v.value0.name === "negate") return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))($$eval(v.value0.p1))(function(v1) {
        return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))({
            scalar: Data_Ring.negate(Data_BigNumber.ringBigNumber)(v1.scalar),
            units: v1.units
        });
    });
    if (v instanceof Expression.Fn1) return Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Data_Either.monadEither)(Data_Either.Left.create("Unknown function: " + Data_Show.show(Data_Show.showString)(v.value0.name)));
    if (v instanceof Expression.Fn2 && v.value0.name === "assertEqual") return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))($$eval(v.value0.p1))(function(value1) {
        return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))($$eval(v.value0.p2))(function(value2) {
            var $145 = approxEqual(value1)(value2);
            if ($145) return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(value1);
            return Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Data_Either.monadEither)(new Data_Either.Left(Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function() {
                return "scalar";
            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function() {
                return "units";
            }))(Data_Show.showRecordFieldsNil)(Exponentials.showExponentialsString))(Data_BigNumber.showBigNumber)))(value1) + (" \u2260 " + Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function() {
                return "scalar";
            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function() {
                return "units";
            }))(Data_Show.showRecordFieldsNil)(Exponentials.showExponentialsString))(Data_BigNumber.showBigNumber)))(value2))));
        });
    });
    if (v instanceof Expression.Fn2 && v.value0.name === "^") return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))($$eval(v.value0.p1))(function(e1) {
        return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))($$eval(v.value0.p2))(function(v1) {
            var scalar$prime = Data_BigNumber.toNumber(v1.scalar);
            var pow = $$Math.floor(Data_BigNumber.toNumber(v1.scalar));
            var $151 = Data_Eq.notEq(Exponentials.eqExponentials(Data_Ord.ordString))(v1.units)(Data_Monoid.mempty(Exponentials.monoidExponentials(Data_Ord.ordString)));
            if ($151) return Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Data_Either.monadEither)(new Data_Either.Left("Cannot raise powers with units: " + Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function() {
                return "scalar";
            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function() {
                return "units";
            }))(Data_Show.showRecordFieldsNil)(Exponentials.showExponentialsString))(Data_BigNumber.showBigNumber)))(v1)));
            var $152 = pow < scalar$prime;
            if ($152) return Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Data_Either.monadEither)(new Data_Either.Left("Cannot raise non-integer powers" + Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function() {
                return "scalar";
            }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function() {
                return "units";
            }))(Data_Show.showRecordFieldsNil)(Exponentials.showExponentialsString))(Data_BigNumber.showBigNumber)))(v1)));
            return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(power(e1)(Data_Int.floor(pow)));
        });
    });
    if (v instanceof Expression.Fn2 && v.value0.name === "*") return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))($$eval(v.value0.p1))(function(e1) {
        return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))($$eval(v.value0.p2))(function(e2) {
            return mergeConvertible(times(e1)(e2));
        });
    });
    if (v instanceof Expression.Fn2 && v.value0.name === "/") return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))($$eval(v.value0.p1))(function(e1) {
        return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))($$eval(v.value0.p2))(function(e2) {
            return mergeConvertible(dividedBy(e1)(e2));
        });
    });
    if (v instanceof Expression.Fn2 && v.value0.name === "in") return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))($$eval(v.value0.p1))(reduce))(function(e1) {
        return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))($$eval(v.value0.p2))(function(v1) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))(Control_Applicative.when(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(Data_Eq.notEq(Data_BigNumber.eqBigNumber)(v1.scalar)(Utils.parseBigNumber("1")))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Data_Either.monadEither)(Data_Either.Left.create("Cannot cast to a numeric unit"))))(function() {
                return cast(e1)(v1.units);
            });
        });
    });
    if (v instanceof Expression.Fn2 && v.value0.name === "+") return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))($$eval(v.value0.p1))(function(v1) {
        return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))(reduce(v1))(function(v2) {
            return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Either.monadEither))($$eval(v.value0.p2))(reduce))(function(v3) {
                var $177 = Data_Eq.notEq(Exponentials.eqExponentials(Data_Ord.ordString))(v2.units)(v3.units);
                if ($177) return Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Data_Either.monadEither)(Data_Either.Left.create("Cannot add units " + (Data_Show.show(Exponentials.showExponentialsString)(v2.units) + (" and " + Data_Show.show(Exponentials.showExponentialsString)(v3.units)))));
                return cast({
                    scalar: Data_Semiring.add(Data_BigNumber.semiringBigNumber)(v2.scalar)(v3.scalar),
                    units: v2.units
                })(v1.units);
            });
        });
    });
    if (v instanceof Expression.Fn2 && v.value0.name === "-") return $$eval(new Expression.Fn2({
        name: "+",
        p1: v.value0.p1,
        p2: new Expression.Fn1({
            name: "negate",
            p1: v.value0.p2
        })
    }));
    if (v instanceof Expression.Fn2) return Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Data_Either.monadEither)(Data_Either.Left.create("Unknown function: " + Data_Show.show(Data_Show.showString)(v.value0.name)));
    throw new Error("Failed pattern match at Interpreter (line 108, column 1 - line 108, column 34): " + [
        v.constructor.name
    ]);
};
var execDefinitions = function(startState) {
    return function(input) {
        var tokens = function() {
            var v = Tokenizer.tokenize(input);
            if (v instanceof Data_Either.Left) return Utils.undefinedLog("This happens when tokenization fails (should never fail): " + Data_Show.show(Text_Parsing_Parser.showParseError)(v.value0));
            if (v instanceof Data_Either.Right) return v.value0;
            throw new Error("Failed pattern match at Interpreter (line 272, column 14 - line 274, column 19): " + [
                v.constructor.name
            ]);
        }();
        var lines = Data_Array.filter(function() {
            var $205 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
            return function($206) {
                return $205(Data_Array["null"]($206));
            };
        }())(Data_Functor.map(Data_Functor.functorArray)(Tokenizer.removeWhitespaceAndComments)(Tokenizer.lines(tokens)));
        var execLine = function(line) {
            var expr = function() {
                var v = Text_Parsing_Parser.runParser(line)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(TokenParser.tokenExprParser)(TokenParser.eof(Data_Identity.monadIdentity)));
                if (v instanceof Data_Either.Left) return Utils.undefinedLog("Failed to parse definitions: " + Data_Show.show(Text_Parsing_Parser.showParseError)(v.value0));
                if (v instanceof Data_Either.Right) return v.value0;
                throw new Error("Failed pattern match at Interpreter (line 282, column 16 - line 284, column 23): " + [
                    v.constructor.name
                ]);
            }();
            return $$eval(expr);
        };
        var result = Data_Foldable.traverse_(Control_Monad_State_Trans.applicativeStateT(Data_Either.monadEither))(Data_Foldable.foldableArray)(execLine)(lines);
        var v = Control_Monad_State_Trans.execStateT(Data_Either.functorEither)(result)(startState);
        if (v instanceof Data_Either.Left) return Utils.undefinedLog("Failed to exec definitions: " + Data_Show.show(Data_Show.showString)(v.value0));
        if (v instanceof Data_Either.Right) return v.value0;
        throw new Error("Failed pattern match at Interpreter (line 291, column 5 - line 293, column 27): " + [
            v.constructor.name
        ]);
    };
};
var initState = execDefinitions(Data_Monoid.mempty(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function() {
    return "bindings";
}))(Data_Map_Internal.monoidMap(Data_Ord.ordString))()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function() {
    return "prefixes";
}))(Data_List_Types.monoidList)()(Data_Monoid.monoidRecordNil)))))(Utils.definitionsFile);
var runInterpreter = function(i) {
    return Control_Monad_State_Trans.evalStateT(Data_Either.functorEither)(i)(initState);
};
module.exports = {
    RootUnit: RootUnit,
    UnitBinding: UnitBinding,
    NamedAlias: NamedAlias,
    Variable: Variable,
    Unreduced: Unreduced,
    Reduced: Reduced,
    dereferenceName: dereferenceName,
    createBinding: createBinding,
    "eval": $$eval,
    times: times,
    dividedBy: dividedBy,
    power: power,
    approxEqual: approxEqual,
    cast: cast,
    reduce: reduce,
    convertible: convertible,
    mergeConvertible: mergeConvertible,
    execDefinitions: execDefinitions,
    initState: initState,
    runInterpreter: runInterpreter
};

},{"../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Monad.State.Class/index.js":"enW6F","../Control.Monad.State.Trans/index.js":"3CUYm","../Control.Monad.Trans.Class/index.js":"9pz5v","../Data.Array/index.js":"7x0bj","../Data.BigNumber/index.js":"hlAFq","../Data.Boolean/index.js":"lv1qw","../Data.Either/index.js":"3WZha","../Data.Eq/index.js":"c3b8F","../Data.EuclideanRing/index.js":"fTU7A","../Data.Foldable/index.js":"jWmFN","../Data.Functor/index.js":"iy1jO","../Data.Group/index.js":"2BG66","../Data.HeytingAlgebra/index.js":"8Mx0E","../Data.Identity/index.js":"3qeSN","../Data.Int/index.js":"7DHYL","../Data.List/index.js":"iZK6y","../Data.List.Types/index.js":"80Bba","../Data.Map.Internal/index.js":"iS1Sf","../Data.Maybe/index.js":"ePH81","../Data.Monoid/index.js":"94fxC","../Data.Ord/index.js":"f14nh","../Data.Ring/index.js":"2x2oG","../Data.Semigroup/index.js":"4sNah","../Data.Semiring/index.js":"39btI","../Data.Show/index.js":"b6tNW","../Data.String.CodeUnits/index.js":"8wheW","../Data.Symbol/index.js":"6s2wm","../Data.Tuple/index.js":"eOBbM","../Data.Unit/index.js":"d7oKp","../Exponentials/index.js":"3DhL5","../Expression/index.js":"7zFQn","../Math/index.js":"aCTFh","../Text.Parsing.Parser/index.js":"iVT9M","../TokenParser/index.js":"1A15G","../Tokenizer/index.js":"gfOwV","../Utils/index.js":"liNIM"}],"iVT9M":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Text_Parsing_Parser_Pos = require("../Text.Parsing.Parser.Pos/index.js");
var ParseState = function() {
    function ParseState1(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    }
    ParseState1.create = function(value0) {
        return function(value1) {
            return function(value2) {
                return new ParseState1(value0, value1, value2);
            };
        };
    };
    return ParseState1;
}();
var ParseError = function() {
    function ParseError1(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }
    ParseError1.create = function(value0) {
        return function(value1) {
            return new ParseError1(value0, value1);
        };
    };
    return ParseError1;
}();
var ParserT = function(x) {
    return x;
};
_c = ParserT;
var showParseError = new Data_Show.Show(function(v) {
    return "(ParseError " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Text_Parsing_Parser_Pos.showPosition)(v.value1) + ")")));
});
var parseErrorPosition = function(v) {
    return v.value1;
};
var parseErrorMessage = function(v) {
    return v.value0;
};
var newtypeParserT = new Data_Newtype.Newtype(function(n) {
    return n;
}, ParserT);
var runParserT = function(dictMonad) {
    return function(s) {
        return function(p) {
            var initialState = new ParseState(s, Text_Parsing_Parser_Pos.initialPos, false);
            return Control_Monad_State_Trans.evalStateT(dictMonad.Bind1().Apply0().Functor0())(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p)))(initialState);
        };
    };
};
var runParser = function(s) {
    var $95 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
    var $96 = runParserT(Data_Identity.monadIdentity)(s);
    return function($97) {
        return $95($96($97));
    };
};
var monadTransParserT = new Control_Monad_Trans_Class.MonadTrans(function(dictMonad) {
    var $98 = Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(dictMonad));
    var $99 = Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonad);
    return function($100) {
        return ParserT($98($99($100)));
    };
});
var monadThrowParserT = function(dictMonad) {
    return Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
};
var monadStateParserT = function(dictMonad) {
    return Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(dictMonad));
};
var position = function(dictMonad) {
    return Control_Monad_State_Class.gets(monadStateParserT(dictMonad))(function(v) {
        return v.value1;
    });
};
var monadRecParserT = function(dictMonadRec) {
    return Control_Monad_Except_Trans.monadRecExceptT(Control_Monad_State_Trans.monadRecStateT(dictMonadRec));
};
var monadParserT = function(dictMonad) {
    return Control_Monad_Except_Trans.monadExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
};
var monadErrorParserT = function(dictMonad) {
    return Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
};
var mapParserT = function() {
    var $101 = Data_Newtype.over(newtypeParserT)(newtypeParserT)(ParserT);
    return function($102) {
        return $101(Control_Monad_Except_Trans.mapExceptT(Control_Monad_State_Trans.mapStateT($102)));
    };
}();
var lazyParserT = new Control_Lazy.Lazy(function(f) {
    return Control_Lazy.defer(Control_Monad_State_Trans.lazyStateT)(function() {
        var $103 = Data_Newtype.unwrap(newtypeParserT);
        return function($104) {
            return Control_Monad_Except_Trans.runExceptT($103(f($104)));
        };
    }());
});
var label = function(dictMonad) {
    return function(messagePrefix) {
        return function(p) {
            return Control_Monad_Error_Class.catchError(monadErrorParserT(dictMonad))(p)(function(v) {
                return Control_Monad_Error_Class.throwError(monadThrowParserT(dictMonad))(new ParseError(messagePrefix + v.value0, v.value1));
            });
        };
    };
};
var hoistParserT = mapParserT;
var functorParserT = function(dictFunctor) {
    return Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(dictFunctor));
};
var failWithPosition = function(dictMonad) {
    return function(message) {
        return function(pos) {
            return Control_Monad_Error_Class.throwError(monadThrowParserT(dictMonad))(new ParseError(message, pos));
        };
    };
};
var eqParseError = new Data_Eq.Eq(function(x) {
    return function(y) {
        return x.value0 === y.value0 && Data_Eq.eq(Text_Parsing_Parser_Pos.eqPosition)(x.value1)(y.value1);
    };
});
var ordParseError = new Data_Ord.Ord(function() {
    return eqParseError;
}, function(x) {
    return function(y) {
        var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        if (v instanceof Data_Ordering.LT) return Data_Ordering.LT.value;
        if (v instanceof Data_Ordering.GT) return Data_Ordering.GT.value;
        return Data_Ord.compare(Text_Parsing_Parser_Pos.ordPosition)(x.value1)(y.value1);
    };
});
var consume = function(dictMonad) {
    return Control_Monad_State_Class.modify_(monadStateParserT(dictMonad))(function(v) {
        return new ParseState(v.value0, v.value1, true);
    });
};
var bindParserT = function(dictMonad) {
    return Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
};
var fail = function(dictMonad) {
    return function(message) {
        return Control_Bind.bindFlipped(bindParserT(dictMonad))(failWithPosition(dictMonad)(message))(position(dictMonad));
    };
};
var applyParserT = function(dictMonad) {
    return Control_Monad_Except_Trans.applyExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
};
var semigroupParserT = function(dictMonad) {
    return function(dictSemigroup) {
        return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyParserT(dictMonad))(Data_Semigroup.append(dictSemigroup)));
    };
};
var applicativeParserT = function(dictMonad) {
    return Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
};
var monoidParserT = function(dictMonad) {
    return function(dictMonoid) {
        return new Data_Monoid.Monoid(function() {
            return semigroupParserT(dictMonad)(dictMonoid.Semigroup0());
        }, Control_Applicative.pure(applicativeParserT(dictMonad))(Data_Monoid.mempty(dictMonoid)));
    };
};
var altParserT = function(dictMonad) {
    return new Control_Alt.Alt(function() {
        return functorParserT(dictMonad.Bind1().Apply0().Functor0());
    }, function(p1) {
        return function(p2) {
            return ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function(v) {
                return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p1)))(new ParseState(v.value0, v.value1, false)))(function(v1) {
                    if (v1.value0 instanceof Data_Either.Left && !v1.value1.value2) return Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p2)))(v);
                    return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
                });
            })));
        };
    });
};
var plusParserT = function(dictMonad) {
    return new Control_Plus.Plus(function() {
        return altParserT(dictMonad);
    }, fail(dictMonad)("No alternative"));
};
var alternativeParserT = function(dictMonad) {
    return new Control_Alternative.Alternative(function() {
        return applicativeParserT(dictMonad);
    }, function() {
        return plusParserT(dictMonad);
    });
};
var monadZeroParserT = function(dictMonad) {
    return new Control_MonadZero.MonadZero(function() {
        return alternativeParserT(dictMonad);
    }, function() {
        return monadParserT(dictMonad);
    });
};
var monadPlusParserT = function(dictMonad) {
    return new Control_MonadPlus.MonadPlus(function() {
        return monadZeroParserT(dictMonad);
    });
};
module.exports = {
    ParseError: ParseError,
    parseErrorMessage: parseErrorMessage,
    parseErrorPosition: parseErrorPosition,
    ParseState: ParseState,
    ParserT: ParserT,
    runParser: runParser,
    runParserT: runParserT,
    hoistParserT: hoistParserT,
    mapParserT: mapParserT,
    consume: consume,
    position: position,
    fail: fail,
    failWithPosition: failWithPosition,
    label: label,
    showParseError: showParseError,
    eqParseError: eqParseError,
    ordParseError: ordParseError,
    newtypeParserT: newtypeParserT,
    lazyParserT: lazyParserT,
    semigroupParserT: semigroupParserT,
    monoidParserT: monoidParserT,
    functorParserT: functorParserT,
    applyParserT: applyParserT,
    applicativeParserT: applicativeParserT,
    bindParserT: bindParserT,
    monadParserT: monadParserT,
    monadRecParserT: monadRecParserT,
    monadStateParserT: monadStateParserT,
    monadThrowParserT: monadThrowParserT,
    monadErrorParserT: monadErrorParserT,
    altParserT: altParserT,
    plusParserT: plusParserT,
    alternativeParserT: alternativeParserT,
    monadZeroParserT: monadZeroParserT,
    monadPlusParserT: monadPlusParserT,
    monadTransParserT: monadTransParserT
};
var _c;
$RefreshReg$(_c, "ParserT");

},{"../Control.Alt/index.js":"82RIG","../Control.Alternative/index.js":"bgcOZ","../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Lazy/index.js":"chn7k","../Control.Monad.Error.Class/index.js":"acXO9","../Control.Monad.Except.Trans/index.js":"jlllv","../Control.Monad.State.Class/index.js":"enW6F","../Control.Monad.State.Trans/index.js":"3CUYm","../Control.Monad.Trans.Class/index.js":"9pz5v","../Control.MonadPlus/index.js":"jUJh4","../Control.MonadZero/index.js":"aqmZo","../Control.Plus/index.js":"5lCU5","../Data.Either/index.js":"3WZha","../Data.Eq/index.js":"c3b8F","../Data.Identity/index.js":"3qeSN","../Data.Monoid/index.js":"94fxC","../Data.Newtype/index.js":"czJbt","../Data.Ord/index.js":"f14nh","../Data.Ordering/index.js":"lEtyd","../Data.Semigroup/index.js":"4sNah","../Data.Show/index.js":"b6tNW","../Data.Tuple/index.js":"eOBbM","../Text.Parsing.Parser.Pos/index.js":"5VfPX"}],"jlllv":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var ExceptT = function(x) {
    return x;
};
_c = ExceptT;
var withExceptT = function(dictFunctor) {
    return function(f) {
        return function(v) {
            var mapLeft = function(v1) {
                return function(v2) {
                    if (v2 instanceof Data_Either.Right) return new Data_Either.Right(v2.value0);
                    if (v2 instanceof Data_Either.Left) return new Data_Either.Left(v1(v2.value0));
                    throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 42, column 3 - line 42, column 32): " + [
                        v1.constructor.name,
                        v2.constructor.name
                    ]);
                };
            };
            return ExceptT(Data_Functor.map(dictFunctor)(mapLeft(f))(v));
        };
    };
};
var runExceptT = function(v) {
    return v;
};
var newtypeExceptT = new Data_Newtype.Newtype(function(n) {
    return n;
}, ExceptT);
var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function(dictMonad) {
    return function(m) {
        return Control_Bind.bind(dictMonad.Bind1())(m)(function(a) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
        });
    };
});
var mapExceptT = function(f) {
    return function(v) {
        return f(v);
    };
};
var functorExceptT = function(dictFunctor) {
    return new Data_Functor.Functor(function(f) {
        return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
    });
};
var except = function(dictApplicative) {
    var $88 = Control_Applicative.pure(dictApplicative);
    return function($89) {
        return ExceptT($88($89));
    };
};
var monadExceptT = function(dictMonad) {
    return new Control_Monad.Monad(function() {
        return applicativeExceptT(dictMonad);
    }, function() {
        return bindExceptT(dictMonad);
    });
};
var bindExceptT = function(dictMonad) {
    return new Control_Bind.Bind(function() {
        return applyExceptT(dictMonad);
    }, function(v) {
        return function(k) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function() {
                var $90 = Control_Applicative.pure(dictMonad.Applicative0());
                return function($91) {
                    return $90(Data_Either.Left.create($91));
                };
            }())(function(a) {
                var v1 = k(a);
                return v1;
            }));
        };
    });
};
var applyExceptT = function(dictMonad) {
    return new Control_Apply.Apply(function() {
        return functorExceptT(dictMonad.Bind1().Apply0().Functor0());
    }, Control_Monad.ap(monadExceptT(dictMonad)));
};
var applicativeExceptT = function(dictMonad) {
    return new Control_Applicative.Applicative(function() {
        return applyExceptT(dictMonad);
    }, function() {
        var $92 = Control_Applicative.pure(dictMonad.Applicative0());
        return function($93) {
            return ExceptT($92(Data_Either.Right.create($93)));
        };
    }());
};
var monadAskExceptT = function(dictMonadAsk) {
    return new Control_Monad_Reader_Class.MonadAsk(function() {
        return monadExceptT(dictMonadAsk.Monad0());
    }, Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};
var monadReaderExceptT = function(dictMonadReader) {
    return new Control_Monad_Reader_Class.MonadReader(function() {
        return monadAskExceptT(dictMonadReader.MonadAsk0());
    }, function(f) {
        return mapExceptT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
    });
};
var monadContExceptT = function(dictMonadCont) {
    return new Control_Monad_Cont_Class.MonadCont(function() {
        return monadExceptT(dictMonadCont.Monad0());
    }, function(f) {
        return ExceptT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function(c) {
            var v = f(function(a) {
                return ExceptT(c(new Data_Either.Right(a)));
            });
            return v;
        }));
    });
};
var monadEffectExceptT = function(dictMonadEffect) {
    return new Effect_Class.MonadEffect(function() {
        return monadExceptT(dictMonadEffect.Monad0());
    }, function() {
        var $94 = Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadEffect.Monad0());
        var $95 = Effect_Class.liftEffect(dictMonadEffect);
        return function($96) {
            return $94($95($96));
        };
    }());
};
var monadRecExceptT = function(dictMonadRec) {
    return new Control_Monad_Rec_Class.MonadRec(function() {
        return monadExceptT(dictMonadRec.Monad0());
    }, function(f) {
        var $97 = Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function(a) {
            var v = f(a);
            return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(v)(function(m$prime) {
                return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(function() {
                    if (m$prime instanceof Data_Either.Left) return new Control_Monad_Rec_Class.Done(new Data_Either.Left(m$prime.value0));
                    if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Control_Monad_Rec_Class.Loop) return new Control_Monad_Rec_Class.Loop(m$prime.value0.value0);
                    if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Control_Monad_Rec_Class.Done) return new Control_Monad_Rec_Class.Done(new Data_Either.Right(m$prime.value0.value0));
                    throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 74, column 14 - line 77, column 43): " + [
                        m$prime.constructor.name
                    ]);
                }());
            });
        });
        return function($98) {
            return ExceptT($97($98));
        };
    });
};
var monadStateExceptT = function(dictMonadState) {
    return new Control_Monad_State_Class.MonadState(function() {
        return monadExceptT(dictMonadState.Monad0());
    }, function(f) {
        return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
    });
};
var monadTellExceptT = function(dictMonadTell) {
    return new Control_Monad_Writer_Class.MonadTell(function() {
        return monadExceptT(dictMonadTell.Monad0());
    }, function() {
        var $99 = Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadTell.Monad0());
        var $100 = Control_Monad_Writer_Class.tell(dictMonadTell);
        return function($101) {
            return $99($100($101));
        };
    }());
};
var monadWriterExceptT = function(dictMonadWriter) {
    return new Control_Monad_Writer_Class.MonadWriter(function() {
        return monadTellExceptT(dictMonadWriter.MonadTell0());
    }, mapExceptT(function(m) {
        return Control_Bind.bind(dictMonadWriter.MonadTell0().Monad0().Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function(v) {
            return Control_Applicative.pure(dictMonadWriter.MonadTell0().Monad0().Applicative0())(Data_Functor.map(Data_Either.functorEither)(function(r) {
                return new Data_Tuple.Tuple(r, v.value1);
            })(v.value0));
        });
    }), mapExceptT(function(m) {
        return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(dictMonadWriter.MonadTell0().Monad0().Bind1())(m)(function(a) {
            return Control_Applicative.pure(dictMonadWriter.MonadTell0().Monad0().Applicative0())(function() {
                if (a instanceof Data_Either.Left) return new Data_Tuple.Tuple(new Data_Either.Left(a.value0), Control_Category.identity(Control_Category.categoryFn));
                if (a instanceof Data_Either.Right) return new Data_Tuple.Tuple(new Data_Either.Right(a.value0.value0), a.value0.value1);
                throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 136, column 10 - line 138, column 45): " + [
                    a.constructor.name
                ]);
            }());
        }));
    }));
};
var monadThrowExceptT = function(dictMonad) {
    return new Control_Monad_Error_Class.MonadThrow(function() {
        return monadExceptT(dictMonad);
    }, function() {
        var $102 = Control_Applicative.pure(dictMonad.Applicative0());
        return function($103) {
            return ExceptT($102(Data_Either.Left.create($103)));
        };
    }());
};
var monadErrorExceptT = function(dictMonad) {
    return new Control_Monad_Error_Class.MonadError(function() {
        return monadThrowExceptT(dictMonad);
    }, function(v) {
        return function(k) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function(a) {
                var v1 = k(a);
                return v1;
            })(function() {
                var $104 = Control_Applicative.pure(dictMonad.Applicative0());
                return function($105) {
                    return $104(Data_Either.Right.create($105));
                };
            }()));
        };
    });
};
var altExceptT = function(dictSemigroup) {
    return function(dictMonad) {
        return new Control_Alt.Alt(function() {
            return functorExceptT(dictMonad.Bind1().Apply0().Functor0());
        }, function(v) {
            return function(v1) {
                return Control_Bind.bind(dictMonad.Bind1())(v)(function(rm) {
                    if (rm instanceof Data_Either.Right) return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rm.value0));
                    if (rm instanceof Data_Either.Left) return Control_Bind.bind(dictMonad.Bind1())(v1)(function(rn) {
                        if (rn instanceof Data_Either.Right) return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rn.value0));
                        if (rn instanceof Data_Either.Left) return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(rm.value0)(rn.value0)));
                        throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 86, column 9 - line 88, column 49): " + [
                            rn.constructor.name
                        ]);
                    });
                    throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 82, column 5 - line 88, column 49): " + [
                        rm.constructor.name
                    ]);
                });
            };
        });
    };
};
var plusExceptT = function(dictMonoid) {
    return function(dictMonad) {
        return new Control_Plus.Plus(function() {
            return altExceptT(dictMonoid.Semigroup0())(dictMonad);
        }, Control_Monad_Error_Class.throwError(monadThrowExceptT(dictMonad))(Data_Monoid.mempty(dictMonoid)));
    };
};
var alternativeExceptT = function(dictMonoid) {
    return function(dictMonad) {
        return new Control_Alternative.Alternative(function() {
            return applicativeExceptT(dictMonad);
        }, function() {
            return plusExceptT(dictMonoid)(dictMonad);
        });
    };
};
var monadZeroExceptT = function(dictMonoid) {
    return function(dictMonad) {
        return new Control_MonadZero.MonadZero(function() {
            return alternativeExceptT(dictMonoid)(dictMonad);
        }, function() {
            return monadExceptT(dictMonad);
        });
    };
};
var monadPlusExceptT = function(dictMonoid) {
    return function(dictMonad) {
        return new Control_MonadPlus.MonadPlus(function() {
            return monadZeroExceptT(dictMonoid)(dictMonad);
        });
    };
};
module.exports = {
    ExceptT: ExceptT,
    runExceptT: runExceptT,
    withExceptT: withExceptT,
    mapExceptT: mapExceptT,
    except: except,
    newtypeExceptT: newtypeExceptT,
    functorExceptT: functorExceptT,
    applyExceptT: applyExceptT,
    applicativeExceptT: applicativeExceptT,
    bindExceptT: bindExceptT,
    monadExceptT: monadExceptT,
    monadRecExceptT: monadRecExceptT,
    altExceptT: altExceptT,
    plusExceptT: plusExceptT,
    alternativeExceptT: alternativeExceptT,
    monadPlusExceptT: monadPlusExceptT,
    monadZeroExceptT: monadZeroExceptT,
    monadTransExceptT: monadTransExceptT,
    monadEffectExceptT: monadEffectExceptT,
    monadContExceptT: monadContExceptT,
    monadThrowExceptT: monadThrowExceptT,
    monadErrorExceptT: monadErrorExceptT,
    monadAskExceptT: monadAskExceptT,
    monadReaderExceptT: monadReaderExceptT,
    monadStateExceptT: monadStateExceptT,
    monadTellExceptT: monadTellExceptT,
    monadWriterExceptT: monadWriterExceptT
};
var _c;
$RefreshReg$(_c, "ExceptT");

},{"../Control.Alt/index.js":"82RIG","../Control.Alternative/index.js":"bgcOZ","../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Category/index.js":"dfcPK","../Control.Monad/index.js":"alCn2","../Control.Monad.Cont.Class/index.js":"kWCMf","../Control.Monad.Error.Class/index.js":"acXO9","../Control.Monad.Reader.Class/index.js":"3BEj9","../Control.Monad.Rec.Class/index.js":"dMFG0","../Control.Monad.State.Class/index.js":"enW6F","../Control.Monad.Trans.Class/index.js":"9pz5v","../Control.Monad.Writer.Class/index.js":"6wyz5","../Control.MonadPlus/index.js":"jUJh4","../Control.MonadZero/index.js":"aqmZo","../Control.Plus/index.js":"5lCU5","../Data.Either/index.js":"3WZha","../Data.Functor/index.js":"iy1jO","../Data.Monoid/index.js":"94fxC","../Data.Newtype/index.js":"czJbt","../Data.Semigroup/index.js":"4sNah","../Data.Tuple/index.js":"eOBbM","../Effect.Class/index.js":"53rRA"}],"5VfPX":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_String_Pattern = require("../Data.String.Pattern/index.js");
var Position = function(x) {
    return x;
};
_c = Position;
var updatePosString = function(pos$prime) {
    return function(str) {
        var updatePosChar = function(v) {
            return function(c) {
                if (c === "\x0a") return {
                    line: v.line + 1 | 0,
                    column: 1
                };
                if (c === "\x0d") return {
                    line: v.line + 1 | 0,
                    column: 1
                };
                if (c === "\x09") return {
                    line: v.line,
                    column: (v.column + 8 | 0) - Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v.column - 1 | 0)(8) | 0
                };
                return {
                    line: v.line,
                    column: v.column + 1 | 0
                };
            };
        };
        return Data_Foldable.foldl(Data_Foldable.foldableArray)(updatePosChar)(pos$prime)(Data_String_Common.split(Data_Newtype.wrap(Data_String_Pattern.newtypePattern)(""))(str));
    };
};
var showPosition = new Data_Show.Show(function(v) {
    return "(Position { line: " + (Data_Show.show(Data_Show.showInt)(v.line) + (", column: " + (Data_Show.show(Data_Show.showInt)(v.column) + " })")));
});
var initialPos = {
    line: 1,
    column: 1
};
var eqPosition = new Data_Eq.Eq(function(x) {
    return function(y) {
        return x.column === y.column && x.line === y.line;
    };
});
var ordPosition = new Data_Ord.Ord(function() {
    return eqPosition;
}, function(x) {
    return function(y) {
        var v = Data_Ord.compare(Data_Ord.ordInt)(x.column)(y.column);
        if (v instanceof Data_Ordering.LT) return Data_Ordering.LT.value;
        if (v instanceof Data_Ordering.GT) return Data_Ordering.GT.value;
        return Data_Ord.compare(Data_Ord.ordInt)(x.line)(y.line);
    };
});
module.exports = {
    Position: Position,
    initialPos: initialPos,
    updatePosString: updatePosString,
    showPosition: showPosition,
    eqPosition: eqPosition,
    ordPosition: ordPosition
};
var _c;
$RefreshReg$(_c, "Position");

},{"../Data.Eq/index.js":"c3b8F","../Data.EuclideanRing/index.js":"fTU7A","../Data.Foldable/index.js":"jWmFN","../Data.Newtype/index.js":"czJbt","../Data.Ord/index.js":"f14nh","../Data.Ordering/index.js":"lEtyd","../Data.Show/index.js":"b6tNW","../Data.String.Common/index.js":"kcO4K","../Data.String.Pattern/index.js":"kTxxX"}],"1A15G":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_BigNumber = require("../Data.BigNumber/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Expression = require("../Expression/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var Text_Parsing_Parser_Expr = require("../Text.Parsing.Parser.Expr/index.js");
var Tokenizer = require("../Tokenizer/index.js");
var Utils = require("../Utils/index.js");
var tk = function(dictMonad) {
    return function(token) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function(v) {
            return new Data_Tuple.Tuple(v.value0, v.value1);
        }))(function(v) {
            var v1 = Data_Array.uncons(v.value0);
            if (v1 instanceof Data_Maybe.Just) {
                if (Data_Eq.eq(Tokenizer.eqTokenType)(v1.value0.head)(token)) return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.put(Text_Parsing_Parser.monadStateParserT(dictMonad))(new Text_Parsing_Parser.ParseState(v1.value0.tail, v.value1, true)))(function() {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(token);
                });
                if (Data_Boolean.otherwise) return Text_Parsing_Parser.fail(dictMonad)("Expected '" + (Data_Show.show(Tokenizer.showTokenType)(token) + ("' but instead got '" + (Data_Show.show(Tokenizer.showTokenType)(v1.value0.head) + "'"))));
            }
            if (v1 instanceof Data_Maybe.Nothing) return Text_Parsing_Parser.fail(dictMonad)("Unexpected end");
            throw new Error("Failed pattern match at TokenParser (line 21, column 3 - line 27, column 37): " + [
                v1.constructor.name
            ]);
        });
    };
};
var matchToken = function(dictMonad) {
    return function(predicate) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function(v) {
            return new Data_Tuple.Tuple(v.value0, v.value1);
        }))(function(v) {
            var v1 = Data_Array.uncons(v.value0);
            if (v1 instanceof Data_Maybe.Just) {
                if (predicate(v1.value0.head)) return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.put(Text_Parsing_Parser.monadStateParserT(dictMonad))(new Text_Parsing_Parser.ParseState(v1.value0.tail, v.value1, true)))(function() {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1.value0.head);
                });
                if (Data_Boolean.otherwise) return Text_Parsing_Parser.fail(dictMonad)("Did not expect \"" + (Data_Show.show(Tokenizer.showTokenType)(v1.value0.head) + "\""));
            }
            if (v1 instanceof Data_Maybe.Nothing) return Text_Parsing_Parser.fail(dictMonad)("Unexpected end");
            throw new Error("Failed pattern match at TokenParser (line 32, column 3 - line 38, column 37): " + [
                v1.constructor.name
            ]);
        });
    };
};
var nameParser = function(dictMonad) {
    var name$prime = function(v) {
        if (v instanceof Tokenizer.NameTk) return true;
        return false;
    };
    return Data_Functor.map(Text_Parsing_Parser.functorParserT(dictMonad.Bind1().Apply0().Functor0()))(Data_Show.show(Tokenizer.showTokenType))(matchToken(dictMonad)(name$prime));
};
var tokenExprParser = function() {
    var parenParser = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(tk(Data_Identity.monadIdentity)(new Tokenizer.PunctuationTk(Tokenizer.OpenParen.value)))(function() {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(tokenExprParser)(function(expr) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(tk(Data_Identity.monadIdentity)(new Tokenizer.PunctuationTk(Tokenizer.CloseParen.value)))(function() {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(expr);
            });
        });
    });
    var numberParser = function() {
        var num$prime = function(v) {
            if (v instanceof Tokenizer.NumberTk) return true;
            return false;
        };
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Show.show(Tokenizer.showTokenType))(matchToken(Data_Identity.monadIdentity)(num$prime)))(function(n) {
            var withoutCommas = Data_String_Common.replaceAll(",")("")(n);
            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Expression.Scalar.create(Utils.parseBigNumber(withoutCommas)));
        });
    }();
    var fn2Parser = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(nameParser(Data_Identity.monadIdentity))(function(name) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(tk(Data_Identity.monadIdentity)(new Tokenizer.PunctuationTk(Tokenizer.OpenParen.value)))(function() {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(tokenExprParser)(function(p1) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(tk(Data_Identity.monadIdentity)(new Tokenizer.PunctuationTk(Tokenizer.Comma.value)))(function() {
                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(tokenExprParser)(function(p2) {
                        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(tk(Data_Identity.monadIdentity)(new Tokenizer.PunctuationTk(Tokenizer.CloseParen.value)))(function() {
                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Expression.Fn2({
                                name: name,
                                p1: p1,
                                p2: p2
                            }));
                        });
                    });
                });
            });
        });
    });
    var fn1Parser = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(nameParser(Data_Identity.monadIdentity))(function(name) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(tk(Data_Identity.monadIdentity)(new Tokenizer.PunctuationTk(Tokenizer.OpenParen.value)))(function() {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(tokenExprParser)(function(p1) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(tk(Data_Identity.monadIdentity)(new Tokenizer.PunctuationTk(Tokenizer.CloseParen.value)))(function() {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Expression.Fn1({
                        name: name,
                        p1: p1
                    }));
                });
            });
        });
    });
    var buildFn2 = function(token) {
        return function(p1) {
            return function(p2) {
                return new Expression.Fn2({
                    name: Data_Show.show(Tokenizer.showTokenType)(token),
                    p1: p1,
                    p2: p2
                });
            };
        };
    };
    var bindRootUnitParser = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(tk(Data_Identity.monadIdentity)(new Tokenizer.ReservedTk(Tokenizer.UnitTk.value)))(function(prefix) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(nameParser(Data_Identity.monadIdentity))(function(name) {
            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Expression.BindRootUnit({
                name: name
            }));
        });
    });
    var bindParser = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Maybe.optional(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(tk(Data_Identity.monadIdentity)(new Tokenizer.ReservedTk(Tokenizer.UnitTk.value)))(tk(Data_Identity.monadIdentity)(new Tokenizer.ReservedTk(Tokenizer.PrefixTk.value)))))(function(prefix) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(nameParser(Data_Identity.monadIdentity))(function(name) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(tk(Data_Identity.monadIdentity)(new Tokenizer.PunctuationTk(Tokenizer.Equals.value)))(function() {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(tokenExprParser)(function(expr) {
                    if (prefix instanceof Data_Maybe.Just && prefix.value0 instanceof Tokenizer.ReservedTk && prefix.value0.value0 instanceof Tokenizer.UnitTk) return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Expression.BindUnit({
                        name: name,
                        expr: expr
                    }));
                    if (prefix instanceof Data_Maybe.Just && prefix.value0 instanceof Tokenizer.ReservedTk && prefix.value0.value0 instanceof Tokenizer.PrefixTk) return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Expression.BindPrefix({
                        name: name,
                        expr: expr
                    }));
                    if (prefix instanceof Data_Maybe.Nothing) return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Expression.BindVariable({
                        name: name,
                        expr: expr
                    }));
                    return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Not a bind expression");
                });
            });
        });
    });
    var bindAliasParser = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(tk(Data_Identity.monadIdentity)(new Tokenizer.ReservedTk(Tokenizer.AliasTk.value)))(function(prefix) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(nameParser(Data_Identity.monadIdentity))(function(name) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(tk(Data_Identity.monadIdentity)(new Tokenizer.PunctuationTk(Tokenizer.Equals.value)))(function() {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(nameParser(Data_Identity.monadIdentity))(function(target) {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Expression.BindAlias({
                        name: name,
                        target: target
                    }));
                });
            });
        });
    });
    var exprParserBase = Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(Data_Identity.monadIdentity)(Data_Functor.map(Data_Functor.functorArray)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity))([
        parenParser,
        fn2Parser,
        fn1Parser,
        bindParser,
        bindAliasParser,
        bindRootUnitParser,
        Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Expression.Name.create)(nameParser(Data_Identity.monadIdentity)),
        numberParser
    ]));
    return Text_Parsing_Parser_Expr.buildExprParser(Data_Identity.monadIdentity)([
        [
            new Text_Parsing_Parser_Expr.Infix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(buildFn2)(tk(Data_Identity.monadIdentity)(new Tokenizer.InfixTk("^"))), Text_Parsing_Parser_Expr.AssocLeft.value)
        ],
        [
            function() {
                var buildImplicitMultiplication = function(p1) {
                    return function(v) {
                        if (v instanceof Expression.Scalar && Data_BigNumber.isNegative(v.value0)) return new Expression.Fn2({
                            name: "-",
                            p1: p1,
                            p2: Expression.Scalar.create(Data_Ring.negate(Data_BigNumber.ringBigNumber)(v.value0))
                        });
                        return new Expression.Fn2({
                            name: "*",
                            p1: p1,
                            p2: v
                        });
                    };
                };
                return new Text_Parsing_Parser_Expr.Infix(Data_Functor.voidRight(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(buildImplicitMultiplication)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Unit.unit)), Text_Parsing_Parser_Expr.AssocLeft.value);
            }()
        ],
        [
            new Text_Parsing_Parser_Expr.Infix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(buildFn2)(tk(Data_Identity.monadIdentity)(new Tokenizer.InfixTk("*"))), Text_Parsing_Parser_Expr.AssocLeft.value),
            new Text_Parsing_Parser_Expr.Infix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(buildFn2)(tk(Data_Identity.monadIdentity)(new Tokenizer.InfixTk("/"))), Text_Parsing_Parser_Expr.AssocLeft.value)
        ],
        [
            new Text_Parsing_Parser_Expr.Infix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(buildFn2)(tk(Data_Identity.monadIdentity)(new Tokenizer.InfixTk("+"))), Text_Parsing_Parser_Expr.AssocLeft.value),
            new Text_Parsing_Parser_Expr.Infix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(buildFn2)(tk(Data_Identity.monadIdentity)(new Tokenizer.InfixTk("-"))), Text_Parsing_Parser_Expr.AssocLeft.value)
        ],
        [
            new Text_Parsing_Parser_Expr.Infix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(buildFn2)(tk(Data_Identity.monadIdentity)(new Tokenizer.ReservedTk(Tokenizer.InTk.value))), Text_Parsing_Parser_Expr.AssocLeft.value)
        ]
    ])(exprParserBase);
}();
var eof = function(dictMonad) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function(v) {
        return v.value0;
    }))(function(input) {
        var v = Data_Array.uncons(input);
        if (v instanceof Data_Maybe.Just) return Text_Parsing_Parser.fail(dictMonad)("Expected end but got: " + Data_Show.show(Data_Show.showArray(Tokenizer.showTokenType))(input));
        if (v instanceof Data_Maybe.Nothing) return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit);
        throw new Error("Failed pattern match at TokenParser (line 43, column 3 - line 45, column 25): " + [
            v.constructor.name
        ]);
    });
};
module.exports = {
    tk: tk,
    matchToken: matchToken,
    eof: eof,
    nameParser: nameParser,
    tokenExprParser: tokenExprParser
};

},{"../Control.Alt/index.js":"82RIG","../Control.Applicative/index.js":"dG9TO","../Control.Bind/index.js":"7Sory","../Control.Monad.State.Class/index.js":"enW6F","../Data.Array/index.js":"7x0bj","../Data.BigNumber/index.js":"hlAFq","../Data.Boolean/index.js":"lv1qw","../Data.Eq/index.js":"c3b8F","../Data.Foldable/index.js":"jWmFN","../Data.Functor/index.js":"iy1jO","../Data.Identity/index.js":"3qeSN","../Data.Maybe/index.js":"ePH81","../Data.Ring/index.js":"2x2oG","../Data.Show/index.js":"b6tNW","../Data.String.Common/index.js":"kcO4K","../Data.Tuple/index.js":"eOBbM","../Data.Unit/index.js":"d7oKp","../Expression/index.js":"7zFQn","../Text.Parsing.Parser/index.js":"iVT9M","../Text.Parsing.Parser.Combinators/index.js":"01zG2","../Text.Parsing.Parser.Expr/index.js":"2U321","../Tokenizer/index.js":"gfOwV","../Utils/index.js":"liNIM"}],"01zG2":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var withErrorMessage = function(dictMonad) {
    return function(p) {
        return function(msg) {
            return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Text_Parsing_Parser.fail(dictMonad)("Expected " + msg));
        };
    };
};
var tryRethrow = function(dictMonad) {
    return function(p) {
        return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function(v) {
            return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(v))(function(v1) {
                if (v1.value0 instanceof Data_Either.Left) return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Either.Left(new Text_Parsing_Parser.ParseError(v1.value0.value0.value0, v.value1)), new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
            });
        })));
    };
};
var $$try = function(dictMonad) {
    return function(p) {
        return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function(v) {
            return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(v))(function(v1) {
                if (v1.value0 instanceof Data_Either.Left) return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
            });
        })));
    };
};
var skipMany1 = function(dictMonad) {
    return function(p) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function(x) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(skipMany(dictMonad)(p))(function(xs) {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit);
            });
        });
    };
};
var skipMany = function(dictMonad) {
    return function(p) {
        return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(skipMany1(dictMonad)(p))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit));
    };
};
var sepEndBy1 = function(dictMonad) {
    return function(p) {
        return function(sep) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function(a) {
                return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(sep)(function() {
                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(sepEndBy(dictMonad)(p)(sep))(function(as) {
                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(a, as));
                    });
                }))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List.singleton(a)));
            });
        };
    };
};
var sepEndBy = function(dictMonad) {
    return function(p) {
        return function(sep) {
            return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(sepEndBy1(dictMonad)(p)(sep))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List_Types.Nil.value));
        };
    };
};
var sepBy1 = function(dictMonad) {
    return function(p) {
        return function(sep) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function(a) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(sep)(p)))(function(as) {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(a, as));
                });
            });
        };
    };
};
var sepBy = function(dictMonad) {
    return function(p) {
        return function(sep) {
            return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(sepBy1(dictMonad)(p)(sep))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List_Types.Nil.value));
        };
    };
};
var optional = function(dictMonad) {
    return function(p) {
        return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(dictMonad.Bind1().Apply0().Functor0()))(p))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit));
    };
};
var option = function(dictMonad) {
    return function(a) {
        return function(p) {
            return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
        };
    };
};
var optionMaybe = function(dictMonad) {
    return function(p) {
        return option(dictMonad)(Data_Maybe.Nothing.value)(Data_Functor.map(Text_Parsing_Parser.functorParserT(dictMonad.Bind1().Apply0().Functor0()))(Data_Maybe.Just.create)(p));
    };
};
var notFollowedBy = function(dictMonad) {
    return function(p) {
        return $$try(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))($$try(dictMonad)(p))(Text_Parsing_Parser.fail(dictMonad)("Negated parser succeeded")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit)));
    };
};
var manyTill = function(dictMonad) {
    return function(p) {
        return function(end) {
            var scan = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(dictMonad.Bind1().Apply0().Functor0()))(end)(Data_List_Types.Nil.value))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function(x) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(scan)(function(xs) {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(x, xs));
                });
            }));
            return scan;
        };
    };
};
var many1Till = function(dictMonad) {
    return function(p) {
        return function(end) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function(x) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(manyTill(dictMonad)(p)(end))(function(xs) {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(x, xs));
                });
            });
        };
    };
};
var lookAhead = function(dictMonad) {
    return function(p) {
        return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function(s) {
            return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(s))(function(v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v.value0, s));
            });
        })));
    };
};
var endBy1 = function(dictMonad) {
    return function(p) {
        return function(sep) {
            return Data_List.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(p)(sep));
        };
    };
};
var endBy = function(dictMonad) {
    return function(p) {
        return function(sep) {
            return Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(p)(sep));
        };
    };
};
var choice = function(dictFoldable) {
    return function(dictMonad) {
        return Data_Foldable.foldl(dictFoldable)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad)))(Control_Plus.empty(Text_Parsing_Parser.plusParserT(dictMonad)));
    };
};
var chainr1$prime = function(dictMonad) {
    return function(p) {
        return function(f) {
            return function(a) {
                return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(f)(function(f$prime) {
                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(chainr1(dictMonad)(p)(f))(function(a$prime) {
                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(f$prime(a)(a$prime));
                    });
                }))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
            };
        };
    };
};
var chainr1 = function(dictMonad) {
    return function(p) {
        return function(f) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function(a) {
                return chainr1$prime(dictMonad)(p)(f)(a);
            });
        };
    };
};
var chainr = function(dictMonad) {
    return function(p) {
        return function(f) {
            return function(a) {
                return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(chainr1(dictMonad)(p)(f))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
            };
        };
    };
};
var chainl1$prime = function(dictMonad) {
    return function(p) {
        return function(f) {
            return function(a) {
                return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(f)(function(f$prime) {
                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function(a$prime) {
                        return chainl1$prime(dictMonad)(p)(f)(f$prime(a)(a$prime));
                    });
                }))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
            };
        };
    };
};
var chainl1 = function(dictMonad) {
    return function(p) {
        return function(f) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function(a) {
                return chainl1$prime(dictMonad)(p)(f)(a);
            });
        };
    };
};
var chainl = function(dictMonad) {
    return function(p) {
        return function(f) {
            return function(a) {
                return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(chainl1(dictMonad)(p)(f))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
            };
        };
    };
};
var between = function(dictMonad) {
    return function(open) {
        return function(close) {
            return function(p) {
                return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(open)(p))(close);
            };
        };
    };
};
var asErrorMessage = function(dictMonad) {
    return Data_Function.flip(withErrorMessage(dictMonad));
};
module.exports = {
    withErrorMessage: withErrorMessage,
    asErrorMessage: asErrorMessage,
    between: between,
    option: option,
    optional: optional,
    optionMaybe: optionMaybe,
    "try": $$try,
    tryRethrow: tryRethrow,
    lookAhead: lookAhead,
    sepBy: sepBy,
    sepBy1: sepBy1,
    sepEndBy: sepEndBy,
    sepEndBy1: sepEndBy1,
    endBy1: endBy1,
    endBy: endBy,
    chainr: chainr,
    chainl: chainl,
    chainl1: chainl1,
    "chainl1'": chainl1$prime,
    chainr1: chainr1,
    "chainr1'": chainr1$prime,
    choice: choice,
    skipMany: skipMany,
    skipMany1: skipMany1,
    notFollowedBy: notFollowedBy,
    manyTill: manyTill,
    many1Till: many1Till
};

},{"../Control.Alt/index.js":"82RIG","../Control.Applicative/index.js":"dG9TO","../Control.Apply/index.js":"cnlqg","../Control.Bind/index.js":"7Sory","../Control.Monad.Except.Trans/index.js":"jlllv","../Control.Monad.State.Trans/index.js":"3CUYm","../Control.Plus/index.js":"5lCU5","../Data.Either/index.js":"3WZha","../Data.Foldable/index.js":"jWmFN","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO","../Data.List/index.js":"iZK6y","../Data.List.Types/index.js":"80Bba","../Data.Maybe/index.js":"ePH81","../Data.Newtype/index.js":"czJbt","../Data.Tuple/index.js":"eOBbM","../Data.Unit/index.js":"d7oKp","../Text.Parsing.Parser/index.js":"iVT9M"}],"2U321":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var AssocNone = function() {
    function AssocNone1() {
    }
    AssocNone1.value = new AssocNone1();
    return AssocNone1;
}();
var AssocLeft = function() {
    function AssocLeft1() {
    }
    AssocLeft1.value = new AssocLeft1();
    return AssocLeft1;
}();
var AssocRight = function() {
    function AssocRight1() {
    }
    AssocRight1.value = new AssocRight1();
    return AssocRight1;
}();
var Infix = function() {
    function Infix1(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    }
    Infix1.create = function(value0) {
        return function(value1) {
            return new Infix1(value0, value1);
        };
    };
    return Infix1;
}();
var Prefix = function() {
    function Prefix1(value0) {
        this.value0 = value0;
    }
    Prefix1.create = function(value0) {
        return new Prefix1(value0);
    };
    return Prefix1;
}();
var Postfix = function() {
    function Postfix1(value0) {
        this.value0 = value0;
    }
    Postfix1.create = function(value0) {
        return new Postfix1(value0);
    };
    return Postfix1;
}();
var termP = function(dictMonad) {
    return function(prefixP) {
        return function(term) {
            return function(postfixP) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(prefixP)(function(pre) {
                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(term)(function(x) {
                        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(postfixP)(function(post) {
                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(post(pre(x)));
                        });
                    });
                });
            };
        };
    };
};
var splitOp = function(v) {
    return function(accum) {
        if (v instanceof Infix && v.value1 instanceof AssocNone) return {
            rassoc: accum.rassoc,
            lassoc: accum.lassoc,
            nassoc: new Data_List_Types.Cons(v.value0, accum.nassoc),
            prefix: accum.prefix,
            postfix: accum.postfix
        };
        if (v instanceof Infix && v.value1 instanceof AssocLeft) return {
            rassoc: accum.rassoc,
            lassoc: new Data_List_Types.Cons(v.value0, accum.lassoc),
            nassoc: accum.nassoc,
            prefix: accum.prefix,
            postfix: accum.postfix
        };
        if (v instanceof Infix && v.value1 instanceof AssocRight) return {
            rassoc: new Data_List_Types.Cons(v.value0, accum.rassoc),
            lassoc: accum.lassoc,
            nassoc: accum.nassoc,
            prefix: accum.prefix,
            postfix: accum.postfix
        };
        if (v instanceof Prefix) return {
            rassoc: accum.rassoc,
            lassoc: accum.lassoc,
            nassoc: accum.nassoc,
            prefix: new Data_List_Types.Cons(v.value0, accum.prefix),
            postfix: accum.postfix
        };
        if (v instanceof Postfix) return {
            rassoc: accum.rassoc,
            lassoc: accum.lassoc,
            nassoc: accum.nassoc,
            prefix: accum.prefix,
            postfix: new Data_List_Types.Cons(v.value0, accum.postfix)
        };
        throw new Error("Failed pattern match at Text.Parsing.Parser.Expr (line 69, column 1 - line 69, column 80): " + [
            v.constructor.name,
            accum.constructor.name
        ]);
    };
};
var rassocP1 = function(dictMonad) {
    return function(x) {
        return function(rassocOp) {
            return function(prefixP) {
                return function(term) {
                    return function(postfixP) {
                        return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(rassocP(dictMonad)(x)(rassocOp)(prefixP)(term)(postfixP))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(x));
                    };
                };
            };
        };
    };
};
var rassocP = function(dictMonad) {
    return function(x) {
        return function(rassocOp) {
            return function(prefixP) {
                return function(term) {
                    return function(postfixP) {
                        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(rassocOp)(function(f) {
                            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function(z) {
                                return rassocP1(dictMonad)(z)(rassocOp)(prefixP)(term)(postfixP);
                            }))(function(y) {
                                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(f(x)(y));
                            });
                        });
                    };
                };
            };
        };
    };
};
var nassocP = function(dictMonad) {
    return function(x) {
        return function(nassocOp) {
            return function(prefixP) {
                return function(term) {
                    return function(postfixP) {
                        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(nassocOp)(function(f) {
                            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function(y) {
                                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(f(x)(y));
                            });
                        });
                    };
                };
            };
        };
    };
};
var lassocP1 = function(dictMonad) {
    return function(x) {
        return function(lassocOp) {
            return function(prefixP) {
                return function(term) {
                    return function(postfixP) {
                        return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(lassocP(dictMonad)(x)(lassocOp)(prefixP)(term)(postfixP))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(x));
                    };
                };
            };
        };
    };
};
var lassocP = function(dictMonad) {
    return function(x) {
        return function(lassocOp) {
            return function(prefixP) {
                return function(term) {
                    return function(postfixP) {
                        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(lassocOp)(function(f) {
                            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function(y) {
                                return lassocP1(dictMonad)(f(x)(y))(lassocOp)(prefixP)(term)(postfixP);
                            });
                        });
                    };
                };
            };
        };
    };
};
var makeParser = function(dictMonad) {
    return function(term) {
        return function(ops) {
            var accum = Data_Foldable.foldr(Data_Foldable.foldableArray)(splitOp)({
                rassoc: Data_List_Types.Nil.value,
                lassoc: Data_List_Types.Nil.value,
                nassoc: Data_List_Types.Nil.value,
                prefix: Data_List_Types.Nil.value,
                postfix: Data_List_Types.Nil.value
            })(ops);
            var lassocOp = Text_Parsing_Parser_Combinators.choice(Data_List_Types.foldableList)(dictMonad)(accum.lassoc);
            var nassocOp = Text_Parsing_Parser_Combinators.choice(Data_List_Types.foldableList)(dictMonad)(accum.nassoc);
            var postfixOp = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.choice(Data_List_Types.foldableList)(dictMonad)(accum.postfix))("");
            var postfixP = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(postfixOp)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Control_Category.identity(Control_Category.categoryFn)));
            var prefixOp = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.choice(Data_List_Types.foldableList)(dictMonad)(accum.prefix))("");
            var prefixP = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(prefixOp)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Control_Category.identity(Control_Category.categoryFn)));
            var rassocOp = Text_Parsing_Parser_Combinators.choice(Data_List_Types.foldableList)(dictMonad)(accum.rassoc);
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function(x) {
                return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(rassocP(dictMonad)(x)(rassocOp)(prefixP)(term)(postfixP))(lassocP(dictMonad)(x)(lassocOp)(prefixP)(term)(postfixP)))(nassocP(dictMonad)(x)(nassocOp)(prefixP)(term)(postfixP)))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(x)))("operator");
            });
        };
    };
};
var buildExprParser = function(dictMonad) {
    return function(operators) {
        return function(simpleExpr) {
            return Data_Foldable.foldl(Data_Foldable.foldableArray)(makeParser(dictMonad))(simpleExpr)(operators);
        };
    };
};
module.exports = {
    AssocNone: AssocNone,
    AssocLeft: AssocLeft,
    AssocRight: AssocRight,
    Infix: Infix,
    Prefix: Prefix,
    Postfix: Postfix,
    buildExprParser: buildExprParser
};

},{"../Control.Alt/index.js":"82RIG","../Control.Applicative/index.js":"dG9TO","../Control.Bind/index.js":"7Sory","../Control.Category/index.js":"dfcPK","../Data.Foldable/index.js":"jWmFN","../Data.List.Types/index.js":"80Bba","../Text.Parsing.Parser/index.js":"iVT9M","../Text.Parsing.Parser.Combinators/index.js":"01zG2"}],"gfOwV":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Char_Unicode = require("../Data.Char.Unicode/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Expression = require("../Expression/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var UnitTk = function() {
    function UnitTk1() {
    }
    UnitTk1.value = new UnitTk1();
    return UnitTk1;
}();
var AliasTk = function() {
    function AliasTk1() {
    }
    AliasTk1.value = new AliasTk1();
    return AliasTk1;
}();
var PrefixTk = function() {
    function PrefixTk1() {
    }
    PrefixTk1.value = new PrefixTk1();
    return PrefixTk1;
}();
var InTk = function() {
    function InTk1() {
    }
    InTk1.value = new InTk1();
    return InTk1;
}();
var OpenParen = function() {
    function OpenParen1() {
    }
    OpenParen1.value = new OpenParen1();
    return OpenParen1;
}();
var CloseParen = function() {
    function CloseParen1() {
    }
    CloseParen1.value = new CloseParen1();
    return CloseParen1;
}();
var Comma = function() {
    function Comma1() {
    }
    Comma1.value = new Comma1();
    return Comma1;
}();
var Equals = function() {
    function Equals1() {
    }
    Equals1.value = new Equals1();
    return Equals1;
}();
var WhitespaceTk = function() {
    function WhitespaceTk1(value0) {
        this.value0 = value0;
    }
    WhitespaceTk1.create = function(value0) {
        return new WhitespaceTk1(value0);
    };
    return WhitespaceTk1;
}();
var NewlineTk = function() {
    function NewlineTk1() {
    }
    NewlineTk1.value = new NewlineTk1();
    return NewlineTk1;
}();
var PunctuationTk = function() {
    function PunctuationTk1(value0) {
        this.value0 = value0;
    }
    PunctuationTk1.create = function(value0) {
        return new PunctuationTk1(value0);
    };
    return PunctuationTk1;
}();
var BaseLiteralTk = function() {
    function BaseLiteralTk1(value0) {
        this.value0 = value0;
    }
    BaseLiteralTk1.create = function(value0) {
        return new BaseLiteralTk1(value0);
    };
    return BaseLiteralTk1;
}();
var NumberTk = function() {
    function NumberTk1(value0) {
        this.value0 = value0;
    }
    NumberTk1.create = function(value0) {
        return new NumberTk1(value0);
    };
    return NumberTk1;
}();
var InfixTk = function() {
    function InfixTk1(value0) {
        this.value0 = value0;
    }
    InfixTk1.create = function(value0) {
        return new InfixTk1(value0);
    };
    return InfixTk1;
}();
var ReservedTk = function() {
    function ReservedTk1(value0) {
        this.value0 = value0;
    }
    ReservedTk1.create = function(value0) {
        return new ReservedTk1(value0);
    };
    return ReservedTk1;
}();
var NameTk = function() {
    function NameTk1(value0) {
        this.value0 = value0;
    }
    NameTk1.create = function(value0) {
        return new NameTk1(value0);
    };
    return NameTk1;
}();
var CommentTk = function() {
    function CommentTk1(value0) {
        this.value0 = value0;
    }
    CommentTk1.create = function(value0) {
        return new CommentTk1(value0);
    };
    return CommentTk1;
}();
var UnknownTk = function() {
    function UnknownTk1(value0) {
        this.value0 = value0;
    }
    UnknownTk1.create = function(value0) {
        return new UnknownTk1(value0);
    };
    return UnknownTk1;
}();
var tokenStreamParser = function() {
    var some = function(p) {
        return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_CodeUnits.fromCharArray)(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(p));
    };
    var unknown = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(UnknownTk.create)(some(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(function() {
        var $77 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
        return function($78) {
            return $77(Data_Char_Unicode.isSpace($78));
        };
    }())));
    var optional = function(p) {
        return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(p))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(""));
    };
    var oneOfChar = function(cs) {
        return Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(function(c) {
            return Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqChar)(c)(cs);
        });
    };
    var punctuation = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(oneOfChar([
        "(",
        ")",
        ",",
        "="
    ]))(function(c) {
        if (c === "(") return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new PunctuationTk(OpenParen.value));
        if (c === ")") return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new PunctuationTk(CloseParen.value));
        if (c === ",") return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new PunctuationTk(Comma.value));
        if (c === "=") return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new PunctuationTk(Equals.value));
        return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Unknown punctuation");
    });
    var whitespace = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(WhitespaceTk.create)(some(oneOfChar([
        " ",
        "\x09"
    ])));
    var newline = Data_Functor.voidRight(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(NewlineTk.value)(oneOfChar([
        "\x0a"
    ]));
    var many = function(p) {
        return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_CodeUnits.fromCharArray)(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(p));
    };
    var name = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(Data_Char_Unicode.isAlpha))(oneOfChar([
        "_",
        "\"",
        "'"
    ])))(function(head) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(many(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(Data_Char_Unicode.isAlphaNum))(oneOfChar([
            "_",
            "\"",
            "'"
        ]))))(function(body) {
            var s = Data_String_CodeUnits.singleton(head) + body;
            if (s === "unit") return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new ReservedTk(UnitTk.value));
            if (s === "alias") return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new ReservedTk(AliasTk.value));
            if (s === "prefix") return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new ReservedTk(PrefixTk.value));
            if (s === "in") return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new ReservedTk(InTk.value));
            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new NameTk(s));
        });
    });
    var number = function() {
        var withoutCommas = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(optional(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("-")))(function(prefix) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(many(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(Data_Char_Unicode.isDigit)))(function(preDecimal) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(optional(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(".")))(function(dot) {
                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(many(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(Data_Char_Unicode.isDigit)))(function(postDecimal) {
                        var $29 = (Data_String_CodePoints.length(preDecimal) + Data_String_CodePoints.length(postDecimal) | 0) === 0;
                        if ($29) return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Invalid number '" + (prefix + (dot + "'")));
                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(prefix + (preDecimal + (dot + postDecimal)));
                    });
                });
            });
        });
        var withCommas = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(optional(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("-")))(function(prefix) {
            var digitP = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_CodeUnits.singleton)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(Data_Char_Unicode.isDigit));
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(Data_Identity.monadIdentity)(Data_Functor.map(Data_Functor.functorArray)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity))([
                Data_Semigroup.append(Text_Parsing_Parser.semigroupParserT(Data_Identity.monadIdentity)(Data_Semigroup.semigroupString))(digitP)(Data_Semigroup.append(Text_Parsing_Parser.semigroupParserT(Data_Identity.monadIdentity)(Data_Semigroup.semigroupString))(digitP)(digitP)),
                Data_Semigroup.append(Text_Parsing_Parser.semigroupParserT(Data_Identity.monadIdentity)(Data_Semigroup.semigroupString))(digitP)(digitP),
                digitP
            ])))(function(headGroup) {
                var groupP = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(","))(function(comma) {
                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Semigroup.append(Text_Parsing_Parser.semigroupParserT(Data_Identity.monadIdentity)(Data_Semigroup.semigroupString))(digitP)(Data_Semigroup.append(Text_Parsing_Parser.semigroupParserT(Data_Identity.monadIdentity)(Data_Semigroup.semigroupString))(digitP)(digitP)))(function(body) {
                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(comma + body);
                    });
                });
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_Common.joinWith(""))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(groupP)))(function(tailGroups) {
                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(optional(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("."))(function(dot) {
                        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(many(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(Data_Char_Unicode.isDigit)))(function(decimal) {
                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(dot + decimal);
                        });
                    })))(function(postDecimal) {
                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(prefix + (headGroup + (tailGroups + postDecimal)));
                    });
                });
            });
        });
        var sci = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(optional(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("-")))(function(prefix) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(many(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(Data_Char_Unicode.isDigit)))(function(preDecimal) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(optional(Data_Semigroup.append(Text_Parsing_Parser.semigroupParserT(Data_Identity.monadIdentity)(Data_Semigroup.semigroupString))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("."))(some(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(Data_Char_Unicode.isDigit)))))(function(postDecimal) {
                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_CodeUnits.singleton)(oneOfChar([
                        "e",
                        "E"
                    ])))(function(e$prime) {
                        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(optional(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_CodeUnits.singleton)(oneOfChar([
                            "+",
                            "-"
                        ]))))(function(sign) {
                            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(some(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(Data_Char_Unicode.isDigit)))(function(value) {
                                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(e$prime + (sign + value));
                            });
                        });
                    }))(function(e) {
                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(prefix + (preDecimal + (postDecimal + e)));
                    });
                });
            });
        });
        return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(NumberTk.create)(Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(Data_Identity.monadIdentity)(Data_Functor.map(Data_Functor.functorArray)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity))([
            sci,
            withCommas,
            withoutCommas
        ])));
    }();
    var infixP = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(InfixTk.create)(Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(Data_Identity.monadIdentity)(Data_Functor.map(Data_Functor.functorArray)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(Expression.infixNames)));
    var numberOrInfix = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(number))(infixP);
    var comment = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("#"))(function(start) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(many(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(Data_Eq.notEq(Data_Eq.eqChar)("\x0a"))))(function(body) {
            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(CommentTk.create(start + body));
        });
    });
    var baseLiteral = function() {
        var oct = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("0o"))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("0O")))(function(prefix) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(many(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(Data_Char_Unicode.isOctDigit)))(function(body) {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(prefix + body);
            });
        });
        var hex = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("0x"))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("0X")))(function(prefix) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(many(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(Data_Char_Unicode.isHexDigit)))(function(body) {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(prefix + body);
            });
        });
        var bin = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("0b"))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("0B")))(function(prefix) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(many(oneOfChar([
                "0",
                "1"
            ])))(function(body) {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(prefix + body);
            });
        });
        return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BaseLiteralTk.create)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(hex)(oct))(bin));
    }();
    var parser = Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Data_Foldable.oneOf(Data_Foldable.foldableArray)(Text_Parsing_Parser.plusParserT(Data_Identity.monadIdentity))([
        whitespace,
        newline,
        punctuation,
        baseLiteral,
        numberOrInfix,
        name,
        comment,
        unknown
    ]));
    return parser;
}();
var tokenize = function(s) {
    return Text_Parsing_Parser.runParser(s)(tokenStreamParser);
};
var showTokenType = new Data_Show.Show(function(v) {
    if (v instanceof WhitespaceTk) return v.value0;
    if (v instanceof NewlineTk) return "\x0a";
    if (v instanceof PunctuationTk && v.value0 instanceof OpenParen) return "(";
    if (v instanceof PunctuationTk && v.value0 instanceof CloseParen) return ")";
    if (v instanceof PunctuationTk && v.value0 instanceof Comma) return ",";
    if (v instanceof PunctuationTk && v.value0 instanceof Equals) return "=";
    if (v instanceof BaseLiteralTk) return v.value0;
    if (v instanceof NumberTk) return v.value0;
    if (v instanceof InfixTk) return v.value0;
    if (v instanceof ReservedTk && v.value0 instanceof UnitTk) return "unit";
    if (v instanceof ReservedTk && v.value0 instanceof AliasTk) return "alias";
    if (v instanceof ReservedTk && v.value0 instanceof PrefixTk) return "prefix";
    if (v instanceof ReservedTk && v.value0 instanceof InTk) return "in";
    if (v instanceof NameTk) return v.value0;
    if (v instanceof CommentTk) return v.value0;
    if (v instanceof UnknownTk) return v.value0;
    throw new Error("Failed pattern match at Tokenizer (line 34, column 1 - line 50, column 25): " + [
        v.constructor.name
    ]);
});
var removeWhitespaceAndComments = function() {
    var f = function(v) {
        if (v instanceof WhitespaceTk) return false;
        if (v instanceof CommentTk) return false;
        return true;
    };
    return Data_Array.filter(f);
}();
var eqReservedWord = new Data_Eq.Eq(function(x) {
    return function(y) {
        if (x instanceof UnitTk && y instanceof UnitTk) return true;
        if (x instanceof AliasTk && y instanceof AliasTk) return true;
        if (x instanceof PrefixTk && y instanceof PrefixTk) return true;
        if (x instanceof InTk && y instanceof InTk) return true;
        return false;
    };
});
var eqPunctuation = new Data_Eq.Eq(function(x) {
    return function(y) {
        if (x instanceof OpenParen && y instanceof OpenParen) return true;
        if (x instanceof CloseParen && y instanceof CloseParen) return true;
        if (x instanceof Comma && y instanceof Comma) return true;
        if (x instanceof Equals && y instanceof Equals) return true;
        return false;
    };
});
var eqTokenType = new Data_Eq.Eq(function(x) {
    return function(y) {
        if (x instanceof WhitespaceTk && y instanceof WhitespaceTk) return x.value0 === y.value0;
        if (x instanceof NewlineTk && y instanceof NewlineTk) return true;
        if (x instanceof PunctuationTk && y instanceof PunctuationTk) return Data_Eq.eq(eqPunctuation)(x.value0)(y.value0);
        if (x instanceof BaseLiteralTk && y instanceof BaseLiteralTk) return x.value0 === y.value0;
        if (x instanceof NumberTk && y instanceof NumberTk) return x.value0 === y.value0;
        if (x instanceof InfixTk && y instanceof InfixTk) return x.value0 === y.value0;
        if (x instanceof ReservedTk && y instanceof ReservedTk) return Data_Eq.eq(eqReservedWord)(x.value0)(y.value0);
        if (x instanceof NameTk && y instanceof NameTk) return x.value0 === y.value0;
        if (x instanceof CommentTk && y instanceof CommentTk) return x.value0 === y.value0;
        if (x instanceof UnknownTk && y instanceof UnknownTk) return x.value0 === y.value0;
        return false;
    };
});
var lines = function(input) {
    var rec = function($copy_acc) {
        return function($copy_current) {
            return function($copy_input$prime) {
                var $tco_var_acc = $copy_acc;
                var $tco_var_current = $copy_current;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(acc, current, input$prime) {
                    var v = Data_Array.uncons(input$prime);
                    if (v instanceof Data_Maybe.Nothing) {
                        if (Data_Eq.eq(Data_Eq.eqArray(eqTokenType))(current)([])) {
                            $tco_done = true;
                            return acc;
                        }
                        if (Data_Boolean.otherwise) {
                            $tco_done = true;
                            return Data_Semigroup.append(Data_Semigroup.semigroupArray)(acc)([
                                current
                            ]);
                        }
                    }
                    if (v instanceof Data_Maybe.Just) {
                        if (Data_Eq.eq(eqTokenType)(v.value0.head)(NewlineTk.value)) {
                            $tco_var_acc = Data_Semigroup.append(Data_Semigroup.semigroupArray)(acc)([
                                current
                            ]);
                            $tco_var_current = [];
                            $copy_input$prime = v.value0.tail;
                            return;
                        }
                        if (Data_Boolean.otherwise) {
                            $tco_var_acc = acc;
                            $tco_var_current = Data_Semigroup.append(Data_Semigroup.semigroupArray)(current)([
                                v.value0.head
                            ]);
                            $copy_input$prime = v.value0.tail;
                            return;
                        }
                    }
                    throw new Error("Failed pattern match at Tokenizer (line 206, column 28 - line 212, column 56): " + [
                        v.constructor.name
                    ]);
                }
                while(!$tco_done)$tco_result = $tco_loop($tco_var_acc, $tco_var_current, $copy_input$prime);
                return $tco_result;
            };
        };
    };
    return rec([])([])(input);
};
module.exports = {
    WhitespaceTk: WhitespaceTk,
    NewlineTk: NewlineTk,
    PunctuationTk: PunctuationTk,
    BaseLiteralTk: BaseLiteralTk,
    NumberTk: NumberTk,
    InfixTk: InfixTk,
    ReservedTk: ReservedTk,
    NameTk: NameTk,
    CommentTk: CommentTk,
    UnknownTk: UnknownTk,
    OpenParen: OpenParen,
    CloseParen: CloseParen,
    Comma: Comma,
    Equals: Equals,
    UnitTk: UnitTk,
    AliasTk: AliasTk,
    PrefixTk: PrefixTk,
    InTk: InTk,
    tokenStreamParser: tokenStreamParser,
    tokenize: tokenize,
    lines: lines,
    removeWhitespaceAndComments: removeWhitespaceAndComments,
    eqTokenType: eqTokenType,
    showTokenType: showTokenType,
    eqPunctuation: eqPunctuation,
    eqReservedWord: eqReservedWord
};

},{"../Control.Alt/index.js":"82RIG","../Control.Applicative/index.js":"dG9TO","../Control.Bind/index.js":"7Sory","../Data.Array/index.js":"7x0bj","../Data.Boolean/index.js":"lv1qw","../Data.Char.Unicode/index.js":"jRPwT","../Data.Eq/index.js":"c3b8F","../Data.Foldable/index.js":"jWmFN","../Data.Functor/index.js":"iy1jO","../Data.HeytingAlgebra/index.js":"8Mx0E","../Data.Identity/index.js":"3qeSN","../Data.Maybe/index.js":"ePH81","../Data.Semigroup/index.js":"4sNah","../Data.Show/index.js":"b6tNW","../Data.String.CodePoints/index.js":"3r2hK","../Data.String.CodeUnits/index.js":"8wheW","../Data.String.Common/index.js":"kcO4K","../Expression/index.js":"7zFQn","../Text.Parsing.Parser/index.js":"iVT9M","../Text.Parsing.Parser.Combinators/index.js":"01zG2","../Text.Parsing.Parser.String/index.js":"kbX0D"}],"jRPwT":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Char = require("../Data.Char/index.js");
var Data_Char_Unicode_Internal = require("../Data.Char.Unicode.Internal/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var UppercaseLetter = function() {
    function UppercaseLetter1() {
    }
    UppercaseLetter1.value = new UppercaseLetter1();
    return UppercaseLetter1;
}();
var LowercaseLetter = function() {
    function LowercaseLetter1() {
    }
    LowercaseLetter1.value = new LowercaseLetter1();
    return LowercaseLetter1;
}();
var TitlecaseLetter = function() {
    function TitlecaseLetter1() {
    }
    TitlecaseLetter1.value = new TitlecaseLetter1();
    return TitlecaseLetter1;
}();
var ModifierLetter = function() {
    function ModifierLetter1() {
    }
    ModifierLetter1.value = new ModifierLetter1();
    return ModifierLetter1;
}();
var OtherLetter = function() {
    function OtherLetter1() {
    }
    OtherLetter1.value = new OtherLetter1();
    return OtherLetter1;
}();
var NonSpacingMark = function() {
    function NonSpacingMark1() {
    }
    NonSpacingMark1.value = new NonSpacingMark1();
    return NonSpacingMark1;
}();
var SpacingCombiningMark = function() {
    function SpacingCombiningMark1() {
    }
    SpacingCombiningMark1.value = new SpacingCombiningMark1();
    return SpacingCombiningMark1;
}();
var EnclosingMark = function() {
    function EnclosingMark1() {
    }
    EnclosingMark1.value = new EnclosingMark1();
    return EnclosingMark1;
}();
var DecimalNumber = function() {
    function DecimalNumber1() {
    }
    DecimalNumber1.value = new DecimalNumber1();
    return DecimalNumber1;
}();
var LetterNumber = function() {
    function LetterNumber1() {
    }
    LetterNumber1.value = new LetterNumber1();
    return LetterNumber1;
}();
var OtherNumber = function() {
    function OtherNumber1() {
    }
    OtherNumber1.value = new OtherNumber1();
    return OtherNumber1;
}();
var ConnectorPunctuation = function() {
    function ConnectorPunctuation1() {
    }
    ConnectorPunctuation1.value = new ConnectorPunctuation1();
    return ConnectorPunctuation1;
}();
var DashPunctuation = function() {
    function DashPunctuation1() {
    }
    DashPunctuation1.value = new DashPunctuation1();
    return DashPunctuation1;
}();
var OpenPunctuation = function() {
    function OpenPunctuation1() {
    }
    OpenPunctuation1.value = new OpenPunctuation1();
    return OpenPunctuation1;
}();
var ClosePunctuation = function() {
    function ClosePunctuation1() {
    }
    ClosePunctuation1.value = new ClosePunctuation1();
    return ClosePunctuation1;
}();
var InitialQuote = function() {
    function InitialQuote1() {
    }
    InitialQuote1.value = new InitialQuote1();
    return InitialQuote1;
}();
var FinalQuote = function() {
    function FinalQuote1() {
    }
    FinalQuote1.value = new FinalQuote1();
    return FinalQuote1;
}();
var OtherPunctuation = function() {
    function OtherPunctuation1() {
    }
    OtherPunctuation1.value = new OtherPunctuation1();
    return OtherPunctuation1;
}();
var MathSymbol = function() {
    function MathSymbol1() {
    }
    MathSymbol1.value = new MathSymbol1();
    return MathSymbol1;
}();
var CurrencySymbol = function() {
    function CurrencySymbol1() {
    }
    CurrencySymbol1.value = new CurrencySymbol1();
    return CurrencySymbol1;
}();
var ModifierSymbol = function() {
    function ModifierSymbol1() {
    }
    ModifierSymbol1.value = new ModifierSymbol1();
    return ModifierSymbol1;
}();
var OtherSymbol = function() {
    function OtherSymbol1() {
    }
    OtherSymbol1.value = new OtherSymbol1();
    return OtherSymbol1;
}();
var Space = function() {
    function Space1() {
    }
    Space1.value = new Space1();
    return Space1;
}();
var LineSeparator = function() {
    function LineSeparator1() {
    }
    LineSeparator1.value = new LineSeparator1();
    return LineSeparator1;
}();
var ParagraphSeparator = function() {
    function ParagraphSeparator1() {
    }
    ParagraphSeparator1.value = new ParagraphSeparator1();
    return ParagraphSeparator1;
}();
var Control = function() {
    function Control1() {
    }
    Control1.value = new Control1();
    return Control1;
}();
var Format = function() {
    function Format1() {
    }
    Format1.value = new Format1();
    return Format1;
}();
var Surrogate = function() {
    function Surrogate1() {
    }
    Surrogate1.value = new Surrogate1();
    return Surrogate1;
}();
var PrivateUse = function() {
    function PrivateUse1() {
    }
    PrivateUse1.value = new PrivateUse1();
    return PrivateUse1;
}();
var NotAssigned = function() {
    function NotAssigned1() {
    }
    NotAssigned1.value = new NotAssigned1();
    return NotAssigned1;
}();
var unicodeCatToGeneralCat = function(v) {
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_LU) return UppercaseLetter.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_LL) return LowercaseLetter.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_LT) return TitlecaseLetter.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_LM) return ModifierLetter.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_LO) return OtherLetter.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_MN) return NonSpacingMark.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_MC) return SpacingCombiningMark.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_ME) return EnclosingMark.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_ND) return DecimalNumber.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_NL) return LetterNumber.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_NO) return OtherNumber.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PC) return ConnectorPunctuation.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PD) return DashPunctuation.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PS) return OpenPunctuation.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PE) return ClosePunctuation.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PI) return InitialQuote.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PF) return FinalQuote.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PO) return OtherPunctuation.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_SM) return MathSymbol.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_SC) return CurrencySymbol.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_SK) return ModifierSymbol.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_SO) return OtherSymbol.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_ZS) return Space.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_ZL) return LineSeparator.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_ZP) return ParagraphSeparator.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_CC) return Control.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_CF) return Format.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_CS) return Surrogate.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_CO) return PrivateUse.value;
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_CN) return NotAssigned.value;
    throw new Error("Failed pattern match at Data.Char.Unicode (line 192, column 1 - line 192, column 61): " + [
        v.constructor.name
    ]);
};
var toUpper = $foreign.withCharCode(Data_Char_Unicode_Internal.uTowupper);
var toTitle = $foreign.withCharCode(Data_Char_Unicode_Internal.uTowtitle);
var toLower = $foreign.withCharCode(Data_Char_Unicode_Internal.uTowlower);
var showGeneralCategory = new Data_Show.Show(function(v) {
    if (v instanceof UppercaseLetter) return "UppercaseLetter";
    if (v instanceof LowercaseLetter) return "LowercaseLetter";
    if (v instanceof TitlecaseLetter) return "TitlecaseLetter";
    if (v instanceof ModifierLetter) return "ModifierLetter";
    if (v instanceof OtherLetter) return "OtherLetter";
    if (v instanceof NonSpacingMark) return "NonSpacingMark";
    if (v instanceof SpacingCombiningMark) return "SpacingCombiningMark";
    if (v instanceof EnclosingMark) return "EnclosingMark";
    if (v instanceof DecimalNumber) return "DecimalNumber";
    if (v instanceof LetterNumber) return "LetterNumber";
    if (v instanceof OtherNumber) return "OtherNumber";
    if (v instanceof ConnectorPunctuation) return "ConnectorPunctuation";
    if (v instanceof DashPunctuation) return "DashPunctuation";
    if (v instanceof OpenPunctuation) return "OpenPunctuation";
    if (v instanceof ClosePunctuation) return "ClosePunctuation";
    if (v instanceof InitialQuote) return "InitialQuote";
    if (v instanceof FinalQuote) return "FinalQuote";
    if (v instanceof OtherPunctuation) return "OtherPunctuation";
    if (v instanceof MathSymbol) return "MathSymbol";
    if (v instanceof CurrencySymbol) return "CurrencySymbol";
    if (v instanceof ModifierSymbol) return "ModifierSymbol";
    if (v instanceof OtherSymbol) return "OtherSymbol";
    if (v instanceof Space) return "Space";
    if (v instanceof LineSeparator) return "LineSeparator";
    if (v instanceof ParagraphSeparator) return "ParagraphSeparator";
    if (v instanceof Control) return "Control";
    if (v instanceof Format) return "Format";
    if (v instanceof Surrogate) return "Surrogate";
    if (v instanceof PrivateUse) return "PrivateUse";
    if (v instanceof NotAssigned) return "NotAssigned";
    throw new Error("Failed pattern match at Data.Char.Unicode (line 224, column 1 - line 254, column 37): " + [
        v.constructor.name
    ]);
});
var isUpper = function($50) {
    return Data_Char_Unicode_Internal.uIswupper(Data_Char.toCharCode($50));
};
var isSpace = function(c) {
    var uc = Data_Char.toCharCode(c);
    var $14 = uc <= 823;
    if ($14) return uc === 32 || uc >= 9 && uc <= 13 || uc === 160;
    return Data_Char_Unicode_Internal.uIswspace(Data_Char.toCharCode(c));
};
var isPrint = function($51) {
    return Data_Char_Unicode_Internal.uIswprint(Data_Char.toCharCode($51));
};
var isOctDigit = function(c) {
    var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("0") | 0;
    return diff <= 7 && diff >= 0;
};
var isLower = function($52) {
    return Data_Char_Unicode_Internal.uIswlower(Data_Char.toCharCode($52));
};
var isLatin1 = function(c) {
    return c <= "\xff";
};
var isDigit = function(c) {
    var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("0") | 0;
    return diff <= 9 && diff >= 0;
};
var isHexDigit = function(c) {
    return isDigit(c) || (function() {
        var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("A") | 0;
        return diff <= 5 && diff >= 0;
    })() || (function() {
        var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("a") | 0;
        return diff <= 5 && diff >= 0;
    })();
};
var isControl = function($53) {
    return Data_Char_Unicode_Internal.uIswcntrl(Data_Char.toCharCode($53));
};
var isAsciiUpper = function(c) {
    return c >= "A" && c <= "Z";
};
var isAsciiLower = function(c) {
    return c >= "a" && c <= "z";
};
var isAscii = function(c) {
    return c < "\x80";
};
var isAlphaNum = function($54) {
    return Data_Char_Unicode_Internal.uIswalnum(Data_Char.toCharCode($54));
};
var isAlpha = function($55) {
    return Data_Char_Unicode_Internal.uIswalpha(Data_Char.toCharCode($55));
};
var generalCategory = function() {
    var $56 = Data_Functor.map(Data_Maybe.functorMaybe)(unicodeCatToGeneralCat);
    return function($57) {
        return $56(Data_Char_Unicode_Internal.uGencat(Data_Char.toCharCode($57)));
    };
}();
var isLetter = function(c) {
    var v = generalCategory(c);
    if (v instanceof Data_Maybe.Just && v.value0 instanceof UppercaseLetter) return true;
    if (v instanceof Data_Maybe.Just && v.value0 instanceof LowercaseLetter) return true;
    if (v instanceof Data_Maybe.Just && v.value0 instanceof TitlecaseLetter) return true;
    if (v instanceof Data_Maybe.Just && v.value0 instanceof ModifierLetter) return true;
    if (v instanceof Data_Maybe.Just && v.value0 instanceof OtherLetter) return true;
    return false;
};
var isMark = function(c) {
    var v = generalCategory(c);
    if (v instanceof Data_Maybe.Just && v.value0 instanceof NonSpacingMark) return true;
    if (v instanceof Data_Maybe.Just && v.value0 instanceof SpacingCombiningMark) return true;
    if (v instanceof Data_Maybe.Just && v.value0 instanceof EnclosingMark) return true;
    return false;
};
var isNumber = function(c) {
    var v = generalCategory(c);
    if (v instanceof Data_Maybe.Just && v.value0 instanceof DecimalNumber) return true;
    if (v instanceof Data_Maybe.Just && v.value0 instanceof LetterNumber) return true;
    if (v instanceof Data_Maybe.Just && v.value0 instanceof OtherNumber) return true;
    return false;
};
var isPunctuation = function(c) {
    var v = generalCategory(c);
    if (v instanceof Data_Maybe.Just && v.value0 instanceof ConnectorPunctuation) return true;
    if (v instanceof Data_Maybe.Just && v.value0 instanceof DashPunctuation) return true;
    if (v instanceof Data_Maybe.Just && v.value0 instanceof OpenPunctuation) return true;
    if (v instanceof Data_Maybe.Just && v.value0 instanceof ClosePunctuation) return true;
    if (v instanceof Data_Maybe.Just && v.value0 instanceof InitialQuote) return true;
    if (v instanceof Data_Maybe.Just && v.value0 instanceof FinalQuote) return true;
    if (v instanceof Data_Maybe.Just && v.value0 instanceof OtherPunctuation) return true;
    return false;
};
var isSeparator = function(c) {
    var v = generalCategory(c);
    if (v instanceof Data_Maybe.Just && v.value0 instanceof Space) return true;
    if (v instanceof Data_Maybe.Just && v.value0 instanceof LineSeparator) return true;
    if (v instanceof Data_Maybe.Just && v.value0 instanceof ParagraphSeparator) return true;
    return false;
};
var isSymbol = function(c) {
    var v = generalCategory(c);
    if (v instanceof Data_Maybe.Just && v.value0 instanceof MathSymbol) return true;
    if (v instanceof Data_Maybe.Just && v.value0 instanceof CurrencySymbol) return true;
    if (v instanceof Data_Maybe.Just && v.value0 instanceof ModifierSymbol) return true;
    if (v instanceof Data_Maybe.Just && v.value0 instanceof OtherSymbol) return true;
    return false;
};
var generalCatToUnicodeCat = function(v) {
    if (v instanceof UppercaseLetter) return Data_Char_Unicode_Internal.NUMCAT_LU.value;
    if (v instanceof LowercaseLetter) return Data_Char_Unicode_Internal.NUMCAT_LL.value;
    if (v instanceof TitlecaseLetter) return Data_Char_Unicode_Internal.NUMCAT_LT.value;
    if (v instanceof ModifierLetter) return Data_Char_Unicode_Internal.NUMCAT_LM.value;
    if (v instanceof OtherLetter) return Data_Char_Unicode_Internal.NUMCAT_LO.value;
    if (v instanceof NonSpacingMark) return Data_Char_Unicode_Internal.NUMCAT_MN.value;
    if (v instanceof SpacingCombiningMark) return Data_Char_Unicode_Internal.NUMCAT_MC.value;
    if (v instanceof EnclosingMark) return Data_Char_Unicode_Internal.NUMCAT_ME.value;
    if (v instanceof DecimalNumber) return Data_Char_Unicode_Internal.NUMCAT_ND.value;
    if (v instanceof LetterNumber) return Data_Char_Unicode_Internal.NUMCAT_NL.value;
    if (v instanceof OtherNumber) return Data_Char_Unicode_Internal.NUMCAT_NO.value;
    if (v instanceof ConnectorPunctuation) return Data_Char_Unicode_Internal.NUMCAT_PC.value;
    if (v instanceof DashPunctuation) return Data_Char_Unicode_Internal.NUMCAT_PD.value;
    if (v instanceof OpenPunctuation) return Data_Char_Unicode_Internal.NUMCAT_PS.value;
    if (v instanceof ClosePunctuation) return Data_Char_Unicode_Internal.NUMCAT_PE.value;
    if (v instanceof InitialQuote) return Data_Char_Unicode_Internal.NUMCAT_PI.value;
    if (v instanceof FinalQuote) return Data_Char_Unicode_Internal.NUMCAT_PF.value;
    if (v instanceof OtherPunctuation) return Data_Char_Unicode_Internal.NUMCAT_PO.value;
    if (v instanceof MathSymbol) return Data_Char_Unicode_Internal.NUMCAT_SM.value;
    if (v instanceof CurrencySymbol) return Data_Char_Unicode_Internal.NUMCAT_SC.value;
    if (v instanceof ModifierSymbol) return Data_Char_Unicode_Internal.NUMCAT_SK.value;
    if (v instanceof OtherSymbol) return Data_Char_Unicode_Internal.NUMCAT_SO.value;
    if (v instanceof Space) return Data_Char_Unicode_Internal.NUMCAT_ZS.value;
    if (v instanceof LineSeparator) return Data_Char_Unicode_Internal.NUMCAT_ZL.value;
    if (v instanceof ParagraphSeparator) return Data_Char_Unicode_Internal.NUMCAT_ZP.value;
    if (v instanceof Control) return Data_Char_Unicode_Internal.NUMCAT_CC.value;
    if (v instanceof Format) return Data_Char_Unicode_Internal.NUMCAT_CF.value;
    if (v instanceof Surrogate) return Data_Char_Unicode_Internal.NUMCAT_CS.value;
    if (v instanceof PrivateUse) return Data_Char_Unicode_Internal.NUMCAT_CO.value;
    if (v instanceof NotAssigned) return Data_Char_Unicode_Internal.NUMCAT_CN.value;
    throw new Error("Failed pattern match at Data.Char.Unicode (line 160, column 1 - line 160, column 61): " + [
        v.constructor.name
    ]);
};
var generalCatToInt = function(v) {
    if (v instanceof UppercaseLetter) return 1;
    if (v instanceof LowercaseLetter) return 2;
    if (v instanceof TitlecaseLetter) return 3;
    if (v instanceof ModifierLetter) return 4;
    if (v instanceof OtherLetter) return 5;
    if (v instanceof NonSpacingMark) return 6;
    if (v instanceof SpacingCombiningMark) return 7;
    if (v instanceof EnclosingMark) return 8;
    if (v instanceof DecimalNumber) return 9;
    if (v instanceof LetterNumber) return 10;
    if (v instanceof OtherNumber) return 11;
    if (v instanceof ConnectorPunctuation) return 12;
    if (v instanceof DashPunctuation) return 13;
    if (v instanceof OpenPunctuation) return 14;
    if (v instanceof ClosePunctuation) return 15;
    if (v instanceof InitialQuote) return 16;
    if (v instanceof FinalQuote) return 17;
    if (v instanceof OtherPunctuation) return 18;
    if (v instanceof MathSymbol) return 19;
    if (v instanceof CurrencySymbol) return 20;
    if (v instanceof ModifierSymbol) return 21;
    if (v instanceof OtherSymbol) return 22;
    if (v instanceof Space) return 23;
    if (v instanceof LineSeparator) return 24;
    if (v instanceof ParagraphSeparator) return 25;
    if (v instanceof Control) return 26;
    if (v instanceof Format) return 27;
    if (v instanceof Surrogate) return 28;
    if (v instanceof PrivateUse) return 29;
    if (v instanceof NotAssigned) return 30;
    throw new Error("Failed pattern match at Data.Char.Unicode (line 128, column 1 - line 128, column 42): " + [
        v.constructor.name
    ]);
};
var eqGeneralCategory = new Data_Eq.Eq(function(v) {
    return function(v1) {
        if (v instanceof UppercaseLetter && v1 instanceof UppercaseLetter) return true;
        if (v instanceof LowercaseLetter && v1 instanceof LowercaseLetter) return true;
        if (v instanceof TitlecaseLetter && v1 instanceof TitlecaseLetter) return true;
        if (v instanceof ModifierLetter && v1 instanceof ModifierLetter) return true;
        if (v instanceof OtherLetter && v1 instanceof OtherLetter) return true;
        if (v instanceof NonSpacingMark && v1 instanceof NonSpacingMark) return true;
        if (v instanceof SpacingCombiningMark && v1 instanceof SpacingCombiningMark) return true;
        if (v instanceof EnclosingMark && v1 instanceof EnclosingMark) return true;
        if (v instanceof DecimalNumber && v1 instanceof DecimalNumber) return true;
        if (v instanceof LetterNumber && v1 instanceof LetterNumber) return true;
        if (v instanceof OtherNumber && v1 instanceof OtherNumber) return true;
        if (v instanceof ConnectorPunctuation && v1 instanceof ConnectorPunctuation) return true;
        if (v instanceof DashPunctuation && v1 instanceof DashPunctuation) return true;
        if (v instanceof OpenPunctuation && v1 instanceof OpenPunctuation) return true;
        if (v instanceof ClosePunctuation && v1 instanceof ClosePunctuation) return true;
        if (v instanceof InitialQuote && v1 instanceof InitialQuote) return true;
        if (v instanceof FinalQuote && v1 instanceof FinalQuote) return true;
        if (v instanceof OtherPunctuation && v1 instanceof OtherPunctuation) return true;
        if (v instanceof MathSymbol && v1 instanceof MathSymbol) return true;
        if (v instanceof CurrencySymbol && v1 instanceof CurrencySymbol) return true;
        if (v instanceof ModifierSymbol && v1 instanceof ModifierSymbol) return true;
        if (v instanceof OtherSymbol && v1 instanceof OtherSymbol) return true;
        if (v instanceof Space && v1 instanceof Space) return true;
        if (v instanceof LineSeparator && v1 instanceof LineSeparator) return true;
        if (v instanceof ParagraphSeparator && v1 instanceof ParagraphSeparator) return true;
        if (v instanceof Control && v1 instanceof Control) return true;
        if (v instanceof Format && v1 instanceof Format) return true;
        if (v instanceof Surrogate && v1 instanceof Surrogate) return true;
        if (v instanceof PrivateUse && v1 instanceof PrivateUse) return true;
        if (v instanceof NotAssigned && v1 instanceof NotAssigned) return true;
        return false;
    };
});
var ordGeneralCategory = new Data_Ord.Ord(function() {
    return eqGeneralCategory;
}, function(catA) {
    return function(catB) {
        return Data_Ord.compare(Data_Ord.ordInt)(generalCatToInt(catA))(generalCatToInt(catB));
    };
});
var digitToInt = function(c) {
    var hexUpper = Data_Char.toCharCode(c) - Data_Char.toCharCode("A") | 0;
    var hexLower = Data_Char.toCharCode(c) - Data_Char.toCharCode("a") | 0;
    var dec = Data_Char.toCharCode(c) - Data_Char.toCharCode("0") | 0;
    var result = function() {
        if (dec <= 9 && dec >= 0) return new Data_Maybe.Just(dec);
        if (hexLower <= 5 && hexLower >= 0) return Data_Maybe.Just.create(hexLower + 10 | 0);
        if (hexUpper <= 5 && hexUpper >= 0) return Data_Maybe.Just.create(hexUpper + 10 | 0);
        if (Data_Boolean.otherwise) return Data_Maybe.Nothing.value;
        throw new Error("Failed pattern match at Data.Char.Unicode (line 547, column 5 - line 547, column 24): ");
    }();
    return result;
};
var boundedGeneralCategory = new Data_Bounded.Bounded(function() {
    return ordGeneralCategory;
}, UppercaseLetter.value, NotAssigned.value);
module.exports = {
    isAscii: isAscii,
    isAsciiLower: isAsciiLower,
    isAsciiUpper: isAsciiUpper,
    isLatin1: isLatin1,
    isLower: isLower,
    isUpper: isUpper,
    isAlpha: isAlpha,
    isAlphaNum: isAlphaNum,
    isLetter: isLetter,
    isDigit: isDigit,
    isOctDigit: isOctDigit,
    isHexDigit: isHexDigit,
    isControl: isControl,
    isPrint: isPrint,
    isSpace: isSpace,
    isSymbol: isSymbol,
    isSeparator: isSeparator,
    isPunctuation: isPunctuation,
    isMark: isMark,
    isNumber: isNumber,
    digitToInt: digitToInt,
    toLower: toLower,
    toUpper: toUpper,
    toTitle: toTitle,
    UppercaseLetter: UppercaseLetter,
    LowercaseLetter: LowercaseLetter,
    TitlecaseLetter: TitlecaseLetter,
    ModifierLetter: ModifierLetter,
    OtherLetter: OtherLetter,
    NonSpacingMark: NonSpacingMark,
    SpacingCombiningMark: SpacingCombiningMark,
    EnclosingMark: EnclosingMark,
    DecimalNumber: DecimalNumber,
    LetterNumber: LetterNumber,
    OtherNumber: OtherNumber,
    ConnectorPunctuation: ConnectorPunctuation,
    DashPunctuation: DashPunctuation,
    OpenPunctuation: OpenPunctuation,
    ClosePunctuation: ClosePunctuation,
    InitialQuote: InitialQuote,
    FinalQuote: FinalQuote,
    OtherPunctuation: OtherPunctuation,
    MathSymbol: MathSymbol,
    CurrencySymbol: CurrencySymbol,
    ModifierSymbol: ModifierSymbol,
    OtherSymbol: OtherSymbol,
    Space: Space,
    LineSeparator: LineSeparator,
    ParagraphSeparator: ParagraphSeparator,
    Control: Control,
    Format: Format,
    Surrogate: Surrogate,
    PrivateUse: PrivateUse,
    NotAssigned: NotAssigned,
    unicodeCatToGeneralCat: unicodeCatToGeneralCat,
    generalCatToInt: generalCatToInt,
    generalCatToUnicodeCat: generalCatToUnicodeCat,
    generalCategory: generalCategory,
    showGeneralCategory: showGeneralCategory,
    eqGeneralCategory: eqGeneralCategory,
    ordGeneralCategory: ordGeneralCategory,
    boundedGeneralCategory: boundedGeneralCategory
};

},{"./foreign.js":"lgKHF","../Data.Boolean/index.js":"lv1qw","../Data.Bounded/index.js":"jzt4h","../Data.Char/index.js":"eEC5C","../Data.Char.Unicode.Internal/index.js":"h6lM5","../Data.Eq/index.js":"c3b8F","../Data.Functor/index.js":"iy1jO","../Data.Maybe/index.js":"ePH81","../Data.Ord/index.js":"f14nh","../Data.Show/index.js":"b6tNW"}],"lgKHF":[function(require,module,exports) {
exports.withCharCode = function(f) {
    return function(c) {
        return String.fromCharCode(f(c.charCodeAt()));
    };
};

},{}],"eEC5C":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Enum = require("../Data.Enum/index.js");
var toCharCode = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
var fromCharCode = Data_Enum.toEnum(Data_Enum.boundedEnumChar);
module.exports = {
    toCharCode: toCharCode,
    fromCharCode: fromCharCode
};

},{"../Data.Enum/index.js":"1zIX3"}],"h6lM5":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var NUMCAT_LU = function() {
    function NUMCAT_LU1() {
    }
    NUMCAT_LU1.value = new NUMCAT_LU1();
    return NUMCAT_LU1;
}();
var NUMCAT_LL = function() {
    function NUMCAT_LL1() {
    }
    NUMCAT_LL1.value = new NUMCAT_LL1();
    return NUMCAT_LL1;
}();
var NUMCAT_LT = function() {
    function NUMCAT_LT1() {
    }
    NUMCAT_LT1.value = new NUMCAT_LT1();
    return NUMCAT_LT1;
}();
var NUMCAT_LM = function() {
    function NUMCAT_LM1() {
    }
    NUMCAT_LM1.value = new NUMCAT_LM1();
    return NUMCAT_LM1;
}();
var NUMCAT_LO = function() {
    function NUMCAT_LO1() {
    }
    NUMCAT_LO1.value = new NUMCAT_LO1();
    return NUMCAT_LO1;
}();
var NUMCAT_MN = function() {
    function NUMCAT_MN1() {
    }
    NUMCAT_MN1.value = new NUMCAT_MN1();
    return NUMCAT_MN1;
}();
var NUMCAT_MC = function() {
    function NUMCAT_MC1() {
    }
    NUMCAT_MC1.value = new NUMCAT_MC1();
    return NUMCAT_MC1;
}();
var NUMCAT_ME = function() {
    function NUMCAT_ME1() {
    }
    NUMCAT_ME1.value = new NUMCAT_ME1();
    return NUMCAT_ME1;
}();
var NUMCAT_ND = function() {
    function NUMCAT_ND1() {
    }
    NUMCAT_ND1.value = new NUMCAT_ND1();
    return NUMCAT_ND1;
}();
var NUMCAT_NL = function() {
    function NUMCAT_NL1() {
    }
    NUMCAT_NL1.value = new NUMCAT_NL1();
    return NUMCAT_NL1;
}();
var NUMCAT_NO = function() {
    function NUMCAT_NO1() {
    }
    NUMCAT_NO1.value = new NUMCAT_NO1();
    return NUMCAT_NO1;
}();
var NUMCAT_PC = function() {
    function NUMCAT_PC1() {
    }
    NUMCAT_PC1.value = new NUMCAT_PC1();
    return NUMCAT_PC1;
}();
var NUMCAT_PD = function() {
    function NUMCAT_PD1() {
    }
    NUMCAT_PD1.value = new NUMCAT_PD1();
    return NUMCAT_PD1;
}();
var NUMCAT_PS = function() {
    function NUMCAT_PS1() {
    }
    NUMCAT_PS1.value = new NUMCAT_PS1();
    return NUMCAT_PS1;
}();
var NUMCAT_PE = function() {
    function NUMCAT_PE1() {
    }
    NUMCAT_PE1.value = new NUMCAT_PE1();
    return NUMCAT_PE1;
}();
var NUMCAT_PI = function() {
    function NUMCAT_PI1() {
    }
    NUMCAT_PI1.value = new NUMCAT_PI1();
    return NUMCAT_PI1;
}();
var NUMCAT_PF = function() {
    function NUMCAT_PF1() {
    }
    NUMCAT_PF1.value = new NUMCAT_PF1();
    return NUMCAT_PF1;
}();
var NUMCAT_PO = function() {
    function NUMCAT_PO1() {
    }
    NUMCAT_PO1.value = new NUMCAT_PO1();
    return NUMCAT_PO1;
}();
var NUMCAT_SM = function() {
    function NUMCAT_SM1() {
    }
    NUMCAT_SM1.value = new NUMCAT_SM1();
    return NUMCAT_SM1;
}();
var NUMCAT_SC = function() {
    function NUMCAT_SC1() {
    }
    NUMCAT_SC1.value = new NUMCAT_SC1();
    return NUMCAT_SC1;
}();
var NUMCAT_SK = function() {
    function NUMCAT_SK1() {
    }
    NUMCAT_SK1.value = new NUMCAT_SK1();
    return NUMCAT_SK1;
}();
var NUMCAT_SO = function() {
    function NUMCAT_SO1() {
    }
    NUMCAT_SO1.value = new NUMCAT_SO1();
    return NUMCAT_SO1;
}();
var NUMCAT_ZS = function() {
    function NUMCAT_ZS1() {
    }
    NUMCAT_ZS1.value = new NUMCAT_ZS1();
    return NUMCAT_ZS1;
}();
var NUMCAT_ZL = function() {
    function NUMCAT_ZL1() {
    }
    NUMCAT_ZL1.value = new NUMCAT_ZL1();
    return NUMCAT_ZL1;
}();
var NUMCAT_ZP = function() {
    function NUMCAT_ZP1() {
    }
    NUMCAT_ZP1.value = new NUMCAT_ZP1();
    return NUMCAT_ZP1;
}();
var NUMCAT_CC = function() {
    function NUMCAT_CC1() {
    }
    NUMCAT_CC1.value = new NUMCAT_CC1();
    return NUMCAT_CC1;
}();
var NUMCAT_CF = function() {
    function NUMCAT_CF1() {
    }
    NUMCAT_CF1.value = new NUMCAT_CF1();
    return NUMCAT_CF1;
}();
var NUMCAT_CS = function() {
    function NUMCAT_CS1() {
    }
    NUMCAT_CS1.value = new NUMCAT_CS1();
    return NUMCAT_CS1;
}();
var NUMCAT_CO = function() {
    function NUMCAT_CO1() {
    }
    NUMCAT_CO1.value = new NUMCAT_CO1();
    return NUMCAT_CO1;
}();
var NUMCAT_CN = function() {
    function NUMCAT_CN1() {
    }
    NUMCAT_CN1.value = new NUMCAT_CN1();
    return NUMCAT_CN1;
}();
var ConversionRule = function(x) {
    return x;
};
_c = ConversionRule;
var CharBlock = function(x) {
    return x;
};
_c1 = CharBlock;
var showUnicodeCategory = new Data_Show.Show(function(v) {
    if (v instanceof NUMCAT_LU) return "NUMCAT_LU";
    if (v instanceof NUMCAT_LL) return "NUMCAT_LL";
    if (v instanceof NUMCAT_LT) return "NUMCAT_LT";
    if (v instanceof NUMCAT_LM) return "NUMCAT_LM";
    if (v instanceof NUMCAT_LO) return "NUMCAT_LO";
    if (v instanceof NUMCAT_MN) return "NUMCAT_MN";
    if (v instanceof NUMCAT_MC) return "NUMCAT_MC";
    if (v instanceof NUMCAT_ME) return "NUMCAT_ME";
    if (v instanceof NUMCAT_ND) return "NUMCAT_ND";
    if (v instanceof NUMCAT_NL) return "NUMCAT_NL";
    if (v instanceof NUMCAT_NO) return "NUMCAT_NO";
    if (v instanceof NUMCAT_PC) return "NUMCAT_PC";
    if (v instanceof NUMCAT_PD) return "NUMCAT_PD";
    if (v instanceof NUMCAT_PS) return "NUMCAT_PS";
    if (v instanceof NUMCAT_PE) return "NUMCAT_PE";
    if (v instanceof NUMCAT_PI) return "NUMCAT_PI";
    if (v instanceof NUMCAT_PF) return "NUMCAT_PF";
    if (v instanceof NUMCAT_PO) return "NUMCAT_PO";
    if (v instanceof NUMCAT_SM) return "NUMCAT_SM";
    if (v instanceof NUMCAT_SC) return "NUMCAT_SC";
    if (v instanceof NUMCAT_SK) return "NUMCAT_SK";
    if (v instanceof NUMCAT_SO) return "NUMCAT_SO";
    if (v instanceof NUMCAT_ZS) return "NUMCAT_ZS";
    if (v instanceof NUMCAT_ZL) return "NUMCAT_ZL";
    if (v instanceof NUMCAT_ZP) return "NUMCAT_ZP";
    if (v instanceof NUMCAT_CC) return "NUMCAT_CC";
    if (v instanceof NUMCAT_CF) return "NUMCAT_CF";
    if (v instanceof NUMCAT_CS) return "NUMCAT_CS";
    if (v instanceof NUMCAT_CO) return "NUMCAT_CO";
    if (v instanceof NUMCAT_CN) return "NUMCAT_CN";
    throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 49, column 1 - line 79, column 33): " + [
        v.constructor.name
    ]);
});
var showConversionRule = new Data_Show.Show(function(v) {
    return "ConversionRule { category: " + (Data_Show.show(Data_Show.showInt)(v.category) + (", unicodeCat: " + (Data_Show.show(showUnicodeCategory)(v.unicodeCat) + (", possible: " + (Data_Show.show(Data_Show.showInt)(v.possible) + (", updist: " + (Data_Show.show(Data_Show.showInt)(v.updist) + (", lowdist: " + (Data_Show.show(Data_Show.showInt)(v.lowdist) + (", titledist: " + (Data_Show.show(Data_Show.showInt)(v.titledist) + " }")))))))))));
});
var showCharBlock = new Data_Show.Show(function(v) {
    return "CharBlock { start: " + (Data_Show.show(Data_Show.showInt)(v.start) + (", length: " + (Data_Show.show(Data_Show.showInt)(v.length) + (", convRule: " + (Data_Show.show(showConversionRule)(v.convRule) + " }")))));
});
var numSpaceBlocks = 8;
var numRules = 167;
var numLat1Blocks = 63;
var numConvBlocks = 1230;
var numBlocks = 2783;
var maxUniChar = 1114109;
var gencatZS = 2;
var rule1 = {
    category: gencatZS,
    unicodeCat: NUMCAT_ZS.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var spacechars = [
    {
        start: 32,
        length: 1,
        convRule: rule1
    },
    {
        start: 160,
        length: 1,
        convRule: rule1
    },
    {
        start: 5760,
        length: 1,
        convRule: rule1
    },
    {
        start: 6158,
        length: 1,
        convRule: rule1
    },
    {
        start: 8192,
        length: 11,
        convRule: rule1
    },
    {
        start: 8239,
        length: 1,
        convRule: rule1
    },
    {
        start: 8287,
        length: 1,
        convRule: rule1
    },
    {
        start: 12288,
        length: 1,
        convRule: rule1
    }
];
var gencatZP = 67108864;
var rule140 = {
    category: gencatZP,
    unicodeCat: NUMCAT_ZP.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatZL = 33554432;
var rule139 = {
    category: gencatZL,
    unicodeCat: NUMCAT_ZL.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatSO = 8192;
var rule13 = {
    category: gencatSO,
    unicodeCat: NUMCAT_SO.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var rule148 = {
    category: gencatSO,
    unicodeCat: NUMCAT_SO.value,
    possible: 1,
    updist: 0,
    lowdist: 26,
    titledist: 0
};
var rule149 = {
    category: gencatSO,
    unicodeCat: NUMCAT_SO.value,
    possible: 1,
    updist: -26,
    lowdist: 0,
    titledist: -26
};
var gencatSM = 64;
var rule6 = {
    category: gencatSM,
    unicodeCat: NUMCAT_SM.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatSK = 1024;
var rule10 = {
    category: gencatSK,
    unicodeCat: NUMCAT_SK.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatSC = 8;
var rule3 = {
    category: gencatSC,
    unicodeCat: NUMCAT_SC.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatPS = 16;
var rule4 = {
    category: gencatPS,
    unicodeCat: NUMCAT_PS.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatPO = 4;
var rule2 = {
    category: gencatPO,
    unicodeCat: NUMCAT_PO.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatPI = 16384;
var rule15 = {
    category: gencatPI,
    unicodeCat: NUMCAT_PI.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatPF = 131072;
var rule19 = {
    category: gencatPF,
    unicodeCat: NUMCAT_PF.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatPE = 32;
var rule5 = {
    category: gencatPE,
    unicodeCat: NUMCAT_PE.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatPD = 128;
var rule7 = {
    category: gencatPD,
    unicodeCat: NUMCAT_PD.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatPC = 2048;
var rule11 = {
    category: gencatPC,
    unicodeCat: NUMCAT_PC.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatNO = 65536;
var rule17 = {
    category: gencatNO,
    unicodeCat: NUMCAT_NO.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatNL = 16777216;
var rule116 = {
    category: gencatNL,
    unicodeCat: NUMCAT_NL.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var rule146 = {
    category: gencatNL,
    unicodeCat: NUMCAT_NL.value,
    possible: 1,
    updist: 0,
    lowdist: 16,
    titledist: 0
};
var rule147 = {
    category: gencatNL,
    unicodeCat: NUMCAT_NL.value,
    possible: 1,
    updist: -16,
    lowdist: 0,
    titledist: -16
};
var gencatND = 256;
var rule8 = {
    category: gencatND,
    unicodeCat: NUMCAT_ND.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatMN = 2097152;
var rule84 = {
    category: gencatMN,
    unicodeCat: NUMCAT_MN.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var rule85 = {
    category: gencatMN,
    unicodeCat: NUMCAT_MN.value,
    possible: 1,
    updist: 84,
    lowdist: 0,
    titledist: 84
};
var gencatME = 4194304;
var rule109 = {
    category: gencatME,
    unicodeCat: NUMCAT_ME.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatMC = 8388608;
var rule114 = {
    category: gencatMC,
    unicodeCat: NUMCAT_MC.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatLU = 512;
var nullrule = {
    category: gencatLU,
    unicodeCat: NUMCAT_CN.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var rule105 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -60,
    titledist: 0
};
var rule107 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -7,
    titledist: 0
};
var rule108 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 80,
    titledist: 0
};
var rule110 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 15,
    titledist: 0
};
var rule112 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 48,
    titledist: 0
};
var rule115 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 7264,
    titledist: 0
};
var rule120 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -7615,
    titledist: 0
};
var rule122 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -8,
    titledist: 0
};
var rule131 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -74,
    titledist: 0
};
var rule134 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -86,
    titledist: 0
};
var rule135 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -100,
    titledist: 0
};
var rule136 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -112,
    titledist: 0
};
var rule137 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -128,
    titledist: 0
};
var rule138 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -126,
    titledist: 0
};
var rule141 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -7517,
    titledist: 0
};
var rule142 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -8383,
    titledist: 0
};
var rule143 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -8262,
    titledist: 0
};
var rule144 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 28,
    titledist: 0
};
var rule150 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10743,
    titledist: 0
};
var rule151 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -3814,
    titledist: 0
};
var rule152 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10727,
    titledist: 0
};
var rule155 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10780,
    titledist: 0
};
var rule156 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10749,
    titledist: 0
};
var rule157 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10783,
    titledist: 0
};
var rule158 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10782,
    titledist: 0
};
var rule159 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10815,
    titledist: 0
};
var rule161 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -35332,
    titledist: 0
};
var rule162 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -42280,
    titledist: 0
};
var rule165 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 40,
    titledist: 0
};
var rule21 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 1,
    titledist: 0
};
var rule23 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -199,
    titledist: 0
};
var rule25 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -121,
    titledist: 0
};
var rule28 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 210,
    titledist: 0
};
var rule29 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 206,
    titledist: 0
};
var rule30 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 205,
    titledist: 0
};
var rule31 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 79,
    titledist: 0
};
var rule32 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 202,
    titledist: 0
};
var rule33 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 203,
    titledist: 0
};
var rule34 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 207,
    titledist: 0
};
var rule36 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 211,
    titledist: 0
};
var rule37 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 209,
    titledist: 0
};
var rule39 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 213,
    titledist: 0
};
var rule41 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 214,
    titledist: 0
};
var rule42 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 218,
    titledist: 0
};
var rule43 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 217,
    titledist: 0
};
var rule44 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 219,
    titledist: 0
};
var rule47 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 2,
    titledist: 1
};
var rule51 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -97,
    titledist: 0
};
var rule52 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -56,
    titledist: 0
};
var rule53 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -130,
    titledist: 0
};
var rule54 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 10795,
    titledist: 0
};
var rule55 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -163,
    titledist: 0
};
var rule56 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 10792,
    titledist: 0
};
var rule58 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -195,
    titledist: 0
};
var rule59 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 69,
    titledist: 0
};
var rule60 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 71,
    titledist: 0
};
var rule86 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 38,
    titledist: 0
};
var rule87 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 37,
    titledist: 0
};
var rule88 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 64,
    titledist: 0
};
var rule89 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 63,
    titledist: 0
};
var rule9 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 32,
    titledist: 0
};
var rule95 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 8,
    titledist: 0
};
var rule98 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatLT = 524288;
var rule129 = {
    category: gencatLT,
    unicodeCat: NUMCAT_LT.value,
    possible: 1,
    updist: 0,
    lowdist: -8,
    titledist: 0
};
var rule132 = {
    category: gencatLT,
    unicodeCat: NUMCAT_LT.value,
    possible: 1,
    updist: 0,
    lowdist: -9,
    titledist: 0
};
var rule48 = {
    category: gencatLT,
    unicodeCat: NUMCAT_LT.value,
    possible: 1,
    updist: -1,
    lowdist: 1,
    titledist: 0
};
var gencatLO = 262144;
var rule45 = {
    category: gencatLO,
    unicodeCat: NUMCAT_LO.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatLM = 1048576;
var rule83 = {
    category: gencatLM,
    unicodeCat: NUMCAT_LM.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatLL = 4096;
var rule100 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -54,
    lowdist: 0,
    titledist: -54
};
var rule101 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -8,
    lowdist: 0,
    titledist: -8
};
var rule102 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -86,
    lowdist: 0,
    titledist: -86
};
var rule103 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -80,
    lowdist: 0,
    titledist: -80
};
var rule104 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 7,
    lowdist: 0,
    titledist: 7
};
var rule106 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -96,
    lowdist: 0,
    titledist: -96
};
var rule111 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -15,
    lowdist: 0,
    titledist: -15
};
var rule113 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -48,
    lowdist: 0,
    titledist: -48
};
var rule117 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 35332,
    lowdist: 0,
    titledist: 35332
};
var rule118 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 3814,
    lowdist: 0,
    titledist: 3814
};
var rule119 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -59,
    lowdist: 0,
    titledist: -59
};
var rule12 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -32,
    lowdist: 0,
    titledist: -32
};
var rule121 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 8,
    lowdist: 0,
    titledist: 8
};
var rule123 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 74,
    lowdist: 0,
    titledist: 74
};
var rule124 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 86,
    lowdist: 0,
    titledist: 86
};
var rule125 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 100,
    lowdist: 0,
    titledist: 100
};
var rule126 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 128,
    lowdist: 0,
    titledist: 128
};
var rule127 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 112,
    lowdist: 0,
    titledist: 112
};
var rule128 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 126,
    lowdist: 0,
    titledist: 126
};
var rule130 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 9,
    lowdist: 0,
    titledist: 9
};
var rule133 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -7205,
    lowdist: 0,
    titledist: -7205
};
var rule14 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var rule145 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -28,
    lowdist: 0,
    titledist: -28
};
var rule153 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -10795,
    lowdist: 0,
    titledist: -10795
};
var rule154 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -10792,
    lowdist: 0,
    titledist: -10792
};
var rule160 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -7264,
    lowdist: 0,
    titledist: -7264
};
var rule166 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -40,
    lowdist: 0,
    titledist: -40
};
var rule18 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 743,
    lowdist: 0,
    titledist: 743
};
var rule20 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 121,
    lowdist: 0,
    titledist: 121
};
var rule22 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -1,
    lowdist: 0,
    titledist: -1
};
var rule24 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -232,
    lowdist: 0,
    titledist: -232
};
var rule26 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -300,
    lowdist: 0,
    titledist: -300
};
var rule27 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 195,
    lowdist: 0,
    titledist: 195
};
var rule35 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 97,
    lowdist: 0,
    titledist: 97
};
var rule38 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 163,
    lowdist: 0,
    titledist: 163
};
var rule40 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 130,
    lowdist: 0,
    titledist: 130
};
var rule46 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 56,
    lowdist: 0,
    titledist: 56
};
var rule49 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -2,
    lowdist: 0,
    titledist: -1
};
var rule50 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -79,
    lowdist: 0,
    titledist: -79
};
var rule57 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10815,
    lowdist: 0,
    titledist: 10815
};
var rule61 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10783,
    lowdist: 0,
    titledist: 10783
};
var rule62 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10780,
    lowdist: 0,
    titledist: 10780
};
var rule63 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10782,
    lowdist: 0,
    titledist: 10782
};
var rule64 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -210,
    lowdist: 0,
    titledist: -210
};
var rule65 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -206,
    lowdist: 0,
    titledist: -206
};
var rule66 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -205,
    lowdist: 0,
    titledist: -205
};
var rule67 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -202,
    lowdist: 0,
    titledist: -202
};
var rule68 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -203,
    lowdist: 0,
    titledist: -203
};
var rule69 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -207,
    lowdist: 0,
    titledist: -207
};
var rule70 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 42280,
    lowdist: 0,
    titledist: 42280
};
var rule71 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -209,
    lowdist: 0,
    titledist: -209
};
var rule72 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -211,
    lowdist: 0,
    titledist: -211
};
var rule73 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10743,
    lowdist: 0,
    titledist: 10743
};
var rule74 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10749,
    lowdist: 0,
    titledist: 10749
};
var rule75 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -213,
    lowdist: 0,
    titledist: -213
};
var rule76 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -214,
    lowdist: 0,
    titledist: -214
};
var rule77 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10727,
    lowdist: 0,
    titledist: 10727
};
var rule78 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -218,
    lowdist: 0,
    titledist: -218
};
var rule79 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -69,
    lowdist: 0,
    titledist: -69
};
var rule80 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -217,
    lowdist: 0,
    titledist: -217
};
var rule81 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -71,
    lowdist: 0,
    titledist: -71
};
var rule82 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -219,
    lowdist: 0,
    titledist: -219
};
var rule90 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -38,
    lowdist: 0,
    titledist: -38
};
var rule91 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -37,
    lowdist: 0,
    titledist: -37
};
var rule92 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -31,
    lowdist: 0,
    titledist: -31
};
var rule93 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -64,
    lowdist: 0,
    titledist: -64
};
var rule94 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -63,
    lowdist: 0,
    titledist: -63
};
var rule96 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -62,
    lowdist: 0,
    titledist: -62
};
var rule97 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -57,
    lowdist: 0,
    titledist: -57
};
var rule99 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -47,
    lowdist: 0,
    titledist: -47
};
var gencatCS = 134217728;
var rule163 = {
    category: gencatCS,
    unicodeCat: NUMCAT_CS.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatCO = 268435456;
var rule164 = {
    category: gencatCO,
    unicodeCat: NUMCAT_CO.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatCF = 32768;
var rule16 = {
    category: gencatCF,
    unicodeCat: NUMCAT_CF.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatCC = 1;
var rule0 = {
    category: gencatCC,
    unicodeCat: NUMCAT_CC.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var convchars = [
    {
        start: 65,
        length: 26,
        convRule: rule9
    },
    {
        start: 97,
        length: 26,
        convRule: rule12
    },
    {
        start: 181,
        length: 1,
        convRule: rule18
    },
    {
        start: 192,
        length: 23,
        convRule: rule9
    },
    {
        start: 216,
        length: 7,
        convRule: rule9
    },
    {
        start: 224,
        length: 23,
        convRule: rule12
    },
    {
        start: 248,
        length: 7,
        convRule: rule12
    },
    {
        start: 255,
        length: 1,
        convRule: rule20
    },
    {
        start: 256,
        length: 1,
        convRule: rule21
    },
    {
        start: 257,
        length: 1,
        convRule: rule22
    },
    {
        start: 258,
        length: 1,
        convRule: rule21
    },
    {
        start: 259,
        length: 1,
        convRule: rule22
    },
    {
        start: 260,
        length: 1,
        convRule: rule21
    },
    {
        start: 261,
        length: 1,
        convRule: rule22
    },
    {
        start: 262,
        length: 1,
        convRule: rule21
    },
    {
        start: 263,
        length: 1,
        convRule: rule22
    },
    {
        start: 264,
        length: 1,
        convRule: rule21
    },
    {
        start: 265,
        length: 1,
        convRule: rule22
    },
    {
        start: 266,
        length: 1,
        convRule: rule21
    },
    {
        start: 267,
        length: 1,
        convRule: rule22
    },
    {
        start: 268,
        length: 1,
        convRule: rule21
    },
    {
        start: 269,
        length: 1,
        convRule: rule22
    },
    {
        start: 270,
        length: 1,
        convRule: rule21
    },
    {
        start: 271,
        length: 1,
        convRule: rule22
    },
    {
        start: 272,
        length: 1,
        convRule: rule21
    },
    {
        start: 273,
        length: 1,
        convRule: rule22
    },
    {
        start: 274,
        length: 1,
        convRule: rule21
    },
    {
        start: 275,
        length: 1,
        convRule: rule22
    },
    {
        start: 276,
        length: 1,
        convRule: rule21
    },
    {
        start: 277,
        length: 1,
        convRule: rule22
    },
    {
        start: 278,
        length: 1,
        convRule: rule21
    },
    {
        start: 279,
        length: 1,
        convRule: rule22
    },
    {
        start: 280,
        length: 1,
        convRule: rule21
    },
    {
        start: 281,
        length: 1,
        convRule: rule22
    },
    {
        start: 282,
        length: 1,
        convRule: rule21
    },
    {
        start: 283,
        length: 1,
        convRule: rule22
    },
    {
        start: 284,
        length: 1,
        convRule: rule21
    },
    {
        start: 285,
        length: 1,
        convRule: rule22
    },
    {
        start: 286,
        length: 1,
        convRule: rule21
    },
    {
        start: 287,
        length: 1,
        convRule: rule22
    },
    {
        start: 288,
        length: 1,
        convRule: rule21
    },
    {
        start: 289,
        length: 1,
        convRule: rule22
    },
    {
        start: 290,
        length: 1,
        convRule: rule21
    },
    {
        start: 291,
        length: 1,
        convRule: rule22
    },
    {
        start: 292,
        length: 1,
        convRule: rule21
    },
    {
        start: 293,
        length: 1,
        convRule: rule22
    },
    {
        start: 294,
        length: 1,
        convRule: rule21
    },
    {
        start: 295,
        length: 1,
        convRule: rule22
    },
    {
        start: 296,
        length: 1,
        convRule: rule21
    },
    {
        start: 297,
        length: 1,
        convRule: rule22
    },
    {
        start: 298,
        length: 1,
        convRule: rule21
    },
    {
        start: 299,
        length: 1,
        convRule: rule22
    },
    {
        start: 300,
        length: 1,
        convRule: rule21
    },
    {
        start: 301,
        length: 1,
        convRule: rule22
    },
    {
        start: 302,
        length: 1,
        convRule: rule21
    },
    {
        start: 303,
        length: 1,
        convRule: rule22
    },
    {
        start: 304,
        length: 1,
        convRule: rule23
    },
    {
        start: 305,
        length: 1,
        convRule: rule24
    },
    {
        start: 306,
        length: 1,
        convRule: rule21
    },
    {
        start: 307,
        length: 1,
        convRule: rule22
    },
    {
        start: 308,
        length: 1,
        convRule: rule21
    },
    {
        start: 309,
        length: 1,
        convRule: rule22
    },
    {
        start: 310,
        length: 1,
        convRule: rule21
    },
    {
        start: 311,
        length: 1,
        convRule: rule22
    },
    {
        start: 313,
        length: 1,
        convRule: rule21
    },
    {
        start: 314,
        length: 1,
        convRule: rule22
    },
    {
        start: 315,
        length: 1,
        convRule: rule21
    },
    {
        start: 316,
        length: 1,
        convRule: rule22
    },
    {
        start: 317,
        length: 1,
        convRule: rule21
    },
    {
        start: 318,
        length: 1,
        convRule: rule22
    },
    {
        start: 319,
        length: 1,
        convRule: rule21
    },
    {
        start: 320,
        length: 1,
        convRule: rule22
    },
    {
        start: 321,
        length: 1,
        convRule: rule21
    },
    {
        start: 322,
        length: 1,
        convRule: rule22
    },
    {
        start: 323,
        length: 1,
        convRule: rule21
    },
    {
        start: 324,
        length: 1,
        convRule: rule22
    },
    {
        start: 325,
        length: 1,
        convRule: rule21
    },
    {
        start: 326,
        length: 1,
        convRule: rule22
    },
    {
        start: 327,
        length: 1,
        convRule: rule21
    },
    {
        start: 328,
        length: 1,
        convRule: rule22
    },
    {
        start: 330,
        length: 1,
        convRule: rule21
    },
    {
        start: 331,
        length: 1,
        convRule: rule22
    },
    {
        start: 332,
        length: 1,
        convRule: rule21
    },
    {
        start: 333,
        length: 1,
        convRule: rule22
    },
    {
        start: 334,
        length: 1,
        convRule: rule21
    },
    {
        start: 335,
        length: 1,
        convRule: rule22
    },
    {
        start: 336,
        length: 1,
        convRule: rule21
    },
    {
        start: 337,
        length: 1,
        convRule: rule22
    },
    {
        start: 338,
        length: 1,
        convRule: rule21
    },
    {
        start: 339,
        length: 1,
        convRule: rule22
    },
    {
        start: 340,
        length: 1,
        convRule: rule21
    },
    {
        start: 341,
        length: 1,
        convRule: rule22
    },
    {
        start: 342,
        length: 1,
        convRule: rule21
    },
    {
        start: 343,
        length: 1,
        convRule: rule22
    },
    {
        start: 344,
        length: 1,
        convRule: rule21
    },
    {
        start: 345,
        length: 1,
        convRule: rule22
    },
    {
        start: 346,
        length: 1,
        convRule: rule21
    },
    {
        start: 347,
        length: 1,
        convRule: rule22
    },
    {
        start: 348,
        length: 1,
        convRule: rule21
    },
    {
        start: 349,
        length: 1,
        convRule: rule22
    },
    {
        start: 350,
        length: 1,
        convRule: rule21
    },
    {
        start: 351,
        length: 1,
        convRule: rule22
    },
    {
        start: 352,
        length: 1,
        convRule: rule21
    },
    {
        start: 353,
        length: 1,
        convRule: rule22
    },
    {
        start: 354,
        length: 1,
        convRule: rule21
    },
    {
        start: 355,
        length: 1,
        convRule: rule22
    },
    {
        start: 356,
        length: 1,
        convRule: rule21
    },
    {
        start: 357,
        length: 1,
        convRule: rule22
    },
    {
        start: 358,
        length: 1,
        convRule: rule21
    },
    {
        start: 359,
        length: 1,
        convRule: rule22
    },
    {
        start: 360,
        length: 1,
        convRule: rule21
    },
    {
        start: 361,
        length: 1,
        convRule: rule22
    },
    {
        start: 362,
        length: 1,
        convRule: rule21
    },
    {
        start: 363,
        length: 1,
        convRule: rule22
    },
    {
        start: 364,
        length: 1,
        convRule: rule21
    },
    {
        start: 365,
        length: 1,
        convRule: rule22
    },
    {
        start: 366,
        length: 1,
        convRule: rule21
    },
    {
        start: 367,
        length: 1,
        convRule: rule22
    },
    {
        start: 368,
        length: 1,
        convRule: rule21
    },
    {
        start: 369,
        length: 1,
        convRule: rule22
    },
    {
        start: 370,
        length: 1,
        convRule: rule21
    },
    {
        start: 371,
        length: 1,
        convRule: rule22
    },
    {
        start: 372,
        length: 1,
        convRule: rule21
    },
    {
        start: 373,
        length: 1,
        convRule: rule22
    },
    {
        start: 374,
        length: 1,
        convRule: rule21
    },
    {
        start: 375,
        length: 1,
        convRule: rule22
    },
    {
        start: 376,
        length: 1,
        convRule: rule25
    },
    {
        start: 377,
        length: 1,
        convRule: rule21
    },
    {
        start: 378,
        length: 1,
        convRule: rule22
    },
    {
        start: 379,
        length: 1,
        convRule: rule21
    },
    {
        start: 380,
        length: 1,
        convRule: rule22
    },
    {
        start: 381,
        length: 1,
        convRule: rule21
    },
    {
        start: 382,
        length: 1,
        convRule: rule22
    },
    {
        start: 383,
        length: 1,
        convRule: rule26
    },
    {
        start: 384,
        length: 1,
        convRule: rule27
    },
    {
        start: 385,
        length: 1,
        convRule: rule28
    },
    {
        start: 386,
        length: 1,
        convRule: rule21
    },
    {
        start: 387,
        length: 1,
        convRule: rule22
    },
    {
        start: 388,
        length: 1,
        convRule: rule21
    },
    {
        start: 389,
        length: 1,
        convRule: rule22
    },
    {
        start: 390,
        length: 1,
        convRule: rule29
    },
    {
        start: 391,
        length: 1,
        convRule: rule21
    },
    {
        start: 392,
        length: 1,
        convRule: rule22
    },
    {
        start: 393,
        length: 2,
        convRule: rule30
    },
    {
        start: 395,
        length: 1,
        convRule: rule21
    },
    {
        start: 396,
        length: 1,
        convRule: rule22
    },
    {
        start: 398,
        length: 1,
        convRule: rule31
    },
    {
        start: 399,
        length: 1,
        convRule: rule32
    },
    {
        start: 400,
        length: 1,
        convRule: rule33
    },
    {
        start: 401,
        length: 1,
        convRule: rule21
    },
    {
        start: 402,
        length: 1,
        convRule: rule22
    },
    {
        start: 403,
        length: 1,
        convRule: rule30
    },
    {
        start: 404,
        length: 1,
        convRule: rule34
    },
    {
        start: 405,
        length: 1,
        convRule: rule35
    },
    {
        start: 406,
        length: 1,
        convRule: rule36
    },
    {
        start: 407,
        length: 1,
        convRule: rule37
    },
    {
        start: 408,
        length: 1,
        convRule: rule21
    },
    {
        start: 409,
        length: 1,
        convRule: rule22
    },
    {
        start: 410,
        length: 1,
        convRule: rule38
    },
    {
        start: 412,
        length: 1,
        convRule: rule36
    },
    {
        start: 413,
        length: 1,
        convRule: rule39
    },
    {
        start: 414,
        length: 1,
        convRule: rule40
    },
    {
        start: 415,
        length: 1,
        convRule: rule41
    },
    {
        start: 416,
        length: 1,
        convRule: rule21
    },
    {
        start: 417,
        length: 1,
        convRule: rule22
    },
    {
        start: 418,
        length: 1,
        convRule: rule21
    },
    {
        start: 419,
        length: 1,
        convRule: rule22
    },
    {
        start: 420,
        length: 1,
        convRule: rule21
    },
    {
        start: 421,
        length: 1,
        convRule: rule22
    },
    {
        start: 422,
        length: 1,
        convRule: rule42
    },
    {
        start: 423,
        length: 1,
        convRule: rule21
    },
    {
        start: 424,
        length: 1,
        convRule: rule22
    },
    {
        start: 425,
        length: 1,
        convRule: rule42
    },
    {
        start: 428,
        length: 1,
        convRule: rule21
    },
    {
        start: 429,
        length: 1,
        convRule: rule22
    },
    {
        start: 430,
        length: 1,
        convRule: rule42
    },
    {
        start: 431,
        length: 1,
        convRule: rule21
    },
    {
        start: 432,
        length: 1,
        convRule: rule22
    },
    {
        start: 433,
        length: 2,
        convRule: rule43
    },
    {
        start: 435,
        length: 1,
        convRule: rule21
    },
    {
        start: 436,
        length: 1,
        convRule: rule22
    },
    {
        start: 437,
        length: 1,
        convRule: rule21
    },
    {
        start: 438,
        length: 1,
        convRule: rule22
    },
    {
        start: 439,
        length: 1,
        convRule: rule44
    },
    {
        start: 440,
        length: 1,
        convRule: rule21
    },
    {
        start: 441,
        length: 1,
        convRule: rule22
    },
    {
        start: 444,
        length: 1,
        convRule: rule21
    },
    {
        start: 445,
        length: 1,
        convRule: rule22
    },
    {
        start: 447,
        length: 1,
        convRule: rule46
    },
    {
        start: 452,
        length: 1,
        convRule: rule47
    },
    {
        start: 453,
        length: 1,
        convRule: rule48
    },
    {
        start: 454,
        length: 1,
        convRule: rule49
    },
    {
        start: 455,
        length: 1,
        convRule: rule47
    },
    {
        start: 456,
        length: 1,
        convRule: rule48
    },
    {
        start: 457,
        length: 1,
        convRule: rule49
    },
    {
        start: 458,
        length: 1,
        convRule: rule47
    },
    {
        start: 459,
        length: 1,
        convRule: rule48
    },
    {
        start: 460,
        length: 1,
        convRule: rule49
    },
    {
        start: 461,
        length: 1,
        convRule: rule21
    },
    {
        start: 462,
        length: 1,
        convRule: rule22
    },
    {
        start: 463,
        length: 1,
        convRule: rule21
    },
    {
        start: 464,
        length: 1,
        convRule: rule22
    },
    {
        start: 465,
        length: 1,
        convRule: rule21
    },
    {
        start: 466,
        length: 1,
        convRule: rule22
    },
    {
        start: 467,
        length: 1,
        convRule: rule21
    },
    {
        start: 468,
        length: 1,
        convRule: rule22
    },
    {
        start: 469,
        length: 1,
        convRule: rule21
    },
    {
        start: 470,
        length: 1,
        convRule: rule22
    },
    {
        start: 471,
        length: 1,
        convRule: rule21
    },
    {
        start: 472,
        length: 1,
        convRule: rule22
    },
    {
        start: 473,
        length: 1,
        convRule: rule21
    },
    {
        start: 474,
        length: 1,
        convRule: rule22
    },
    {
        start: 475,
        length: 1,
        convRule: rule21
    },
    {
        start: 476,
        length: 1,
        convRule: rule22
    },
    {
        start: 477,
        length: 1,
        convRule: rule50
    },
    {
        start: 478,
        length: 1,
        convRule: rule21
    },
    {
        start: 479,
        length: 1,
        convRule: rule22
    },
    {
        start: 480,
        length: 1,
        convRule: rule21
    },
    {
        start: 481,
        length: 1,
        convRule: rule22
    },
    {
        start: 482,
        length: 1,
        convRule: rule21
    },
    {
        start: 483,
        length: 1,
        convRule: rule22
    },
    {
        start: 484,
        length: 1,
        convRule: rule21
    },
    {
        start: 485,
        length: 1,
        convRule: rule22
    },
    {
        start: 486,
        length: 1,
        convRule: rule21
    },
    {
        start: 487,
        length: 1,
        convRule: rule22
    },
    {
        start: 488,
        length: 1,
        convRule: rule21
    },
    {
        start: 489,
        length: 1,
        convRule: rule22
    },
    {
        start: 490,
        length: 1,
        convRule: rule21
    },
    {
        start: 491,
        length: 1,
        convRule: rule22
    },
    {
        start: 492,
        length: 1,
        convRule: rule21
    },
    {
        start: 493,
        length: 1,
        convRule: rule22
    },
    {
        start: 494,
        length: 1,
        convRule: rule21
    },
    {
        start: 495,
        length: 1,
        convRule: rule22
    },
    {
        start: 497,
        length: 1,
        convRule: rule47
    },
    {
        start: 498,
        length: 1,
        convRule: rule48
    },
    {
        start: 499,
        length: 1,
        convRule: rule49
    },
    {
        start: 500,
        length: 1,
        convRule: rule21
    },
    {
        start: 501,
        length: 1,
        convRule: rule22
    },
    {
        start: 502,
        length: 1,
        convRule: rule51
    },
    {
        start: 503,
        length: 1,
        convRule: rule52
    },
    {
        start: 504,
        length: 1,
        convRule: rule21
    },
    {
        start: 505,
        length: 1,
        convRule: rule22
    },
    {
        start: 506,
        length: 1,
        convRule: rule21
    },
    {
        start: 507,
        length: 1,
        convRule: rule22
    },
    {
        start: 508,
        length: 1,
        convRule: rule21
    },
    {
        start: 509,
        length: 1,
        convRule: rule22
    },
    {
        start: 510,
        length: 1,
        convRule: rule21
    },
    {
        start: 511,
        length: 1,
        convRule: rule22
    },
    {
        start: 512,
        length: 1,
        convRule: rule21
    },
    {
        start: 513,
        length: 1,
        convRule: rule22
    },
    {
        start: 514,
        length: 1,
        convRule: rule21
    },
    {
        start: 515,
        length: 1,
        convRule: rule22
    },
    {
        start: 516,
        length: 1,
        convRule: rule21
    },
    {
        start: 517,
        length: 1,
        convRule: rule22
    },
    {
        start: 518,
        length: 1,
        convRule: rule21
    },
    {
        start: 519,
        length: 1,
        convRule: rule22
    },
    {
        start: 520,
        length: 1,
        convRule: rule21
    },
    {
        start: 521,
        length: 1,
        convRule: rule22
    },
    {
        start: 522,
        length: 1,
        convRule: rule21
    },
    {
        start: 523,
        length: 1,
        convRule: rule22
    },
    {
        start: 524,
        length: 1,
        convRule: rule21
    },
    {
        start: 525,
        length: 1,
        convRule: rule22
    },
    {
        start: 526,
        length: 1,
        convRule: rule21
    },
    {
        start: 527,
        length: 1,
        convRule: rule22
    },
    {
        start: 528,
        length: 1,
        convRule: rule21
    },
    {
        start: 529,
        length: 1,
        convRule: rule22
    },
    {
        start: 530,
        length: 1,
        convRule: rule21
    },
    {
        start: 531,
        length: 1,
        convRule: rule22
    },
    {
        start: 532,
        length: 1,
        convRule: rule21
    },
    {
        start: 533,
        length: 1,
        convRule: rule22
    },
    {
        start: 534,
        length: 1,
        convRule: rule21
    },
    {
        start: 535,
        length: 1,
        convRule: rule22
    },
    {
        start: 536,
        length: 1,
        convRule: rule21
    },
    {
        start: 537,
        length: 1,
        convRule: rule22
    },
    {
        start: 538,
        length: 1,
        convRule: rule21
    },
    {
        start: 539,
        length: 1,
        convRule: rule22
    },
    {
        start: 540,
        length: 1,
        convRule: rule21
    },
    {
        start: 541,
        length: 1,
        convRule: rule22
    },
    {
        start: 542,
        length: 1,
        convRule: rule21
    },
    {
        start: 543,
        length: 1,
        convRule: rule22
    },
    {
        start: 544,
        length: 1,
        convRule: rule53
    },
    {
        start: 546,
        length: 1,
        convRule: rule21
    },
    {
        start: 547,
        length: 1,
        convRule: rule22
    },
    {
        start: 548,
        length: 1,
        convRule: rule21
    },
    {
        start: 549,
        length: 1,
        convRule: rule22
    },
    {
        start: 550,
        length: 1,
        convRule: rule21
    },
    {
        start: 551,
        length: 1,
        convRule: rule22
    },
    {
        start: 552,
        length: 1,
        convRule: rule21
    },
    {
        start: 553,
        length: 1,
        convRule: rule22
    },
    {
        start: 554,
        length: 1,
        convRule: rule21
    },
    {
        start: 555,
        length: 1,
        convRule: rule22
    },
    {
        start: 556,
        length: 1,
        convRule: rule21
    },
    {
        start: 557,
        length: 1,
        convRule: rule22
    },
    {
        start: 558,
        length: 1,
        convRule: rule21
    },
    {
        start: 559,
        length: 1,
        convRule: rule22
    },
    {
        start: 560,
        length: 1,
        convRule: rule21
    },
    {
        start: 561,
        length: 1,
        convRule: rule22
    },
    {
        start: 562,
        length: 1,
        convRule: rule21
    },
    {
        start: 563,
        length: 1,
        convRule: rule22
    },
    {
        start: 570,
        length: 1,
        convRule: rule54
    },
    {
        start: 571,
        length: 1,
        convRule: rule21
    },
    {
        start: 572,
        length: 1,
        convRule: rule22
    },
    {
        start: 573,
        length: 1,
        convRule: rule55
    },
    {
        start: 574,
        length: 1,
        convRule: rule56
    },
    {
        start: 575,
        length: 2,
        convRule: rule57
    },
    {
        start: 577,
        length: 1,
        convRule: rule21
    },
    {
        start: 578,
        length: 1,
        convRule: rule22
    },
    {
        start: 579,
        length: 1,
        convRule: rule58
    },
    {
        start: 580,
        length: 1,
        convRule: rule59
    },
    {
        start: 581,
        length: 1,
        convRule: rule60
    },
    {
        start: 582,
        length: 1,
        convRule: rule21
    },
    {
        start: 583,
        length: 1,
        convRule: rule22
    },
    {
        start: 584,
        length: 1,
        convRule: rule21
    },
    {
        start: 585,
        length: 1,
        convRule: rule22
    },
    {
        start: 586,
        length: 1,
        convRule: rule21
    },
    {
        start: 587,
        length: 1,
        convRule: rule22
    },
    {
        start: 588,
        length: 1,
        convRule: rule21
    },
    {
        start: 589,
        length: 1,
        convRule: rule22
    },
    {
        start: 590,
        length: 1,
        convRule: rule21
    },
    {
        start: 591,
        length: 1,
        convRule: rule22
    },
    {
        start: 592,
        length: 1,
        convRule: rule61
    },
    {
        start: 593,
        length: 1,
        convRule: rule62
    },
    {
        start: 594,
        length: 1,
        convRule: rule63
    },
    {
        start: 595,
        length: 1,
        convRule: rule64
    },
    {
        start: 596,
        length: 1,
        convRule: rule65
    },
    {
        start: 598,
        length: 2,
        convRule: rule66
    },
    {
        start: 601,
        length: 1,
        convRule: rule67
    },
    {
        start: 603,
        length: 1,
        convRule: rule68
    },
    {
        start: 608,
        length: 1,
        convRule: rule66
    },
    {
        start: 611,
        length: 1,
        convRule: rule69
    },
    {
        start: 613,
        length: 1,
        convRule: rule70
    },
    {
        start: 616,
        length: 1,
        convRule: rule71
    },
    {
        start: 617,
        length: 1,
        convRule: rule72
    },
    {
        start: 619,
        length: 1,
        convRule: rule73
    },
    {
        start: 623,
        length: 1,
        convRule: rule72
    },
    {
        start: 625,
        length: 1,
        convRule: rule74
    },
    {
        start: 626,
        length: 1,
        convRule: rule75
    },
    {
        start: 629,
        length: 1,
        convRule: rule76
    },
    {
        start: 637,
        length: 1,
        convRule: rule77
    },
    {
        start: 640,
        length: 1,
        convRule: rule78
    },
    {
        start: 643,
        length: 1,
        convRule: rule78
    },
    {
        start: 648,
        length: 1,
        convRule: rule78
    },
    {
        start: 649,
        length: 1,
        convRule: rule79
    },
    {
        start: 650,
        length: 2,
        convRule: rule80
    },
    {
        start: 652,
        length: 1,
        convRule: rule81
    },
    {
        start: 658,
        length: 1,
        convRule: rule82
    },
    {
        start: 837,
        length: 1,
        convRule: rule85
    },
    {
        start: 880,
        length: 1,
        convRule: rule21
    },
    {
        start: 881,
        length: 1,
        convRule: rule22
    },
    {
        start: 882,
        length: 1,
        convRule: rule21
    },
    {
        start: 883,
        length: 1,
        convRule: rule22
    },
    {
        start: 886,
        length: 1,
        convRule: rule21
    },
    {
        start: 887,
        length: 1,
        convRule: rule22
    },
    {
        start: 891,
        length: 3,
        convRule: rule40
    },
    {
        start: 902,
        length: 1,
        convRule: rule86
    },
    {
        start: 904,
        length: 3,
        convRule: rule87
    },
    {
        start: 908,
        length: 1,
        convRule: rule88
    },
    {
        start: 910,
        length: 2,
        convRule: rule89
    },
    {
        start: 913,
        length: 17,
        convRule: rule9
    },
    {
        start: 931,
        length: 9,
        convRule: rule9
    },
    {
        start: 940,
        length: 1,
        convRule: rule90
    },
    {
        start: 941,
        length: 3,
        convRule: rule91
    },
    {
        start: 945,
        length: 17,
        convRule: rule12
    },
    {
        start: 962,
        length: 1,
        convRule: rule92
    },
    {
        start: 963,
        length: 9,
        convRule: rule12
    },
    {
        start: 972,
        length: 1,
        convRule: rule93
    },
    {
        start: 973,
        length: 2,
        convRule: rule94
    },
    {
        start: 975,
        length: 1,
        convRule: rule95
    },
    {
        start: 976,
        length: 1,
        convRule: rule96
    },
    {
        start: 977,
        length: 1,
        convRule: rule97
    },
    {
        start: 981,
        length: 1,
        convRule: rule99
    },
    {
        start: 982,
        length: 1,
        convRule: rule100
    },
    {
        start: 983,
        length: 1,
        convRule: rule101
    },
    {
        start: 984,
        length: 1,
        convRule: rule21
    },
    {
        start: 985,
        length: 1,
        convRule: rule22
    },
    {
        start: 986,
        length: 1,
        convRule: rule21
    },
    {
        start: 987,
        length: 1,
        convRule: rule22
    },
    {
        start: 988,
        length: 1,
        convRule: rule21
    },
    {
        start: 989,
        length: 1,
        convRule: rule22
    },
    {
        start: 990,
        length: 1,
        convRule: rule21
    },
    {
        start: 991,
        length: 1,
        convRule: rule22
    },
    {
        start: 992,
        length: 1,
        convRule: rule21
    },
    {
        start: 993,
        length: 1,
        convRule: rule22
    },
    {
        start: 994,
        length: 1,
        convRule: rule21
    },
    {
        start: 995,
        length: 1,
        convRule: rule22
    },
    {
        start: 996,
        length: 1,
        convRule: rule21
    },
    {
        start: 997,
        length: 1,
        convRule: rule22
    },
    {
        start: 998,
        length: 1,
        convRule: rule21
    },
    {
        start: 999,
        length: 1,
        convRule: rule22
    },
    {
        start: 1000,
        length: 1,
        convRule: rule21
    },
    {
        start: 1001,
        length: 1,
        convRule: rule22
    },
    {
        start: 1002,
        length: 1,
        convRule: rule21
    },
    {
        start: 1003,
        length: 1,
        convRule: rule22
    },
    {
        start: 1004,
        length: 1,
        convRule: rule21
    },
    {
        start: 1005,
        length: 1,
        convRule: rule22
    },
    {
        start: 1006,
        length: 1,
        convRule: rule21
    },
    {
        start: 1007,
        length: 1,
        convRule: rule22
    },
    {
        start: 1008,
        length: 1,
        convRule: rule102
    },
    {
        start: 1009,
        length: 1,
        convRule: rule103
    },
    {
        start: 1010,
        length: 1,
        convRule: rule104
    },
    {
        start: 1012,
        length: 1,
        convRule: rule105
    },
    {
        start: 1013,
        length: 1,
        convRule: rule106
    },
    {
        start: 1015,
        length: 1,
        convRule: rule21
    },
    {
        start: 1016,
        length: 1,
        convRule: rule22
    },
    {
        start: 1017,
        length: 1,
        convRule: rule107
    },
    {
        start: 1018,
        length: 1,
        convRule: rule21
    },
    {
        start: 1019,
        length: 1,
        convRule: rule22
    },
    {
        start: 1021,
        length: 3,
        convRule: rule53
    },
    {
        start: 1024,
        length: 16,
        convRule: rule108
    },
    {
        start: 1040,
        length: 32,
        convRule: rule9
    },
    {
        start: 1072,
        length: 32,
        convRule: rule12
    },
    {
        start: 1104,
        length: 16,
        convRule: rule103
    },
    {
        start: 1120,
        length: 1,
        convRule: rule21
    },
    {
        start: 1121,
        length: 1,
        convRule: rule22
    },
    {
        start: 1122,
        length: 1,
        convRule: rule21
    },
    {
        start: 1123,
        length: 1,
        convRule: rule22
    },
    {
        start: 1124,
        length: 1,
        convRule: rule21
    },
    {
        start: 1125,
        length: 1,
        convRule: rule22
    },
    {
        start: 1126,
        length: 1,
        convRule: rule21
    },
    {
        start: 1127,
        length: 1,
        convRule: rule22
    },
    {
        start: 1128,
        length: 1,
        convRule: rule21
    },
    {
        start: 1129,
        length: 1,
        convRule: rule22
    },
    {
        start: 1130,
        length: 1,
        convRule: rule21
    },
    {
        start: 1131,
        length: 1,
        convRule: rule22
    },
    {
        start: 1132,
        length: 1,
        convRule: rule21
    },
    {
        start: 1133,
        length: 1,
        convRule: rule22
    },
    {
        start: 1134,
        length: 1,
        convRule: rule21
    },
    {
        start: 1135,
        length: 1,
        convRule: rule22
    },
    {
        start: 1136,
        length: 1,
        convRule: rule21
    },
    {
        start: 1137,
        length: 1,
        convRule: rule22
    },
    {
        start: 1138,
        length: 1,
        convRule: rule21
    },
    {
        start: 1139,
        length: 1,
        convRule: rule22
    },
    {
        start: 1140,
        length: 1,
        convRule: rule21
    },
    {
        start: 1141,
        length: 1,
        convRule: rule22
    },
    {
        start: 1142,
        length: 1,
        convRule: rule21
    },
    {
        start: 1143,
        length: 1,
        convRule: rule22
    },
    {
        start: 1144,
        length: 1,
        convRule: rule21
    },
    {
        start: 1145,
        length: 1,
        convRule: rule22
    },
    {
        start: 1146,
        length: 1,
        convRule: rule21
    },
    {
        start: 1147,
        length: 1,
        convRule: rule22
    },
    {
        start: 1148,
        length: 1,
        convRule: rule21
    },
    {
        start: 1149,
        length: 1,
        convRule: rule22
    },
    {
        start: 1150,
        length: 1,
        convRule: rule21
    },
    {
        start: 1151,
        length: 1,
        convRule: rule22
    },
    {
        start: 1152,
        length: 1,
        convRule: rule21
    },
    {
        start: 1153,
        length: 1,
        convRule: rule22
    },
    {
        start: 1162,
        length: 1,
        convRule: rule21
    },
    {
        start: 1163,
        length: 1,
        convRule: rule22
    },
    {
        start: 1164,
        length: 1,
        convRule: rule21
    },
    {
        start: 1165,
        length: 1,
        convRule: rule22
    },
    {
        start: 1166,
        length: 1,
        convRule: rule21
    },
    {
        start: 1167,
        length: 1,
        convRule: rule22
    },
    {
        start: 1168,
        length: 1,
        convRule: rule21
    },
    {
        start: 1169,
        length: 1,
        convRule: rule22
    },
    {
        start: 1170,
        length: 1,
        convRule: rule21
    },
    {
        start: 1171,
        length: 1,
        convRule: rule22
    },
    {
        start: 1172,
        length: 1,
        convRule: rule21
    },
    {
        start: 1173,
        length: 1,
        convRule: rule22
    },
    {
        start: 1174,
        length: 1,
        convRule: rule21
    },
    {
        start: 1175,
        length: 1,
        convRule: rule22
    },
    {
        start: 1176,
        length: 1,
        convRule: rule21
    },
    {
        start: 1177,
        length: 1,
        convRule: rule22
    },
    {
        start: 1178,
        length: 1,
        convRule: rule21
    },
    {
        start: 1179,
        length: 1,
        convRule: rule22
    },
    {
        start: 1180,
        length: 1,
        convRule: rule21
    },
    {
        start: 1181,
        length: 1,
        convRule: rule22
    },
    {
        start: 1182,
        length: 1,
        convRule: rule21
    },
    {
        start: 1183,
        length: 1,
        convRule: rule22
    },
    {
        start: 1184,
        length: 1,
        convRule: rule21
    },
    {
        start: 1185,
        length: 1,
        convRule: rule22
    },
    {
        start: 1186,
        length: 1,
        convRule: rule21
    },
    {
        start: 1187,
        length: 1,
        convRule: rule22
    },
    {
        start: 1188,
        length: 1,
        convRule: rule21
    },
    {
        start: 1189,
        length: 1,
        convRule: rule22
    },
    {
        start: 1190,
        length: 1,
        convRule: rule21
    },
    {
        start: 1191,
        length: 1,
        convRule: rule22
    },
    {
        start: 1192,
        length: 1,
        convRule: rule21
    },
    {
        start: 1193,
        length: 1,
        convRule: rule22
    },
    {
        start: 1194,
        length: 1,
        convRule: rule21
    },
    {
        start: 1195,
        length: 1,
        convRule: rule22
    },
    {
        start: 1196,
        length: 1,
        convRule: rule21
    },
    {
        start: 1197,
        length: 1,
        convRule: rule22
    },
    {
        start: 1198,
        length: 1,
        convRule: rule21
    },
    {
        start: 1199,
        length: 1,
        convRule: rule22
    },
    {
        start: 1200,
        length: 1,
        convRule: rule21
    },
    {
        start: 1201,
        length: 1,
        convRule: rule22
    },
    {
        start: 1202,
        length: 1,
        convRule: rule21
    },
    {
        start: 1203,
        length: 1,
        convRule: rule22
    },
    {
        start: 1204,
        length: 1,
        convRule: rule21
    },
    {
        start: 1205,
        length: 1,
        convRule: rule22
    },
    {
        start: 1206,
        length: 1,
        convRule: rule21
    },
    {
        start: 1207,
        length: 1,
        convRule: rule22
    },
    {
        start: 1208,
        length: 1,
        convRule: rule21
    },
    {
        start: 1209,
        length: 1,
        convRule: rule22
    },
    {
        start: 1210,
        length: 1,
        convRule: rule21
    },
    {
        start: 1211,
        length: 1,
        convRule: rule22
    },
    {
        start: 1212,
        length: 1,
        convRule: rule21
    },
    {
        start: 1213,
        length: 1,
        convRule: rule22
    },
    {
        start: 1214,
        length: 1,
        convRule: rule21
    },
    {
        start: 1215,
        length: 1,
        convRule: rule22
    },
    {
        start: 1216,
        length: 1,
        convRule: rule110
    },
    {
        start: 1217,
        length: 1,
        convRule: rule21
    },
    {
        start: 1218,
        length: 1,
        convRule: rule22
    },
    {
        start: 1219,
        length: 1,
        convRule: rule21
    },
    {
        start: 1220,
        length: 1,
        convRule: rule22
    },
    {
        start: 1221,
        length: 1,
        convRule: rule21
    },
    {
        start: 1222,
        length: 1,
        convRule: rule22
    },
    {
        start: 1223,
        length: 1,
        convRule: rule21
    },
    {
        start: 1224,
        length: 1,
        convRule: rule22
    },
    {
        start: 1225,
        length: 1,
        convRule: rule21
    },
    {
        start: 1226,
        length: 1,
        convRule: rule22
    },
    {
        start: 1227,
        length: 1,
        convRule: rule21
    },
    {
        start: 1228,
        length: 1,
        convRule: rule22
    },
    {
        start: 1229,
        length: 1,
        convRule: rule21
    },
    {
        start: 1230,
        length: 1,
        convRule: rule22
    },
    {
        start: 1231,
        length: 1,
        convRule: rule111
    },
    {
        start: 1232,
        length: 1,
        convRule: rule21
    },
    {
        start: 1233,
        length: 1,
        convRule: rule22
    },
    {
        start: 1234,
        length: 1,
        convRule: rule21
    },
    {
        start: 1235,
        length: 1,
        convRule: rule22
    },
    {
        start: 1236,
        length: 1,
        convRule: rule21
    },
    {
        start: 1237,
        length: 1,
        convRule: rule22
    },
    {
        start: 1238,
        length: 1,
        convRule: rule21
    },
    {
        start: 1239,
        length: 1,
        convRule: rule22
    },
    {
        start: 1240,
        length: 1,
        convRule: rule21
    },
    {
        start: 1241,
        length: 1,
        convRule: rule22
    },
    {
        start: 1242,
        length: 1,
        convRule: rule21
    },
    {
        start: 1243,
        length: 1,
        convRule: rule22
    },
    {
        start: 1244,
        length: 1,
        convRule: rule21
    },
    {
        start: 1245,
        length: 1,
        convRule: rule22
    },
    {
        start: 1246,
        length: 1,
        convRule: rule21
    },
    {
        start: 1247,
        length: 1,
        convRule: rule22
    },
    {
        start: 1248,
        length: 1,
        convRule: rule21
    },
    {
        start: 1249,
        length: 1,
        convRule: rule22
    },
    {
        start: 1250,
        length: 1,
        convRule: rule21
    },
    {
        start: 1251,
        length: 1,
        convRule: rule22
    },
    {
        start: 1252,
        length: 1,
        convRule: rule21
    },
    {
        start: 1253,
        length: 1,
        convRule: rule22
    },
    {
        start: 1254,
        length: 1,
        convRule: rule21
    },
    {
        start: 1255,
        length: 1,
        convRule: rule22
    },
    {
        start: 1256,
        length: 1,
        convRule: rule21
    },
    {
        start: 1257,
        length: 1,
        convRule: rule22
    },
    {
        start: 1258,
        length: 1,
        convRule: rule21
    },
    {
        start: 1259,
        length: 1,
        convRule: rule22
    },
    {
        start: 1260,
        length: 1,
        convRule: rule21
    },
    {
        start: 1261,
        length: 1,
        convRule: rule22
    },
    {
        start: 1262,
        length: 1,
        convRule: rule21
    },
    {
        start: 1263,
        length: 1,
        convRule: rule22
    },
    {
        start: 1264,
        length: 1,
        convRule: rule21
    },
    {
        start: 1265,
        length: 1,
        convRule: rule22
    },
    {
        start: 1266,
        length: 1,
        convRule: rule21
    },
    {
        start: 1267,
        length: 1,
        convRule: rule22
    },
    {
        start: 1268,
        length: 1,
        convRule: rule21
    },
    {
        start: 1269,
        length: 1,
        convRule: rule22
    },
    {
        start: 1270,
        length: 1,
        convRule: rule21
    },
    {
        start: 1271,
        length: 1,
        convRule: rule22
    },
    {
        start: 1272,
        length: 1,
        convRule: rule21
    },
    {
        start: 1273,
        length: 1,
        convRule: rule22
    },
    {
        start: 1274,
        length: 1,
        convRule: rule21
    },
    {
        start: 1275,
        length: 1,
        convRule: rule22
    },
    {
        start: 1276,
        length: 1,
        convRule: rule21
    },
    {
        start: 1277,
        length: 1,
        convRule: rule22
    },
    {
        start: 1278,
        length: 1,
        convRule: rule21
    },
    {
        start: 1279,
        length: 1,
        convRule: rule22
    },
    {
        start: 1280,
        length: 1,
        convRule: rule21
    },
    {
        start: 1281,
        length: 1,
        convRule: rule22
    },
    {
        start: 1282,
        length: 1,
        convRule: rule21
    },
    {
        start: 1283,
        length: 1,
        convRule: rule22
    },
    {
        start: 1284,
        length: 1,
        convRule: rule21
    },
    {
        start: 1285,
        length: 1,
        convRule: rule22
    },
    {
        start: 1286,
        length: 1,
        convRule: rule21
    },
    {
        start: 1287,
        length: 1,
        convRule: rule22
    },
    {
        start: 1288,
        length: 1,
        convRule: rule21
    },
    {
        start: 1289,
        length: 1,
        convRule: rule22
    },
    {
        start: 1290,
        length: 1,
        convRule: rule21
    },
    {
        start: 1291,
        length: 1,
        convRule: rule22
    },
    {
        start: 1292,
        length: 1,
        convRule: rule21
    },
    {
        start: 1293,
        length: 1,
        convRule: rule22
    },
    {
        start: 1294,
        length: 1,
        convRule: rule21
    },
    {
        start: 1295,
        length: 1,
        convRule: rule22
    },
    {
        start: 1296,
        length: 1,
        convRule: rule21
    },
    {
        start: 1297,
        length: 1,
        convRule: rule22
    },
    {
        start: 1298,
        length: 1,
        convRule: rule21
    },
    {
        start: 1299,
        length: 1,
        convRule: rule22
    },
    {
        start: 1300,
        length: 1,
        convRule: rule21
    },
    {
        start: 1301,
        length: 1,
        convRule: rule22
    },
    {
        start: 1302,
        length: 1,
        convRule: rule21
    },
    {
        start: 1303,
        length: 1,
        convRule: rule22
    },
    {
        start: 1304,
        length: 1,
        convRule: rule21
    },
    {
        start: 1305,
        length: 1,
        convRule: rule22
    },
    {
        start: 1306,
        length: 1,
        convRule: rule21
    },
    {
        start: 1307,
        length: 1,
        convRule: rule22
    },
    {
        start: 1308,
        length: 1,
        convRule: rule21
    },
    {
        start: 1309,
        length: 1,
        convRule: rule22
    },
    {
        start: 1310,
        length: 1,
        convRule: rule21
    },
    {
        start: 1311,
        length: 1,
        convRule: rule22
    },
    {
        start: 1312,
        length: 1,
        convRule: rule21
    },
    {
        start: 1313,
        length: 1,
        convRule: rule22
    },
    {
        start: 1314,
        length: 1,
        convRule: rule21
    },
    {
        start: 1315,
        length: 1,
        convRule: rule22
    },
    {
        start: 1316,
        length: 1,
        convRule: rule21
    },
    {
        start: 1317,
        length: 1,
        convRule: rule22
    },
    {
        start: 1318,
        length: 1,
        convRule: rule21
    },
    {
        start: 1319,
        length: 1,
        convRule: rule22
    },
    {
        start: 1329,
        length: 38,
        convRule: rule112
    },
    {
        start: 1377,
        length: 38,
        convRule: rule113
    },
    {
        start: 4256,
        length: 38,
        convRule: rule115
    },
    {
        start: 7545,
        length: 1,
        convRule: rule117
    },
    {
        start: 7549,
        length: 1,
        convRule: rule118
    },
    {
        start: 7680,
        length: 1,
        convRule: rule21
    },
    {
        start: 7681,
        length: 1,
        convRule: rule22
    },
    {
        start: 7682,
        length: 1,
        convRule: rule21
    },
    {
        start: 7683,
        length: 1,
        convRule: rule22
    },
    {
        start: 7684,
        length: 1,
        convRule: rule21
    },
    {
        start: 7685,
        length: 1,
        convRule: rule22
    },
    {
        start: 7686,
        length: 1,
        convRule: rule21
    },
    {
        start: 7687,
        length: 1,
        convRule: rule22
    },
    {
        start: 7688,
        length: 1,
        convRule: rule21
    },
    {
        start: 7689,
        length: 1,
        convRule: rule22
    },
    {
        start: 7690,
        length: 1,
        convRule: rule21
    },
    {
        start: 7691,
        length: 1,
        convRule: rule22
    },
    {
        start: 7692,
        length: 1,
        convRule: rule21
    },
    {
        start: 7693,
        length: 1,
        convRule: rule22
    },
    {
        start: 7694,
        length: 1,
        convRule: rule21
    },
    {
        start: 7695,
        length: 1,
        convRule: rule22
    },
    {
        start: 7696,
        length: 1,
        convRule: rule21
    },
    {
        start: 7697,
        length: 1,
        convRule: rule22
    },
    {
        start: 7698,
        length: 1,
        convRule: rule21
    },
    {
        start: 7699,
        length: 1,
        convRule: rule22
    },
    {
        start: 7700,
        length: 1,
        convRule: rule21
    },
    {
        start: 7701,
        length: 1,
        convRule: rule22
    },
    {
        start: 7702,
        length: 1,
        convRule: rule21
    },
    {
        start: 7703,
        length: 1,
        convRule: rule22
    },
    {
        start: 7704,
        length: 1,
        convRule: rule21
    },
    {
        start: 7705,
        length: 1,
        convRule: rule22
    },
    {
        start: 7706,
        length: 1,
        convRule: rule21
    },
    {
        start: 7707,
        length: 1,
        convRule: rule22
    },
    {
        start: 7708,
        length: 1,
        convRule: rule21
    },
    {
        start: 7709,
        length: 1,
        convRule: rule22
    },
    {
        start: 7710,
        length: 1,
        convRule: rule21
    },
    {
        start: 7711,
        length: 1,
        convRule: rule22
    },
    {
        start: 7712,
        length: 1,
        convRule: rule21
    },
    {
        start: 7713,
        length: 1,
        convRule: rule22
    },
    {
        start: 7714,
        length: 1,
        convRule: rule21
    },
    {
        start: 7715,
        length: 1,
        convRule: rule22
    },
    {
        start: 7716,
        length: 1,
        convRule: rule21
    },
    {
        start: 7717,
        length: 1,
        convRule: rule22
    },
    {
        start: 7718,
        length: 1,
        convRule: rule21
    },
    {
        start: 7719,
        length: 1,
        convRule: rule22
    },
    {
        start: 7720,
        length: 1,
        convRule: rule21
    },
    {
        start: 7721,
        length: 1,
        convRule: rule22
    },
    {
        start: 7722,
        length: 1,
        convRule: rule21
    },
    {
        start: 7723,
        length: 1,
        convRule: rule22
    },
    {
        start: 7724,
        length: 1,
        convRule: rule21
    },
    {
        start: 7725,
        length: 1,
        convRule: rule22
    },
    {
        start: 7726,
        length: 1,
        convRule: rule21
    },
    {
        start: 7727,
        length: 1,
        convRule: rule22
    },
    {
        start: 7728,
        length: 1,
        convRule: rule21
    },
    {
        start: 7729,
        length: 1,
        convRule: rule22
    },
    {
        start: 7730,
        length: 1,
        convRule: rule21
    },
    {
        start: 7731,
        length: 1,
        convRule: rule22
    },
    {
        start: 7732,
        length: 1,
        convRule: rule21
    },
    {
        start: 7733,
        length: 1,
        convRule: rule22
    },
    {
        start: 7734,
        length: 1,
        convRule: rule21
    },
    {
        start: 7735,
        length: 1,
        convRule: rule22
    },
    {
        start: 7736,
        length: 1,
        convRule: rule21
    },
    {
        start: 7737,
        length: 1,
        convRule: rule22
    },
    {
        start: 7738,
        length: 1,
        convRule: rule21
    },
    {
        start: 7739,
        length: 1,
        convRule: rule22
    },
    {
        start: 7740,
        length: 1,
        convRule: rule21
    },
    {
        start: 7741,
        length: 1,
        convRule: rule22
    },
    {
        start: 7742,
        length: 1,
        convRule: rule21
    },
    {
        start: 7743,
        length: 1,
        convRule: rule22
    },
    {
        start: 7744,
        length: 1,
        convRule: rule21
    },
    {
        start: 7745,
        length: 1,
        convRule: rule22
    },
    {
        start: 7746,
        length: 1,
        convRule: rule21
    },
    {
        start: 7747,
        length: 1,
        convRule: rule22
    },
    {
        start: 7748,
        length: 1,
        convRule: rule21
    },
    {
        start: 7749,
        length: 1,
        convRule: rule22
    },
    {
        start: 7750,
        length: 1,
        convRule: rule21
    },
    {
        start: 7751,
        length: 1,
        convRule: rule22
    },
    {
        start: 7752,
        length: 1,
        convRule: rule21
    },
    {
        start: 7753,
        length: 1,
        convRule: rule22
    },
    {
        start: 7754,
        length: 1,
        convRule: rule21
    },
    {
        start: 7755,
        length: 1,
        convRule: rule22
    },
    {
        start: 7756,
        length: 1,
        convRule: rule21
    },
    {
        start: 7757,
        length: 1,
        convRule: rule22
    },
    {
        start: 7758,
        length: 1,
        convRule: rule21
    },
    {
        start: 7759,
        length: 1,
        convRule: rule22
    },
    {
        start: 7760,
        length: 1,
        convRule: rule21
    },
    {
        start: 7761,
        length: 1,
        convRule: rule22
    },
    {
        start: 7762,
        length: 1,
        convRule: rule21
    },
    {
        start: 7763,
        length: 1,
        convRule: rule22
    },
    {
        start: 7764,
        length: 1,
        convRule: rule21
    },
    {
        start: 7765,
        length: 1,
        convRule: rule22
    },
    {
        start: 7766,
        length: 1,
        convRule: rule21
    },
    {
        start: 7767,
        length: 1,
        convRule: rule22
    },
    {
        start: 7768,
        length: 1,
        convRule: rule21
    },
    {
        start: 7769,
        length: 1,
        convRule: rule22
    },
    {
        start: 7770,
        length: 1,
        convRule: rule21
    },
    {
        start: 7771,
        length: 1,
        convRule: rule22
    },
    {
        start: 7772,
        length: 1,
        convRule: rule21
    },
    {
        start: 7773,
        length: 1,
        convRule: rule22
    },
    {
        start: 7774,
        length: 1,
        convRule: rule21
    },
    {
        start: 7775,
        length: 1,
        convRule: rule22
    },
    {
        start: 7776,
        length: 1,
        convRule: rule21
    },
    {
        start: 7777,
        length: 1,
        convRule: rule22
    },
    {
        start: 7778,
        length: 1,
        convRule: rule21
    },
    {
        start: 7779,
        length: 1,
        convRule: rule22
    },
    {
        start: 7780,
        length: 1,
        convRule: rule21
    },
    {
        start: 7781,
        length: 1,
        convRule: rule22
    },
    {
        start: 7782,
        length: 1,
        convRule: rule21
    },
    {
        start: 7783,
        length: 1,
        convRule: rule22
    },
    {
        start: 7784,
        length: 1,
        convRule: rule21
    },
    {
        start: 7785,
        length: 1,
        convRule: rule22
    },
    {
        start: 7786,
        length: 1,
        convRule: rule21
    },
    {
        start: 7787,
        length: 1,
        convRule: rule22
    },
    {
        start: 7788,
        length: 1,
        convRule: rule21
    },
    {
        start: 7789,
        length: 1,
        convRule: rule22
    },
    {
        start: 7790,
        length: 1,
        convRule: rule21
    },
    {
        start: 7791,
        length: 1,
        convRule: rule22
    },
    {
        start: 7792,
        length: 1,
        convRule: rule21
    },
    {
        start: 7793,
        length: 1,
        convRule: rule22
    },
    {
        start: 7794,
        length: 1,
        convRule: rule21
    },
    {
        start: 7795,
        length: 1,
        convRule: rule22
    },
    {
        start: 7796,
        length: 1,
        convRule: rule21
    },
    {
        start: 7797,
        length: 1,
        convRule: rule22
    },
    {
        start: 7798,
        length: 1,
        convRule: rule21
    },
    {
        start: 7799,
        length: 1,
        convRule: rule22
    },
    {
        start: 7800,
        length: 1,
        convRule: rule21
    },
    {
        start: 7801,
        length: 1,
        convRule: rule22
    },
    {
        start: 7802,
        length: 1,
        convRule: rule21
    },
    {
        start: 7803,
        length: 1,
        convRule: rule22
    },
    {
        start: 7804,
        length: 1,
        convRule: rule21
    },
    {
        start: 7805,
        length: 1,
        convRule: rule22
    },
    {
        start: 7806,
        length: 1,
        convRule: rule21
    },
    {
        start: 7807,
        length: 1,
        convRule: rule22
    },
    {
        start: 7808,
        length: 1,
        convRule: rule21
    },
    {
        start: 7809,
        length: 1,
        convRule: rule22
    },
    {
        start: 7810,
        length: 1,
        convRule: rule21
    },
    {
        start: 7811,
        length: 1,
        convRule: rule22
    },
    {
        start: 7812,
        length: 1,
        convRule: rule21
    },
    {
        start: 7813,
        length: 1,
        convRule: rule22
    },
    {
        start: 7814,
        length: 1,
        convRule: rule21
    },
    {
        start: 7815,
        length: 1,
        convRule: rule22
    },
    {
        start: 7816,
        length: 1,
        convRule: rule21
    },
    {
        start: 7817,
        length: 1,
        convRule: rule22
    },
    {
        start: 7818,
        length: 1,
        convRule: rule21
    },
    {
        start: 7819,
        length: 1,
        convRule: rule22
    },
    {
        start: 7820,
        length: 1,
        convRule: rule21
    },
    {
        start: 7821,
        length: 1,
        convRule: rule22
    },
    {
        start: 7822,
        length: 1,
        convRule: rule21
    },
    {
        start: 7823,
        length: 1,
        convRule: rule22
    },
    {
        start: 7824,
        length: 1,
        convRule: rule21
    },
    {
        start: 7825,
        length: 1,
        convRule: rule22
    },
    {
        start: 7826,
        length: 1,
        convRule: rule21
    },
    {
        start: 7827,
        length: 1,
        convRule: rule22
    },
    {
        start: 7828,
        length: 1,
        convRule: rule21
    },
    {
        start: 7829,
        length: 1,
        convRule: rule22
    },
    {
        start: 7835,
        length: 1,
        convRule: rule119
    },
    {
        start: 7838,
        length: 1,
        convRule: rule120
    },
    {
        start: 7840,
        length: 1,
        convRule: rule21
    },
    {
        start: 7841,
        length: 1,
        convRule: rule22
    },
    {
        start: 7842,
        length: 1,
        convRule: rule21
    },
    {
        start: 7843,
        length: 1,
        convRule: rule22
    },
    {
        start: 7844,
        length: 1,
        convRule: rule21
    },
    {
        start: 7845,
        length: 1,
        convRule: rule22
    },
    {
        start: 7846,
        length: 1,
        convRule: rule21
    },
    {
        start: 7847,
        length: 1,
        convRule: rule22
    },
    {
        start: 7848,
        length: 1,
        convRule: rule21
    },
    {
        start: 7849,
        length: 1,
        convRule: rule22
    },
    {
        start: 7850,
        length: 1,
        convRule: rule21
    },
    {
        start: 7851,
        length: 1,
        convRule: rule22
    },
    {
        start: 7852,
        length: 1,
        convRule: rule21
    },
    {
        start: 7853,
        length: 1,
        convRule: rule22
    },
    {
        start: 7854,
        length: 1,
        convRule: rule21
    },
    {
        start: 7855,
        length: 1,
        convRule: rule22
    },
    {
        start: 7856,
        length: 1,
        convRule: rule21
    },
    {
        start: 7857,
        length: 1,
        convRule: rule22
    },
    {
        start: 7858,
        length: 1,
        convRule: rule21
    },
    {
        start: 7859,
        length: 1,
        convRule: rule22
    },
    {
        start: 7860,
        length: 1,
        convRule: rule21
    },
    {
        start: 7861,
        length: 1,
        convRule: rule22
    },
    {
        start: 7862,
        length: 1,
        convRule: rule21
    },
    {
        start: 7863,
        length: 1,
        convRule: rule22
    },
    {
        start: 7864,
        length: 1,
        convRule: rule21
    },
    {
        start: 7865,
        length: 1,
        convRule: rule22
    },
    {
        start: 7866,
        length: 1,
        convRule: rule21
    },
    {
        start: 7867,
        length: 1,
        convRule: rule22
    },
    {
        start: 7868,
        length: 1,
        convRule: rule21
    },
    {
        start: 7869,
        length: 1,
        convRule: rule22
    },
    {
        start: 7870,
        length: 1,
        convRule: rule21
    },
    {
        start: 7871,
        length: 1,
        convRule: rule22
    },
    {
        start: 7872,
        length: 1,
        convRule: rule21
    },
    {
        start: 7873,
        length: 1,
        convRule: rule22
    },
    {
        start: 7874,
        length: 1,
        convRule: rule21
    },
    {
        start: 7875,
        length: 1,
        convRule: rule22
    },
    {
        start: 7876,
        length: 1,
        convRule: rule21
    },
    {
        start: 7877,
        length: 1,
        convRule: rule22
    },
    {
        start: 7878,
        length: 1,
        convRule: rule21
    },
    {
        start: 7879,
        length: 1,
        convRule: rule22
    },
    {
        start: 7880,
        length: 1,
        convRule: rule21
    },
    {
        start: 7881,
        length: 1,
        convRule: rule22
    },
    {
        start: 7882,
        length: 1,
        convRule: rule21
    },
    {
        start: 7883,
        length: 1,
        convRule: rule22
    },
    {
        start: 7884,
        length: 1,
        convRule: rule21
    },
    {
        start: 7885,
        length: 1,
        convRule: rule22
    },
    {
        start: 7886,
        length: 1,
        convRule: rule21
    },
    {
        start: 7887,
        length: 1,
        convRule: rule22
    },
    {
        start: 7888,
        length: 1,
        convRule: rule21
    },
    {
        start: 7889,
        length: 1,
        convRule: rule22
    },
    {
        start: 7890,
        length: 1,
        convRule: rule21
    },
    {
        start: 7891,
        length: 1,
        convRule: rule22
    },
    {
        start: 7892,
        length: 1,
        convRule: rule21
    },
    {
        start: 7893,
        length: 1,
        convRule: rule22
    },
    {
        start: 7894,
        length: 1,
        convRule: rule21
    },
    {
        start: 7895,
        length: 1,
        convRule: rule22
    },
    {
        start: 7896,
        length: 1,
        convRule: rule21
    },
    {
        start: 7897,
        length: 1,
        convRule: rule22
    },
    {
        start: 7898,
        length: 1,
        convRule: rule21
    },
    {
        start: 7899,
        length: 1,
        convRule: rule22
    },
    {
        start: 7900,
        length: 1,
        convRule: rule21
    },
    {
        start: 7901,
        length: 1,
        convRule: rule22
    },
    {
        start: 7902,
        length: 1,
        convRule: rule21
    },
    {
        start: 7903,
        length: 1,
        convRule: rule22
    },
    {
        start: 7904,
        length: 1,
        convRule: rule21
    },
    {
        start: 7905,
        length: 1,
        convRule: rule22
    },
    {
        start: 7906,
        length: 1,
        convRule: rule21
    },
    {
        start: 7907,
        length: 1,
        convRule: rule22
    },
    {
        start: 7908,
        length: 1,
        convRule: rule21
    },
    {
        start: 7909,
        length: 1,
        convRule: rule22
    },
    {
        start: 7910,
        length: 1,
        convRule: rule21
    },
    {
        start: 7911,
        length: 1,
        convRule: rule22
    },
    {
        start: 7912,
        length: 1,
        convRule: rule21
    },
    {
        start: 7913,
        length: 1,
        convRule: rule22
    },
    {
        start: 7914,
        length: 1,
        convRule: rule21
    },
    {
        start: 7915,
        length: 1,
        convRule: rule22
    },
    {
        start: 7916,
        length: 1,
        convRule: rule21
    },
    {
        start: 7917,
        length: 1,
        convRule: rule22
    },
    {
        start: 7918,
        length: 1,
        convRule: rule21
    },
    {
        start: 7919,
        length: 1,
        convRule: rule22
    },
    {
        start: 7920,
        length: 1,
        convRule: rule21
    },
    {
        start: 7921,
        length: 1,
        convRule: rule22
    },
    {
        start: 7922,
        length: 1,
        convRule: rule21
    },
    {
        start: 7923,
        length: 1,
        convRule: rule22
    },
    {
        start: 7924,
        length: 1,
        convRule: rule21
    },
    {
        start: 7925,
        length: 1,
        convRule: rule22
    },
    {
        start: 7926,
        length: 1,
        convRule: rule21
    },
    {
        start: 7927,
        length: 1,
        convRule: rule22
    },
    {
        start: 7928,
        length: 1,
        convRule: rule21
    },
    {
        start: 7929,
        length: 1,
        convRule: rule22
    },
    {
        start: 7930,
        length: 1,
        convRule: rule21
    },
    {
        start: 7931,
        length: 1,
        convRule: rule22
    },
    {
        start: 7932,
        length: 1,
        convRule: rule21
    },
    {
        start: 7933,
        length: 1,
        convRule: rule22
    },
    {
        start: 7934,
        length: 1,
        convRule: rule21
    },
    {
        start: 7935,
        length: 1,
        convRule: rule22
    },
    {
        start: 7936,
        length: 8,
        convRule: rule121
    },
    {
        start: 7944,
        length: 8,
        convRule: rule122
    },
    {
        start: 7952,
        length: 6,
        convRule: rule121
    },
    {
        start: 7960,
        length: 6,
        convRule: rule122
    },
    {
        start: 7968,
        length: 8,
        convRule: rule121
    },
    {
        start: 7976,
        length: 8,
        convRule: rule122
    },
    {
        start: 7984,
        length: 8,
        convRule: rule121
    },
    {
        start: 7992,
        length: 8,
        convRule: rule122
    },
    {
        start: 8000,
        length: 6,
        convRule: rule121
    },
    {
        start: 8008,
        length: 6,
        convRule: rule122
    },
    {
        start: 8017,
        length: 1,
        convRule: rule121
    },
    {
        start: 8019,
        length: 1,
        convRule: rule121
    },
    {
        start: 8021,
        length: 1,
        convRule: rule121
    },
    {
        start: 8023,
        length: 1,
        convRule: rule121
    },
    {
        start: 8025,
        length: 1,
        convRule: rule122
    },
    {
        start: 8027,
        length: 1,
        convRule: rule122
    },
    {
        start: 8029,
        length: 1,
        convRule: rule122
    },
    {
        start: 8031,
        length: 1,
        convRule: rule122
    },
    {
        start: 8032,
        length: 8,
        convRule: rule121
    },
    {
        start: 8040,
        length: 8,
        convRule: rule122
    },
    {
        start: 8048,
        length: 2,
        convRule: rule123
    },
    {
        start: 8050,
        length: 4,
        convRule: rule124
    },
    {
        start: 8054,
        length: 2,
        convRule: rule125
    },
    {
        start: 8056,
        length: 2,
        convRule: rule126
    },
    {
        start: 8058,
        length: 2,
        convRule: rule127
    },
    {
        start: 8060,
        length: 2,
        convRule: rule128
    },
    {
        start: 8064,
        length: 8,
        convRule: rule121
    },
    {
        start: 8072,
        length: 8,
        convRule: rule129
    },
    {
        start: 8080,
        length: 8,
        convRule: rule121
    },
    {
        start: 8088,
        length: 8,
        convRule: rule129
    },
    {
        start: 8096,
        length: 8,
        convRule: rule121
    },
    {
        start: 8104,
        length: 8,
        convRule: rule129
    },
    {
        start: 8112,
        length: 2,
        convRule: rule121
    },
    {
        start: 8115,
        length: 1,
        convRule: rule130
    },
    {
        start: 8120,
        length: 2,
        convRule: rule122
    },
    {
        start: 8122,
        length: 2,
        convRule: rule131
    },
    {
        start: 8124,
        length: 1,
        convRule: rule132
    },
    {
        start: 8126,
        length: 1,
        convRule: rule133
    },
    {
        start: 8131,
        length: 1,
        convRule: rule130
    },
    {
        start: 8136,
        length: 4,
        convRule: rule134
    },
    {
        start: 8140,
        length: 1,
        convRule: rule132
    },
    {
        start: 8144,
        length: 2,
        convRule: rule121
    },
    {
        start: 8152,
        length: 2,
        convRule: rule122
    },
    {
        start: 8154,
        length: 2,
        convRule: rule135
    },
    {
        start: 8160,
        length: 2,
        convRule: rule121
    },
    {
        start: 8165,
        length: 1,
        convRule: rule104
    },
    {
        start: 8168,
        length: 2,
        convRule: rule122
    },
    {
        start: 8170,
        length: 2,
        convRule: rule136
    },
    {
        start: 8172,
        length: 1,
        convRule: rule107
    },
    {
        start: 8179,
        length: 1,
        convRule: rule130
    },
    {
        start: 8184,
        length: 2,
        convRule: rule137
    },
    {
        start: 8186,
        length: 2,
        convRule: rule138
    },
    {
        start: 8188,
        length: 1,
        convRule: rule132
    },
    {
        start: 8486,
        length: 1,
        convRule: rule141
    },
    {
        start: 8490,
        length: 1,
        convRule: rule142
    },
    {
        start: 8491,
        length: 1,
        convRule: rule143
    },
    {
        start: 8498,
        length: 1,
        convRule: rule144
    },
    {
        start: 8526,
        length: 1,
        convRule: rule145
    },
    {
        start: 8544,
        length: 16,
        convRule: rule146
    },
    {
        start: 8560,
        length: 16,
        convRule: rule147
    },
    {
        start: 8579,
        length: 1,
        convRule: rule21
    },
    {
        start: 8580,
        length: 1,
        convRule: rule22
    },
    {
        start: 9398,
        length: 26,
        convRule: rule148
    },
    {
        start: 9424,
        length: 26,
        convRule: rule149
    },
    {
        start: 11264,
        length: 47,
        convRule: rule112
    },
    {
        start: 11312,
        length: 47,
        convRule: rule113
    },
    {
        start: 11360,
        length: 1,
        convRule: rule21
    },
    {
        start: 11361,
        length: 1,
        convRule: rule22
    },
    {
        start: 11362,
        length: 1,
        convRule: rule150
    },
    {
        start: 11363,
        length: 1,
        convRule: rule151
    },
    {
        start: 11364,
        length: 1,
        convRule: rule152
    },
    {
        start: 11365,
        length: 1,
        convRule: rule153
    },
    {
        start: 11366,
        length: 1,
        convRule: rule154
    },
    {
        start: 11367,
        length: 1,
        convRule: rule21
    },
    {
        start: 11368,
        length: 1,
        convRule: rule22
    },
    {
        start: 11369,
        length: 1,
        convRule: rule21
    },
    {
        start: 11370,
        length: 1,
        convRule: rule22
    },
    {
        start: 11371,
        length: 1,
        convRule: rule21
    },
    {
        start: 11372,
        length: 1,
        convRule: rule22
    },
    {
        start: 11373,
        length: 1,
        convRule: rule155
    },
    {
        start: 11374,
        length: 1,
        convRule: rule156
    },
    {
        start: 11375,
        length: 1,
        convRule: rule157
    },
    {
        start: 11376,
        length: 1,
        convRule: rule158
    },
    {
        start: 11378,
        length: 1,
        convRule: rule21
    },
    {
        start: 11379,
        length: 1,
        convRule: rule22
    },
    {
        start: 11381,
        length: 1,
        convRule: rule21
    },
    {
        start: 11382,
        length: 1,
        convRule: rule22
    },
    {
        start: 11390,
        length: 2,
        convRule: rule159
    },
    {
        start: 11392,
        length: 1,
        convRule: rule21
    },
    {
        start: 11393,
        length: 1,
        convRule: rule22
    },
    {
        start: 11394,
        length: 1,
        convRule: rule21
    },
    {
        start: 11395,
        length: 1,
        convRule: rule22
    },
    {
        start: 11396,
        length: 1,
        convRule: rule21
    },
    {
        start: 11397,
        length: 1,
        convRule: rule22
    },
    {
        start: 11398,
        length: 1,
        convRule: rule21
    },
    {
        start: 11399,
        length: 1,
        convRule: rule22
    },
    {
        start: 11400,
        length: 1,
        convRule: rule21
    },
    {
        start: 11401,
        length: 1,
        convRule: rule22
    },
    {
        start: 11402,
        length: 1,
        convRule: rule21
    },
    {
        start: 11403,
        length: 1,
        convRule: rule22
    },
    {
        start: 11404,
        length: 1,
        convRule: rule21
    },
    {
        start: 11405,
        length: 1,
        convRule: rule22
    },
    {
        start: 11406,
        length: 1,
        convRule: rule21
    },
    {
        start: 11407,
        length: 1,
        convRule: rule22
    },
    {
        start: 11408,
        length: 1,
        convRule: rule21
    },
    {
        start: 11409,
        length: 1,
        convRule: rule22
    },
    {
        start: 11410,
        length: 1,
        convRule: rule21
    },
    {
        start: 11411,
        length: 1,
        convRule: rule22
    },
    {
        start: 11412,
        length: 1,
        convRule: rule21
    },
    {
        start: 11413,
        length: 1,
        convRule: rule22
    },
    {
        start: 11414,
        length: 1,
        convRule: rule21
    },
    {
        start: 11415,
        length: 1,
        convRule: rule22
    },
    {
        start: 11416,
        length: 1,
        convRule: rule21
    },
    {
        start: 11417,
        length: 1,
        convRule: rule22
    },
    {
        start: 11418,
        length: 1,
        convRule: rule21
    },
    {
        start: 11419,
        length: 1,
        convRule: rule22
    },
    {
        start: 11420,
        length: 1,
        convRule: rule21
    },
    {
        start: 11421,
        length: 1,
        convRule: rule22
    },
    {
        start: 11422,
        length: 1,
        convRule: rule21
    },
    {
        start: 11423,
        length: 1,
        convRule: rule22
    },
    {
        start: 11424,
        length: 1,
        convRule: rule21
    },
    {
        start: 11425,
        length: 1,
        convRule: rule22
    },
    {
        start: 11426,
        length: 1,
        convRule: rule21
    },
    {
        start: 11427,
        length: 1,
        convRule: rule22
    },
    {
        start: 11428,
        length: 1,
        convRule: rule21
    },
    {
        start: 11429,
        length: 1,
        convRule: rule22
    },
    {
        start: 11430,
        length: 1,
        convRule: rule21
    },
    {
        start: 11431,
        length: 1,
        convRule: rule22
    },
    {
        start: 11432,
        length: 1,
        convRule: rule21
    },
    {
        start: 11433,
        length: 1,
        convRule: rule22
    },
    {
        start: 11434,
        length: 1,
        convRule: rule21
    },
    {
        start: 11435,
        length: 1,
        convRule: rule22
    },
    {
        start: 11436,
        length: 1,
        convRule: rule21
    },
    {
        start: 11437,
        length: 1,
        convRule: rule22
    },
    {
        start: 11438,
        length: 1,
        convRule: rule21
    },
    {
        start: 11439,
        length: 1,
        convRule: rule22
    },
    {
        start: 11440,
        length: 1,
        convRule: rule21
    },
    {
        start: 11441,
        length: 1,
        convRule: rule22
    },
    {
        start: 11442,
        length: 1,
        convRule: rule21
    },
    {
        start: 11443,
        length: 1,
        convRule: rule22
    },
    {
        start: 11444,
        length: 1,
        convRule: rule21
    },
    {
        start: 11445,
        length: 1,
        convRule: rule22
    },
    {
        start: 11446,
        length: 1,
        convRule: rule21
    },
    {
        start: 11447,
        length: 1,
        convRule: rule22
    },
    {
        start: 11448,
        length: 1,
        convRule: rule21
    },
    {
        start: 11449,
        length: 1,
        convRule: rule22
    },
    {
        start: 11450,
        length: 1,
        convRule: rule21
    },
    {
        start: 11451,
        length: 1,
        convRule: rule22
    },
    {
        start: 11452,
        length: 1,
        convRule: rule21
    },
    {
        start: 11453,
        length: 1,
        convRule: rule22
    },
    {
        start: 11454,
        length: 1,
        convRule: rule21
    },
    {
        start: 11455,
        length: 1,
        convRule: rule22
    },
    {
        start: 11456,
        length: 1,
        convRule: rule21
    },
    {
        start: 11457,
        length: 1,
        convRule: rule22
    },
    {
        start: 11458,
        length: 1,
        convRule: rule21
    },
    {
        start: 11459,
        length: 1,
        convRule: rule22
    },
    {
        start: 11460,
        length: 1,
        convRule: rule21
    },
    {
        start: 11461,
        length: 1,
        convRule: rule22
    },
    {
        start: 11462,
        length: 1,
        convRule: rule21
    },
    {
        start: 11463,
        length: 1,
        convRule: rule22
    },
    {
        start: 11464,
        length: 1,
        convRule: rule21
    },
    {
        start: 11465,
        length: 1,
        convRule: rule22
    },
    {
        start: 11466,
        length: 1,
        convRule: rule21
    },
    {
        start: 11467,
        length: 1,
        convRule: rule22
    },
    {
        start: 11468,
        length: 1,
        convRule: rule21
    },
    {
        start: 11469,
        length: 1,
        convRule: rule22
    },
    {
        start: 11470,
        length: 1,
        convRule: rule21
    },
    {
        start: 11471,
        length: 1,
        convRule: rule22
    },
    {
        start: 11472,
        length: 1,
        convRule: rule21
    },
    {
        start: 11473,
        length: 1,
        convRule: rule22
    },
    {
        start: 11474,
        length: 1,
        convRule: rule21
    },
    {
        start: 11475,
        length: 1,
        convRule: rule22
    },
    {
        start: 11476,
        length: 1,
        convRule: rule21
    },
    {
        start: 11477,
        length: 1,
        convRule: rule22
    },
    {
        start: 11478,
        length: 1,
        convRule: rule21
    },
    {
        start: 11479,
        length: 1,
        convRule: rule22
    },
    {
        start: 11480,
        length: 1,
        convRule: rule21
    },
    {
        start: 11481,
        length: 1,
        convRule: rule22
    },
    {
        start: 11482,
        length: 1,
        convRule: rule21
    },
    {
        start: 11483,
        length: 1,
        convRule: rule22
    },
    {
        start: 11484,
        length: 1,
        convRule: rule21
    },
    {
        start: 11485,
        length: 1,
        convRule: rule22
    },
    {
        start: 11486,
        length: 1,
        convRule: rule21
    },
    {
        start: 11487,
        length: 1,
        convRule: rule22
    },
    {
        start: 11488,
        length: 1,
        convRule: rule21
    },
    {
        start: 11489,
        length: 1,
        convRule: rule22
    },
    {
        start: 11490,
        length: 1,
        convRule: rule21
    },
    {
        start: 11491,
        length: 1,
        convRule: rule22
    },
    {
        start: 11499,
        length: 1,
        convRule: rule21
    },
    {
        start: 11500,
        length: 1,
        convRule: rule22
    },
    {
        start: 11501,
        length: 1,
        convRule: rule21
    },
    {
        start: 11502,
        length: 1,
        convRule: rule22
    },
    {
        start: 11520,
        length: 38,
        convRule: rule160
    },
    {
        start: 42560,
        length: 1,
        convRule: rule21
    },
    {
        start: 42561,
        length: 1,
        convRule: rule22
    },
    {
        start: 42562,
        length: 1,
        convRule: rule21
    },
    {
        start: 42563,
        length: 1,
        convRule: rule22
    },
    {
        start: 42564,
        length: 1,
        convRule: rule21
    },
    {
        start: 42565,
        length: 1,
        convRule: rule22
    },
    {
        start: 42566,
        length: 1,
        convRule: rule21
    },
    {
        start: 42567,
        length: 1,
        convRule: rule22
    },
    {
        start: 42568,
        length: 1,
        convRule: rule21
    },
    {
        start: 42569,
        length: 1,
        convRule: rule22
    },
    {
        start: 42570,
        length: 1,
        convRule: rule21
    },
    {
        start: 42571,
        length: 1,
        convRule: rule22
    },
    {
        start: 42572,
        length: 1,
        convRule: rule21
    },
    {
        start: 42573,
        length: 1,
        convRule: rule22
    },
    {
        start: 42574,
        length: 1,
        convRule: rule21
    },
    {
        start: 42575,
        length: 1,
        convRule: rule22
    },
    {
        start: 42576,
        length: 1,
        convRule: rule21
    },
    {
        start: 42577,
        length: 1,
        convRule: rule22
    },
    {
        start: 42578,
        length: 1,
        convRule: rule21
    },
    {
        start: 42579,
        length: 1,
        convRule: rule22
    },
    {
        start: 42580,
        length: 1,
        convRule: rule21
    },
    {
        start: 42581,
        length: 1,
        convRule: rule22
    },
    {
        start: 42582,
        length: 1,
        convRule: rule21
    },
    {
        start: 42583,
        length: 1,
        convRule: rule22
    },
    {
        start: 42584,
        length: 1,
        convRule: rule21
    },
    {
        start: 42585,
        length: 1,
        convRule: rule22
    },
    {
        start: 42586,
        length: 1,
        convRule: rule21
    },
    {
        start: 42587,
        length: 1,
        convRule: rule22
    },
    {
        start: 42588,
        length: 1,
        convRule: rule21
    },
    {
        start: 42589,
        length: 1,
        convRule: rule22
    },
    {
        start: 42590,
        length: 1,
        convRule: rule21
    },
    {
        start: 42591,
        length: 1,
        convRule: rule22
    },
    {
        start: 42592,
        length: 1,
        convRule: rule21
    },
    {
        start: 42593,
        length: 1,
        convRule: rule22
    },
    {
        start: 42594,
        length: 1,
        convRule: rule21
    },
    {
        start: 42595,
        length: 1,
        convRule: rule22
    },
    {
        start: 42596,
        length: 1,
        convRule: rule21
    },
    {
        start: 42597,
        length: 1,
        convRule: rule22
    },
    {
        start: 42598,
        length: 1,
        convRule: rule21
    },
    {
        start: 42599,
        length: 1,
        convRule: rule22
    },
    {
        start: 42600,
        length: 1,
        convRule: rule21
    },
    {
        start: 42601,
        length: 1,
        convRule: rule22
    },
    {
        start: 42602,
        length: 1,
        convRule: rule21
    },
    {
        start: 42603,
        length: 1,
        convRule: rule22
    },
    {
        start: 42604,
        length: 1,
        convRule: rule21
    },
    {
        start: 42605,
        length: 1,
        convRule: rule22
    },
    {
        start: 42624,
        length: 1,
        convRule: rule21
    },
    {
        start: 42625,
        length: 1,
        convRule: rule22
    },
    {
        start: 42626,
        length: 1,
        convRule: rule21
    },
    {
        start: 42627,
        length: 1,
        convRule: rule22
    },
    {
        start: 42628,
        length: 1,
        convRule: rule21
    },
    {
        start: 42629,
        length: 1,
        convRule: rule22
    },
    {
        start: 42630,
        length: 1,
        convRule: rule21
    },
    {
        start: 42631,
        length: 1,
        convRule: rule22
    },
    {
        start: 42632,
        length: 1,
        convRule: rule21
    },
    {
        start: 42633,
        length: 1,
        convRule: rule22
    },
    {
        start: 42634,
        length: 1,
        convRule: rule21
    },
    {
        start: 42635,
        length: 1,
        convRule: rule22
    },
    {
        start: 42636,
        length: 1,
        convRule: rule21
    },
    {
        start: 42637,
        length: 1,
        convRule: rule22
    },
    {
        start: 42638,
        length: 1,
        convRule: rule21
    },
    {
        start: 42639,
        length: 1,
        convRule: rule22
    },
    {
        start: 42640,
        length: 1,
        convRule: rule21
    },
    {
        start: 42641,
        length: 1,
        convRule: rule22
    },
    {
        start: 42642,
        length: 1,
        convRule: rule21
    },
    {
        start: 42643,
        length: 1,
        convRule: rule22
    },
    {
        start: 42644,
        length: 1,
        convRule: rule21
    },
    {
        start: 42645,
        length: 1,
        convRule: rule22
    },
    {
        start: 42646,
        length: 1,
        convRule: rule21
    },
    {
        start: 42647,
        length: 1,
        convRule: rule22
    },
    {
        start: 42786,
        length: 1,
        convRule: rule21
    },
    {
        start: 42787,
        length: 1,
        convRule: rule22
    },
    {
        start: 42788,
        length: 1,
        convRule: rule21
    },
    {
        start: 42789,
        length: 1,
        convRule: rule22
    },
    {
        start: 42790,
        length: 1,
        convRule: rule21
    },
    {
        start: 42791,
        length: 1,
        convRule: rule22
    },
    {
        start: 42792,
        length: 1,
        convRule: rule21
    },
    {
        start: 42793,
        length: 1,
        convRule: rule22
    },
    {
        start: 42794,
        length: 1,
        convRule: rule21
    },
    {
        start: 42795,
        length: 1,
        convRule: rule22
    },
    {
        start: 42796,
        length: 1,
        convRule: rule21
    },
    {
        start: 42797,
        length: 1,
        convRule: rule22
    },
    {
        start: 42798,
        length: 1,
        convRule: rule21
    },
    {
        start: 42799,
        length: 1,
        convRule: rule22
    },
    {
        start: 42802,
        length: 1,
        convRule: rule21
    },
    {
        start: 42803,
        length: 1,
        convRule: rule22
    },
    {
        start: 42804,
        length: 1,
        convRule: rule21
    },
    {
        start: 42805,
        length: 1,
        convRule: rule22
    },
    {
        start: 42806,
        length: 1,
        convRule: rule21
    },
    {
        start: 42807,
        length: 1,
        convRule: rule22
    },
    {
        start: 42808,
        length: 1,
        convRule: rule21
    },
    {
        start: 42809,
        length: 1,
        convRule: rule22
    },
    {
        start: 42810,
        length: 1,
        convRule: rule21
    },
    {
        start: 42811,
        length: 1,
        convRule: rule22
    },
    {
        start: 42812,
        length: 1,
        convRule: rule21
    },
    {
        start: 42813,
        length: 1,
        convRule: rule22
    },
    {
        start: 42814,
        length: 1,
        convRule: rule21
    },
    {
        start: 42815,
        length: 1,
        convRule: rule22
    },
    {
        start: 42816,
        length: 1,
        convRule: rule21
    },
    {
        start: 42817,
        length: 1,
        convRule: rule22
    },
    {
        start: 42818,
        length: 1,
        convRule: rule21
    },
    {
        start: 42819,
        length: 1,
        convRule: rule22
    },
    {
        start: 42820,
        length: 1,
        convRule: rule21
    },
    {
        start: 42821,
        length: 1,
        convRule: rule22
    },
    {
        start: 42822,
        length: 1,
        convRule: rule21
    },
    {
        start: 42823,
        length: 1,
        convRule: rule22
    },
    {
        start: 42824,
        length: 1,
        convRule: rule21
    },
    {
        start: 42825,
        length: 1,
        convRule: rule22
    },
    {
        start: 42826,
        length: 1,
        convRule: rule21
    },
    {
        start: 42827,
        length: 1,
        convRule: rule22
    },
    {
        start: 42828,
        length: 1,
        convRule: rule21
    },
    {
        start: 42829,
        length: 1,
        convRule: rule22
    },
    {
        start: 42830,
        length: 1,
        convRule: rule21
    },
    {
        start: 42831,
        length: 1,
        convRule: rule22
    },
    {
        start: 42832,
        length: 1,
        convRule: rule21
    },
    {
        start: 42833,
        length: 1,
        convRule: rule22
    },
    {
        start: 42834,
        length: 1,
        convRule: rule21
    },
    {
        start: 42835,
        length: 1,
        convRule: rule22
    },
    {
        start: 42836,
        length: 1,
        convRule: rule21
    },
    {
        start: 42837,
        length: 1,
        convRule: rule22
    },
    {
        start: 42838,
        length: 1,
        convRule: rule21
    },
    {
        start: 42839,
        length: 1,
        convRule: rule22
    },
    {
        start: 42840,
        length: 1,
        convRule: rule21
    },
    {
        start: 42841,
        length: 1,
        convRule: rule22
    },
    {
        start: 42842,
        length: 1,
        convRule: rule21
    },
    {
        start: 42843,
        length: 1,
        convRule: rule22
    },
    {
        start: 42844,
        length: 1,
        convRule: rule21
    },
    {
        start: 42845,
        length: 1,
        convRule: rule22
    },
    {
        start: 42846,
        length: 1,
        convRule: rule21
    },
    {
        start: 42847,
        length: 1,
        convRule: rule22
    },
    {
        start: 42848,
        length: 1,
        convRule: rule21
    },
    {
        start: 42849,
        length: 1,
        convRule: rule22
    },
    {
        start: 42850,
        length: 1,
        convRule: rule21
    },
    {
        start: 42851,
        length: 1,
        convRule: rule22
    },
    {
        start: 42852,
        length: 1,
        convRule: rule21
    },
    {
        start: 42853,
        length: 1,
        convRule: rule22
    },
    {
        start: 42854,
        length: 1,
        convRule: rule21
    },
    {
        start: 42855,
        length: 1,
        convRule: rule22
    },
    {
        start: 42856,
        length: 1,
        convRule: rule21
    },
    {
        start: 42857,
        length: 1,
        convRule: rule22
    },
    {
        start: 42858,
        length: 1,
        convRule: rule21
    },
    {
        start: 42859,
        length: 1,
        convRule: rule22
    },
    {
        start: 42860,
        length: 1,
        convRule: rule21
    },
    {
        start: 42861,
        length: 1,
        convRule: rule22
    },
    {
        start: 42862,
        length: 1,
        convRule: rule21
    },
    {
        start: 42863,
        length: 1,
        convRule: rule22
    },
    {
        start: 42873,
        length: 1,
        convRule: rule21
    },
    {
        start: 42874,
        length: 1,
        convRule: rule22
    },
    {
        start: 42875,
        length: 1,
        convRule: rule21
    },
    {
        start: 42876,
        length: 1,
        convRule: rule22
    },
    {
        start: 42877,
        length: 1,
        convRule: rule161
    },
    {
        start: 42878,
        length: 1,
        convRule: rule21
    },
    {
        start: 42879,
        length: 1,
        convRule: rule22
    },
    {
        start: 42880,
        length: 1,
        convRule: rule21
    },
    {
        start: 42881,
        length: 1,
        convRule: rule22
    },
    {
        start: 42882,
        length: 1,
        convRule: rule21
    },
    {
        start: 42883,
        length: 1,
        convRule: rule22
    },
    {
        start: 42884,
        length: 1,
        convRule: rule21
    },
    {
        start: 42885,
        length: 1,
        convRule: rule22
    },
    {
        start: 42886,
        length: 1,
        convRule: rule21
    },
    {
        start: 42887,
        length: 1,
        convRule: rule22
    },
    {
        start: 42891,
        length: 1,
        convRule: rule21
    },
    {
        start: 42892,
        length: 1,
        convRule: rule22
    },
    {
        start: 42893,
        length: 1,
        convRule: rule162
    },
    {
        start: 42896,
        length: 1,
        convRule: rule21
    },
    {
        start: 42897,
        length: 1,
        convRule: rule22
    },
    {
        start: 42912,
        length: 1,
        convRule: rule21
    },
    {
        start: 42913,
        length: 1,
        convRule: rule22
    },
    {
        start: 42914,
        length: 1,
        convRule: rule21
    },
    {
        start: 42915,
        length: 1,
        convRule: rule22
    },
    {
        start: 42916,
        length: 1,
        convRule: rule21
    },
    {
        start: 42917,
        length: 1,
        convRule: rule22
    },
    {
        start: 42918,
        length: 1,
        convRule: rule21
    },
    {
        start: 42919,
        length: 1,
        convRule: rule22
    },
    {
        start: 42920,
        length: 1,
        convRule: rule21
    },
    {
        start: 42921,
        length: 1,
        convRule: rule22
    },
    {
        start: 65313,
        length: 26,
        convRule: rule9
    },
    {
        start: 65345,
        length: 26,
        convRule: rule12
    },
    {
        start: 66560,
        length: 40,
        convRule: rule165
    },
    {
        start: 66600,
        length: 40,
        convRule: rule166
    }
];
var bsearch = function(a) {
    return function(array) {
        return function(size) {
            return function(compare) {
                var go = function($copy_i) {
                    return function($copy_k) {
                        var $tco_var_i = $copy_i;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(i, k) {
                            if (i > k) {
                                $tco_done = true;
                                return Data_Maybe.Nothing.value;
                            }
                            if (Data_Boolean.otherwise) {
                                var j = Data_Int.floor(Data_Int.toNumber(i + k | 0) / 2);
                                var v = compare(a)(array[j]);
                                if (v instanceof Data_Ordering.EQ) {
                                    $tco_done = true;
                                    return new Data_Maybe.Just(array[j]);
                                }
                                if (v instanceof Data_Ordering.GT) {
                                    $tco_var_i = j + 1 | 0;
                                    $copy_k = k;
                                    return;
                                }
                                $tco_var_i = i;
                                $copy_k = j - 1 | 0;
                                return;
                            }
                            throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4783, column 5 - line 4789, column 49): " + [
                                i.constructor.name,
                                k.constructor.name
                            ]);
                        }
                        while(!$tco_done)$tco_result = $tco_loop($tco_var_i, $copy_k);
                        return $tco_result;
                    };
                };
                return go(0)(size);
            };
        };
    };
};
var blkCmp = function(v) {
    return function(v1) {
        if (v.start >= v1.start && v.start < (v1.start + v1.length | 0)) return Data_Ordering.EQ.value;
        if (v.start > v1.start) return Data_Ordering.GT.value;
        if (Data_Boolean.otherwise) return Data_Ordering.LT.value;
        throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4760, column 1 - line 4760, column 45): " + [
            v.constructor.name,
            v1.constructor.name
        ]);
    };
};
var getRule = function(blocks) {
    return function(unichar) {
        return function(size) {
            var key = {
                start: unichar,
                length: 1,
                convRule: nullrule
            };
            var maybeCharBlock = bsearch(key)(blocks)(size)(blkCmp);
            if (maybeCharBlock instanceof Data_Maybe.Nothing) return Data_Maybe.Nothing.value;
            if (maybeCharBlock instanceof Data_Maybe.Just) return new Data_Maybe.Just(maybeCharBlock.value0.convRule);
            throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4773, column 8 - line 4775, column 62): " + [
                maybeCharBlock.constructor.name
            ]);
        };
    };
};
var caseConv = function(f) {
    return function($$char) {
        var maybeConversionRule = getRule(convchars)($$char)(numConvBlocks);
        if (maybeConversionRule instanceof Data_Maybe.Nothing) return $$char;
        if (maybeConversionRule instanceof Data_Maybe.Just) return $$char + f(maybeConversionRule.value0) | 0;
        throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4850, column 8 - line 4852, column 55): " + [
            maybeConversionRule.constructor.name
        ]);
    };
};
var uTowlower = caseConv(function(v) {
    return v.lowdist;
});
var uTowtitle = caseConv(function(v) {
    return v.titledist;
});
var uTowupper = caseConv(function(v) {
    return v.updist;
});
var checkAttrS = function(categories) {
    return function($$char) {
        var maybeConversionRule = getRule(spacechars)($$char)(numSpaceBlocks);
        if (maybeConversionRule instanceof Data_Maybe.Nothing) return false;
        if (maybeConversionRule instanceof Data_Maybe.Just) return Data_Maybe.isJust(Data_Array.elemIndex(Data_Eq.eqInt)(maybeConversionRule.value0.category)(categories));
        throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4807, column 8 - line 4809, column 92): " + [
            maybeConversionRule.constructor.name
        ]);
    };
};
var uIswspace = checkAttrS([
    gencatZS
]);
var allchars = [
    {
        start: 0,
        length: 32,
        convRule: rule0
    },
    {
        start: 32,
        length: 1,
        convRule: rule1
    },
    {
        start: 33,
        length: 3,
        convRule: rule2
    },
    {
        start: 36,
        length: 1,
        convRule: rule3
    },
    {
        start: 37,
        length: 3,
        convRule: rule2
    },
    {
        start: 40,
        length: 1,
        convRule: rule4
    },
    {
        start: 41,
        length: 1,
        convRule: rule5
    },
    {
        start: 42,
        length: 1,
        convRule: rule2
    },
    {
        start: 43,
        length: 1,
        convRule: rule6
    },
    {
        start: 44,
        length: 1,
        convRule: rule2
    },
    {
        start: 45,
        length: 1,
        convRule: rule7
    },
    {
        start: 46,
        length: 2,
        convRule: rule2
    },
    {
        start: 48,
        length: 10,
        convRule: rule8
    },
    {
        start: 58,
        length: 2,
        convRule: rule2
    },
    {
        start: 60,
        length: 3,
        convRule: rule6
    },
    {
        start: 63,
        length: 2,
        convRule: rule2
    },
    {
        start: 65,
        length: 26,
        convRule: rule9
    },
    {
        start: 91,
        length: 1,
        convRule: rule4
    },
    {
        start: 92,
        length: 1,
        convRule: rule2
    },
    {
        start: 93,
        length: 1,
        convRule: rule5
    },
    {
        start: 94,
        length: 1,
        convRule: rule10
    },
    {
        start: 95,
        length: 1,
        convRule: rule11
    },
    {
        start: 96,
        length: 1,
        convRule: rule10
    },
    {
        start: 97,
        length: 26,
        convRule: rule12
    },
    {
        start: 123,
        length: 1,
        convRule: rule4
    },
    {
        start: 124,
        length: 1,
        convRule: rule6
    },
    {
        start: 125,
        length: 1,
        convRule: rule5
    },
    {
        start: 126,
        length: 1,
        convRule: rule6
    },
    {
        start: 127,
        length: 33,
        convRule: rule0
    },
    {
        start: 160,
        length: 1,
        convRule: rule1
    },
    {
        start: 161,
        length: 1,
        convRule: rule2
    },
    {
        start: 162,
        length: 4,
        convRule: rule3
    },
    {
        start: 166,
        length: 2,
        convRule: rule13
    },
    {
        start: 168,
        length: 1,
        convRule: rule10
    },
    {
        start: 169,
        length: 1,
        convRule: rule13
    },
    {
        start: 170,
        length: 1,
        convRule: rule14
    },
    {
        start: 171,
        length: 1,
        convRule: rule15
    },
    {
        start: 172,
        length: 1,
        convRule: rule6
    },
    {
        start: 173,
        length: 1,
        convRule: rule16
    },
    {
        start: 174,
        length: 1,
        convRule: rule13
    },
    {
        start: 175,
        length: 1,
        convRule: rule10
    },
    {
        start: 176,
        length: 1,
        convRule: rule13
    },
    {
        start: 177,
        length: 1,
        convRule: rule6
    },
    {
        start: 178,
        length: 2,
        convRule: rule17
    },
    {
        start: 180,
        length: 1,
        convRule: rule10
    },
    {
        start: 181,
        length: 1,
        convRule: rule18
    },
    {
        start: 182,
        length: 1,
        convRule: rule13
    },
    {
        start: 183,
        length: 1,
        convRule: rule2
    },
    {
        start: 184,
        length: 1,
        convRule: rule10
    },
    {
        start: 185,
        length: 1,
        convRule: rule17
    },
    {
        start: 186,
        length: 1,
        convRule: rule14
    },
    {
        start: 187,
        length: 1,
        convRule: rule19
    },
    {
        start: 188,
        length: 3,
        convRule: rule17
    },
    {
        start: 191,
        length: 1,
        convRule: rule2
    },
    {
        start: 192,
        length: 23,
        convRule: rule9
    },
    {
        start: 215,
        length: 1,
        convRule: rule6
    },
    {
        start: 216,
        length: 7,
        convRule: rule9
    },
    {
        start: 223,
        length: 1,
        convRule: rule14
    },
    {
        start: 224,
        length: 23,
        convRule: rule12
    },
    {
        start: 247,
        length: 1,
        convRule: rule6
    },
    {
        start: 248,
        length: 7,
        convRule: rule12
    },
    {
        start: 255,
        length: 1,
        convRule: rule20
    },
    {
        start: 256,
        length: 1,
        convRule: rule21
    },
    {
        start: 257,
        length: 1,
        convRule: rule22
    },
    {
        start: 258,
        length: 1,
        convRule: rule21
    },
    {
        start: 259,
        length: 1,
        convRule: rule22
    },
    {
        start: 260,
        length: 1,
        convRule: rule21
    },
    {
        start: 261,
        length: 1,
        convRule: rule22
    },
    {
        start: 262,
        length: 1,
        convRule: rule21
    },
    {
        start: 263,
        length: 1,
        convRule: rule22
    },
    {
        start: 264,
        length: 1,
        convRule: rule21
    },
    {
        start: 265,
        length: 1,
        convRule: rule22
    },
    {
        start: 266,
        length: 1,
        convRule: rule21
    },
    {
        start: 267,
        length: 1,
        convRule: rule22
    },
    {
        start: 268,
        length: 1,
        convRule: rule21
    },
    {
        start: 269,
        length: 1,
        convRule: rule22
    },
    {
        start: 270,
        length: 1,
        convRule: rule21
    },
    {
        start: 271,
        length: 1,
        convRule: rule22
    },
    {
        start: 272,
        length: 1,
        convRule: rule21
    },
    {
        start: 273,
        length: 1,
        convRule: rule22
    },
    {
        start: 274,
        length: 1,
        convRule: rule21
    },
    {
        start: 275,
        length: 1,
        convRule: rule22
    },
    {
        start: 276,
        length: 1,
        convRule: rule21
    },
    {
        start: 277,
        length: 1,
        convRule: rule22
    },
    {
        start: 278,
        length: 1,
        convRule: rule21
    },
    {
        start: 279,
        length: 1,
        convRule: rule22
    },
    {
        start: 280,
        length: 1,
        convRule: rule21
    },
    {
        start: 281,
        length: 1,
        convRule: rule22
    },
    {
        start: 282,
        length: 1,
        convRule: rule21
    },
    {
        start: 283,
        length: 1,
        convRule: rule22
    },
    {
        start: 284,
        length: 1,
        convRule: rule21
    },
    {
        start: 285,
        length: 1,
        convRule: rule22
    },
    {
        start: 286,
        length: 1,
        convRule: rule21
    },
    {
        start: 287,
        length: 1,
        convRule: rule22
    },
    {
        start: 288,
        length: 1,
        convRule: rule21
    },
    {
        start: 289,
        length: 1,
        convRule: rule22
    },
    {
        start: 290,
        length: 1,
        convRule: rule21
    },
    {
        start: 291,
        length: 1,
        convRule: rule22
    },
    {
        start: 292,
        length: 1,
        convRule: rule21
    },
    {
        start: 293,
        length: 1,
        convRule: rule22
    },
    {
        start: 294,
        length: 1,
        convRule: rule21
    },
    {
        start: 295,
        length: 1,
        convRule: rule22
    },
    {
        start: 296,
        length: 1,
        convRule: rule21
    },
    {
        start: 297,
        length: 1,
        convRule: rule22
    },
    {
        start: 298,
        length: 1,
        convRule: rule21
    },
    {
        start: 299,
        length: 1,
        convRule: rule22
    },
    {
        start: 300,
        length: 1,
        convRule: rule21
    },
    {
        start: 301,
        length: 1,
        convRule: rule22
    },
    {
        start: 302,
        length: 1,
        convRule: rule21
    },
    {
        start: 303,
        length: 1,
        convRule: rule22
    },
    {
        start: 304,
        length: 1,
        convRule: rule23
    },
    {
        start: 305,
        length: 1,
        convRule: rule24
    },
    {
        start: 306,
        length: 1,
        convRule: rule21
    },
    {
        start: 307,
        length: 1,
        convRule: rule22
    },
    {
        start: 308,
        length: 1,
        convRule: rule21
    },
    {
        start: 309,
        length: 1,
        convRule: rule22
    },
    {
        start: 310,
        length: 1,
        convRule: rule21
    },
    {
        start: 311,
        length: 1,
        convRule: rule22
    },
    {
        start: 312,
        length: 1,
        convRule: rule14
    },
    {
        start: 313,
        length: 1,
        convRule: rule21
    },
    {
        start: 314,
        length: 1,
        convRule: rule22
    },
    {
        start: 315,
        length: 1,
        convRule: rule21
    },
    {
        start: 316,
        length: 1,
        convRule: rule22
    },
    {
        start: 317,
        length: 1,
        convRule: rule21
    },
    {
        start: 318,
        length: 1,
        convRule: rule22
    },
    {
        start: 319,
        length: 1,
        convRule: rule21
    },
    {
        start: 320,
        length: 1,
        convRule: rule22
    },
    {
        start: 321,
        length: 1,
        convRule: rule21
    },
    {
        start: 322,
        length: 1,
        convRule: rule22
    },
    {
        start: 323,
        length: 1,
        convRule: rule21
    },
    {
        start: 324,
        length: 1,
        convRule: rule22
    },
    {
        start: 325,
        length: 1,
        convRule: rule21
    },
    {
        start: 326,
        length: 1,
        convRule: rule22
    },
    {
        start: 327,
        length: 1,
        convRule: rule21
    },
    {
        start: 328,
        length: 1,
        convRule: rule22
    },
    {
        start: 329,
        length: 1,
        convRule: rule14
    },
    {
        start: 330,
        length: 1,
        convRule: rule21
    },
    {
        start: 331,
        length: 1,
        convRule: rule22
    },
    {
        start: 332,
        length: 1,
        convRule: rule21
    },
    {
        start: 333,
        length: 1,
        convRule: rule22
    },
    {
        start: 334,
        length: 1,
        convRule: rule21
    },
    {
        start: 335,
        length: 1,
        convRule: rule22
    },
    {
        start: 336,
        length: 1,
        convRule: rule21
    },
    {
        start: 337,
        length: 1,
        convRule: rule22
    },
    {
        start: 338,
        length: 1,
        convRule: rule21
    },
    {
        start: 339,
        length: 1,
        convRule: rule22
    },
    {
        start: 340,
        length: 1,
        convRule: rule21
    },
    {
        start: 341,
        length: 1,
        convRule: rule22
    },
    {
        start: 342,
        length: 1,
        convRule: rule21
    },
    {
        start: 343,
        length: 1,
        convRule: rule22
    },
    {
        start: 344,
        length: 1,
        convRule: rule21
    },
    {
        start: 345,
        length: 1,
        convRule: rule22
    },
    {
        start: 346,
        length: 1,
        convRule: rule21
    },
    {
        start: 347,
        length: 1,
        convRule: rule22
    },
    {
        start: 348,
        length: 1,
        convRule: rule21
    },
    {
        start: 349,
        length: 1,
        convRule: rule22
    },
    {
        start: 350,
        length: 1,
        convRule: rule21
    },
    {
        start: 351,
        length: 1,
        convRule: rule22
    },
    {
        start: 352,
        length: 1,
        convRule: rule21
    },
    {
        start: 353,
        length: 1,
        convRule: rule22
    },
    {
        start: 354,
        length: 1,
        convRule: rule21
    },
    {
        start: 355,
        length: 1,
        convRule: rule22
    },
    {
        start: 356,
        length: 1,
        convRule: rule21
    },
    {
        start: 357,
        length: 1,
        convRule: rule22
    },
    {
        start: 358,
        length: 1,
        convRule: rule21
    },
    {
        start: 359,
        length: 1,
        convRule: rule22
    },
    {
        start: 360,
        length: 1,
        convRule: rule21
    },
    {
        start: 361,
        length: 1,
        convRule: rule22
    },
    {
        start: 362,
        length: 1,
        convRule: rule21
    },
    {
        start: 363,
        length: 1,
        convRule: rule22
    },
    {
        start: 364,
        length: 1,
        convRule: rule21
    },
    {
        start: 365,
        length: 1,
        convRule: rule22
    },
    {
        start: 366,
        length: 1,
        convRule: rule21
    },
    {
        start: 367,
        length: 1,
        convRule: rule22
    },
    {
        start: 368,
        length: 1,
        convRule: rule21
    },
    {
        start: 369,
        length: 1,
        convRule: rule22
    },
    {
        start: 370,
        length: 1,
        convRule: rule21
    },
    {
        start: 371,
        length: 1,
        convRule: rule22
    },
    {
        start: 372,
        length: 1,
        convRule: rule21
    },
    {
        start: 373,
        length: 1,
        convRule: rule22
    },
    {
        start: 374,
        length: 1,
        convRule: rule21
    },
    {
        start: 375,
        length: 1,
        convRule: rule22
    },
    {
        start: 376,
        length: 1,
        convRule: rule25
    },
    {
        start: 377,
        length: 1,
        convRule: rule21
    },
    {
        start: 378,
        length: 1,
        convRule: rule22
    },
    {
        start: 379,
        length: 1,
        convRule: rule21
    },
    {
        start: 380,
        length: 1,
        convRule: rule22
    },
    {
        start: 381,
        length: 1,
        convRule: rule21
    },
    {
        start: 382,
        length: 1,
        convRule: rule22
    },
    {
        start: 383,
        length: 1,
        convRule: rule26
    },
    {
        start: 384,
        length: 1,
        convRule: rule27
    },
    {
        start: 385,
        length: 1,
        convRule: rule28
    },
    {
        start: 386,
        length: 1,
        convRule: rule21
    },
    {
        start: 387,
        length: 1,
        convRule: rule22
    },
    {
        start: 388,
        length: 1,
        convRule: rule21
    },
    {
        start: 389,
        length: 1,
        convRule: rule22
    },
    {
        start: 390,
        length: 1,
        convRule: rule29
    },
    {
        start: 391,
        length: 1,
        convRule: rule21
    },
    {
        start: 392,
        length: 1,
        convRule: rule22
    },
    {
        start: 393,
        length: 2,
        convRule: rule30
    },
    {
        start: 395,
        length: 1,
        convRule: rule21
    },
    {
        start: 396,
        length: 1,
        convRule: rule22
    },
    {
        start: 397,
        length: 1,
        convRule: rule14
    },
    {
        start: 398,
        length: 1,
        convRule: rule31
    },
    {
        start: 399,
        length: 1,
        convRule: rule32
    },
    {
        start: 400,
        length: 1,
        convRule: rule33
    },
    {
        start: 401,
        length: 1,
        convRule: rule21
    },
    {
        start: 402,
        length: 1,
        convRule: rule22
    },
    {
        start: 403,
        length: 1,
        convRule: rule30
    },
    {
        start: 404,
        length: 1,
        convRule: rule34
    },
    {
        start: 405,
        length: 1,
        convRule: rule35
    },
    {
        start: 406,
        length: 1,
        convRule: rule36
    },
    {
        start: 407,
        length: 1,
        convRule: rule37
    },
    {
        start: 408,
        length: 1,
        convRule: rule21
    },
    {
        start: 409,
        length: 1,
        convRule: rule22
    },
    {
        start: 410,
        length: 1,
        convRule: rule38
    },
    {
        start: 411,
        length: 1,
        convRule: rule14
    },
    {
        start: 412,
        length: 1,
        convRule: rule36
    },
    {
        start: 413,
        length: 1,
        convRule: rule39
    },
    {
        start: 414,
        length: 1,
        convRule: rule40
    },
    {
        start: 415,
        length: 1,
        convRule: rule41
    },
    {
        start: 416,
        length: 1,
        convRule: rule21
    },
    {
        start: 417,
        length: 1,
        convRule: rule22
    },
    {
        start: 418,
        length: 1,
        convRule: rule21
    },
    {
        start: 419,
        length: 1,
        convRule: rule22
    },
    {
        start: 420,
        length: 1,
        convRule: rule21
    },
    {
        start: 421,
        length: 1,
        convRule: rule22
    },
    {
        start: 422,
        length: 1,
        convRule: rule42
    },
    {
        start: 423,
        length: 1,
        convRule: rule21
    },
    {
        start: 424,
        length: 1,
        convRule: rule22
    },
    {
        start: 425,
        length: 1,
        convRule: rule42
    },
    {
        start: 426,
        length: 2,
        convRule: rule14
    },
    {
        start: 428,
        length: 1,
        convRule: rule21
    },
    {
        start: 429,
        length: 1,
        convRule: rule22
    },
    {
        start: 430,
        length: 1,
        convRule: rule42
    },
    {
        start: 431,
        length: 1,
        convRule: rule21
    },
    {
        start: 432,
        length: 1,
        convRule: rule22
    },
    {
        start: 433,
        length: 2,
        convRule: rule43
    },
    {
        start: 435,
        length: 1,
        convRule: rule21
    },
    {
        start: 436,
        length: 1,
        convRule: rule22
    },
    {
        start: 437,
        length: 1,
        convRule: rule21
    },
    {
        start: 438,
        length: 1,
        convRule: rule22
    },
    {
        start: 439,
        length: 1,
        convRule: rule44
    },
    {
        start: 440,
        length: 1,
        convRule: rule21
    },
    {
        start: 441,
        length: 1,
        convRule: rule22
    },
    {
        start: 442,
        length: 1,
        convRule: rule14
    },
    {
        start: 443,
        length: 1,
        convRule: rule45
    },
    {
        start: 444,
        length: 1,
        convRule: rule21
    },
    {
        start: 445,
        length: 1,
        convRule: rule22
    },
    {
        start: 446,
        length: 1,
        convRule: rule14
    },
    {
        start: 447,
        length: 1,
        convRule: rule46
    },
    {
        start: 448,
        length: 4,
        convRule: rule45
    },
    {
        start: 452,
        length: 1,
        convRule: rule47
    },
    {
        start: 453,
        length: 1,
        convRule: rule48
    },
    {
        start: 454,
        length: 1,
        convRule: rule49
    },
    {
        start: 455,
        length: 1,
        convRule: rule47
    },
    {
        start: 456,
        length: 1,
        convRule: rule48
    },
    {
        start: 457,
        length: 1,
        convRule: rule49
    },
    {
        start: 458,
        length: 1,
        convRule: rule47
    },
    {
        start: 459,
        length: 1,
        convRule: rule48
    },
    {
        start: 460,
        length: 1,
        convRule: rule49
    },
    {
        start: 461,
        length: 1,
        convRule: rule21
    },
    {
        start: 462,
        length: 1,
        convRule: rule22
    },
    {
        start: 463,
        length: 1,
        convRule: rule21
    },
    {
        start: 464,
        length: 1,
        convRule: rule22
    },
    {
        start: 465,
        length: 1,
        convRule: rule21
    },
    {
        start: 466,
        length: 1,
        convRule: rule22
    },
    {
        start: 467,
        length: 1,
        convRule: rule21
    },
    {
        start: 468,
        length: 1,
        convRule: rule22
    },
    {
        start: 469,
        length: 1,
        convRule: rule21
    },
    {
        start: 470,
        length: 1,
        convRule: rule22
    },
    {
        start: 471,
        length: 1,
        convRule: rule21
    },
    {
        start: 472,
        length: 1,
        convRule: rule22
    },
    {
        start: 473,
        length: 1,
        convRule: rule21
    },
    {
        start: 474,
        length: 1,
        convRule: rule22
    },
    {
        start: 475,
        length: 1,
        convRule: rule21
    },
    {
        start: 476,
        length: 1,
        convRule: rule22
    },
    {
        start: 477,
        length: 1,
        convRule: rule50
    },
    {
        start: 478,
        length: 1,
        convRule: rule21
    },
    {
        start: 479,
        length: 1,
        convRule: rule22
    },
    {
        start: 480,
        length: 1,
        convRule: rule21
    },
    {
        start: 481,
        length: 1,
        convRule: rule22
    },
    {
        start: 482,
        length: 1,
        convRule: rule21
    },
    {
        start: 483,
        length: 1,
        convRule: rule22
    },
    {
        start: 484,
        length: 1,
        convRule: rule21
    },
    {
        start: 485,
        length: 1,
        convRule: rule22
    },
    {
        start: 486,
        length: 1,
        convRule: rule21
    },
    {
        start: 487,
        length: 1,
        convRule: rule22
    },
    {
        start: 488,
        length: 1,
        convRule: rule21
    },
    {
        start: 489,
        length: 1,
        convRule: rule22
    },
    {
        start: 490,
        length: 1,
        convRule: rule21
    },
    {
        start: 491,
        length: 1,
        convRule: rule22
    },
    {
        start: 492,
        length: 1,
        convRule: rule21
    },
    {
        start: 493,
        length: 1,
        convRule: rule22
    },
    {
        start: 494,
        length: 1,
        convRule: rule21
    },
    {
        start: 495,
        length: 1,
        convRule: rule22
    },
    {
        start: 496,
        length: 1,
        convRule: rule14
    },
    {
        start: 497,
        length: 1,
        convRule: rule47
    },
    {
        start: 498,
        length: 1,
        convRule: rule48
    },
    {
        start: 499,
        length: 1,
        convRule: rule49
    },
    {
        start: 500,
        length: 1,
        convRule: rule21
    },
    {
        start: 501,
        length: 1,
        convRule: rule22
    },
    {
        start: 502,
        length: 1,
        convRule: rule51
    },
    {
        start: 503,
        length: 1,
        convRule: rule52
    },
    {
        start: 504,
        length: 1,
        convRule: rule21
    },
    {
        start: 505,
        length: 1,
        convRule: rule22
    },
    {
        start: 506,
        length: 1,
        convRule: rule21
    },
    {
        start: 507,
        length: 1,
        convRule: rule22
    },
    {
        start: 508,
        length: 1,
        convRule: rule21
    },
    {
        start: 509,
        length: 1,
        convRule: rule22
    },
    {
        start: 510,
        length: 1,
        convRule: rule21
    },
    {
        start: 511,
        length: 1,
        convRule: rule22
    },
    {
        start: 512,
        length: 1,
        convRule: rule21
    },
    {
        start: 513,
        length: 1,
        convRule: rule22
    },
    {
        start: 514,
        length: 1,
        convRule: rule21
    },
    {
        start: 515,
        length: 1,
        convRule: rule22
    },
    {
        start: 516,
        length: 1,
        convRule: rule21
    },
    {
        start: 517,
        length: 1,
        convRule: rule22
    },
    {
        start: 518,
        length: 1,
        convRule: rule21
    },
    {
        start: 519,
        length: 1,
        convRule: rule22
    },
    {
        start: 520,
        length: 1,
        convRule: rule21
    },
    {
        start: 521,
        length: 1,
        convRule: rule22
    },
    {
        start: 522,
        length: 1,
        convRule: rule21
    },
    {
        start: 523,
        length: 1,
        convRule: rule22
    },
    {
        start: 524,
        length: 1,
        convRule: rule21
    },
    {
        start: 525,
        length: 1,
        convRule: rule22
    },
    {
        start: 526,
        length: 1,
        convRule: rule21
    },
    {
        start: 527,
        length: 1,
        convRule: rule22
    },
    {
        start: 528,
        length: 1,
        convRule: rule21
    },
    {
        start: 529,
        length: 1,
        convRule: rule22
    },
    {
        start: 530,
        length: 1,
        convRule: rule21
    },
    {
        start: 531,
        length: 1,
        convRule: rule22
    },
    {
        start: 532,
        length: 1,
        convRule: rule21
    },
    {
        start: 533,
        length: 1,
        convRule: rule22
    },
    {
        start: 534,
        length: 1,
        convRule: rule21
    },
    {
        start: 535,
        length: 1,
        convRule: rule22
    },
    {
        start: 536,
        length: 1,
        convRule: rule21
    },
    {
        start: 537,
        length: 1,
        convRule: rule22
    },
    {
        start: 538,
        length: 1,
        convRule: rule21
    },
    {
        start: 539,
        length: 1,
        convRule: rule22
    },
    {
        start: 540,
        length: 1,
        convRule: rule21
    },
    {
        start: 541,
        length: 1,
        convRule: rule22
    },
    {
        start: 542,
        length: 1,
        convRule: rule21
    },
    {
        start: 543,
        length: 1,
        convRule: rule22
    },
    {
        start: 544,
        length: 1,
        convRule: rule53
    },
    {
        start: 545,
        length: 1,
        convRule: rule14
    },
    {
        start: 546,
        length: 1,
        convRule: rule21
    },
    {
        start: 547,
        length: 1,
        convRule: rule22
    },
    {
        start: 548,
        length: 1,
        convRule: rule21
    },
    {
        start: 549,
        length: 1,
        convRule: rule22
    },
    {
        start: 550,
        length: 1,
        convRule: rule21
    },
    {
        start: 551,
        length: 1,
        convRule: rule22
    },
    {
        start: 552,
        length: 1,
        convRule: rule21
    },
    {
        start: 553,
        length: 1,
        convRule: rule22
    },
    {
        start: 554,
        length: 1,
        convRule: rule21
    },
    {
        start: 555,
        length: 1,
        convRule: rule22
    },
    {
        start: 556,
        length: 1,
        convRule: rule21
    },
    {
        start: 557,
        length: 1,
        convRule: rule22
    },
    {
        start: 558,
        length: 1,
        convRule: rule21
    },
    {
        start: 559,
        length: 1,
        convRule: rule22
    },
    {
        start: 560,
        length: 1,
        convRule: rule21
    },
    {
        start: 561,
        length: 1,
        convRule: rule22
    },
    {
        start: 562,
        length: 1,
        convRule: rule21
    },
    {
        start: 563,
        length: 1,
        convRule: rule22
    },
    {
        start: 564,
        length: 6,
        convRule: rule14
    },
    {
        start: 570,
        length: 1,
        convRule: rule54
    },
    {
        start: 571,
        length: 1,
        convRule: rule21
    },
    {
        start: 572,
        length: 1,
        convRule: rule22
    },
    {
        start: 573,
        length: 1,
        convRule: rule55
    },
    {
        start: 574,
        length: 1,
        convRule: rule56
    },
    {
        start: 575,
        length: 2,
        convRule: rule57
    },
    {
        start: 577,
        length: 1,
        convRule: rule21
    },
    {
        start: 578,
        length: 1,
        convRule: rule22
    },
    {
        start: 579,
        length: 1,
        convRule: rule58
    },
    {
        start: 580,
        length: 1,
        convRule: rule59
    },
    {
        start: 581,
        length: 1,
        convRule: rule60
    },
    {
        start: 582,
        length: 1,
        convRule: rule21
    },
    {
        start: 583,
        length: 1,
        convRule: rule22
    },
    {
        start: 584,
        length: 1,
        convRule: rule21
    },
    {
        start: 585,
        length: 1,
        convRule: rule22
    },
    {
        start: 586,
        length: 1,
        convRule: rule21
    },
    {
        start: 587,
        length: 1,
        convRule: rule22
    },
    {
        start: 588,
        length: 1,
        convRule: rule21
    },
    {
        start: 589,
        length: 1,
        convRule: rule22
    },
    {
        start: 590,
        length: 1,
        convRule: rule21
    },
    {
        start: 591,
        length: 1,
        convRule: rule22
    },
    {
        start: 592,
        length: 1,
        convRule: rule61
    },
    {
        start: 593,
        length: 1,
        convRule: rule62
    },
    {
        start: 594,
        length: 1,
        convRule: rule63
    },
    {
        start: 595,
        length: 1,
        convRule: rule64
    },
    {
        start: 596,
        length: 1,
        convRule: rule65
    },
    {
        start: 597,
        length: 1,
        convRule: rule14
    },
    {
        start: 598,
        length: 2,
        convRule: rule66
    },
    {
        start: 600,
        length: 1,
        convRule: rule14
    },
    {
        start: 601,
        length: 1,
        convRule: rule67
    },
    {
        start: 602,
        length: 1,
        convRule: rule14
    },
    {
        start: 603,
        length: 1,
        convRule: rule68
    },
    {
        start: 604,
        length: 4,
        convRule: rule14
    },
    {
        start: 608,
        length: 1,
        convRule: rule66
    },
    {
        start: 609,
        length: 2,
        convRule: rule14
    },
    {
        start: 611,
        length: 1,
        convRule: rule69
    },
    {
        start: 612,
        length: 1,
        convRule: rule14
    },
    {
        start: 613,
        length: 1,
        convRule: rule70
    },
    {
        start: 614,
        length: 2,
        convRule: rule14
    },
    {
        start: 616,
        length: 1,
        convRule: rule71
    },
    {
        start: 617,
        length: 1,
        convRule: rule72
    },
    {
        start: 618,
        length: 1,
        convRule: rule14
    },
    {
        start: 619,
        length: 1,
        convRule: rule73
    },
    {
        start: 620,
        length: 3,
        convRule: rule14
    },
    {
        start: 623,
        length: 1,
        convRule: rule72
    },
    {
        start: 624,
        length: 1,
        convRule: rule14
    },
    {
        start: 625,
        length: 1,
        convRule: rule74
    },
    {
        start: 626,
        length: 1,
        convRule: rule75
    },
    {
        start: 627,
        length: 2,
        convRule: rule14
    },
    {
        start: 629,
        length: 1,
        convRule: rule76
    },
    {
        start: 630,
        length: 7,
        convRule: rule14
    },
    {
        start: 637,
        length: 1,
        convRule: rule77
    },
    {
        start: 638,
        length: 2,
        convRule: rule14
    },
    {
        start: 640,
        length: 1,
        convRule: rule78
    },
    {
        start: 641,
        length: 2,
        convRule: rule14
    },
    {
        start: 643,
        length: 1,
        convRule: rule78
    },
    {
        start: 644,
        length: 4,
        convRule: rule14
    },
    {
        start: 648,
        length: 1,
        convRule: rule78
    },
    {
        start: 649,
        length: 1,
        convRule: rule79
    },
    {
        start: 650,
        length: 2,
        convRule: rule80
    },
    {
        start: 652,
        length: 1,
        convRule: rule81
    },
    {
        start: 653,
        length: 5,
        convRule: rule14
    },
    {
        start: 658,
        length: 1,
        convRule: rule82
    },
    {
        start: 659,
        length: 1,
        convRule: rule14
    },
    {
        start: 660,
        length: 1,
        convRule: rule45
    },
    {
        start: 661,
        length: 27,
        convRule: rule14
    },
    {
        start: 688,
        length: 18,
        convRule: rule83
    },
    {
        start: 706,
        length: 4,
        convRule: rule10
    },
    {
        start: 710,
        length: 12,
        convRule: rule83
    },
    {
        start: 722,
        length: 14,
        convRule: rule10
    },
    {
        start: 736,
        length: 5,
        convRule: rule83
    },
    {
        start: 741,
        length: 7,
        convRule: rule10
    },
    {
        start: 748,
        length: 1,
        convRule: rule83
    },
    {
        start: 749,
        length: 1,
        convRule: rule10
    },
    {
        start: 750,
        length: 1,
        convRule: rule83
    },
    {
        start: 751,
        length: 17,
        convRule: rule10
    },
    {
        start: 768,
        length: 69,
        convRule: rule84
    },
    {
        start: 837,
        length: 1,
        convRule: rule85
    },
    {
        start: 838,
        length: 42,
        convRule: rule84
    },
    {
        start: 880,
        length: 1,
        convRule: rule21
    },
    {
        start: 881,
        length: 1,
        convRule: rule22
    },
    {
        start: 882,
        length: 1,
        convRule: rule21
    },
    {
        start: 883,
        length: 1,
        convRule: rule22
    },
    {
        start: 884,
        length: 1,
        convRule: rule83
    },
    {
        start: 885,
        length: 1,
        convRule: rule10
    },
    {
        start: 886,
        length: 1,
        convRule: rule21
    },
    {
        start: 887,
        length: 1,
        convRule: rule22
    },
    {
        start: 890,
        length: 1,
        convRule: rule83
    },
    {
        start: 891,
        length: 3,
        convRule: rule40
    },
    {
        start: 894,
        length: 1,
        convRule: rule2
    },
    {
        start: 900,
        length: 2,
        convRule: rule10
    },
    {
        start: 902,
        length: 1,
        convRule: rule86
    },
    {
        start: 903,
        length: 1,
        convRule: rule2
    },
    {
        start: 904,
        length: 3,
        convRule: rule87
    },
    {
        start: 908,
        length: 1,
        convRule: rule88
    },
    {
        start: 910,
        length: 2,
        convRule: rule89
    },
    {
        start: 912,
        length: 1,
        convRule: rule14
    },
    {
        start: 913,
        length: 17,
        convRule: rule9
    },
    {
        start: 931,
        length: 9,
        convRule: rule9
    },
    {
        start: 940,
        length: 1,
        convRule: rule90
    },
    {
        start: 941,
        length: 3,
        convRule: rule91
    },
    {
        start: 944,
        length: 1,
        convRule: rule14
    },
    {
        start: 945,
        length: 17,
        convRule: rule12
    },
    {
        start: 962,
        length: 1,
        convRule: rule92
    },
    {
        start: 963,
        length: 9,
        convRule: rule12
    },
    {
        start: 972,
        length: 1,
        convRule: rule93
    },
    {
        start: 973,
        length: 2,
        convRule: rule94
    },
    {
        start: 975,
        length: 1,
        convRule: rule95
    },
    {
        start: 976,
        length: 1,
        convRule: rule96
    },
    {
        start: 977,
        length: 1,
        convRule: rule97
    },
    {
        start: 978,
        length: 3,
        convRule: rule98
    },
    {
        start: 981,
        length: 1,
        convRule: rule99
    },
    {
        start: 982,
        length: 1,
        convRule: rule100
    },
    {
        start: 983,
        length: 1,
        convRule: rule101
    },
    {
        start: 984,
        length: 1,
        convRule: rule21
    },
    {
        start: 985,
        length: 1,
        convRule: rule22
    },
    {
        start: 986,
        length: 1,
        convRule: rule21
    },
    {
        start: 987,
        length: 1,
        convRule: rule22
    },
    {
        start: 988,
        length: 1,
        convRule: rule21
    },
    {
        start: 989,
        length: 1,
        convRule: rule22
    },
    {
        start: 990,
        length: 1,
        convRule: rule21
    },
    {
        start: 991,
        length: 1,
        convRule: rule22
    },
    {
        start: 992,
        length: 1,
        convRule: rule21
    },
    {
        start: 993,
        length: 1,
        convRule: rule22
    },
    {
        start: 994,
        length: 1,
        convRule: rule21
    },
    {
        start: 995,
        length: 1,
        convRule: rule22
    },
    {
        start: 996,
        length: 1,
        convRule: rule21
    },
    {
        start: 997,
        length: 1,
        convRule: rule22
    },
    {
        start: 998,
        length: 1,
        convRule: rule21
    },
    {
        start: 999,
        length: 1,
        convRule: rule22
    },
    {
        start: 1000,
        length: 1,
        convRule: rule21
    },
    {
        start: 1001,
        length: 1,
        convRule: rule22
    },
    {
        start: 1002,
        length: 1,
        convRule: rule21
    },
    {
        start: 1003,
        length: 1,
        convRule: rule22
    },
    {
        start: 1004,
        length: 1,
        convRule: rule21
    },
    {
        start: 1005,
        length: 1,
        convRule: rule22
    },
    {
        start: 1006,
        length: 1,
        convRule: rule21
    },
    {
        start: 1007,
        length: 1,
        convRule: rule22
    },
    {
        start: 1008,
        length: 1,
        convRule: rule102
    },
    {
        start: 1009,
        length: 1,
        convRule: rule103
    },
    {
        start: 1010,
        length: 1,
        convRule: rule104
    },
    {
        start: 1011,
        length: 1,
        convRule: rule14
    },
    {
        start: 1012,
        length: 1,
        convRule: rule105
    },
    {
        start: 1013,
        length: 1,
        convRule: rule106
    },
    {
        start: 1014,
        length: 1,
        convRule: rule6
    },
    {
        start: 1015,
        length: 1,
        convRule: rule21
    },
    {
        start: 1016,
        length: 1,
        convRule: rule22
    },
    {
        start: 1017,
        length: 1,
        convRule: rule107
    },
    {
        start: 1018,
        length: 1,
        convRule: rule21
    },
    {
        start: 1019,
        length: 1,
        convRule: rule22
    },
    {
        start: 1020,
        length: 1,
        convRule: rule14
    },
    {
        start: 1021,
        length: 3,
        convRule: rule53
    },
    {
        start: 1024,
        length: 16,
        convRule: rule108
    },
    {
        start: 1040,
        length: 32,
        convRule: rule9
    },
    {
        start: 1072,
        length: 32,
        convRule: rule12
    },
    {
        start: 1104,
        length: 16,
        convRule: rule103
    },
    {
        start: 1120,
        length: 1,
        convRule: rule21
    },
    {
        start: 1121,
        length: 1,
        convRule: rule22
    },
    {
        start: 1122,
        length: 1,
        convRule: rule21
    },
    {
        start: 1123,
        length: 1,
        convRule: rule22
    },
    {
        start: 1124,
        length: 1,
        convRule: rule21
    },
    {
        start: 1125,
        length: 1,
        convRule: rule22
    },
    {
        start: 1126,
        length: 1,
        convRule: rule21
    },
    {
        start: 1127,
        length: 1,
        convRule: rule22
    },
    {
        start: 1128,
        length: 1,
        convRule: rule21
    },
    {
        start: 1129,
        length: 1,
        convRule: rule22
    },
    {
        start: 1130,
        length: 1,
        convRule: rule21
    },
    {
        start: 1131,
        length: 1,
        convRule: rule22
    },
    {
        start: 1132,
        length: 1,
        convRule: rule21
    },
    {
        start: 1133,
        length: 1,
        convRule: rule22
    },
    {
        start: 1134,
        length: 1,
        convRule: rule21
    },
    {
        start: 1135,
        length: 1,
        convRule: rule22
    },
    {
        start: 1136,
        length: 1,
        convRule: rule21
    },
    {
        start: 1137,
        length: 1,
        convRule: rule22
    },
    {
        start: 1138,
        length: 1,
        convRule: rule21
    },
    {
        start: 1139,
        length: 1,
        convRule: rule22
    },
    {
        start: 1140,
        length: 1,
        convRule: rule21
    },
    {
        start: 1141,
        length: 1,
        convRule: rule22
    },
    {
        start: 1142,
        length: 1,
        convRule: rule21
    },
    {
        start: 1143,
        length: 1,
        convRule: rule22
    },
    {
        start: 1144,
        length: 1,
        convRule: rule21
    },
    {
        start: 1145,
        length: 1,
        convRule: rule22
    },
    {
        start: 1146,
        length: 1,
        convRule: rule21
    },
    {
        start: 1147,
        length: 1,
        convRule: rule22
    },
    {
        start: 1148,
        length: 1,
        convRule: rule21
    },
    {
        start: 1149,
        length: 1,
        convRule: rule22
    },
    {
        start: 1150,
        length: 1,
        convRule: rule21
    },
    {
        start: 1151,
        length: 1,
        convRule: rule22
    },
    {
        start: 1152,
        length: 1,
        convRule: rule21
    },
    {
        start: 1153,
        length: 1,
        convRule: rule22
    },
    {
        start: 1154,
        length: 1,
        convRule: rule13
    },
    {
        start: 1155,
        length: 5,
        convRule: rule84
    },
    {
        start: 1160,
        length: 2,
        convRule: rule109
    },
    {
        start: 1162,
        length: 1,
        convRule: rule21
    },
    {
        start: 1163,
        length: 1,
        convRule: rule22
    },
    {
        start: 1164,
        length: 1,
        convRule: rule21
    },
    {
        start: 1165,
        length: 1,
        convRule: rule22
    },
    {
        start: 1166,
        length: 1,
        convRule: rule21
    },
    {
        start: 1167,
        length: 1,
        convRule: rule22
    },
    {
        start: 1168,
        length: 1,
        convRule: rule21
    },
    {
        start: 1169,
        length: 1,
        convRule: rule22
    },
    {
        start: 1170,
        length: 1,
        convRule: rule21
    },
    {
        start: 1171,
        length: 1,
        convRule: rule22
    },
    {
        start: 1172,
        length: 1,
        convRule: rule21
    },
    {
        start: 1173,
        length: 1,
        convRule: rule22
    },
    {
        start: 1174,
        length: 1,
        convRule: rule21
    },
    {
        start: 1175,
        length: 1,
        convRule: rule22
    },
    {
        start: 1176,
        length: 1,
        convRule: rule21
    },
    {
        start: 1177,
        length: 1,
        convRule: rule22
    },
    {
        start: 1178,
        length: 1,
        convRule: rule21
    },
    {
        start: 1179,
        length: 1,
        convRule: rule22
    },
    {
        start: 1180,
        length: 1,
        convRule: rule21
    },
    {
        start: 1181,
        length: 1,
        convRule: rule22
    },
    {
        start: 1182,
        length: 1,
        convRule: rule21
    },
    {
        start: 1183,
        length: 1,
        convRule: rule22
    },
    {
        start: 1184,
        length: 1,
        convRule: rule21
    },
    {
        start: 1185,
        length: 1,
        convRule: rule22
    },
    {
        start: 1186,
        length: 1,
        convRule: rule21
    },
    {
        start: 1187,
        length: 1,
        convRule: rule22
    },
    {
        start: 1188,
        length: 1,
        convRule: rule21
    },
    {
        start: 1189,
        length: 1,
        convRule: rule22
    },
    {
        start: 1190,
        length: 1,
        convRule: rule21
    },
    {
        start: 1191,
        length: 1,
        convRule: rule22
    },
    {
        start: 1192,
        length: 1,
        convRule: rule21
    },
    {
        start: 1193,
        length: 1,
        convRule: rule22
    },
    {
        start: 1194,
        length: 1,
        convRule: rule21
    },
    {
        start: 1195,
        length: 1,
        convRule: rule22
    },
    {
        start: 1196,
        length: 1,
        convRule: rule21
    },
    {
        start: 1197,
        length: 1,
        convRule: rule22
    },
    {
        start: 1198,
        length: 1,
        convRule: rule21
    },
    {
        start: 1199,
        length: 1,
        convRule: rule22
    },
    {
        start: 1200,
        length: 1,
        convRule: rule21
    },
    {
        start: 1201,
        length: 1,
        convRule: rule22
    },
    {
        start: 1202,
        length: 1,
        convRule: rule21
    },
    {
        start: 1203,
        length: 1,
        convRule: rule22
    },
    {
        start: 1204,
        length: 1,
        convRule: rule21
    },
    {
        start: 1205,
        length: 1,
        convRule: rule22
    },
    {
        start: 1206,
        length: 1,
        convRule: rule21
    },
    {
        start: 1207,
        length: 1,
        convRule: rule22
    },
    {
        start: 1208,
        length: 1,
        convRule: rule21
    },
    {
        start: 1209,
        length: 1,
        convRule: rule22
    },
    {
        start: 1210,
        length: 1,
        convRule: rule21
    },
    {
        start: 1211,
        length: 1,
        convRule: rule22
    },
    {
        start: 1212,
        length: 1,
        convRule: rule21
    },
    {
        start: 1213,
        length: 1,
        convRule: rule22
    },
    {
        start: 1214,
        length: 1,
        convRule: rule21
    },
    {
        start: 1215,
        length: 1,
        convRule: rule22
    },
    {
        start: 1216,
        length: 1,
        convRule: rule110
    },
    {
        start: 1217,
        length: 1,
        convRule: rule21
    },
    {
        start: 1218,
        length: 1,
        convRule: rule22
    },
    {
        start: 1219,
        length: 1,
        convRule: rule21
    },
    {
        start: 1220,
        length: 1,
        convRule: rule22
    },
    {
        start: 1221,
        length: 1,
        convRule: rule21
    },
    {
        start: 1222,
        length: 1,
        convRule: rule22
    },
    {
        start: 1223,
        length: 1,
        convRule: rule21
    },
    {
        start: 1224,
        length: 1,
        convRule: rule22
    },
    {
        start: 1225,
        length: 1,
        convRule: rule21
    },
    {
        start: 1226,
        length: 1,
        convRule: rule22
    },
    {
        start: 1227,
        length: 1,
        convRule: rule21
    },
    {
        start: 1228,
        length: 1,
        convRule: rule22
    },
    {
        start: 1229,
        length: 1,
        convRule: rule21
    },
    {
        start: 1230,
        length: 1,
        convRule: rule22
    },
    {
        start: 1231,
        length: 1,
        convRule: rule111
    },
    {
        start: 1232,
        length: 1,
        convRule: rule21
    },
    {
        start: 1233,
        length: 1,
        convRule: rule22
    },
    {
        start: 1234,
        length: 1,
        convRule: rule21
    },
    {
        start: 1235,
        length: 1,
        convRule: rule22
    },
    {
        start: 1236,
        length: 1,
        convRule: rule21
    },
    {
        start: 1237,
        length: 1,
        convRule: rule22
    },
    {
        start: 1238,
        length: 1,
        convRule: rule21
    },
    {
        start: 1239,
        length: 1,
        convRule: rule22
    },
    {
        start: 1240,
        length: 1,
        convRule: rule21
    },
    {
        start: 1241,
        length: 1,
        convRule: rule22
    },
    {
        start: 1242,
        length: 1,
        convRule: rule21
    },
    {
        start: 1243,
        length: 1,
        convRule: rule22
    },
    {
        start: 1244,
        length: 1,
        convRule: rule21
    },
    {
        start: 1245,
        length: 1,
        convRule: rule22
    },
    {
        start: 1246,
        length: 1,
        convRule: rule21
    },
    {
        start: 1247,
        length: 1,
        convRule: rule22
    },
    {
        start: 1248,
        length: 1,
        convRule: rule21
    },
    {
        start: 1249,
        length: 1,
        convRule: rule22
    },
    {
        start: 1250,
        length: 1,
        convRule: rule21
    },
    {
        start: 1251,
        length: 1,
        convRule: rule22
    },
    {
        start: 1252,
        length: 1,
        convRule: rule21
    },
    {
        start: 1253,
        length: 1,
        convRule: rule22
    },
    {
        start: 1254,
        length: 1,
        convRule: rule21
    },
    {
        start: 1255,
        length: 1,
        convRule: rule22
    },
    {
        start: 1256,
        length: 1,
        convRule: rule21
    },
    {
        start: 1257,
        length: 1,
        convRule: rule22
    },
    {
        start: 1258,
        length: 1,
        convRule: rule21
    },
    {
        start: 1259,
        length: 1,
        convRule: rule22
    },
    {
        start: 1260,
        length: 1,
        convRule: rule21
    },
    {
        start: 1261,
        length: 1,
        convRule: rule22
    },
    {
        start: 1262,
        length: 1,
        convRule: rule21
    },
    {
        start: 1263,
        length: 1,
        convRule: rule22
    },
    {
        start: 1264,
        length: 1,
        convRule: rule21
    },
    {
        start: 1265,
        length: 1,
        convRule: rule22
    },
    {
        start: 1266,
        length: 1,
        convRule: rule21
    },
    {
        start: 1267,
        length: 1,
        convRule: rule22
    },
    {
        start: 1268,
        length: 1,
        convRule: rule21
    },
    {
        start: 1269,
        length: 1,
        convRule: rule22
    },
    {
        start: 1270,
        length: 1,
        convRule: rule21
    },
    {
        start: 1271,
        length: 1,
        convRule: rule22
    },
    {
        start: 1272,
        length: 1,
        convRule: rule21
    },
    {
        start: 1273,
        length: 1,
        convRule: rule22
    },
    {
        start: 1274,
        length: 1,
        convRule: rule21
    },
    {
        start: 1275,
        length: 1,
        convRule: rule22
    },
    {
        start: 1276,
        length: 1,
        convRule: rule21
    },
    {
        start: 1277,
        length: 1,
        convRule: rule22
    },
    {
        start: 1278,
        length: 1,
        convRule: rule21
    },
    {
        start: 1279,
        length: 1,
        convRule: rule22
    },
    {
        start: 1280,
        length: 1,
        convRule: rule21
    },
    {
        start: 1281,
        length: 1,
        convRule: rule22
    },
    {
        start: 1282,
        length: 1,
        convRule: rule21
    },
    {
        start: 1283,
        length: 1,
        convRule: rule22
    },
    {
        start: 1284,
        length: 1,
        convRule: rule21
    },
    {
        start: 1285,
        length: 1,
        convRule: rule22
    },
    {
        start: 1286,
        length: 1,
        convRule: rule21
    },
    {
        start: 1287,
        length: 1,
        convRule: rule22
    },
    {
        start: 1288,
        length: 1,
        convRule: rule21
    },
    {
        start: 1289,
        length: 1,
        convRule: rule22
    },
    {
        start: 1290,
        length: 1,
        convRule: rule21
    },
    {
        start: 1291,
        length: 1,
        convRule: rule22
    },
    {
        start: 1292,
        length: 1,
        convRule: rule21
    },
    {
        start: 1293,
        length: 1,
        convRule: rule22
    },
    {
        start: 1294,
        length: 1,
        convRule: rule21
    },
    {
        start: 1295,
        length: 1,
        convRule: rule22
    },
    {
        start: 1296,
        length: 1,
        convRule: rule21
    },
    {
        start: 1297,
        length: 1,
        convRule: rule22
    },
    {
        start: 1298,
        length: 1,
        convRule: rule21
    },
    {
        start: 1299,
        length: 1,
        convRule: rule22
    },
    {
        start: 1300,
        length: 1,
        convRule: rule21
    },
    {
        start: 1301,
        length: 1,
        convRule: rule22
    },
    {
        start: 1302,
        length: 1,
        convRule: rule21
    },
    {
        start: 1303,
        length: 1,
        convRule: rule22
    },
    {
        start: 1304,
        length: 1,
        convRule: rule21
    },
    {
        start: 1305,
        length: 1,
        convRule: rule22
    },
    {
        start: 1306,
        length: 1,
        convRule: rule21
    },
    {
        start: 1307,
        length: 1,
        convRule: rule22
    },
    {
        start: 1308,
        length: 1,
        convRule: rule21
    },
    {
        start: 1309,
        length: 1,
        convRule: rule22
    },
    {
        start: 1310,
        length: 1,
        convRule: rule21
    },
    {
        start: 1311,
        length: 1,
        convRule: rule22
    },
    {
        start: 1312,
        length: 1,
        convRule: rule21
    },
    {
        start: 1313,
        length: 1,
        convRule: rule22
    },
    {
        start: 1314,
        length: 1,
        convRule: rule21
    },
    {
        start: 1315,
        length: 1,
        convRule: rule22
    },
    {
        start: 1316,
        length: 1,
        convRule: rule21
    },
    {
        start: 1317,
        length: 1,
        convRule: rule22
    },
    {
        start: 1318,
        length: 1,
        convRule: rule21
    },
    {
        start: 1319,
        length: 1,
        convRule: rule22
    },
    {
        start: 1329,
        length: 38,
        convRule: rule112
    },
    {
        start: 1369,
        length: 1,
        convRule: rule83
    },
    {
        start: 1370,
        length: 6,
        convRule: rule2
    },
    {
        start: 1377,
        length: 38,
        convRule: rule113
    },
    {
        start: 1415,
        length: 1,
        convRule: rule14
    },
    {
        start: 1417,
        length: 1,
        convRule: rule2
    },
    {
        start: 1418,
        length: 1,
        convRule: rule7
    },
    {
        start: 1425,
        length: 45,
        convRule: rule84
    },
    {
        start: 1470,
        length: 1,
        convRule: rule7
    },
    {
        start: 1471,
        length: 1,
        convRule: rule84
    },
    {
        start: 1472,
        length: 1,
        convRule: rule2
    },
    {
        start: 1473,
        length: 2,
        convRule: rule84
    },
    {
        start: 1475,
        length: 1,
        convRule: rule2
    },
    {
        start: 1476,
        length: 2,
        convRule: rule84
    },
    {
        start: 1478,
        length: 1,
        convRule: rule2
    },
    {
        start: 1479,
        length: 1,
        convRule: rule84
    },
    {
        start: 1488,
        length: 27,
        convRule: rule45
    },
    {
        start: 1520,
        length: 3,
        convRule: rule45
    },
    {
        start: 1523,
        length: 2,
        convRule: rule2
    },
    {
        start: 1536,
        length: 4,
        convRule: rule16
    },
    {
        start: 1542,
        length: 3,
        convRule: rule6
    },
    {
        start: 1545,
        length: 2,
        convRule: rule2
    },
    {
        start: 1547,
        length: 1,
        convRule: rule3
    },
    {
        start: 1548,
        length: 2,
        convRule: rule2
    },
    {
        start: 1550,
        length: 2,
        convRule: rule13
    },
    {
        start: 1552,
        length: 11,
        convRule: rule84
    },
    {
        start: 1563,
        length: 1,
        convRule: rule2
    },
    {
        start: 1566,
        length: 2,
        convRule: rule2
    },
    {
        start: 1568,
        length: 32,
        convRule: rule45
    },
    {
        start: 1600,
        length: 1,
        convRule: rule83
    },
    {
        start: 1601,
        length: 10,
        convRule: rule45
    },
    {
        start: 1611,
        length: 21,
        convRule: rule84
    },
    {
        start: 1632,
        length: 10,
        convRule: rule8
    },
    {
        start: 1642,
        length: 4,
        convRule: rule2
    },
    {
        start: 1646,
        length: 2,
        convRule: rule45
    },
    {
        start: 1648,
        length: 1,
        convRule: rule84
    },
    {
        start: 1649,
        length: 99,
        convRule: rule45
    },
    {
        start: 1748,
        length: 1,
        convRule: rule2
    },
    {
        start: 1749,
        length: 1,
        convRule: rule45
    },
    {
        start: 1750,
        length: 7,
        convRule: rule84
    },
    {
        start: 1757,
        length: 1,
        convRule: rule16
    },
    {
        start: 1758,
        length: 1,
        convRule: rule13
    },
    {
        start: 1759,
        length: 6,
        convRule: rule84
    },
    {
        start: 1765,
        length: 2,
        convRule: rule83
    },
    {
        start: 1767,
        length: 2,
        convRule: rule84
    },
    {
        start: 1769,
        length: 1,
        convRule: rule13
    },
    {
        start: 1770,
        length: 4,
        convRule: rule84
    },
    {
        start: 1774,
        length: 2,
        convRule: rule45
    },
    {
        start: 1776,
        length: 10,
        convRule: rule8
    },
    {
        start: 1786,
        length: 3,
        convRule: rule45
    },
    {
        start: 1789,
        length: 2,
        convRule: rule13
    },
    {
        start: 1791,
        length: 1,
        convRule: rule45
    },
    {
        start: 1792,
        length: 14,
        convRule: rule2
    },
    {
        start: 1807,
        length: 1,
        convRule: rule16
    },
    {
        start: 1808,
        length: 1,
        convRule: rule45
    },
    {
        start: 1809,
        length: 1,
        convRule: rule84
    },
    {
        start: 1810,
        length: 30,
        convRule: rule45
    },
    {
        start: 1840,
        length: 27,
        convRule: rule84
    },
    {
        start: 1869,
        length: 89,
        convRule: rule45
    },
    {
        start: 1958,
        length: 11,
        convRule: rule84
    },
    {
        start: 1969,
        length: 1,
        convRule: rule45
    },
    {
        start: 1984,
        length: 10,
        convRule: rule8
    },
    {
        start: 1994,
        length: 33,
        convRule: rule45
    },
    {
        start: 2027,
        length: 9,
        convRule: rule84
    },
    {
        start: 2036,
        length: 2,
        convRule: rule83
    },
    {
        start: 2038,
        length: 1,
        convRule: rule13
    },
    {
        start: 2039,
        length: 3,
        convRule: rule2
    },
    {
        start: 2042,
        length: 1,
        convRule: rule83
    },
    {
        start: 2048,
        length: 22,
        convRule: rule45
    },
    {
        start: 2070,
        length: 4,
        convRule: rule84
    },
    {
        start: 2074,
        length: 1,
        convRule: rule83
    },
    {
        start: 2075,
        length: 9,
        convRule: rule84
    },
    {
        start: 2084,
        length: 1,
        convRule: rule83
    },
    {
        start: 2085,
        length: 3,
        convRule: rule84
    },
    {
        start: 2088,
        length: 1,
        convRule: rule83
    },
    {
        start: 2089,
        length: 5,
        convRule: rule84
    },
    {
        start: 2096,
        length: 15,
        convRule: rule2
    },
    {
        start: 2112,
        length: 25,
        convRule: rule45
    },
    {
        start: 2137,
        length: 3,
        convRule: rule84
    },
    {
        start: 2142,
        length: 1,
        convRule: rule2
    },
    {
        start: 2304,
        length: 3,
        convRule: rule84
    },
    {
        start: 2307,
        length: 1,
        convRule: rule114
    },
    {
        start: 2308,
        length: 54,
        convRule: rule45
    },
    {
        start: 2362,
        length: 1,
        convRule: rule84
    },
    {
        start: 2363,
        length: 1,
        convRule: rule114
    },
    {
        start: 2364,
        length: 1,
        convRule: rule84
    },
    {
        start: 2365,
        length: 1,
        convRule: rule45
    },
    {
        start: 2366,
        length: 3,
        convRule: rule114
    },
    {
        start: 2369,
        length: 8,
        convRule: rule84
    },
    {
        start: 2377,
        length: 4,
        convRule: rule114
    },
    {
        start: 2381,
        length: 1,
        convRule: rule84
    },
    {
        start: 2382,
        length: 2,
        convRule: rule114
    },
    {
        start: 2384,
        length: 1,
        convRule: rule45
    },
    {
        start: 2385,
        length: 7,
        convRule: rule84
    },
    {
        start: 2392,
        length: 10,
        convRule: rule45
    },
    {
        start: 2402,
        length: 2,
        convRule: rule84
    },
    {
        start: 2404,
        length: 2,
        convRule: rule2
    },
    {
        start: 2406,
        length: 10,
        convRule: rule8
    },
    {
        start: 2416,
        length: 1,
        convRule: rule2
    },
    {
        start: 2417,
        length: 1,
        convRule: rule83
    },
    {
        start: 2418,
        length: 6,
        convRule: rule45
    },
    {
        start: 2425,
        length: 7,
        convRule: rule45
    },
    {
        start: 2433,
        length: 1,
        convRule: rule84
    },
    {
        start: 2434,
        length: 2,
        convRule: rule114
    },
    {
        start: 2437,
        length: 8,
        convRule: rule45
    },
    {
        start: 2447,
        length: 2,
        convRule: rule45
    },
    {
        start: 2451,
        length: 22,
        convRule: rule45
    },
    {
        start: 2474,
        length: 7,
        convRule: rule45
    },
    {
        start: 2482,
        length: 1,
        convRule: rule45
    },
    {
        start: 2486,
        length: 4,
        convRule: rule45
    },
    {
        start: 2492,
        length: 1,
        convRule: rule84
    },
    {
        start: 2493,
        length: 1,
        convRule: rule45
    },
    {
        start: 2494,
        length: 3,
        convRule: rule114
    },
    {
        start: 2497,
        length: 4,
        convRule: rule84
    },
    {
        start: 2503,
        length: 2,
        convRule: rule114
    },
    {
        start: 2507,
        length: 2,
        convRule: rule114
    },
    {
        start: 2509,
        length: 1,
        convRule: rule84
    },
    {
        start: 2510,
        length: 1,
        convRule: rule45
    },
    {
        start: 2519,
        length: 1,
        convRule: rule114
    },
    {
        start: 2524,
        length: 2,
        convRule: rule45
    },
    {
        start: 2527,
        length: 3,
        convRule: rule45
    },
    {
        start: 2530,
        length: 2,
        convRule: rule84
    },
    {
        start: 2534,
        length: 10,
        convRule: rule8
    },
    {
        start: 2544,
        length: 2,
        convRule: rule45
    },
    {
        start: 2546,
        length: 2,
        convRule: rule3
    },
    {
        start: 2548,
        length: 6,
        convRule: rule17
    },
    {
        start: 2554,
        length: 1,
        convRule: rule13
    },
    {
        start: 2555,
        length: 1,
        convRule: rule3
    },
    {
        start: 2561,
        length: 2,
        convRule: rule84
    },
    {
        start: 2563,
        length: 1,
        convRule: rule114
    },
    {
        start: 2565,
        length: 6,
        convRule: rule45
    },
    {
        start: 2575,
        length: 2,
        convRule: rule45
    },
    {
        start: 2579,
        length: 22,
        convRule: rule45
    },
    {
        start: 2602,
        length: 7,
        convRule: rule45
    },
    {
        start: 2610,
        length: 2,
        convRule: rule45
    },
    {
        start: 2613,
        length: 2,
        convRule: rule45
    },
    {
        start: 2616,
        length: 2,
        convRule: rule45
    },
    {
        start: 2620,
        length: 1,
        convRule: rule84
    },
    {
        start: 2622,
        length: 3,
        convRule: rule114
    },
    {
        start: 2625,
        length: 2,
        convRule: rule84
    },
    {
        start: 2631,
        length: 2,
        convRule: rule84
    },
    {
        start: 2635,
        length: 3,
        convRule: rule84
    },
    {
        start: 2641,
        length: 1,
        convRule: rule84
    },
    {
        start: 2649,
        length: 4,
        convRule: rule45
    },
    {
        start: 2654,
        length: 1,
        convRule: rule45
    },
    {
        start: 2662,
        length: 10,
        convRule: rule8
    },
    {
        start: 2672,
        length: 2,
        convRule: rule84
    },
    {
        start: 2674,
        length: 3,
        convRule: rule45
    },
    {
        start: 2677,
        length: 1,
        convRule: rule84
    },
    {
        start: 2689,
        length: 2,
        convRule: rule84
    },
    {
        start: 2691,
        length: 1,
        convRule: rule114
    },
    {
        start: 2693,
        length: 9,
        convRule: rule45
    },
    {
        start: 2703,
        length: 3,
        convRule: rule45
    },
    {
        start: 2707,
        length: 22,
        convRule: rule45
    },
    {
        start: 2730,
        length: 7,
        convRule: rule45
    },
    {
        start: 2738,
        length: 2,
        convRule: rule45
    },
    {
        start: 2741,
        length: 5,
        convRule: rule45
    },
    {
        start: 2748,
        length: 1,
        convRule: rule84
    },
    {
        start: 2749,
        length: 1,
        convRule: rule45
    },
    {
        start: 2750,
        length: 3,
        convRule: rule114
    },
    {
        start: 2753,
        length: 5,
        convRule: rule84
    },
    {
        start: 2759,
        length: 2,
        convRule: rule84
    },
    {
        start: 2761,
        length: 1,
        convRule: rule114
    },
    {
        start: 2763,
        length: 2,
        convRule: rule114
    },
    {
        start: 2765,
        length: 1,
        convRule: rule84
    },
    {
        start: 2768,
        length: 1,
        convRule: rule45
    },
    {
        start: 2784,
        length: 2,
        convRule: rule45
    },
    {
        start: 2786,
        length: 2,
        convRule: rule84
    },
    {
        start: 2790,
        length: 10,
        convRule: rule8
    },
    {
        start: 2801,
        length: 1,
        convRule: rule3
    },
    {
        start: 2817,
        length: 1,
        convRule: rule84
    },
    {
        start: 2818,
        length: 2,
        convRule: rule114
    },
    {
        start: 2821,
        length: 8,
        convRule: rule45
    },
    {
        start: 2831,
        length: 2,
        convRule: rule45
    },
    {
        start: 2835,
        length: 22,
        convRule: rule45
    },
    {
        start: 2858,
        length: 7,
        convRule: rule45
    },
    {
        start: 2866,
        length: 2,
        convRule: rule45
    },
    {
        start: 2869,
        length: 5,
        convRule: rule45
    },
    {
        start: 2876,
        length: 1,
        convRule: rule84
    },
    {
        start: 2877,
        length: 1,
        convRule: rule45
    },
    {
        start: 2878,
        length: 1,
        convRule: rule114
    },
    {
        start: 2879,
        length: 1,
        convRule: rule84
    },
    {
        start: 2880,
        length: 1,
        convRule: rule114
    },
    {
        start: 2881,
        length: 4,
        convRule: rule84
    },
    {
        start: 2887,
        length: 2,
        convRule: rule114
    },
    {
        start: 2891,
        length: 2,
        convRule: rule114
    },
    {
        start: 2893,
        length: 1,
        convRule: rule84
    },
    {
        start: 2902,
        length: 1,
        convRule: rule84
    },
    {
        start: 2903,
        length: 1,
        convRule: rule114
    },
    {
        start: 2908,
        length: 2,
        convRule: rule45
    },
    {
        start: 2911,
        length: 3,
        convRule: rule45
    },
    {
        start: 2914,
        length: 2,
        convRule: rule84
    },
    {
        start: 2918,
        length: 10,
        convRule: rule8
    },
    {
        start: 2928,
        length: 1,
        convRule: rule13
    },
    {
        start: 2929,
        length: 1,
        convRule: rule45
    },
    {
        start: 2930,
        length: 6,
        convRule: rule17
    },
    {
        start: 2946,
        length: 1,
        convRule: rule84
    },
    {
        start: 2947,
        length: 1,
        convRule: rule45
    },
    {
        start: 2949,
        length: 6,
        convRule: rule45
    },
    {
        start: 2958,
        length: 3,
        convRule: rule45
    },
    {
        start: 2962,
        length: 4,
        convRule: rule45
    },
    {
        start: 2969,
        length: 2,
        convRule: rule45
    },
    {
        start: 2972,
        length: 1,
        convRule: rule45
    },
    {
        start: 2974,
        length: 2,
        convRule: rule45
    },
    {
        start: 2979,
        length: 2,
        convRule: rule45
    },
    {
        start: 2984,
        length: 3,
        convRule: rule45
    },
    {
        start: 2990,
        length: 12,
        convRule: rule45
    },
    {
        start: 3006,
        length: 2,
        convRule: rule114
    },
    {
        start: 3008,
        length: 1,
        convRule: rule84
    },
    {
        start: 3009,
        length: 2,
        convRule: rule114
    },
    {
        start: 3014,
        length: 3,
        convRule: rule114
    },
    {
        start: 3018,
        length: 3,
        convRule: rule114
    },
    {
        start: 3021,
        length: 1,
        convRule: rule84
    },
    {
        start: 3024,
        length: 1,
        convRule: rule45
    },
    {
        start: 3031,
        length: 1,
        convRule: rule114
    },
    {
        start: 3046,
        length: 10,
        convRule: rule8
    },
    {
        start: 3056,
        length: 3,
        convRule: rule17
    },
    {
        start: 3059,
        length: 6,
        convRule: rule13
    },
    {
        start: 3065,
        length: 1,
        convRule: rule3
    },
    {
        start: 3066,
        length: 1,
        convRule: rule13
    },
    {
        start: 3073,
        length: 3,
        convRule: rule114
    },
    {
        start: 3077,
        length: 8,
        convRule: rule45
    },
    {
        start: 3086,
        length: 3,
        convRule: rule45
    },
    {
        start: 3090,
        length: 23,
        convRule: rule45
    },
    {
        start: 3114,
        length: 10,
        convRule: rule45
    },
    {
        start: 3125,
        length: 5,
        convRule: rule45
    },
    {
        start: 3133,
        length: 1,
        convRule: rule45
    },
    {
        start: 3134,
        length: 3,
        convRule: rule84
    },
    {
        start: 3137,
        length: 4,
        convRule: rule114
    },
    {
        start: 3142,
        length: 3,
        convRule: rule84
    },
    {
        start: 3146,
        length: 4,
        convRule: rule84
    },
    {
        start: 3157,
        length: 2,
        convRule: rule84
    },
    {
        start: 3160,
        length: 2,
        convRule: rule45
    },
    {
        start: 3168,
        length: 2,
        convRule: rule45
    },
    {
        start: 3170,
        length: 2,
        convRule: rule84
    },
    {
        start: 3174,
        length: 10,
        convRule: rule8
    },
    {
        start: 3192,
        length: 7,
        convRule: rule17
    },
    {
        start: 3199,
        length: 1,
        convRule: rule13
    },
    {
        start: 3202,
        length: 2,
        convRule: rule114
    },
    {
        start: 3205,
        length: 8,
        convRule: rule45
    },
    {
        start: 3214,
        length: 3,
        convRule: rule45
    },
    {
        start: 3218,
        length: 23,
        convRule: rule45
    },
    {
        start: 3242,
        length: 10,
        convRule: rule45
    },
    {
        start: 3253,
        length: 5,
        convRule: rule45
    },
    {
        start: 3260,
        length: 1,
        convRule: rule84
    },
    {
        start: 3261,
        length: 1,
        convRule: rule45
    },
    {
        start: 3262,
        length: 1,
        convRule: rule114
    },
    {
        start: 3263,
        length: 1,
        convRule: rule84
    },
    {
        start: 3264,
        length: 5,
        convRule: rule114
    },
    {
        start: 3270,
        length: 1,
        convRule: rule84
    },
    {
        start: 3271,
        length: 2,
        convRule: rule114
    },
    {
        start: 3274,
        length: 2,
        convRule: rule114
    },
    {
        start: 3276,
        length: 2,
        convRule: rule84
    },
    {
        start: 3285,
        length: 2,
        convRule: rule114
    },
    {
        start: 3294,
        length: 1,
        convRule: rule45
    },
    {
        start: 3296,
        length: 2,
        convRule: rule45
    },
    {
        start: 3298,
        length: 2,
        convRule: rule84
    },
    {
        start: 3302,
        length: 10,
        convRule: rule8
    },
    {
        start: 3313,
        length: 2,
        convRule: rule45
    },
    {
        start: 3330,
        length: 2,
        convRule: rule114
    },
    {
        start: 3333,
        length: 8,
        convRule: rule45
    },
    {
        start: 3342,
        length: 3,
        convRule: rule45
    },
    {
        start: 3346,
        length: 41,
        convRule: rule45
    },
    {
        start: 3389,
        length: 1,
        convRule: rule45
    },
    {
        start: 3390,
        length: 3,
        convRule: rule114
    },
    {
        start: 3393,
        length: 4,
        convRule: rule84
    },
    {
        start: 3398,
        length: 3,
        convRule: rule114
    },
    {
        start: 3402,
        length: 3,
        convRule: rule114
    },
    {
        start: 3405,
        length: 1,
        convRule: rule84
    },
    {
        start: 3406,
        length: 1,
        convRule: rule45
    },
    {
        start: 3415,
        length: 1,
        convRule: rule114
    },
    {
        start: 3424,
        length: 2,
        convRule: rule45
    },
    {
        start: 3426,
        length: 2,
        convRule: rule84
    },
    {
        start: 3430,
        length: 10,
        convRule: rule8
    },
    {
        start: 3440,
        length: 6,
        convRule: rule17
    },
    {
        start: 3449,
        length: 1,
        convRule: rule13
    },
    {
        start: 3450,
        length: 6,
        convRule: rule45
    },
    {
        start: 3458,
        length: 2,
        convRule: rule114
    },
    {
        start: 3461,
        length: 18,
        convRule: rule45
    },
    {
        start: 3482,
        length: 24,
        convRule: rule45
    },
    {
        start: 3507,
        length: 9,
        convRule: rule45
    },
    {
        start: 3517,
        length: 1,
        convRule: rule45
    },
    {
        start: 3520,
        length: 7,
        convRule: rule45
    },
    {
        start: 3530,
        length: 1,
        convRule: rule84
    },
    {
        start: 3535,
        length: 3,
        convRule: rule114
    },
    {
        start: 3538,
        length: 3,
        convRule: rule84
    },
    {
        start: 3542,
        length: 1,
        convRule: rule84
    },
    {
        start: 3544,
        length: 8,
        convRule: rule114
    },
    {
        start: 3570,
        length: 2,
        convRule: rule114
    },
    {
        start: 3572,
        length: 1,
        convRule: rule2
    },
    {
        start: 3585,
        length: 48,
        convRule: rule45
    },
    {
        start: 3633,
        length: 1,
        convRule: rule84
    },
    {
        start: 3634,
        length: 2,
        convRule: rule45
    },
    {
        start: 3636,
        length: 7,
        convRule: rule84
    },
    {
        start: 3647,
        length: 1,
        convRule: rule3
    },
    {
        start: 3648,
        length: 6,
        convRule: rule45
    },
    {
        start: 3654,
        length: 1,
        convRule: rule83
    },
    {
        start: 3655,
        length: 8,
        convRule: rule84
    },
    {
        start: 3663,
        length: 1,
        convRule: rule2
    },
    {
        start: 3664,
        length: 10,
        convRule: rule8
    },
    {
        start: 3674,
        length: 2,
        convRule: rule2
    },
    {
        start: 3713,
        length: 2,
        convRule: rule45
    },
    {
        start: 3716,
        length: 1,
        convRule: rule45
    },
    {
        start: 3719,
        length: 2,
        convRule: rule45
    },
    {
        start: 3722,
        length: 1,
        convRule: rule45
    },
    {
        start: 3725,
        length: 1,
        convRule: rule45
    },
    {
        start: 3732,
        length: 4,
        convRule: rule45
    },
    {
        start: 3737,
        length: 7,
        convRule: rule45
    },
    {
        start: 3745,
        length: 3,
        convRule: rule45
    },
    {
        start: 3749,
        length: 1,
        convRule: rule45
    },
    {
        start: 3751,
        length: 1,
        convRule: rule45
    },
    {
        start: 3754,
        length: 2,
        convRule: rule45
    },
    {
        start: 3757,
        length: 4,
        convRule: rule45
    },
    {
        start: 3761,
        length: 1,
        convRule: rule84
    },
    {
        start: 3762,
        length: 2,
        convRule: rule45
    },
    {
        start: 3764,
        length: 6,
        convRule: rule84
    },
    {
        start: 3771,
        length: 2,
        convRule: rule84
    },
    {
        start: 3773,
        length: 1,
        convRule: rule45
    },
    {
        start: 3776,
        length: 5,
        convRule: rule45
    },
    {
        start: 3782,
        length: 1,
        convRule: rule83
    },
    {
        start: 3784,
        length: 6,
        convRule: rule84
    },
    {
        start: 3792,
        length: 10,
        convRule: rule8
    },
    {
        start: 3804,
        length: 2,
        convRule: rule45
    },
    {
        start: 3840,
        length: 1,
        convRule: rule45
    },
    {
        start: 3841,
        length: 3,
        convRule: rule13
    },
    {
        start: 3844,
        length: 15,
        convRule: rule2
    },
    {
        start: 3859,
        length: 5,
        convRule: rule13
    },
    {
        start: 3864,
        length: 2,
        convRule: rule84
    },
    {
        start: 3866,
        length: 6,
        convRule: rule13
    },
    {
        start: 3872,
        length: 10,
        convRule: rule8
    },
    {
        start: 3882,
        length: 10,
        convRule: rule17
    },
    {
        start: 3892,
        length: 1,
        convRule: rule13
    },
    {
        start: 3893,
        length: 1,
        convRule: rule84
    },
    {
        start: 3894,
        length: 1,
        convRule: rule13
    },
    {
        start: 3895,
        length: 1,
        convRule: rule84
    },
    {
        start: 3896,
        length: 1,
        convRule: rule13
    },
    {
        start: 3897,
        length: 1,
        convRule: rule84
    },
    {
        start: 3898,
        length: 1,
        convRule: rule4
    },
    {
        start: 3899,
        length: 1,
        convRule: rule5
    },
    {
        start: 3900,
        length: 1,
        convRule: rule4
    },
    {
        start: 3901,
        length: 1,
        convRule: rule5
    },
    {
        start: 3902,
        length: 2,
        convRule: rule114
    },
    {
        start: 3904,
        length: 8,
        convRule: rule45
    },
    {
        start: 3913,
        length: 36,
        convRule: rule45
    },
    {
        start: 3953,
        length: 14,
        convRule: rule84
    },
    {
        start: 3967,
        length: 1,
        convRule: rule114
    },
    {
        start: 3968,
        length: 5,
        convRule: rule84
    },
    {
        start: 3973,
        length: 1,
        convRule: rule2
    },
    {
        start: 3974,
        length: 2,
        convRule: rule84
    },
    {
        start: 3976,
        length: 5,
        convRule: rule45
    },
    {
        start: 3981,
        length: 11,
        convRule: rule84
    },
    {
        start: 3993,
        length: 36,
        convRule: rule84
    },
    {
        start: 4030,
        length: 8,
        convRule: rule13
    },
    {
        start: 4038,
        length: 1,
        convRule: rule84
    },
    {
        start: 4039,
        length: 6,
        convRule: rule13
    },
    {
        start: 4046,
        length: 2,
        convRule: rule13
    },
    {
        start: 4048,
        length: 5,
        convRule: rule2
    },
    {
        start: 4053,
        length: 4,
        convRule: rule13
    },
    {
        start: 4057,
        length: 2,
        convRule: rule2
    },
    {
        start: 4096,
        length: 43,
        convRule: rule45
    },
    {
        start: 4139,
        length: 2,
        convRule: rule114
    },
    {
        start: 4141,
        length: 4,
        convRule: rule84
    },
    {
        start: 4145,
        length: 1,
        convRule: rule114
    },
    {
        start: 4146,
        length: 6,
        convRule: rule84
    },
    {
        start: 4152,
        length: 1,
        convRule: rule114
    },
    {
        start: 4153,
        length: 2,
        convRule: rule84
    },
    {
        start: 4155,
        length: 2,
        convRule: rule114
    },
    {
        start: 4157,
        length: 2,
        convRule: rule84
    },
    {
        start: 4159,
        length: 1,
        convRule: rule45
    },
    {
        start: 4160,
        length: 10,
        convRule: rule8
    },
    {
        start: 4170,
        length: 6,
        convRule: rule2
    },
    {
        start: 4176,
        length: 6,
        convRule: rule45
    },
    {
        start: 4182,
        length: 2,
        convRule: rule114
    },
    {
        start: 4184,
        length: 2,
        convRule: rule84
    },
    {
        start: 4186,
        length: 4,
        convRule: rule45
    },
    {
        start: 4190,
        length: 3,
        convRule: rule84
    },
    {
        start: 4193,
        length: 1,
        convRule: rule45
    },
    {
        start: 4194,
        length: 3,
        convRule: rule114
    },
    {
        start: 4197,
        length: 2,
        convRule: rule45
    },
    {
        start: 4199,
        length: 7,
        convRule: rule114
    },
    {
        start: 4206,
        length: 3,
        convRule: rule45
    },
    {
        start: 4209,
        length: 4,
        convRule: rule84
    },
    {
        start: 4213,
        length: 13,
        convRule: rule45
    },
    {
        start: 4226,
        length: 1,
        convRule: rule84
    },
    {
        start: 4227,
        length: 2,
        convRule: rule114
    },
    {
        start: 4229,
        length: 2,
        convRule: rule84
    },
    {
        start: 4231,
        length: 6,
        convRule: rule114
    },
    {
        start: 4237,
        length: 1,
        convRule: rule84
    },
    {
        start: 4238,
        length: 1,
        convRule: rule45
    },
    {
        start: 4239,
        length: 1,
        convRule: rule114
    },
    {
        start: 4240,
        length: 10,
        convRule: rule8
    },
    {
        start: 4250,
        length: 3,
        convRule: rule114
    },
    {
        start: 4253,
        length: 1,
        convRule: rule84
    },
    {
        start: 4254,
        length: 2,
        convRule: rule13
    },
    {
        start: 4256,
        length: 38,
        convRule: rule115
    },
    {
        start: 4304,
        length: 43,
        convRule: rule45
    },
    {
        start: 4347,
        length: 1,
        convRule: rule2
    },
    {
        start: 4348,
        length: 1,
        convRule: rule83
    },
    {
        start: 4352,
        length: 329,
        convRule: rule45
    },
    {
        start: 4682,
        length: 4,
        convRule: rule45
    },
    {
        start: 4688,
        length: 7,
        convRule: rule45
    },
    {
        start: 4696,
        length: 1,
        convRule: rule45
    },
    {
        start: 4698,
        length: 4,
        convRule: rule45
    },
    {
        start: 4704,
        length: 41,
        convRule: rule45
    },
    {
        start: 4746,
        length: 4,
        convRule: rule45
    },
    {
        start: 4752,
        length: 33,
        convRule: rule45
    },
    {
        start: 4786,
        length: 4,
        convRule: rule45
    },
    {
        start: 4792,
        length: 7,
        convRule: rule45
    },
    {
        start: 4800,
        length: 1,
        convRule: rule45
    },
    {
        start: 4802,
        length: 4,
        convRule: rule45
    },
    {
        start: 4808,
        length: 15,
        convRule: rule45
    },
    {
        start: 4824,
        length: 57,
        convRule: rule45
    },
    {
        start: 4882,
        length: 4,
        convRule: rule45
    },
    {
        start: 4888,
        length: 67,
        convRule: rule45
    },
    {
        start: 4957,
        length: 3,
        convRule: rule84
    },
    {
        start: 4960,
        length: 1,
        convRule: rule13
    },
    {
        start: 4961,
        length: 8,
        convRule: rule2
    },
    {
        start: 4969,
        length: 20,
        convRule: rule17
    },
    {
        start: 4992,
        length: 16,
        convRule: rule45
    },
    {
        start: 5008,
        length: 10,
        convRule: rule13
    },
    {
        start: 5024,
        length: 85,
        convRule: rule45
    },
    {
        start: 5120,
        length: 1,
        convRule: rule7
    },
    {
        start: 5121,
        length: 620,
        convRule: rule45
    },
    {
        start: 5741,
        length: 2,
        convRule: rule2
    },
    {
        start: 5743,
        length: 17,
        convRule: rule45
    },
    {
        start: 5760,
        length: 1,
        convRule: rule1
    },
    {
        start: 5761,
        length: 26,
        convRule: rule45
    },
    {
        start: 5787,
        length: 1,
        convRule: rule4
    },
    {
        start: 5788,
        length: 1,
        convRule: rule5
    },
    {
        start: 5792,
        length: 75,
        convRule: rule45
    },
    {
        start: 5867,
        length: 3,
        convRule: rule2
    },
    {
        start: 5870,
        length: 3,
        convRule: rule116
    },
    {
        start: 5888,
        length: 13,
        convRule: rule45
    },
    {
        start: 5902,
        length: 4,
        convRule: rule45
    },
    {
        start: 5906,
        length: 3,
        convRule: rule84
    },
    {
        start: 5920,
        length: 18,
        convRule: rule45
    },
    {
        start: 5938,
        length: 3,
        convRule: rule84
    },
    {
        start: 5941,
        length: 2,
        convRule: rule2
    },
    {
        start: 5952,
        length: 18,
        convRule: rule45
    },
    {
        start: 5970,
        length: 2,
        convRule: rule84
    },
    {
        start: 5984,
        length: 13,
        convRule: rule45
    },
    {
        start: 5998,
        length: 3,
        convRule: rule45
    },
    {
        start: 6002,
        length: 2,
        convRule: rule84
    },
    {
        start: 6016,
        length: 52,
        convRule: rule45
    },
    {
        start: 6068,
        length: 2,
        convRule: rule16
    },
    {
        start: 6070,
        length: 1,
        convRule: rule114
    },
    {
        start: 6071,
        length: 7,
        convRule: rule84
    },
    {
        start: 6078,
        length: 8,
        convRule: rule114
    },
    {
        start: 6086,
        length: 1,
        convRule: rule84
    },
    {
        start: 6087,
        length: 2,
        convRule: rule114
    },
    {
        start: 6089,
        length: 11,
        convRule: rule84
    },
    {
        start: 6100,
        length: 3,
        convRule: rule2
    },
    {
        start: 6103,
        length: 1,
        convRule: rule83
    },
    {
        start: 6104,
        length: 3,
        convRule: rule2
    },
    {
        start: 6107,
        length: 1,
        convRule: rule3
    },
    {
        start: 6108,
        length: 1,
        convRule: rule45
    },
    {
        start: 6109,
        length: 1,
        convRule: rule84
    },
    {
        start: 6112,
        length: 10,
        convRule: rule8
    },
    {
        start: 6128,
        length: 10,
        convRule: rule17
    },
    {
        start: 6144,
        length: 6,
        convRule: rule2
    },
    {
        start: 6150,
        length: 1,
        convRule: rule7
    },
    {
        start: 6151,
        length: 4,
        convRule: rule2
    },
    {
        start: 6155,
        length: 3,
        convRule: rule84
    },
    {
        start: 6158,
        length: 1,
        convRule: rule1
    },
    {
        start: 6160,
        length: 10,
        convRule: rule8
    },
    {
        start: 6176,
        length: 35,
        convRule: rule45
    },
    {
        start: 6211,
        length: 1,
        convRule: rule83
    },
    {
        start: 6212,
        length: 52,
        convRule: rule45
    },
    {
        start: 6272,
        length: 41,
        convRule: rule45
    },
    {
        start: 6313,
        length: 1,
        convRule: rule84
    },
    {
        start: 6314,
        length: 1,
        convRule: rule45
    },
    {
        start: 6320,
        length: 70,
        convRule: rule45
    },
    {
        start: 6400,
        length: 29,
        convRule: rule45
    },
    {
        start: 6432,
        length: 3,
        convRule: rule84
    },
    {
        start: 6435,
        length: 4,
        convRule: rule114
    },
    {
        start: 6439,
        length: 2,
        convRule: rule84
    },
    {
        start: 6441,
        length: 3,
        convRule: rule114
    },
    {
        start: 6448,
        length: 2,
        convRule: rule114
    },
    {
        start: 6450,
        length: 1,
        convRule: rule84
    },
    {
        start: 6451,
        length: 6,
        convRule: rule114
    },
    {
        start: 6457,
        length: 3,
        convRule: rule84
    },
    {
        start: 6464,
        length: 1,
        convRule: rule13
    },
    {
        start: 6468,
        length: 2,
        convRule: rule2
    },
    {
        start: 6470,
        length: 10,
        convRule: rule8
    },
    {
        start: 6480,
        length: 30,
        convRule: rule45
    },
    {
        start: 6512,
        length: 5,
        convRule: rule45
    },
    {
        start: 6528,
        length: 44,
        convRule: rule45
    },
    {
        start: 6576,
        length: 17,
        convRule: rule114
    },
    {
        start: 6593,
        length: 7,
        convRule: rule45
    },
    {
        start: 6600,
        length: 2,
        convRule: rule114
    },
    {
        start: 6608,
        length: 10,
        convRule: rule8
    },
    {
        start: 6618,
        length: 1,
        convRule: rule17
    },
    {
        start: 6622,
        length: 34,
        convRule: rule13
    },
    {
        start: 6656,
        length: 23,
        convRule: rule45
    },
    {
        start: 6679,
        length: 2,
        convRule: rule84
    },
    {
        start: 6681,
        length: 3,
        convRule: rule114
    },
    {
        start: 6686,
        length: 2,
        convRule: rule2
    },
    {
        start: 6688,
        length: 53,
        convRule: rule45
    },
    {
        start: 6741,
        length: 1,
        convRule: rule114
    },
    {
        start: 6742,
        length: 1,
        convRule: rule84
    },
    {
        start: 6743,
        length: 1,
        convRule: rule114
    },
    {
        start: 6744,
        length: 7,
        convRule: rule84
    },
    {
        start: 6752,
        length: 1,
        convRule: rule84
    },
    {
        start: 6753,
        length: 1,
        convRule: rule114
    },
    {
        start: 6754,
        length: 1,
        convRule: rule84
    },
    {
        start: 6755,
        length: 2,
        convRule: rule114
    },
    {
        start: 6757,
        length: 8,
        convRule: rule84
    },
    {
        start: 6765,
        length: 6,
        convRule: rule114
    },
    {
        start: 6771,
        length: 10,
        convRule: rule84
    },
    {
        start: 6783,
        length: 1,
        convRule: rule84
    },
    {
        start: 6784,
        length: 10,
        convRule: rule8
    },
    {
        start: 6800,
        length: 10,
        convRule: rule8
    },
    {
        start: 6816,
        length: 7,
        convRule: rule2
    },
    {
        start: 6823,
        length: 1,
        convRule: rule83
    },
    {
        start: 6824,
        length: 6,
        convRule: rule2
    },
    {
        start: 6912,
        length: 4,
        convRule: rule84
    },
    {
        start: 6916,
        length: 1,
        convRule: rule114
    },
    {
        start: 6917,
        length: 47,
        convRule: rule45
    },
    {
        start: 6964,
        length: 1,
        convRule: rule84
    },
    {
        start: 6965,
        length: 1,
        convRule: rule114
    },
    {
        start: 6966,
        length: 5,
        convRule: rule84
    },
    {
        start: 6971,
        length: 1,
        convRule: rule114
    },
    {
        start: 6972,
        length: 1,
        convRule: rule84
    },
    {
        start: 6973,
        length: 5,
        convRule: rule114
    },
    {
        start: 6978,
        length: 1,
        convRule: rule84
    },
    {
        start: 6979,
        length: 2,
        convRule: rule114
    },
    {
        start: 6981,
        length: 7,
        convRule: rule45
    },
    {
        start: 6992,
        length: 10,
        convRule: rule8
    },
    {
        start: 7002,
        length: 7,
        convRule: rule2
    },
    {
        start: 7009,
        length: 10,
        convRule: rule13
    },
    {
        start: 7019,
        length: 9,
        convRule: rule84
    },
    {
        start: 7028,
        length: 9,
        convRule: rule13
    },
    {
        start: 7040,
        length: 2,
        convRule: rule84
    },
    {
        start: 7042,
        length: 1,
        convRule: rule114
    },
    {
        start: 7043,
        length: 30,
        convRule: rule45
    },
    {
        start: 7073,
        length: 1,
        convRule: rule114
    },
    {
        start: 7074,
        length: 4,
        convRule: rule84
    },
    {
        start: 7078,
        length: 2,
        convRule: rule114
    },
    {
        start: 7080,
        length: 2,
        convRule: rule84
    },
    {
        start: 7082,
        length: 1,
        convRule: rule114
    },
    {
        start: 7086,
        length: 2,
        convRule: rule45
    },
    {
        start: 7088,
        length: 10,
        convRule: rule8
    },
    {
        start: 7104,
        length: 38,
        convRule: rule45
    },
    {
        start: 7142,
        length: 1,
        convRule: rule84
    },
    {
        start: 7143,
        length: 1,
        convRule: rule114
    },
    {
        start: 7144,
        length: 2,
        convRule: rule84
    },
    {
        start: 7146,
        length: 3,
        convRule: rule114
    },
    {
        start: 7149,
        length: 1,
        convRule: rule84
    },
    {
        start: 7150,
        length: 1,
        convRule: rule114
    },
    {
        start: 7151,
        length: 3,
        convRule: rule84
    },
    {
        start: 7154,
        length: 2,
        convRule: rule114
    },
    {
        start: 7164,
        length: 4,
        convRule: rule2
    },
    {
        start: 7168,
        length: 36,
        convRule: rule45
    },
    {
        start: 7204,
        length: 8,
        convRule: rule114
    },
    {
        start: 7212,
        length: 8,
        convRule: rule84
    },
    {
        start: 7220,
        length: 2,
        convRule: rule114
    },
    {
        start: 7222,
        length: 2,
        convRule: rule84
    },
    {
        start: 7227,
        length: 5,
        convRule: rule2
    },
    {
        start: 7232,
        length: 10,
        convRule: rule8
    },
    {
        start: 7245,
        length: 3,
        convRule: rule45
    },
    {
        start: 7248,
        length: 10,
        convRule: rule8
    },
    {
        start: 7258,
        length: 30,
        convRule: rule45
    },
    {
        start: 7288,
        length: 6,
        convRule: rule83
    },
    {
        start: 7294,
        length: 2,
        convRule: rule2
    },
    {
        start: 7376,
        length: 3,
        convRule: rule84
    },
    {
        start: 7379,
        length: 1,
        convRule: rule2
    },
    {
        start: 7380,
        length: 13,
        convRule: rule84
    },
    {
        start: 7393,
        length: 1,
        convRule: rule114
    },
    {
        start: 7394,
        length: 7,
        convRule: rule84
    },
    {
        start: 7401,
        length: 4,
        convRule: rule45
    },
    {
        start: 7405,
        length: 1,
        convRule: rule84
    },
    {
        start: 7406,
        length: 4,
        convRule: rule45
    },
    {
        start: 7410,
        length: 1,
        convRule: rule114
    },
    {
        start: 7424,
        length: 44,
        convRule: rule14
    },
    {
        start: 7468,
        length: 54,
        convRule: rule83
    },
    {
        start: 7522,
        length: 22,
        convRule: rule14
    },
    {
        start: 7544,
        length: 1,
        convRule: rule83
    },
    {
        start: 7545,
        length: 1,
        convRule: rule117
    },
    {
        start: 7546,
        length: 3,
        convRule: rule14
    },
    {
        start: 7549,
        length: 1,
        convRule: rule118
    },
    {
        start: 7550,
        length: 29,
        convRule: rule14
    },
    {
        start: 7579,
        length: 37,
        convRule: rule83
    },
    {
        start: 7616,
        length: 39,
        convRule: rule84
    },
    {
        start: 7676,
        length: 4,
        convRule: rule84
    },
    {
        start: 7680,
        length: 1,
        convRule: rule21
    },
    {
        start: 7681,
        length: 1,
        convRule: rule22
    },
    {
        start: 7682,
        length: 1,
        convRule: rule21
    },
    {
        start: 7683,
        length: 1,
        convRule: rule22
    },
    {
        start: 7684,
        length: 1,
        convRule: rule21
    },
    {
        start: 7685,
        length: 1,
        convRule: rule22
    },
    {
        start: 7686,
        length: 1,
        convRule: rule21
    },
    {
        start: 7687,
        length: 1,
        convRule: rule22
    },
    {
        start: 7688,
        length: 1,
        convRule: rule21
    },
    {
        start: 7689,
        length: 1,
        convRule: rule22
    },
    {
        start: 7690,
        length: 1,
        convRule: rule21
    },
    {
        start: 7691,
        length: 1,
        convRule: rule22
    },
    {
        start: 7692,
        length: 1,
        convRule: rule21
    },
    {
        start: 7693,
        length: 1,
        convRule: rule22
    },
    {
        start: 7694,
        length: 1,
        convRule: rule21
    },
    {
        start: 7695,
        length: 1,
        convRule: rule22
    },
    {
        start: 7696,
        length: 1,
        convRule: rule21
    },
    {
        start: 7697,
        length: 1,
        convRule: rule22
    },
    {
        start: 7698,
        length: 1,
        convRule: rule21
    },
    {
        start: 7699,
        length: 1,
        convRule: rule22
    },
    {
        start: 7700,
        length: 1,
        convRule: rule21
    },
    {
        start: 7701,
        length: 1,
        convRule: rule22
    },
    {
        start: 7702,
        length: 1,
        convRule: rule21
    },
    {
        start: 7703,
        length: 1,
        convRule: rule22
    },
    {
        start: 7704,
        length: 1,
        convRule: rule21
    },
    {
        start: 7705,
        length: 1,
        convRule: rule22
    },
    {
        start: 7706,
        length: 1,
        convRule: rule21
    },
    {
        start: 7707,
        length: 1,
        convRule: rule22
    },
    {
        start: 7708,
        length: 1,
        convRule: rule21
    },
    {
        start: 7709,
        length: 1,
        convRule: rule22
    },
    {
        start: 7710,
        length: 1,
        convRule: rule21
    },
    {
        start: 7711,
        length: 1,
        convRule: rule22
    },
    {
        start: 7712,
        length: 1,
        convRule: rule21
    },
    {
        start: 7713,
        length: 1,
        convRule: rule22
    },
    {
        start: 7714,
        length: 1,
        convRule: rule21
    },
    {
        start: 7715,
        length: 1,
        convRule: rule22
    },
    {
        start: 7716,
        length: 1,
        convRule: rule21
    },
    {
        start: 7717,
        length: 1,
        convRule: rule22
    },
    {
        start: 7718,
        length: 1,
        convRule: rule21
    },
    {
        start: 7719,
        length: 1,
        convRule: rule22
    },
    {
        start: 7720,
        length: 1,
        convRule: rule21
    },
    {
        start: 7721,
        length: 1,
        convRule: rule22
    },
    {
        start: 7722,
        length: 1,
        convRule: rule21
    },
    {
        start: 7723,
        length: 1,
        convRule: rule22
    },
    {
        start: 7724,
        length: 1,
        convRule: rule21
    },
    {
        start: 7725,
        length: 1,
        convRule: rule22
    },
    {
        start: 7726,
        length: 1,
        convRule: rule21
    },
    {
        start: 7727,
        length: 1,
        convRule: rule22
    },
    {
        start: 7728,
        length: 1,
        convRule: rule21
    },
    {
        start: 7729,
        length: 1,
        convRule: rule22
    },
    {
        start: 7730,
        length: 1,
        convRule: rule21
    },
    {
        start: 7731,
        length: 1,
        convRule: rule22
    },
    {
        start: 7732,
        length: 1,
        convRule: rule21
    },
    {
        start: 7733,
        length: 1,
        convRule: rule22
    },
    {
        start: 7734,
        length: 1,
        convRule: rule21
    },
    {
        start: 7735,
        length: 1,
        convRule: rule22
    },
    {
        start: 7736,
        length: 1,
        convRule: rule21
    },
    {
        start: 7737,
        length: 1,
        convRule: rule22
    },
    {
        start: 7738,
        length: 1,
        convRule: rule21
    },
    {
        start: 7739,
        length: 1,
        convRule: rule22
    },
    {
        start: 7740,
        length: 1,
        convRule: rule21
    },
    {
        start: 7741,
        length: 1,
        convRule: rule22
    },
    {
        start: 7742,
        length: 1,
        convRule: rule21
    },
    {
        start: 7743,
        length: 1,
        convRule: rule22
    },
    {
        start: 7744,
        length: 1,
        convRule: rule21
    },
    {
        start: 7745,
        length: 1,
        convRule: rule22
    },
    {
        start: 7746,
        length: 1,
        convRule: rule21
    },
    {
        start: 7747,
        length: 1,
        convRule: rule22
    },
    {
        start: 7748,
        length: 1,
        convRule: rule21
    },
    {
        start: 7749,
        length: 1,
        convRule: rule22
    },
    {
        start: 7750,
        length: 1,
        convRule: rule21
    },
    {
        start: 7751,
        length: 1,
        convRule: rule22
    },
    {
        start: 7752,
        length: 1,
        convRule: rule21
    },
    {
        start: 7753,
        length: 1,
        convRule: rule22
    },
    {
        start: 7754,
        length: 1,
        convRule: rule21
    },
    {
        start: 7755,
        length: 1,
        convRule: rule22
    },
    {
        start: 7756,
        length: 1,
        convRule: rule21
    },
    {
        start: 7757,
        length: 1,
        convRule: rule22
    },
    {
        start: 7758,
        length: 1,
        convRule: rule21
    },
    {
        start: 7759,
        length: 1,
        convRule: rule22
    },
    {
        start: 7760,
        length: 1,
        convRule: rule21
    },
    {
        start: 7761,
        length: 1,
        convRule: rule22
    },
    {
        start: 7762,
        length: 1,
        convRule: rule21
    },
    {
        start: 7763,
        length: 1,
        convRule: rule22
    },
    {
        start: 7764,
        length: 1,
        convRule: rule21
    },
    {
        start: 7765,
        length: 1,
        convRule: rule22
    },
    {
        start: 7766,
        length: 1,
        convRule: rule21
    },
    {
        start: 7767,
        length: 1,
        convRule: rule22
    },
    {
        start: 7768,
        length: 1,
        convRule: rule21
    },
    {
        start: 7769,
        length: 1,
        convRule: rule22
    },
    {
        start: 7770,
        length: 1,
        convRule: rule21
    },
    {
        start: 7771,
        length: 1,
        convRule: rule22
    },
    {
        start: 7772,
        length: 1,
        convRule: rule21
    },
    {
        start: 7773,
        length: 1,
        convRule: rule22
    },
    {
        start: 7774,
        length: 1,
        convRule: rule21
    },
    {
        start: 7775,
        length: 1,
        convRule: rule22
    },
    {
        start: 7776,
        length: 1,
        convRule: rule21
    },
    {
        start: 7777,
        length: 1,
        convRule: rule22
    },
    {
        start: 7778,
        length: 1,
        convRule: rule21
    },
    {
        start: 7779,
        length: 1,
        convRule: rule22
    },
    {
        start: 7780,
        length: 1,
        convRule: rule21
    },
    {
        start: 7781,
        length: 1,
        convRule: rule22
    },
    {
        start: 7782,
        length: 1,
        convRule: rule21
    },
    {
        start: 7783,
        length: 1,
        convRule: rule22
    },
    {
        start: 7784,
        length: 1,
        convRule: rule21
    },
    {
        start: 7785,
        length: 1,
        convRule: rule22
    },
    {
        start: 7786,
        length: 1,
        convRule: rule21
    },
    {
        start: 7787,
        length: 1,
        convRule: rule22
    },
    {
        start: 7788,
        length: 1,
        convRule: rule21
    },
    {
        start: 7789,
        length: 1,
        convRule: rule22
    },
    {
        start: 7790,
        length: 1,
        convRule: rule21
    },
    {
        start: 7791,
        length: 1,
        convRule: rule22
    },
    {
        start: 7792,
        length: 1,
        convRule: rule21
    },
    {
        start: 7793,
        length: 1,
        convRule: rule22
    },
    {
        start: 7794,
        length: 1,
        convRule: rule21
    },
    {
        start: 7795,
        length: 1,
        convRule: rule22
    },
    {
        start: 7796,
        length: 1,
        convRule: rule21
    },
    {
        start: 7797,
        length: 1,
        convRule: rule22
    },
    {
        start: 7798,
        length: 1,
        convRule: rule21
    },
    {
        start: 7799,
        length: 1,
        convRule: rule22
    },
    {
        start: 7800,
        length: 1,
        convRule: rule21
    },
    {
        start: 7801,
        length: 1,
        convRule: rule22
    },
    {
        start: 7802,
        length: 1,
        convRule: rule21
    },
    {
        start: 7803,
        length: 1,
        convRule: rule22
    },
    {
        start: 7804,
        length: 1,
        convRule: rule21
    },
    {
        start: 7805,
        length: 1,
        convRule: rule22
    },
    {
        start: 7806,
        length: 1,
        convRule: rule21
    },
    {
        start: 7807,
        length: 1,
        convRule: rule22
    },
    {
        start: 7808,
        length: 1,
        convRule: rule21
    },
    {
        start: 7809,
        length: 1,
        convRule: rule22
    },
    {
        start: 7810,
        length: 1,
        convRule: rule21
    },
    {
        start: 7811,
        length: 1,
        convRule: rule22
    },
    {
        start: 7812,
        length: 1,
        convRule: rule21
    },
    {
        start: 7813,
        length: 1,
        convRule: rule22
    },
    {
        start: 7814,
        length: 1,
        convRule: rule21
    },
    {
        start: 7815,
        length: 1,
        convRule: rule22
    },
    {
        start: 7816,
        length: 1,
        convRule: rule21
    },
    {
        start: 7817,
        length: 1,
        convRule: rule22
    },
    {
        start: 7818,
        length: 1,
        convRule: rule21
    },
    {
        start: 7819,
        length: 1,
        convRule: rule22
    },
    {
        start: 7820,
        length: 1,
        convRule: rule21
    },
    {
        start: 7821,
        length: 1,
        convRule: rule22
    },
    {
        start: 7822,
        length: 1,
        convRule: rule21
    },
    {
        start: 7823,
        length: 1,
        convRule: rule22
    },
    {
        start: 7824,
        length: 1,
        convRule: rule21
    },
    {
        start: 7825,
        length: 1,
        convRule: rule22
    },
    {
        start: 7826,
        length: 1,
        convRule: rule21
    },
    {
        start: 7827,
        length: 1,
        convRule: rule22
    },
    {
        start: 7828,
        length: 1,
        convRule: rule21
    },
    {
        start: 7829,
        length: 1,
        convRule: rule22
    },
    {
        start: 7830,
        length: 5,
        convRule: rule14
    },
    {
        start: 7835,
        length: 1,
        convRule: rule119
    },
    {
        start: 7836,
        length: 2,
        convRule: rule14
    },
    {
        start: 7838,
        length: 1,
        convRule: rule120
    },
    {
        start: 7839,
        length: 1,
        convRule: rule14
    },
    {
        start: 7840,
        length: 1,
        convRule: rule21
    },
    {
        start: 7841,
        length: 1,
        convRule: rule22
    },
    {
        start: 7842,
        length: 1,
        convRule: rule21
    },
    {
        start: 7843,
        length: 1,
        convRule: rule22
    },
    {
        start: 7844,
        length: 1,
        convRule: rule21
    },
    {
        start: 7845,
        length: 1,
        convRule: rule22
    },
    {
        start: 7846,
        length: 1,
        convRule: rule21
    },
    {
        start: 7847,
        length: 1,
        convRule: rule22
    },
    {
        start: 7848,
        length: 1,
        convRule: rule21
    },
    {
        start: 7849,
        length: 1,
        convRule: rule22
    },
    {
        start: 7850,
        length: 1,
        convRule: rule21
    },
    {
        start: 7851,
        length: 1,
        convRule: rule22
    },
    {
        start: 7852,
        length: 1,
        convRule: rule21
    },
    {
        start: 7853,
        length: 1,
        convRule: rule22
    },
    {
        start: 7854,
        length: 1,
        convRule: rule21
    },
    {
        start: 7855,
        length: 1,
        convRule: rule22
    },
    {
        start: 7856,
        length: 1,
        convRule: rule21
    },
    {
        start: 7857,
        length: 1,
        convRule: rule22
    },
    {
        start: 7858,
        length: 1,
        convRule: rule21
    },
    {
        start: 7859,
        length: 1,
        convRule: rule22
    },
    {
        start: 7860,
        length: 1,
        convRule: rule21
    },
    {
        start: 7861,
        length: 1,
        convRule: rule22
    },
    {
        start: 7862,
        length: 1,
        convRule: rule21
    },
    {
        start: 7863,
        length: 1,
        convRule: rule22
    },
    {
        start: 7864,
        length: 1,
        convRule: rule21
    },
    {
        start: 7865,
        length: 1,
        convRule: rule22
    },
    {
        start: 7866,
        length: 1,
        convRule: rule21
    },
    {
        start: 7867,
        length: 1,
        convRule: rule22
    },
    {
        start: 7868,
        length: 1,
        convRule: rule21
    },
    {
        start: 7869,
        length: 1,
        convRule: rule22
    },
    {
        start: 7870,
        length: 1,
        convRule: rule21
    },
    {
        start: 7871,
        length: 1,
        convRule: rule22
    },
    {
        start: 7872,
        length: 1,
        convRule: rule21
    },
    {
        start: 7873,
        length: 1,
        convRule: rule22
    },
    {
        start: 7874,
        length: 1,
        convRule: rule21
    },
    {
        start: 7875,
        length: 1,
        convRule: rule22
    },
    {
        start: 7876,
        length: 1,
        convRule: rule21
    },
    {
        start: 7877,
        length: 1,
        convRule: rule22
    },
    {
        start: 7878,
        length: 1,
        convRule: rule21
    },
    {
        start: 7879,
        length: 1,
        convRule: rule22
    },
    {
        start: 7880,
        length: 1,
        convRule: rule21
    },
    {
        start: 7881,
        length: 1,
        convRule: rule22
    },
    {
        start: 7882,
        length: 1,
        convRule: rule21
    },
    {
        start: 7883,
        length: 1,
        convRule: rule22
    },
    {
        start: 7884,
        length: 1,
        convRule: rule21
    },
    {
        start: 7885,
        length: 1,
        convRule: rule22
    },
    {
        start: 7886,
        length: 1,
        convRule: rule21
    },
    {
        start: 7887,
        length: 1,
        convRule: rule22
    },
    {
        start: 7888,
        length: 1,
        convRule: rule21
    },
    {
        start: 7889,
        length: 1,
        convRule: rule22
    },
    {
        start: 7890,
        length: 1,
        convRule: rule21
    },
    {
        start: 7891,
        length: 1,
        convRule: rule22
    },
    {
        start: 7892,
        length: 1,
        convRule: rule21
    },
    {
        start: 7893,
        length: 1,
        convRule: rule22
    },
    {
        start: 7894,
        length: 1,
        convRule: rule21
    },
    {
        start: 7895,
        length: 1,
        convRule: rule22
    },
    {
        start: 7896,
        length: 1,
        convRule: rule21
    },
    {
        start: 7897,
        length: 1,
        convRule: rule22
    },
    {
        start: 7898,
        length: 1,
        convRule: rule21
    },
    {
        start: 7899,
        length: 1,
        convRule: rule22
    },
    {
        start: 7900,
        length: 1,
        convRule: rule21
    },
    {
        start: 7901,
        length: 1,
        convRule: rule22
    },
    {
        start: 7902,
        length: 1,
        convRule: rule21
    },
    {
        start: 7903,
        length: 1,
        convRule: rule22
    },
    {
        start: 7904,
        length: 1,
        convRule: rule21
    },
    {
        start: 7905,
        length: 1,
        convRule: rule22
    },
    {
        start: 7906,
        length: 1,
        convRule: rule21
    },
    {
        start: 7907,
        length: 1,
        convRule: rule22
    },
    {
        start: 7908,
        length: 1,
        convRule: rule21
    },
    {
        start: 7909,
        length: 1,
        convRule: rule22
    },
    {
        start: 7910,
        length: 1,
        convRule: rule21
    },
    {
        start: 7911,
        length: 1,
        convRule: rule22
    },
    {
        start: 7912,
        length: 1,
        convRule: rule21
    },
    {
        start: 7913,
        length: 1,
        convRule: rule22
    },
    {
        start: 7914,
        length: 1,
        convRule: rule21
    },
    {
        start: 7915,
        length: 1,
        convRule: rule22
    },
    {
        start: 7916,
        length: 1,
        convRule: rule21
    },
    {
        start: 7917,
        length: 1,
        convRule: rule22
    },
    {
        start: 7918,
        length: 1,
        convRule: rule21
    },
    {
        start: 7919,
        length: 1,
        convRule: rule22
    },
    {
        start: 7920,
        length: 1,
        convRule: rule21
    },
    {
        start: 7921,
        length: 1,
        convRule: rule22
    },
    {
        start: 7922,
        length: 1,
        convRule: rule21
    },
    {
        start: 7923,
        length: 1,
        convRule: rule22
    },
    {
        start: 7924,
        length: 1,
        convRule: rule21
    },
    {
        start: 7925,
        length: 1,
        convRule: rule22
    },
    {
        start: 7926,
        length: 1,
        convRule: rule21
    },
    {
        start: 7927,
        length: 1,
        convRule: rule22
    },
    {
        start: 7928,
        length: 1,
        convRule: rule21
    },
    {
        start: 7929,
        length: 1,
        convRule: rule22
    },
    {
        start: 7930,
        length: 1,
        convRule: rule21
    },
    {
        start: 7931,
        length: 1,
        convRule: rule22
    },
    {
        start: 7932,
        length: 1,
        convRule: rule21
    },
    {
        start: 7933,
        length: 1,
        convRule: rule22
    },
    {
        start: 7934,
        length: 1,
        convRule: rule21
    },
    {
        start: 7935,
        length: 1,
        convRule: rule22
    },
    {
        start: 7936,
        length: 8,
        convRule: rule121
    },
    {
        start: 7944,
        length: 8,
        convRule: rule122
    },
    {
        start: 7952,
        length: 6,
        convRule: rule121
    },
    {
        start: 7960,
        length: 6,
        convRule: rule122
    },
    {
        start: 7968,
        length: 8,
        convRule: rule121
    },
    {
        start: 7976,
        length: 8,
        convRule: rule122
    },
    {
        start: 7984,
        length: 8,
        convRule: rule121
    },
    {
        start: 7992,
        length: 8,
        convRule: rule122
    },
    {
        start: 8000,
        length: 6,
        convRule: rule121
    },
    {
        start: 8008,
        length: 6,
        convRule: rule122
    },
    {
        start: 8016,
        length: 1,
        convRule: rule14
    },
    {
        start: 8017,
        length: 1,
        convRule: rule121
    },
    {
        start: 8018,
        length: 1,
        convRule: rule14
    },
    {
        start: 8019,
        length: 1,
        convRule: rule121
    },
    {
        start: 8020,
        length: 1,
        convRule: rule14
    },
    {
        start: 8021,
        length: 1,
        convRule: rule121
    },
    {
        start: 8022,
        length: 1,
        convRule: rule14
    },
    {
        start: 8023,
        length: 1,
        convRule: rule121
    },
    {
        start: 8025,
        length: 1,
        convRule: rule122
    },
    {
        start: 8027,
        length: 1,
        convRule: rule122
    },
    {
        start: 8029,
        length: 1,
        convRule: rule122
    },
    {
        start: 8031,
        length: 1,
        convRule: rule122
    },
    {
        start: 8032,
        length: 8,
        convRule: rule121
    },
    {
        start: 8040,
        length: 8,
        convRule: rule122
    },
    {
        start: 8048,
        length: 2,
        convRule: rule123
    },
    {
        start: 8050,
        length: 4,
        convRule: rule124
    },
    {
        start: 8054,
        length: 2,
        convRule: rule125
    },
    {
        start: 8056,
        length: 2,
        convRule: rule126
    },
    {
        start: 8058,
        length: 2,
        convRule: rule127
    },
    {
        start: 8060,
        length: 2,
        convRule: rule128
    },
    {
        start: 8064,
        length: 8,
        convRule: rule121
    },
    {
        start: 8072,
        length: 8,
        convRule: rule129
    },
    {
        start: 8080,
        length: 8,
        convRule: rule121
    },
    {
        start: 8088,
        length: 8,
        convRule: rule129
    },
    {
        start: 8096,
        length: 8,
        convRule: rule121
    },
    {
        start: 8104,
        length: 8,
        convRule: rule129
    },
    {
        start: 8112,
        length: 2,
        convRule: rule121
    },
    {
        start: 8114,
        length: 1,
        convRule: rule14
    },
    {
        start: 8115,
        length: 1,
        convRule: rule130
    },
    {
        start: 8116,
        length: 1,
        convRule: rule14
    },
    {
        start: 8118,
        length: 2,
        convRule: rule14
    },
    {
        start: 8120,
        length: 2,
        convRule: rule122
    },
    {
        start: 8122,
        length: 2,
        convRule: rule131
    },
    {
        start: 8124,
        length: 1,
        convRule: rule132
    },
    {
        start: 8125,
        length: 1,
        convRule: rule10
    },
    {
        start: 8126,
        length: 1,
        convRule: rule133
    },
    {
        start: 8127,
        length: 3,
        convRule: rule10
    },
    {
        start: 8130,
        length: 1,
        convRule: rule14
    },
    {
        start: 8131,
        length: 1,
        convRule: rule130
    },
    {
        start: 8132,
        length: 1,
        convRule: rule14
    },
    {
        start: 8134,
        length: 2,
        convRule: rule14
    },
    {
        start: 8136,
        length: 4,
        convRule: rule134
    },
    {
        start: 8140,
        length: 1,
        convRule: rule132
    },
    {
        start: 8141,
        length: 3,
        convRule: rule10
    },
    {
        start: 8144,
        length: 2,
        convRule: rule121
    },
    {
        start: 8146,
        length: 2,
        convRule: rule14
    },
    {
        start: 8150,
        length: 2,
        convRule: rule14
    },
    {
        start: 8152,
        length: 2,
        convRule: rule122
    },
    {
        start: 8154,
        length: 2,
        convRule: rule135
    },
    {
        start: 8157,
        length: 3,
        convRule: rule10
    },
    {
        start: 8160,
        length: 2,
        convRule: rule121
    },
    {
        start: 8162,
        length: 3,
        convRule: rule14
    },
    {
        start: 8165,
        length: 1,
        convRule: rule104
    },
    {
        start: 8166,
        length: 2,
        convRule: rule14
    },
    {
        start: 8168,
        length: 2,
        convRule: rule122
    },
    {
        start: 8170,
        length: 2,
        convRule: rule136
    },
    {
        start: 8172,
        length: 1,
        convRule: rule107
    },
    {
        start: 8173,
        length: 3,
        convRule: rule10
    },
    {
        start: 8178,
        length: 1,
        convRule: rule14
    },
    {
        start: 8179,
        length: 1,
        convRule: rule130
    },
    {
        start: 8180,
        length: 1,
        convRule: rule14
    },
    {
        start: 8182,
        length: 2,
        convRule: rule14
    },
    {
        start: 8184,
        length: 2,
        convRule: rule137
    },
    {
        start: 8186,
        length: 2,
        convRule: rule138
    },
    {
        start: 8188,
        length: 1,
        convRule: rule132
    },
    {
        start: 8189,
        length: 2,
        convRule: rule10
    },
    {
        start: 8192,
        length: 11,
        convRule: rule1
    },
    {
        start: 8203,
        length: 5,
        convRule: rule16
    },
    {
        start: 8208,
        length: 6,
        convRule: rule7
    },
    {
        start: 8214,
        length: 2,
        convRule: rule2
    },
    {
        start: 8216,
        length: 1,
        convRule: rule15
    },
    {
        start: 8217,
        length: 1,
        convRule: rule19
    },
    {
        start: 8218,
        length: 1,
        convRule: rule4
    },
    {
        start: 8219,
        length: 2,
        convRule: rule15
    },
    {
        start: 8221,
        length: 1,
        convRule: rule19
    },
    {
        start: 8222,
        length: 1,
        convRule: rule4
    },
    {
        start: 8223,
        length: 1,
        convRule: rule15
    },
    {
        start: 8224,
        length: 8,
        convRule: rule2
    },
    {
        start: 8232,
        length: 1,
        convRule: rule139
    },
    {
        start: 8233,
        length: 1,
        convRule: rule140
    },
    {
        start: 8234,
        length: 5,
        convRule: rule16
    },
    {
        start: 8239,
        length: 1,
        convRule: rule1
    },
    {
        start: 8240,
        length: 9,
        convRule: rule2
    },
    {
        start: 8249,
        length: 1,
        convRule: rule15
    },
    {
        start: 8250,
        length: 1,
        convRule: rule19
    },
    {
        start: 8251,
        length: 4,
        convRule: rule2
    },
    {
        start: 8255,
        length: 2,
        convRule: rule11
    },
    {
        start: 8257,
        length: 3,
        convRule: rule2
    },
    {
        start: 8260,
        length: 1,
        convRule: rule6
    },
    {
        start: 8261,
        length: 1,
        convRule: rule4
    },
    {
        start: 8262,
        length: 1,
        convRule: rule5
    },
    {
        start: 8263,
        length: 11,
        convRule: rule2
    },
    {
        start: 8274,
        length: 1,
        convRule: rule6
    },
    {
        start: 8275,
        length: 1,
        convRule: rule2
    },
    {
        start: 8276,
        length: 1,
        convRule: rule11
    },
    {
        start: 8277,
        length: 10,
        convRule: rule2
    },
    {
        start: 8287,
        length: 1,
        convRule: rule1
    },
    {
        start: 8288,
        length: 5,
        convRule: rule16
    },
    {
        start: 8298,
        length: 6,
        convRule: rule16
    },
    {
        start: 8304,
        length: 1,
        convRule: rule17
    },
    {
        start: 8305,
        length: 1,
        convRule: rule83
    },
    {
        start: 8308,
        length: 6,
        convRule: rule17
    },
    {
        start: 8314,
        length: 3,
        convRule: rule6
    },
    {
        start: 8317,
        length: 1,
        convRule: rule4
    },
    {
        start: 8318,
        length: 1,
        convRule: rule5
    },
    {
        start: 8319,
        length: 1,
        convRule: rule83
    },
    {
        start: 8320,
        length: 10,
        convRule: rule17
    },
    {
        start: 8330,
        length: 3,
        convRule: rule6
    },
    {
        start: 8333,
        length: 1,
        convRule: rule4
    },
    {
        start: 8334,
        length: 1,
        convRule: rule5
    },
    {
        start: 8336,
        length: 13,
        convRule: rule83
    },
    {
        start: 8352,
        length: 26,
        convRule: rule3
    },
    {
        start: 8400,
        length: 13,
        convRule: rule84
    },
    {
        start: 8413,
        length: 4,
        convRule: rule109
    },
    {
        start: 8417,
        length: 1,
        convRule: rule84
    },
    {
        start: 8418,
        length: 3,
        convRule: rule109
    },
    {
        start: 8421,
        length: 12,
        convRule: rule84
    },
    {
        start: 8448,
        length: 2,
        convRule: rule13
    },
    {
        start: 8450,
        length: 1,
        convRule: rule98
    },
    {
        start: 8451,
        length: 4,
        convRule: rule13
    },
    {
        start: 8455,
        length: 1,
        convRule: rule98
    },
    {
        start: 8456,
        length: 2,
        convRule: rule13
    },
    {
        start: 8458,
        length: 1,
        convRule: rule14
    },
    {
        start: 8459,
        length: 3,
        convRule: rule98
    },
    {
        start: 8462,
        length: 2,
        convRule: rule14
    },
    {
        start: 8464,
        length: 3,
        convRule: rule98
    },
    {
        start: 8467,
        length: 1,
        convRule: rule14
    },
    {
        start: 8468,
        length: 1,
        convRule: rule13
    },
    {
        start: 8469,
        length: 1,
        convRule: rule98
    },
    {
        start: 8470,
        length: 2,
        convRule: rule13
    },
    {
        start: 8472,
        length: 1,
        convRule: rule6
    },
    {
        start: 8473,
        length: 5,
        convRule: rule98
    },
    {
        start: 8478,
        length: 6,
        convRule: rule13
    },
    {
        start: 8484,
        length: 1,
        convRule: rule98
    },
    {
        start: 8485,
        length: 1,
        convRule: rule13
    },
    {
        start: 8486,
        length: 1,
        convRule: rule141
    },
    {
        start: 8487,
        length: 1,
        convRule: rule13
    },
    {
        start: 8488,
        length: 1,
        convRule: rule98
    },
    {
        start: 8489,
        length: 1,
        convRule: rule13
    },
    {
        start: 8490,
        length: 1,
        convRule: rule142
    },
    {
        start: 8491,
        length: 1,
        convRule: rule143
    },
    {
        start: 8492,
        length: 2,
        convRule: rule98
    },
    {
        start: 8494,
        length: 1,
        convRule: rule13
    },
    {
        start: 8495,
        length: 1,
        convRule: rule14
    },
    {
        start: 8496,
        length: 2,
        convRule: rule98
    },
    {
        start: 8498,
        length: 1,
        convRule: rule144
    },
    {
        start: 8499,
        length: 1,
        convRule: rule98
    },
    {
        start: 8500,
        length: 1,
        convRule: rule14
    },
    {
        start: 8501,
        length: 4,
        convRule: rule45
    },
    {
        start: 8505,
        length: 1,
        convRule: rule14
    },
    {
        start: 8506,
        length: 2,
        convRule: rule13
    },
    {
        start: 8508,
        length: 2,
        convRule: rule14
    },
    {
        start: 8510,
        length: 2,
        convRule: rule98
    },
    {
        start: 8512,
        length: 5,
        convRule: rule6
    },
    {
        start: 8517,
        length: 1,
        convRule: rule98
    },
    {
        start: 8518,
        length: 4,
        convRule: rule14
    },
    {
        start: 8522,
        length: 1,
        convRule: rule13
    },
    {
        start: 8523,
        length: 1,
        convRule: rule6
    },
    {
        start: 8524,
        length: 2,
        convRule: rule13
    },
    {
        start: 8526,
        length: 1,
        convRule: rule145
    },
    {
        start: 8527,
        length: 1,
        convRule: rule13
    },
    {
        start: 8528,
        length: 16,
        convRule: rule17
    },
    {
        start: 8544,
        length: 16,
        convRule: rule146
    },
    {
        start: 8560,
        length: 16,
        convRule: rule147
    },
    {
        start: 8576,
        length: 3,
        convRule: rule116
    },
    {
        start: 8579,
        length: 1,
        convRule: rule21
    },
    {
        start: 8580,
        length: 1,
        convRule: rule22
    },
    {
        start: 8581,
        length: 4,
        convRule: rule116
    },
    {
        start: 8585,
        length: 1,
        convRule: rule17
    },
    {
        start: 8592,
        length: 5,
        convRule: rule6
    },
    {
        start: 8597,
        length: 5,
        convRule: rule13
    },
    {
        start: 8602,
        length: 2,
        convRule: rule6
    },
    {
        start: 8604,
        length: 4,
        convRule: rule13
    },
    {
        start: 8608,
        length: 1,
        convRule: rule6
    },
    {
        start: 8609,
        length: 2,
        convRule: rule13
    },
    {
        start: 8611,
        length: 1,
        convRule: rule6
    },
    {
        start: 8612,
        length: 2,
        convRule: rule13
    },
    {
        start: 8614,
        length: 1,
        convRule: rule6
    },
    {
        start: 8615,
        length: 7,
        convRule: rule13
    },
    {
        start: 8622,
        length: 1,
        convRule: rule6
    },
    {
        start: 8623,
        length: 31,
        convRule: rule13
    },
    {
        start: 8654,
        length: 2,
        convRule: rule6
    },
    {
        start: 8656,
        length: 2,
        convRule: rule13
    },
    {
        start: 8658,
        length: 1,
        convRule: rule6
    },
    {
        start: 8659,
        length: 1,
        convRule: rule13
    },
    {
        start: 8660,
        length: 1,
        convRule: rule6
    },
    {
        start: 8661,
        length: 31,
        convRule: rule13
    },
    {
        start: 8692,
        length: 268,
        convRule: rule6
    },
    {
        start: 8960,
        length: 8,
        convRule: rule13
    },
    {
        start: 8968,
        length: 4,
        convRule: rule6
    },
    {
        start: 8972,
        length: 20,
        convRule: rule13
    },
    {
        start: 8992,
        length: 2,
        convRule: rule6
    },
    {
        start: 8994,
        length: 7,
        convRule: rule13
    },
    {
        start: 9001,
        length: 1,
        convRule: rule4
    },
    {
        start: 9002,
        length: 1,
        convRule: rule5
    },
    {
        start: 9003,
        length: 81,
        convRule: rule13
    },
    {
        start: 9084,
        length: 1,
        convRule: rule6
    },
    {
        start: 9085,
        length: 30,
        convRule: rule13
    },
    {
        start: 9115,
        length: 25,
        convRule: rule6
    },
    {
        start: 9140,
        length: 40,
        convRule: rule13
    },
    {
        start: 9180,
        length: 6,
        convRule: rule6
    },
    {
        start: 9186,
        length: 18,
        convRule: rule13
    },
    {
        start: 9216,
        length: 39,
        convRule: rule13
    },
    {
        start: 9280,
        length: 11,
        convRule: rule13
    },
    {
        start: 9312,
        length: 60,
        convRule: rule17
    },
    {
        start: 9372,
        length: 26,
        convRule: rule13
    },
    {
        start: 9398,
        length: 26,
        convRule: rule148
    },
    {
        start: 9424,
        length: 26,
        convRule: rule149
    },
    {
        start: 9450,
        length: 22,
        convRule: rule17
    },
    {
        start: 9472,
        length: 183,
        convRule: rule13
    },
    {
        start: 9655,
        length: 1,
        convRule: rule6
    },
    {
        start: 9656,
        length: 9,
        convRule: rule13
    },
    {
        start: 9665,
        length: 1,
        convRule: rule6
    },
    {
        start: 9666,
        length: 54,
        convRule: rule13
    },
    {
        start: 9720,
        length: 8,
        convRule: rule6
    },
    {
        start: 9728,
        length: 111,
        convRule: rule13
    },
    {
        start: 9839,
        length: 1,
        convRule: rule6
    },
    {
        start: 9840,
        length: 144,
        convRule: rule13
    },
    {
        start: 9985,
        length: 103,
        convRule: rule13
    },
    {
        start: 10088,
        length: 1,
        convRule: rule4
    },
    {
        start: 10089,
        length: 1,
        convRule: rule5
    },
    {
        start: 10090,
        length: 1,
        convRule: rule4
    },
    {
        start: 10091,
        length: 1,
        convRule: rule5
    },
    {
        start: 10092,
        length: 1,
        convRule: rule4
    },
    {
        start: 10093,
        length: 1,
        convRule: rule5
    },
    {
        start: 10094,
        length: 1,
        convRule: rule4
    },
    {
        start: 10095,
        length: 1,
        convRule: rule5
    },
    {
        start: 10096,
        length: 1,
        convRule: rule4
    },
    {
        start: 10097,
        length: 1,
        convRule: rule5
    },
    {
        start: 10098,
        length: 1,
        convRule: rule4
    },
    {
        start: 10099,
        length: 1,
        convRule: rule5
    },
    {
        start: 10100,
        length: 1,
        convRule: rule4
    },
    {
        start: 10101,
        length: 1,
        convRule: rule5
    },
    {
        start: 10102,
        length: 30,
        convRule: rule17
    },
    {
        start: 10132,
        length: 44,
        convRule: rule13
    },
    {
        start: 10176,
        length: 5,
        convRule: rule6
    },
    {
        start: 10181,
        length: 1,
        convRule: rule4
    },
    {
        start: 10182,
        length: 1,
        convRule: rule5
    },
    {
        start: 10183,
        length: 4,
        convRule: rule6
    },
    {
        start: 10188,
        length: 1,
        convRule: rule6
    },
    {
        start: 10190,
        length: 24,
        convRule: rule6
    },
    {
        start: 10214,
        length: 1,
        convRule: rule4
    },
    {
        start: 10215,
        length: 1,
        convRule: rule5
    },
    {
        start: 10216,
        length: 1,
        convRule: rule4
    },
    {
        start: 10217,
        length: 1,
        convRule: rule5
    },
    {
        start: 10218,
        length: 1,
        convRule: rule4
    },
    {
        start: 10219,
        length: 1,
        convRule: rule5
    },
    {
        start: 10220,
        length: 1,
        convRule: rule4
    },
    {
        start: 10221,
        length: 1,
        convRule: rule5
    },
    {
        start: 10222,
        length: 1,
        convRule: rule4
    },
    {
        start: 10223,
        length: 1,
        convRule: rule5
    },
    {
        start: 10224,
        length: 16,
        convRule: rule6
    },
    {
        start: 10240,
        length: 256,
        convRule: rule13
    },
    {
        start: 10496,
        length: 131,
        convRule: rule6
    },
    {
        start: 10627,
        length: 1,
        convRule: rule4
    },
    {
        start: 10628,
        length: 1,
        convRule: rule5
    },
    {
        start: 10629,
        length: 1,
        convRule: rule4
    },
    {
        start: 10630,
        length: 1,
        convRule: rule5
    },
    {
        start: 10631,
        length: 1,
        convRule: rule4
    },
    {
        start: 10632,
        length: 1,
        convRule: rule5
    },
    {
        start: 10633,
        length: 1,
        convRule: rule4
    },
    {
        start: 10634,
        length: 1,
        convRule: rule5
    },
    {
        start: 10635,
        length: 1,
        convRule: rule4
    },
    {
        start: 10636,
        length: 1,
        convRule: rule5
    },
    {
        start: 10637,
        length: 1,
        convRule: rule4
    },
    {
        start: 10638,
        length: 1,
        convRule: rule5
    },
    {
        start: 10639,
        length: 1,
        convRule: rule4
    },
    {
        start: 10640,
        length: 1,
        convRule: rule5
    },
    {
        start: 10641,
        length: 1,
        convRule: rule4
    },
    {
        start: 10642,
        length: 1,
        convRule: rule5
    },
    {
        start: 10643,
        length: 1,
        convRule: rule4
    },
    {
        start: 10644,
        length: 1,
        convRule: rule5
    },
    {
        start: 10645,
        length: 1,
        convRule: rule4
    },
    {
        start: 10646,
        length: 1,
        convRule: rule5
    },
    {
        start: 10647,
        length: 1,
        convRule: rule4
    },
    {
        start: 10648,
        length: 1,
        convRule: rule5
    },
    {
        start: 10649,
        length: 63,
        convRule: rule6
    },
    {
        start: 10712,
        length: 1,
        convRule: rule4
    },
    {
        start: 10713,
        length: 1,
        convRule: rule5
    },
    {
        start: 10714,
        length: 1,
        convRule: rule4
    },
    {
        start: 10715,
        length: 1,
        convRule: rule5
    },
    {
        start: 10716,
        length: 32,
        convRule: rule6
    },
    {
        start: 10748,
        length: 1,
        convRule: rule4
    },
    {
        start: 10749,
        length: 1,
        convRule: rule5
    },
    {
        start: 10750,
        length: 258,
        convRule: rule6
    },
    {
        start: 11008,
        length: 48,
        convRule: rule13
    },
    {
        start: 11056,
        length: 21,
        convRule: rule6
    },
    {
        start: 11077,
        length: 2,
        convRule: rule13
    },
    {
        start: 11079,
        length: 6,
        convRule: rule6
    },
    {
        start: 11088,
        length: 10,
        convRule: rule13
    },
    {
        start: 11264,
        length: 47,
        convRule: rule112
    },
    {
        start: 11312,
        length: 47,
        convRule: rule113
    },
    {
        start: 11360,
        length: 1,
        convRule: rule21
    },
    {
        start: 11361,
        length: 1,
        convRule: rule22
    },
    {
        start: 11362,
        length: 1,
        convRule: rule150
    },
    {
        start: 11363,
        length: 1,
        convRule: rule151
    },
    {
        start: 11364,
        length: 1,
        convRule: rule152
    },
    {
        start: 11365,
        length: 1,
        convRule: rule153
    },
    {
        start: 11366,
        length: 1,
        convRule: rule154
    },
    {
        start: 11367,
        length: 1,
        convRule: rule21
    },
    {
        start: 11368,
        length: 1,
        convRule: rule22
    },
    {
        start: 11369,
        length: 1,
        convRule: rule21
    },
    {
        start: 11370,
        length: 1,
        convRule: rule22
    },
    {
        start: 11371,
        length: 1,
        convRule: rule21
    },
    {
        start: 11372,
        length: 1,
        convRule: rule22
    },
    {
        start: 11373,
        length: 1,
        convRule: rule155
    },
    {
        start: 11374,
        length: 1,
        convRule: rule156
    },
    {
        start: 11375,
        length: 1,
        convRule: rule157
    },
    {
        start: 11376,
        length: 1,
        convRule: rule158
    },
    {
        start: 11377,
        length: 1,
        convRule: rule14
    },
    {
        start: 11378,
        length: 1,
        convRule: rule21
    },
    {
        start: 11379,
        length: 1,
        convRule: rule22
    },
    {
        start: 11380,
        length: 1,
        convRule: rule14
    },
    {
        start: 11381,
        length: 1,
        convRule: rule21
    },
    {
        start: 11382,
        length: 1,
        convRule: rule22
    },
    {
        start: 11383,
        length: 6,
        convRule: rule14
    },
    {
        start: 11389,
        length: 1,
        convRule: rule83
    },
    {
        start: 11390,
        length: 2,
        convRule: rule159
    },
    {
        start: 11392,
        length: 1,
        convRule: rule21
    },
    {
        start: 11393,
        length: 1,
        convRule: rule22
    },
    {
        start: 11394,
        length: 1,
        convRule: rule21
    },
    {
        start: 11395,
        length: 1,
        convRule: rule22
    },
    {
        start: 11396,
        length: 1,
        convRule: rule21
    },
    {
        start: 11397,
        length: 1,
        convRule: rule22
    },
    {
        start: 11398,
        length: 1,
        convRule: rule21
    },
    {
        start: 11399,
        length: 1,
        convRule: rule22
    },
    {
        start: 11400,
        length: 1,
        convRule: rule21
    },
    {
        start: 11401,
        length: 1,
        convRule: rule22
    },
    {
        start: 11402,
        length: 1,
        convRule: rule21
    },
    {
        start: 11403,
        length: 1,
        convRule: rule22
    },
    {
        start: 11404,
        length: 1,
        convRule: rule21
    },
    {
        start: 11405,
        length: 1,
        convRule: rule22
    },
    {
        start: 11406,
        length: 1,
        convRule: rule21
    },
    {
        start: 11407,
        length: 1,
        convRule: rule22
    },
    {
        start: 11408,
        length: 1,
        convRule: rule21
    },
    {
        start: 11409,
        length: 1,
        convRule: rule22
    },
    {
        start: 11410,
        length: 1,
        convRule: rule21
    },
    {
        start: 11411,
        length: 1,
        convRule: rule22
    },
    {
        start: 11412,
        length: 1,
        convRule: rule21
    },
    {
        start: 11413,
        length: 1,
        convRule: rule22
    },
    {
        start: 11414,
        length: 1,
        convRule: rule21
    },
    {
        start: 11415,
        length: 1,
        convRule: rule22
    },
    {
        start: 11416,
        length: 1,
        convRule: rule21
    },
    {
        start: 11417,
        length: 1,
        convRule: rule22
    },
    {
        start: 11418,
        length: 1,
        convRule: rule21
    },
    {
        start: 11419,
        length: 1,
        convRule: rule22
    },
    {
        start: 11420,
        length: 1,
        convRule: rule21
    },
    {
        start: 11421,
        length: 1,
        convRule: rule22
    },
    {
        start: 11422,
        length: 1,
        convRule: rule21
    },
    {
        start: 11423,
        length: 1,
        convRule: rule22
    },
    {
        start: 11424,
        length: 1,
        convRule: rule21
    },
    {
        start: 11425,
        length: 1,
        convRule: rule22
    },
    {
        start: 11426,
        length: 1,
        convRule: rule21
    },
    {
        start: 11427,
        length: 1,
        convRule: rule22
    },
    {
        start: 11428,
        length: 1,
        convRule: rule21
    },
    {
        start: 11429,
        length: 1,
        convRule: rule22
    },
    {
        start: 11430,
        length: 1,
        convRule: rule21
    },
    {
        start: 11431,
        length: 1,
        convRule: rule22
    },
    {
        start: 11432,
        length: 1,
        convRule: rule21
    },
    {
        start: 11433,
        length: 1,
        convRule: rule22
    },
    {
        start: 11434,
        length: 1,
        convRule: rule21
    },
    {
        start: 11435,
        length: 1,
        convRule: rule22
    },
    {
        start: 11436,
        length: 1,
        convRule: rule21
    },
    {
        start: 11437,
        length: 1,
        convRule: rule22
    },
    {
        start: 11438,
        length: 1,
        convRule: rule21
    },
    {
        start: 11439,
        length: 1,
        convRule: rule22
    },
    {
        start: 11440,
        length: 1,
        convRule: rule21
    },
    {
        start: 11441,
        length: 1,
        convRule: rule22
    },
    {
        start: 11442,
        length: 1,
        convRule: rule21
    },
    {
        start: 11443,
        length: 1,
        convRule: rule22
    },
    {
        start: 11444,
        length: 1,
        convRule: rule21
    },
    {
        start: 11445,
        length: 1,
        convRule: rule22
    },
    {
        start: 11446,
        length: 1,
        convRule: rule21
    },
    {
        start: 11447,
        length: 1,
        convRule: rule22
    },
    {
        start: 11448,
        length: 1,
        convRule: rule21
    },
    {
        start: 11449,
        length: 1,
        convRule: rule22
    },
    {
        start: 11450,
        length: 1,
        convRule: rule21
    },
    {
        start: 11451,
        length: 1,
        convRule: rule22
    },
    {
        start: 11452,
        length: 1,
        convRule: rule21
    },
    {
        start: 11453,
        length: 1,
        convRule: rule22
    },
    {
        start: 11454,
        length: 1,
        convRule: rule21
    },
    {
        start: 11455,
        length: 1,
        convRule: rule22
    },
    {
        start: 11456,
        length: 1,
        convRule: rule21
    },
    {
        start: 11457,
        length: 1,
        convRule: rule22
    },
    {
        start: 11458,
        length: 1,
        convRule: rule21
    },
    {
        start: 11459,
        length: 1,
        convRule: rule22
    },
    {
        start: 11460,
        length: 1,
        convRule: rule21
    },
    {
        start: 11461,
        length: 1,
        convRule: rule22
    },
    {
        start: 11462,
        length: 1,
        convRule: rule21
    },
    {
        start: 11463,
        length: 1,
        convRule: rule22
    },
    {
        start: 11464,
        length: 1,
        convRule: rule21
    },
    {
        start: 11465,
        length: 1,
        convRule: rule22
    },
    {
        start: 11466,
        length: 1,
        convRule: rule21
    },
    {
        start: 11467,
        length: 1,
        convRule: rule22
    },
    {
        start: 11468,
        length: 1,
        convRule: rule21
    },
    {
        start: 11469,
        length: 1,
        convRule: rule22
    },
    {
        start: 11470,
        length: 1,
        convRule: rule21
    },
    {
        start: 11471,
        length: 1,
        convRule: rule22
    },
    {
        start: 11472,
        length: 1,
        convRule: rule21
    },
    {
        start: 11473,
        length: 1,
        convRule: rule22
    },
    {
        start: 11474,
        length: 1,
        convRule: rule21
    },
    {
        start: 11475,
        length: 1,
        convRule: rule22
    },
    {
        start: 11476,
        length: 1,
        convRule: rule21
    },
    {
        start: 11477,
        length: 1,
        convRule: rule22
    },
    {
        start: 11478,
        length: 1,
        convRule: rule21
    },
    {
        start: 11479,
        length: 1,
        convRule: rule22
    },
    {
        start: 11480,
        length: 1,
        convRule: rule21
    },
    {
        start: 11481,
        length: 1,
        convRule: rule22
    },
    {
        start: 11482,
        length: 1,
        convRule: rule21
    },
    {
        start: 11483,
        length: 1,
        convRule: rule22
    },
    {
        start: 11484,
        length: 1,
        convRule: rule21
    },
    {
        start: 11485,
        length: 1,
        convRule: rule22
    },
    {
        start: 11486,
        length: 1,
        convRule: rule21
    },
    {
        start: 11487,
        length: 1,
        convRule: rule22
    },
    {
        start: 11488,
        length: 1,
        convRule: rule21
    },
    {
        start: 11489,
        length: 1,
        convRule: rule22
    },
    {
        start: 11490,
        length: 1,
        convRule: rule21
    },
    {
        start: 11491,
        length: 1,
        convRule: rule22
    },
    {
        start: 11492,
        length: 1,
        convRule: rule14
    },
    {
        start: 11493,
        length: 6,
        convRule: rule13
    },
    {
        start: 11499,
        length: 1,
        convRule: rule21
    },
    {
        start: 11500,
        length: 1,
        convRule: rule22
    },
    {
        start: 11501,
        length: 1,
        convRule: rule21
    },
    {
        start: 11502,
        length: 1,
        convRule: rule22
    },
    {
        start: 11503,
        length: 3,
        convRule: rule84
    },
    {
        start: 11513,
        length: 4,
        convRule: rule2
    },
    {
        start: 11517,
        length: 1,
        convRule: rule17
    },
    {
        start: 11518,
        length: 2,
        convRule: rule2
    },
    {
        start: 11520,
        length: 38,
        convRule: rule160
    },
    {
        start: 11568,
        length: 54,
        convRule: rule45
    },
    {
        start: 11631,
        length: 1,
        convRule: rule83
    },
    {
        start: 11632,
        length: 1,
        convRule: rule2
    },
    {
        start: 11647,
        length: 1,
        convRule: rule84
    },
    {
        start: 11648,
        length: 23,
        convRule: rule45
    },
    {
        start: 11680,
        length: 7,
        convRule: rule45
    },
    {
        start: 11688,
        length: 7,
        convRule: rule45
    },
    {
        start: 11696,
        length: 7,
        convRule: rule45
    },
    {
        start: 11704,
        length: 7,
        convRule: rule45
    },
    {
        start: 11712,
        length: 7,
        convRule: rule45
    },
    {
        start: 11720,
        length: 7,
        convRule: rule45
    },
    {
        start: 11728,
        length: 7,
        convRule: rule45
    },
    {
        start: 11736,
        length: 7,
        convRule: rule45
    },
    {
        start: 11744,
        length: 32,
        convRule: rule84
    },
    {
        start: 11776,
        length: 2,
        convRule: rule2
    },
    {
        start: 11778,
        length: 1,
        convRule: rule15
    },
    {
        start: 11779,
        length: 1,
        convRule: rule19
    },
    {
        start: 11780,
        length: 1,
        convRule: rule15
    },
    {
        start: 11781,
        length: 1,
        convRule: rule19
    },
    {
        start: 11782,
        length: 3,
        convRule: rule2
    },
    {
        start: 11785,
        length: 1,
        convRule: rule15
    },
    {
        start: 11786,
        length: 1,
        convRule: rule19
    },
    {
        start: 11787,
        length: 1,
        convRule: rule2
    },
    {
        start: 11788,
        length: 1,
        convRule: rule15
    },
    {
        start: 11789,
        length: 1,
        convRule: rule19
    },
    {
        start: 11790,
        length: 9,
        convRule: rule2
    },
    {
        start: 11799,
        length: 1,
        convRule: rule7
    },
    {
        start: 11800,
        length: 2,
        convRule: rule2
    },
    {
        start: 11802,
        length: 1,
        convRule: rule7
    },
    {
        start: 11803,
        length: 1,
        convRule: rule2
    },
    {
        start: 11804,
        length: 1,
        convRule: rule15
    },
    {
        start: 11805,
        length: 1,
        convRule: rule19
    },
    {
        start: 11806,
        length: 2,
        convRule: rule2
    },
    {
        start: 11808,
        length: 1,
        convRule: rule15
    },
    {
        start: 11809,
        length: 1,
        convRule: rule19
    },
    {
        start: 11810,
        length: 1,
        convRule: rule4
    },
    {
        start: 11811,
        length: 1,
        convRule: rule5
    },
    {
        start: 11812,
        length: 1,
        convRule: rule4
    },
    {
        start: 11813,
        length: 1,
        convRule: rule5
    },
    {
        start: 11814,
        length: 1,
        convRule: rule4
    },
    {
        start: 11815,
        length: 1,
        convRule: rule5
    },
    {
        start: 11816,
        length: 1,
        convRule: rule4
    },
    {
        start: 11817,
        length: 1,
        convRule: rule5
    },
    {
        start: 11818,
        length: 5,
        convRule: rule2
    },
    {
        start: 11823,
        length: 1,
        convRule: rule83
    },
    {
        start: 11824,
        length: 2,
        convRule: rule2
    },
    {
        start: 11904,
        length: 26,
        convRule: rule13
    },
    {
        start: 11931,
        length: 89,
        convRule: rule13
    },
    {
        start: 12032,
        length: 214,
        convRule: rule13
    },
    {
        start: 12272,
        length: 12,
        convRule: rule13
    },
    {
        start: 12288,
        length: 1,
        convRule: rule1
    },
    {
        start: 12289,
        length: 3,
        convRule: rule2
    },
    {
        start: 12292,
        length: 1,
        convRule: rule13
    },
    {
        start: 12293,
        length: 1,
        convRule: rule83
    },
    {
        start: 12294,
        length: 1,
        convRule: rule45
    },
    {
        start: 12295,
        length: 1,
        convRule: rule116
    },
    {
        start: 12296,
        length: 1,
        convRule: rule4
    },
    {
        start: 12297,
        length: 1,
        convRule: rule5
    },
    {
        start: 12298,
        length: 1,
        convRule: rule4
    },
    {
        start: 12299,
        length: 1,
        convRule: rule5
    },
    {
        start: 12300,
        length: 1,
        convRule: rule4
    },
    {
        start: 12301,
        length: 1,
        convRule: rule5
    },
    {
        start: 12302,
        length: 1,
        convRule: rule4
    },
    {
        start: 12303,
        length: 1,
        convRule: rule5
    },
    {
        start: 12304,
        length: 1,
        convRule: rule4
    },
    {
        start: 12305,
        length: 1,
        convRule: rule5
    },
    {
        start: 12306,
        length: 2,
        convRule: rule13
    },
    {
        start: 12308,
        length: 1,
        convRule: rule4
    },
    {
        start: 12309,
        length: 1,
        convRule: rule5
    },
    {
        start: 12310,
        length: 1,
        convRule: rule4
    },
    {
        start: 12311,
        length: 1,
        convRule: rule5
    },
    {
        start: 12312,
        length: 1,
        convRule: rule4
    },
    {
        start: 12313,
        length: 1,
        convRule: rule5
    },
    {
        start: 12314,
        length: 1,
        convRule: rule4
    },
    {
        start: 12315,
        length: 1,
        convRule: rule5
    },
    {
        start: 12316,
        length: 1,
        convRule: rule7
    },
    {
        start: 12317,
        length: 1,
        convRule: rule4
    },
    {
        start: 12318,
        length: 2,
        convRule: rule5
    },
    {
        start: 12320,
        length: 1,
        convRule: rule13
    },
    {
        start: 12321,
        length: 9,
        convRule: rule116
    },
    {
        start: 12330,
        length: 6,
        convRule: rule84
    },
    {
        start: 12336,
        length: 1,
        convRule: rule7
    },
    {
        start: 12337,
        length: 5,
        convRule: rule83
    },
    {
        start: 12342,
        length: 2,
        convRule: rule13
    },
    {
        start: 12344,
        length: 3,
        convRule: rule116
    },
    {
        start: 12347,
        length: 1,
        convRule: rule83
    },
    {
        start: 12348,
        length: 1,
        convRule: rule45
    },
    {
        start: 12349,
        length: 1,
        convRule: rule2
    },
    {
        start: 12350,
        length: 2,
        convRule: rule13
    },
    {
        start: 12353,
        length: 86,
        convRule: rule45
    },
    {
        start: 12441,
        length: 2,
        convRule: rule84
    },
    {
        start: 12443,
        length: 2,
        convRule: rule10
    },
    {
        start: 12445,
        length: 2,
        convRule: rule83
    },
    {
        start: 12447,
        length: 1,
        convRule: rule45
    },
    {
        start: 12448,
        length: 1,
        convRule: rule7
    },
    {
        start: 12449,
        length: 90,
        convRule: rule45
    },
    {
        start: 12539,
        length: 1,
        convRule: rule2
    },
    {
        start: 12540,
        length: 3,
        convRule: rule83
    },
    {
        start: 12543,
        length: 1,
        convRule: rule45
    },
    {
        start: 12549,
        length: 41,
        convRule: rule45
    },
    {
        start: 12593,
        length: 94,
        convRule: rule45
    },
    {
        start: 12688,
        length: 2,
        convRule: rule13
    },
    {
        start: 12690,
        length: 4,
        convRule: rule17
    },
    {
        start: 12694,
        length: 10,
        convRule: rule13
    },
    {
        start: 12704,
        length: 27,
        convRule: rule45
    },
    {
        start: 12736,
        length: 36,
        convRule: rule13
    },
    {
        start: 12784,
        length: 16,
        convRule: rule45
    },
    {
        start: 12800,
        length: 31,
        convRule: rule13
    },
    {
        start: 12832,
        length: 10,
        convRule: rule17
    },
    {
        start: 12842,
        length: 39,
        convRule: rule13
    },
    {
        start: 12881,
        length: 15,
        convRule: rule17
    },
    {
        start: 12896,
        length: 32,
        convRule: rule13
    },
    {
        start: 12928,
        length: 10,
        convRule: rule17
    },
    {
        start: 12938,
        length: 39,
        convRule: rule13
    },
    {
        start: 12977,
        length: 15,
        convRule: rule17
    },
    {
        start: 12992,
        length: 63,
        convRule: rule13
    },
    {
        start: 13056,
        length: 256,
        convRule: rule13
    },
    {
        start: 13312,
        length: 6582,
        convRule: rule45
    },
    {
        start: 19904,
        length: 64,
        convRule: rule13
    },
    {
        start: 19968,
        length: 20940,
        convRule: rule45
    },
    {
        start: 40960,
        length: 21,
        convRule: rule45
    },
    {
        start: 40981,
        length: 1,
        convRule: rule83
    },
    {
        start: 40982,
        length: 1143,
        convRule: rule45
    },
    {
        start: 42128,
        length: 55,
        convRule: rule13
    },
    {
        start: 42192,
        length: 40,
        convRule: rule45
    },
    {
        start: 42232,
        length: 6,
        convRule: rule83
    },
    {
        start: 42238,
        length: 2,
        convRule: rule2
    },
    {
        start: 42240,
        length: 268,
        convRule: rule45
    },
    {
        start: 42508,
        length: 1,
        convRule: rule83
    },
    {
        start: 42509,
        length: 3,
        convRule: rule2
    },
    {
        start: 42512,
        length: 16,
        convRule: rule45
    },
    {
        start: 42528,
        length: 10,
        convRule: rule8
    },
    {
        start: 42538,
        length: 2,
        convRule: rule45
    },
    {
        start: 42560,
        length: 1,
        convRule: rule21
    },
    {
        start: 42561,
        length: 1,
        convRule: rule22
    },
    {
        start: 42562,
        length: 1,
        convRule: rule21
    },
    {
        start: 42563,
        length: 1,
        convRule: rule22
    },
    {
        start: 42564,
        length: 1,
        convRule: rule21
    },
    {
        start: 42565,
        length: 1,
        convRule: rule22
    },
    {
        start: 42566,
        length: 1,
        convRule: rule21
    },
    {
        start: 42567,
        length: 1,
        convRule: rule22
    },
    {
        start: 42568,
        length: 1,
        convRule: rule21
    },
    {
        start: 42569,
        length: 1,
        convRule: rule22
    },
    {
        start: 42570,
        length: 1,
        convRule: rule21
    },
    {
        start: 42571,
        length: 1,
        convRule: rule22
    },
    {
        start: 42572,
        length: 1,
        convRule: rule21
    },
    {
        start: 42573,
        length: 1,
        convRule: rule22
    },
    {
        start: 42574,
        length: 1,
        convRule: rule21
    },
    {
        start: 42575,
        length: 1,
        convRule: rule22
    },
    {
        start: 42576,
        length: 1,
        convRule: rule21
    },
    {
        start: 42577,
        length: 1,
        convRule: rule22
    },
    {
        start: 42578,
        length: 1,
        convRule: rule21
    },
    {
        start: 42579,
        length: 1,
        convRule: rule22
    },
    {
        start: 42580,
        length: 1,
        convRule: rule21
    },
    {
        start: 42581,
        length: 1,
        convRule: rule22
    },
    {
        start: 42582,
        length: 1,
        convRule: rule21
    },
    {
        start: 42583,
        length: 1,
        convRule: rule22
    },
    {
        start: 42584,
        length: 1,
        convRule: rule21
    },
    {
        start: 42585,
        length: 1,
        convRule: rule22
    },
    {
        start: 42586,
        length: 1,
        convRule: rule21
    },
    {
        start: 42587,
        length: 1,
        convRule: rule22
    },
    {
        start: 42588,
        length: 1,
        convRule: rule21
    },
    {
        start: 42589,
        length: 1,
        convRule: rule22
    },
    {
        start: 42590,
        length: 1,
        convRule: rule21
    },
    {
        start: 42591,
        length: 1,
        convRule: rule22
    },
    {
        start: 42592,
        length: 1,
        convRule: rule21
    },
    {
        start: 42593,
        length: 1,
        convRule: rule22
    },
    {
        start: 42594,
        length: 1,
        convRule: rule21
    },
    {
        start: 42595,
        length: 1,
        convRule: rule22
    },
    {
        start: 42596,
        length: 1,
        convRule: rule21
    },
    {
        start: 42597,
        length: 1,
        convRule: rule22
    },
    {
        start: 42598,
        length: 1,
        convRule: rule21
    },
    {
        start: 42599,
        length: 1,
        convRule: rule22
    },
    {
        start: 42600,
        length: 1,
        convRule: rule21
    },
    {
        start: 42601,
        length: 1,
        convRule: rule22
    },
    {
        start: 42602,
        length: 1,
        convRule: rule21
    },
    {
        start: 42603,
        length: 1,
        convRule: rule22
    },
    {
        start: 42604,
        length: 1,
        convRule: rule21
    },
    {
        start: 42605,
        length: 1,
        convRule: rule22
    },
    {
        start: 42606,
        length: 1,
        convRule: rule45
    },
    {
        start: 42607,
        length: 1,
        convRule: rule84
    },
    {
        start: 42608,
        length: 3,
        convRule: rule109
    },
    {
        start: 42611,
        length: 1,
        convRule: rule2
    },
    {
        start: 42620,
        length: 2,
        convRule: rule84
    },
    {
        start: 42622,
        length: 1,
        convRule: rule2
    },
    {
        start: 42623,
        length: 1,
        convRule: rule83
    },
    {
        start: 42624,
        length: 1,
        convRule: rule21
    },
    {
        start: 42625,
        length: 1,
        convRule: rule22
    },
    {
        start: 42626,
        length: 1,
        convRule: rule21
    },
    {
        start: 42627,
        length: 1,
        convRule: rule22
    },
    {
        start: 42628,
        length: 1,
        convRule: rule21
    },
    {
        start: 42629,
        length: 1,
        convRule: rule22
    },
    {
        start: 42630,
        length: 1,
        convRule: rule21
    },
    {
        start: 42631,
        length: 1,
        convRule: rule22
    },
    {
        start: 42632,
        length: 1,
        convRule: rule21
    },
    {
        start: 42633,
        length: 1,
        convRule: rule22
    },
    {
        start: 42634,
        length: 1,
        convRule: rule21
    },
    {
        start: 42635,
        length: 1,
        convRule: rule22
    },
    {
        start: 42636,
        length: 1,
        convRule: rule21
    },
    {
        start: 42637,
        length: 1,
        convRule: rule22
    },
    {
        start: 42638,
        length: 1,
        convRule: rule21
    },
    {
        start: 42639,
        length: 1,
        convRule: rule22
    },
    {
        start: 42640,
        length: 1,
        convRule: rule21
    },
    {
        start: 42641,
        length: 1,
        convRule: rule22
    },
    {
        start: 42642,
        length: 1,
        convRule: rule21
    },
    {
        start: 42643,
        length: 1,
        convRule: rule22
    },
    {
        start: 42644,
        length: 1,
        convRule: rule21
    },
    {
        start: 42645,
        length: 1,
        convRule: rule22
    },
    {
        start: 42646,
        length: 1,
        convRule: rule21
    },
    {
        start: 42647,
        length: 1,
        convRule: rule22
    },
    {
        start: 42656,
        length: 70,
        convRule: rule45
    },
    {
        start: 42726,
        length: 10,
        convRule: rule116
    },
    {
        start: 42736,
        length: 2,
        convRule: rule84
    },
    {
        start: 42738,
        length: 6,
        convRule: rule2
    },
    {
        start: 42752,
        length: 23,
        convRule: rule10
    },
    {
        start: 42775,
        length: 9,
        convRule: rule83
    },
    {
        start: 42784,
        length: 2,
        convRule: rule10
    },
    {
        start: 42786,
        length: 1,
        convRule: rule21
    },
    {
        start: 42787,
        length: 1,
        convRule: rule22
    },
    {
        start: 42788,
        length: 1,
        convRule: rule21
    },
    {
        start: 42789,
        length: 1,
        convRule: rule22
    },
    {
        start: 42790,
        length: 1,
        convRule: rule21
    },
    {
        start: 42791,
        length: 1,
        convRule: rule22
    },
    {
        start: 42792,
        length: 1,
        convRule: rule21
    },
    {
        start: 42793,
        length: 1,
        convRule: rule22
    },
    {
        start: 42794,
        length: 1,
        convRule: rule21
    },
    {
        start: 42795,
        length: 1,
        convRule: rule22
    },
    {
        start: 42796,
        length: 1,
        convRule: rule21
    },
    {
        start: 42797,
        length: 1,
        convRule: rule22
    },
    {
        start: 42798,
        length: 1,
        convRule: rule21
    },
    {
        start: 42799,
        length: 1,
        convRule: rule22
    },
    {
        start: 42800,
        length: 2,
        convRule: rule14
    },
    {
        start: 42802,
        length: 1,
        convRule: rule21
    },
    {
        start: 42803,
        length: 1,
        convRule: rule22
    },
    {
        start: 42804,
        length: 1,
        convRule: rule21
    },
    {
        start: 42805,
        length: 1,
        convRule: rule22
    },
    {
        start: 42806,
        length: 1,
        convRule: rule21
    },
    {
        start: 42807,
        length: 1,
        convRule: rule22
    },
    {
        start: 42808,
        length: 1,
        convRule: rule21
    },
    {
        start: 42809,
        length: 1,
        convRule: rule22
    },
    {
        start: 42810,
        length: 1,
        convRule: rule21
    },
    {
        start: 42811,
        length: 1,
        convRule: rule22
    },
    {
        start: 42812,
        length: 1,
        convRule: rule21
    },
    {
        start: 42813,
        length: 1,
        convRule: rule22
    },
    {
        start: 42814,
        length: 1,
        convRule: rule21
    },
    {
        start: 42815,
        length: 1,
        convRule: rule22
    },
    {
        start: 42816,
        length: 1,
        convRule: rule21
    },
    {
        start: 42817,
        length: 1,
        convRule: rule22
    },
    {
        start: 42818,
        length: 1,
        convRule: rule21
    },
    {
        start: 42819,
        length: 1,
        convRule: rule22
    },
    {
        start: 42820,
        length: 1,
        convRule: rule21
    },
    {
        start: 42821,
        length: 1,
        convRule: rule22
    },
    {
        start: 42822,
        length: 1,
        convRule: rule21
    },
    {
        start: 42823,
        length: 1,
        convRule: rule22
    },
    {
        start: 42824,
        length: 1,
        convRule: rule21
    },
    {
        start: 42825,
        length: 1,
        convRule: rule22
    },
    {
        start: 42826,
        length: 1,
        convRule: rule21
    },
    {
        start: 42827,
        length: 1,
        convRule: rule22
    },
    {
        start: 42828,
        length: 1,
        convRule: rule21
    },
    {
        start: 42829,
        length: 1,
        convRule: rule22
    },
    {
        start: 42830,
        length: 1,
        convRule: rule21
    },
    {
        start: 42831,
        length: 1,
        convRule: rule22
    },
    {
        start: 42832,
        length: 1,
        convRule: rule21
    },
    {
        start: 42833,
        length: 1,
        convRule: rule22
    },
    {
        start: 42834,
        length: 1,
        convRule: rule21
    },
    {
        start: 42835,
        length: 1,
        convRule: rule22
    },
    {
        start: 42836,
        length: 1,
        convRule: rule21
    },
    {
        start: 42837,
        length: 1,
        convRule: rule22
    },
    {
        start: 42838,
        length: 1,
        convRule: rule21
    },
    {
        start: 42839,
        length: 1,
        convRule: rule22
    },
    {
        start: 42840,
        length: 1,
        convRule: rule21
    },
    {
        start: 42841,
        length: 1,
        convRule: rule22
    },
    {
        start: 42842,
        length: 1,
        convRule: rule21
    },
    {
        start: 42843,
        length: 1,
        convRule: rule22
    },
    {
        start: 42844,
        length: 1,
        convRule: rule21
    },
    {
        start: 42845,
        length: 1,
        convRule: rule22
    },
    {
        start: 42846,
        length: 1,
        convRule: rule21
    },
    {
        start: 42847,
        length: 1,
        convRule: rule22
    },
    {
        start: 42848,
        length: 1,
        convRule: rule21
    },
    {
        start: 42849,
        length: 1,
        convRule: rule22
    },
    {
        start: 42850,
        length: 1,
        convRule: rule21
    },
    {
        start: 42851,
        length: 1,
        convRule: rule22
    },
    {
        start: 42852,
        length: 1,
        convRule: rule21
    },
    {
        start: 42853,
        length: 1,
        convRule: rule22
    },
    {
        start: 42854,
        length: 1,
        convRule: rule21
    },
    {
        start: 42855,
        length: 1,
        convRule: rule22
    },
    {
        start: 42856,
        length: 1,
        convRule: rule21
    },
    {
        start: 42857,
        length: 1,
        convRule: rule22
    },
    {
        start: 42858,
        length: 1,
        convRule: rule21
    },
    {
        start: 42859,
        length: 1,
        convRule: rule22
    },
    {
        start: 42860,
        length: 1,
        convRule: rule21
    },
    {
        start: 42861,
        length: 1,
        convRule: rule22
    },
    {
        start: 42862,
        length: 1,
        convRule: rule21
    },
    {
        start: 42863,
        length: 1,
        convRule: rule22
    },
    {
        start: 42864,
        length: 1,
        convRule: rule83
    },
    {
        start: 42865,
        length: 8,
        convRule: rule14
    },
    {
        start: 42873,
        length: 1,
        convRule: rule21
    },
    {
        start: 42874,
        length: 1,
        convRule: rule22
    },
    {
        start: 42875,
        length: 1,
        convRule: rule21
    },
    {
        start: 42876,
        length: 1,
        convRule: rule22
    },
    {
        start: 42877,
        length: 1,
        convRule: rule161
    },
    {
        start: 42878,
        length: 1,
        convRule: rule21
    },
    {
        start: 42879,
        length: 1,
        convRule: rule22
    },
    {
        start: 42880,
        length: 1,
        convRule: rule21
    },
    {
        start: 42881,
        length: 1,
        convRule: rule22
    },
    {
        start: 42882,
        length: 1,
        convRule: rule21
    },
    {
        start: 42883,
        length: 1,
        convRule: rule22
    },
    {
        start: 42884,
        length: 1,
        convRule: rule21
    },
    {
        start: 42885,
        length: 1,
        convRule: rule22
    },
    {
        start: 42886,
        length: 1,
        convRule: rule21
    },
    {
        start: 42887,
        length: 1,
        convRule: rule22
    },
    {
        start: 42888,
        length: 1,
        convRule: rule83
    },
    {
        start: 42889,
        length: 2,
        convRule: rule10
    },
    {
        start: 42891,
        length: 1,
        convRule: rule21
    },
    {
        start: 42892,
        length: 1,
        convRule: rule22
    },
    {
        start: 42893,
        length: 1,
        convRule: rule162
    },
    {
        start: 42894,
        length: 1,
        convRule: rule14
    },
    {
        start: 42896,
        length: 1,
        convRule: rule21
    },
    {
        start: 42897,
        length: 1,
        convRule: rule22
    },
    {
        start: 42912,
        length: 1,
        convRule: rule21
    },
    {
        start: 42913,
        length: 1,
        convRule: rule22
    },
    {
        start: 42914,
        length: 1,
        convRule: rule21
    },
    {
        start: 42915,
        length: 1,
        convRule: rule22
    },
    {
        start: 42916,
        length: 1,
        convRule: rule21
    },
    {
        start: 42917,
        length: 1,
        convRule: rule22
    },
    {
        start: 42918,
        length: 1,
        convRule: rule21
    },
    {
        start: 42919,
        length: 1,
        convRule: rule22
    },
    {
        start: 42920,
        length: 1,
        convRule: rule21
    },
    {
        start: 42921,
        length: 1,
        convRule: rule22
    },
    {
        start: 43002,
        length: 1,
        convRule: rule14
    },
    {
        start: 43003,
        length: 7,
        convRule: rule45
    },
    {
        start: 43010,
        length: 1,
        convRule: rule84
    },
    {
        start: 43011,
        length: 3,
        convRule: rule45
    },
    {
        start: 43014,
        length: 1,
        convRule: rule84
    },
    {
        start: 43015,
        length: 4,
        convRule: rule45
    },
    {
        start: 43019,
        length: 1,
        convRule: rule84
    },
    {
        start: 43020,
        length: 23,
        convRule: rule45
    },
    {
        start: 43043,
        length: 2,
        convRule: rule114
    },
    {
        start: 43045,
        length: 2,
        convRule: rule84
    },
    {
        start: 43047,
        length: 1,
        convRule: rule114
    },
    {
        start: 43048,
        length: 4,
        convRule: rule13
    },
    {
        start: 43056,
        length: 6,
        convRule: rule17
    },
    {
        start: 43062,
        length: 2,
        convRule: rule13
    },
    {
        start: 43064,
        length: 1,
        convRule: rule3
    },
    {
        start: 43065,
        length: 1,
        convRule: rule13
    },
    {
        start: 43072,
        length: 52,
        convRule: rule45
    },
    {
        start: 43124,
        length: 4,
        convRule: rule2
    },
    {
        start: 43136,
        length: 2,
        convRule: rule114
    },
    {
        start: 43138,
        length: 50,
        convRule: rule45
    },
    {
        start: 43188,
        length: 16,
        convRule: rule114
    },
    {
        start: 43204,
        length: 1,
        convRule: rule84
    },
    {
        start: 43214,
        length: 2,
        convRule: rule2
    },
    {
        start: 43216,
        length: 10,
        convRule: rule8
    },
    {
        start: 43232,
        length: 18,
        convRule: rule84
    },
    {
        start: 43250,
        length: 6,
        convRule: rule45
    },
    {
        start: 43256,
        length: 3,
        convRule: rule2
    },
    {
        start: 43259,
        length: 1,
        convRule: rule45
    },
    {
        start: 43264,
        length: 10,
        convRule: rule8
    },
    {
        start: 43274,
        length: 28,
        convRule: rule45
    },
    {
        start: 43302,
        length: 8,
        convRule: rule84
    },
    {
        start: 43310,
        length: 2,
        convRule: rule2
    },
    {
        start: 43312,
        length: 23,
        convRule: rule45
    },
    {
        start: 43335,
        length: 11,
        convRule: rule84
    },
    {
        start: 43346,
        length: 2,
        convRule: rule114
    },
    {
        start: 43359,
        length: 1,
        convRule: rule2
    },
    {
        start: 43360,
        length: 29,
        convRule: rule45
    },
    {
        start: 43392,
        length: 3,
        convRule: rule84
    },
    {
        start: 43395,
        length: 1,
        convRule: rule114
    },
    {
        start: 43396,
        length: 47,
        convRule: rule45
    },
    {
        start: 43443,
        length: 1,
        convRule: rule84
    },
    {
        start: 43444,
        length: 2,
        convRule: rule114
    },
    {
        start: 43446,
        length: 4,
        convRule: rule84
    },
    {
        start: 43450,
        length: 2,
        convRule: rule114
    },
    {
        start: 43452,
        length: 1,
        convRule: rule84
    },
    {
        start: 43453,
        length: 4,
        convRule: rule114
    },
    {
        start: 43457,
        length: 13,
        convRule: rule2
    },
    {
        start: 43471,
        length: 1,
        convRule: rule83
    },
    {
        start: 43472,
        length: 10,
        convRule: rule8
    },
    {
        start: 43486,
        length: 2,
        convRule: rule2
    },
    {
        start: 43520,
        length: 41,
        convRule: rule45
    },
    {
        start: 43561,
        length: 6,
        convRule: rule84
    },
    {
        start: 43567,
        length: 2,
        convRule: rule114
    },
    {
        start: 43569,
        length: 2,
        convRule: rule84
    },
    {
        start: 43571,
        length: 2,
        convRule: rule114
    },
    {
        start: 43573,
        length: 2,
        convRule: rule84
    },
    {
        start: 43584,
        length: 3,
        convRule: rule45
    },
    {
        start: 43587,
        length: 1,
        convRule: rule84
    },
    {
        start: 43588,
        length: 8,
        convRule: rule45
    },
    {
        start: 43596,
        length: 1,
        convRule: rule84
    },
    {
        start: 43597,
        length: 1,
        convRule: rule114
    },
    {
        start: 43600,
        length: 10,
        convRule: rule8
    },
    {
        start: 43612,
        length: 4,
        convRule: rule2
    },
    {
        start: 43616,
        length: 16,
        convRule: rule45
    },
    {
        start: 43632,
        length: 1,
        convRule: rule83
    },
    {
        start: 43633,
        length: 6,
        convRule: rule45
    },
    {
        start: 43639,
        length: 3,
        convRule: rule13
    },
    {
        start: 43642,
        length: 1,
        convRule: rule45
    },
    {
        start: 43643,
        length: 1,
        convRule: rule114
    },
    {
        start: 43648,
        length: 48,
        convRule: rule45
    },
    {
        start: 43696,
        length: 1,
        convRule: rule84
    },
    {
        start: 43697,
        length: 1,
        convRule: rule45
    },
    {
        start: 43698,
        length: 3,
        convRule: rule84
    },
    {
        start: 43701,
        length: 2,
        convRule: rule45
    },
    {
        start: 43703,
        length: 2,
        convRule: rule84
    },
    {
        start: 43705,
        length: 5,
        convRule: rule45
    },
    {
        start: 43710,
        length: 2,
        convRule: rule84
    },
    {
        start: 43712,
        length: 1,
        convRule: rule45
    },
    {
        start: 43713,
        length: 1,
        convRule: rule84
    },
    {
        start: 43714,
        length: 1,
        convRule: rule45
    },
    {
        start: 43739,
        length: 2,
        convRule: rule45
    },
    {
        start: 43741,
        length: 1,
        convRule: rule83
    },
    {
        start: 43742,
        length: 2,
        convRule: rule2
    },
    {
        start: 43777,
        length: 6,
        convRule: rule45
    },
    {
        start: 43785,
        length: 6,
        convRule: rule45
    },
    {
        start: 43793,
        length: 6,
        convRule: rule45
    },
    {
        start: 43808,
        length: 7,
        convRule: rule45
    },
    {
        start: 43816,
        length: 7,
        convRule: rule45
    },
    {
        start: 43968,
        length: 35,
        convRule: rule45
    },
    {
        start: 44003,
        length: 2,
        convRule: rule114
    },
    {
        start: 44005,
        length: 1,
        convRule: rule84
    },
    {
        start: 44006,
        length: 2,
        convRule: rule114
    },
    {
        start: 44008,
        length: 1,
        convRule: rule84
    },
    {
        start: 44009,
        length: 2,
        convRule: rule114
    },
    {
        start: 44011,
        length: 1,
        convRule: rule2
    },
    {
        start: 44012,
        length: 1,
        convRule: rule114
    },
    {
        start: 44013,
        length: 1,
        convRule: rule84
    },
    {
        start: 44016,
        length: 10,
        convRule: rule8
    },
    {
        start: 44032,
        length: 11172,
        convRule: rule45
    },
    {
        start: 55216,
        length: 23,
        convRule: rule45
    },
    {
        start: 55243,
        length: 49,
        convRule: rule45
    },
    {
        start: 55296,
        length: 896,
        convRule: rule163
    },
    {
        start: 56192,
        length: 128,
        convRule: rule163
    },
    {
        start: 56320,
        length: 1024,
        convRule: rule163
    },
    {
        start: 57344,
        length: 6400,
        convRule: rule164
    },
    {
        start: 63744,
        length: 302,
        convRule: rule45
    },
    {
        start: 64048,
        length: 62,
        convRule: rule45
    },
    {
        start: 64112,
        length: 106,
        convRule: rule45
    },
    {
        start: 64256,
        length: 7,
        convRule: rule14
    },
    {
        start: 64275,
        length: 5,
        convRule: rule14
    },
    {
        start: 64285,
        length: 1,
        convRule: rule45
    },
    {
        start: 64286,
        length: 1,
        convRule: rule84
    },
    {
        start: 64287,
        length: 10,
        convRule: rule45
    },
    {
        start: 64297,
        length: 1,
        convRule: rule6
    },
    {
        start: 64298,
        length: 13,
        convRule: rule45
    },
    {
        start: 64312,
        length: 5,
        convRule: rule45
    },
    {
        start: 64318,
        length: 1,
        convRule: rule45
    },
    {
        start: 64320,
        length: 2,
        convRule: rule45
    },
    {
        start: 64323,
        length: 2,
        convRule: rule45
    },
    {
        start: 64326,
        length: 108,
        convRule: rule45
    },
    {
        start: 64434,
        length: 16,
        convRule: rule10
    },
    {
        start: 64467,
        length: 363,
        convRule: rule45
    },
    {
        start: 64830,
        length: 1,
        convRule: rule4
    },
    {
        start: 64831,
        length: 1,
        convRule: rule5
    },
    {
        start: 64848,
        length: 64,
        convRule: rule45
    },
    {
        start: 64914,
        length: 54,
        convRule: rule45
    },
    {
        start: 65008,
        length: 12,
        convRule: rule45
    },
    {
        start: 65020,
        length: 1,
        convRule: rule3
    },
    {
        start: 65021,
        length: 1,
        convRule: rule13
    },
    {
        start: 65024,
        length: 16,
        convRule: rule84
    },
    {
        start: 65040,
        length: 7,
        convRule: rule2
    },
    {
        start: 65047,
        length: 1,
        convRule: rule4
    },
    {
        start: 65048,
        length: 1,
        convRule: rule5
    },
    {
        start: 65049,
        length: 1,
        convRule: rule2
    },
    {
        start: 65056,
        length: 7,
        convRule: rule84
    },
    {
        start: 65072,
        length: 1,
        convRule: rule2
    },
    {
        start: 65073,
        length: 2,
        convRule: rule7
    },
    {
        start: 65075,
        length: 2,
        convRule: rule11
    },
    {
        start: 65077,
        length: 1,
        convRule: rule4
    },
    {
        start: 65078,
        length: 1,
        convRule: rule5
    },
    {
        start: 65079,
        length: 1,
        convRule: rule4
    },
    {
        start: 65080,
        length: 1,
        convRule: rule5
    },
    {
        start: 65081,
        length: 1,
        convRule: rule4
    },
    {
        start: 65082,
        length: 1,
        convRule: rule5
    },
    {
        start: 65083,
        length: 1,
        convRule: rule4
    },
    {
        start: 65084,
        length: 1,
        convRule: rule5
    },
    {
        start: 65085,
        length: 1,
        convRule: rule4
    },
    {
        start: 65086,
        length: 1,
        convRule: rule5
    },
    {
        start: 65087,
        length: 1,
        convRule: rule4
    },
    {
        start: 65088,
        length: 1,
        convRule: rule5
    },
    {
        start: 65089,
        length: 1,
        convRule: rule4
    },
    {
        start: 65090,
        length: 1,
        convRule: rule5
    },
    {
        start: 65091,
        length: 1,
        convRule: rule4
    },
    {
        start: 65092,
        length: 1,
        convRule: rule5
    },
    {
        start: 65093,
        length: 2,
        convRule: rule2
    },
    {
        start: 65095,
        length: 1,
        convRule: rule4
    },
    {
        start: 65096,
        length: 1,
        convRule: rule5
    },
    {
        start: 65097,
        length: 4,
        convRule: rule2
    },
    {
        start: 65101,
        length: 3,
        convRule: rule11
    },
    {
        start: 65104,
        length: 3,
        convRule: rule2
    },
    {
        start: 65108,
        length: 4,
        convRule: rule2
    },
    {
        start: 65112,
        length: 1,
        convRule: rule7
    },
    {
        start: 65113,
        length: 1,
        convRule: rule4
    },
    {
        start: 65114,
        length: 1,
        convRule: rule5
    },
    {
        start: 65115,
        length: 1,
        convRule: rule4
    },
    {
        start: 65116,
        length: 1,
        convRule: rule5
    },
    {
        start: 65117,
        length: 1,
        convRule: rule4
    },
    {
        start: 65118,
        length: 1,
        convRule: rule5
    },
    {
        start: 65119,
        length: 3,
        convRule: rule2
    },
    {
        start: 65122,
        length: 1,
        convRule: rule6
    },
    {
        start: 65123,
        length: 1,
        convRule: rule7
    },
    {
        start: 65124,
        length: 3,
        convRule: rule6
    },
    {
        start: 65128,
        length: 1,
        convRule: rule2
    },
    {
        start: 65129,
        length: 1,
        convRule: rule3
    },
    {
        start: 65130,
        length: 2,
        convRule: rule2
    },
    {
        start: 65136,
        length: 5,
        convRule: rule45
    },
    {
        start: 65142,
        length: 135,
        convRule: rule45
    },
    {
        start: 65279,
        length: 1,
        convRule: rule16
    },
    {
        start: 65281,
        length: 3,
        convRule: rule2
    },
    {
        start: 65284,
        length: 1,
        convRule: rule3
    },
    {
        start: 65285,
        length: 3,
        convRule: rule2
    },
    {
        start: 65288,
        length: 1,
        convRule: rule4
    },
    {
        start: 65289,
        length: 1,
        convRule: rule5
    },
    {
        start: 65290,
        length: 1,
        convRule: rule2
    },
    {
        start: 65291,
        length: 1,
        convRule: rule6
    },
    {
        start: 65292,
        length: 1,
        convRule: rule2
    },
    {
        start: 65293,
        length: 1,
        convRule: rule7
    },
    {
        start: 65294,
        length: 2,
        convRule: rule2
    },
    {
        start: 65296,
        length: 10,
        convRule: rule8
    },
    {
        start: 65306,
        length: 2,
        convRule: rule2
    },
    {
        start: 65308,
        length: 3,
        convRule: rule6
    },
    {
        start: 65311,
        length: 2,
        convRule: rule2
    },
    {
        start: 65313,
        length: 26,
        convRule: rule9
    },
    {
        start: 65339,
        length: 1,
        convRule: rule4
    },
    {
        start: 65340,
        length: 1,
        convRule: rule2
    },
    {
        start: 65341,
        length: 1,
        convRule: rule5
    },
    {
        start: 65342,
        length: 1,
        convRule: rule10
    },
    {
        start: 65343,
        length: 1,
        convRule: rule11
    },
    {
        start: 65344,
        length: 1,
        convRule: rule10
    },
    {
        start: 65345,
        length: 26,
        convRule: rule12
    },
    {
        start: 65371,
        length: 1,
        convRule: rule4
    },
    {
        start: 65372,
        length: 1,
        convRule: rule6
    },
    {
        start: 65373,
        length: 1,
        convRule: rule5
    },
    {
        start: 65374,
        length: 1,
        convRule: rule6
    },
    {
        start: 65375,
        length: 1,
        convRule: rule4
    },
    {
        start: 65376,
        length: 1,
        convRule: rule5
    },
    {
        start: 65377,
        length: 1,
        convRule: rule2
    },
    {
        start: 65378,
        length: 1,
        convRule: rule4
    },
    {
        start: 65379,
        length: 1,
        convRule: rule5
    },
    {
        start: 65380,
        length: 2,
        convRule: rule2
    },
    {
        start: 65382,
        length: 10,
        convRule: rule45
    },
    {
        start: 65392,
        length: 1,
        convRule: rule83
    },
    {
        start: 65393,
        length: 45,
        convRule: rule45
    },
    {
        start: 65438,
        length: 2,
        convRule: rule83
    },
    {
        start: 65440,
        length: 31,
        convRule: rule45
    },
    {
        start: 65474,
        length: 6,
        convRule: rule45
    },
    {
        start: 65482,
        length: 6,
        convRule: rule45
    },
    {
        start: 65490,
        length: 6,
        convRule: rule45
    },
    {
        start: 65498,
        length: 3,
        convRule: rule45
    },
    {
        start: 65504,
        length: 2,
        convRule: rule3
    },
    {
        start: 65506,
        length: 1,
        convRule: rule6
    },
    {
        start: 65507,
        length: 1,
        convRule: rule10
    },
    {
        start: 65508,
        length: 1,
        convRule: rule13
    },
    {
        start: 65509,
        length: 2,
        convRule: rule3
    },
    {
        start: 65512,
        length: 1,
        convRule: rule13
    },
    {
        start: 65513,
        length: 4,
        convRule: rule6
    },
    {
        start: 65517,
        length: 2,
        convRule: rule13
    },
    {
        start: 65529,
        length: 3,
        convRule: rule16
    },
    {
        start: 65532,
        length: 2,
        convRule: rule13
    },
    {
        start: 65536,
        length: 12,
        convRule: rule45
    },
    {
        start: 65549,
        length: 26,
        convRule: rule45
    },
    {
        start: 65576,
        length: 19,
        convRule: rule45
    },
    {
        start: 65596,
        length: 2,
        convRule: rule45
    },
    {
        start: 65599,
        length: 15,
        convRule: rule45
    },
    {
        start: 65616,
        length: 14,
        convRule: rule45
    },
    {
        start: 65664,
        length: 123,
        convRule: rule45
    },
    {
        start: 65792,
        length: 2,
        convRule: rule2
    },
    {
        start: 65794,
        length: 1,
        convRule: rule13
    },
    {
        start: 65799,
        length: 45,
        convRule: rule17
    },
    {
        start: 65847,
        length: 9,
        convRule: rule13
    },
    {
        start: 65856,
        length: 53,
        convRule: rule116
    },
    {
        start: 65909,
        length: 4,
        convRule: rule17
    },
    {
        start: 65913,
        length: 17,
        convRule: rule13
    },
    {
        start: 65930,
        length: 1,
        convRule: rule17
    },
    {
        start: 65936,
        length: 12,
        convRule: rule13
    },
    {
        start: 66000,
        length: 45,
        convRule: rule13
    },
    {
        start: 66045,
        length: 1,
        convRule: rule84
    },
    {
        start: 66176,
        length: 29,
        convRule: rule45
    },
    {
        start: 66208,
        length: 49,
        convRule: rule45
    },
    {
        start: 66304,
        length: 31,
        convRule: rule45
    },
    {
        start: 66336,
        length: 4,
        convRule: rule17
    },
    {
        start: 66352,
        length: 17,
        convRule: rule45
    },
    {
        start: 66369,
        length: 1,
        convRule: rule116
    },
    {
        start: 66370,
        length: 8,
        convRule: rule45
    },
    {
        start: 66378,
        length: 1,
        convRule: rule116
    },
    {
        start: 66432,
        length: 30,
        convRule: rule45
    },
    {
        start: 66463,
        length: 1,
        convRule: rule2
    },
    {
        start: 66464,
        length: 36,
        convRule: rule45
    },
    {
        start: 66504,
        length: 8,
        convRule: rule45
    },
    {
        start: 66512,
        length: 1,
        convRule: rule2
    },
    {
        start: 66513,
        length: 5,
        convRule: rule116
    },
    {
        start: 66560,
        length: 40,
        convRule: rule165
    },
    {
        start: 66600,
        length: 40,
        convRule: rule166
    },
    {
        start: 66640,
        length: 78,
        convRule: rule45
    },
    {
        start: 66720,
        length: 10,
        convRule: rule8
    },
    {
        start: 67584,
        length: 6,
        convRule: rule45
    },
    {
        start: 67592,
        length: 1,
        convRule: rule45
    },
    {
        start: 67594,
        length: 44,
        convRule: rule45
    },
    {
        start: 67639,
        length: 2,
        convRule: rule45
    },
    {
        start: 67644,
        length: 1,
        convRule: rule45
    },
    {
        start: 67647,
        length: 23,
        convRule: rule45
    },
    {
        start: 67671,
        length: 1,
        convRule: rule2
    },
    {
        start: 67672,
        length: 8,
        convRule: rule17
    },
    {
        start: 67840,
        length: 22,
        convRule: rule45
    },
    {
        start: 67862,
        length: 6,
        convRule: rule17
    },
    {
        start: 67871,
        length: 1,
        convRule: rule2
    },
    {
        start: 67872,
        length: 26,
        convRule: rule45
    },
    {
        start: 67903,
        length: 1,
        convRule: rule2
    },
    {
        start: 68096,
        length: 1,
        convRule: rule45
    },
    {
        start: 68097,
        length: 3,
        convRule: rule84
    },
    {
        start: 68101,
        length: 2,
        convRule: rule84
    },
    {
        start: 68108,
        length: 4,
        convRule: rule84
    },
    {
        start: 68112,
        length: 4,
        convRule: rule45
    },
    {
        start: 68117,
        length: 3,
        convRule: rule45
    },
    {
        start: 68121,
        length: 27,
        convRule: rule45
    },
    {
        start: 68152,
        length: 3,
        convRule: rule84
    },
    {
        start: 68159,
        length: 1,
        convRule: rule84
    },
    {
        start: 68160,
        length: 8,
        convRule: rule17
    },
    {
        start: 68176,
        length: 9,
        convRule: rule2
    },
    {
        start: 68192,
        length: 29,
        convRule: rule45
    },
    {
        start: 68221,
        length: 2,
        convRule: rule17
    },
    {
        start: 68223,
        length: 1,
        convRule: rule2
    },
    {
        start: 68352,
        length: 54,
        convRule: rule45
    },
    {
        start: 68409,
        length: 7,
        convRule: rule2
    },
    {
        start: 68416,
        length: 22,
        convRule: rule45
    },
    {
        start: 68440,
        length: 8,
        convRule: rule17
    },
    {
        start: 68448,
        length: 19,
        convRule: rule45
    },
    {
        start: 68472,
        length: 8,
        convRule: rule17
    },
    {
        start: 68608,
        length: 73,
        convRule: rule45
    },
    {
        start: 69216,
        length: 31,
        convRule: rule17
    },
    {
        start: 69632,
        length: 1,
        convRule: rule114
    },
    {
        start: 69633,
        length: 1,
        convRule: rule84
    },
    {
        start: 69634,
        length: 1,
        convRule: rule114
    },
    {
        start: 69635,
        length: 53,
        convRule: rule45
    },
    {
        start: 69688,
        length: 15,
        convRule: rule84
    },
    {
        start: 69703,
        length: 7,
        convRule: rule2
    },
    {
        start: 69714,
        length: 20,
        convRule: rule17
    },
    {
        start: 69734,
        length: 10,
        convRule: rule8
    },
    {
        start: 69760,
        length: 2,
        convRule: rule84
    },
    {
        start: 69762,
        length: 1,
        convRule: rule114
    },
    {
        start: 69763,
        length: 45,
        convRule: rule45
    },
    {
        start: 69808,
        length: 3,
        convRule: rule114
    },
    {
        start: 69811,
        length: 4,
        convRule: rule84
    },
    {
        start: 69815,
        length: 2,
        convRule: rule114
    },
    {
        start: 69817,
        length: 2,
        convRule: rule84
    },
    {
        start: 69819,
        length: 2,
        convRule: rule2
    },
    {
        start: 69821,
        length: 1,
        convRule: rule16
    },
    {
        start: 69822,
        length: 4,
        convRule: rule2
    },
    {
        start: 73728,
        length: 879,
        convRule: rule45
    },
    {
        start: 74752,
        length: 99,
        convRule: rule116
    },
    {
        start: 74864,
        length: 4,
        convRule: rule2
    },
    {
        start: 77824,
        length: 1071,
        convRule: rule45
    },
    {
        start: 92160,
        length: 569,
        convRule: rule45
    },
    {
        start: 110592,
        length: 2,
        convRule: rule45
    },
    {
        start: 118784,
        length: 246,
        convRule: rule13
    },
    {
        start: 119040,
        length: 39,
        convRule: rule13
    },
    {
        start: 119081,
        length: 60,
        convRule: rule13
    },
    {
        start: 119141,
        length: 2,
        convRule: rule114
    },
    {
        start: 119143,
        length: 3,
        convRule: rule84
    },
    {
        start: 119146,
        length: 3,
        convRule: rule13
    },
    {
        start: 119149,
        length: 6,
        convRule: rule114
    },
    {
        start: 119155,
        length: 8,
        convRule: rule16
    },
    {
        start: 119163,
        length: 8,
        convRule: rule84
    },
    {
        start: 119171,
        length: 2,
        convRule: rule13
    },
    {
        start: 119173,
        length: 7,
        convRule: rule84
    },
    {
        start: 119180,
        length: 30,
        convRule: rule13
    },
    {
        start: 119210,
        length: 4,
        convRule: rule84
    },
    {
        start: 119214,
        length: 48,
        convRule: rule13
    },
    {
        start: 119296,
        length: 66,
        convRule: rule13
    },
    {
        start: 119362,
        length: 3,
        convRule: rule84
    },
    {
        start: 119365,
        length: 1,
        convRule: rule13
    },
    {
        start: 119552,
        length: 87,
        convRule: rule13
    },
    {
        start: 119648,
        length: 18,
        convRule: rule17
    },
    {
        start: 119808,
        length: 26,
        convRule: rule98
    },
    {
        start: 119834,
        length: 26,
        convRule: rule14
    },
    {
        start: 119860,
        length: 26,
        convRule: rule98
    },
    {
        start: 119886,
        length: 7,
        convRule: rule14
    },
    {
        start: 119894,
        length: 18,
        convRule: rule14
    },
    {
        start: 119912,
        length: 26,
        convRule: rule98
    },
    {
        start: 119938,
        length: 26,
        convRule: rule14
    },
    {
        start: 119964,
        length: 1,
        convRule: rule98
    },
    {
        start: 119966,
        length: 2,
        convRule: rule98
    },
    {
        start: 119970,
        length: 1,
        convRule: rule98
    },
    {
        start: 119973,
        length: 2,
        convRule: rule98
    },
    {
        start: 119977,
        length: 4,
        convRule: rule98
    },
    {
        start: 119982,
        length: 8,
        convRule: rule98
    },
    {
        start: 119990,
        length: 4,
        convRule: rule14
    },
    {
        start: 119995,
        length: 1,
        convRule: rule14
    },
    {
        start: 119997,
        length: 7,
        convRule: rule14
    },
    {
        start: 120005,
        length: 11,
        convRule: rule14
    },
    {
        start: 120016,
        length: 26,
        convRule: rule98
    },
    {
        start: 120042,
        length: 26,
        convRule: rule14
    },
    {
        start: 120068,
        length: 2,
        convRule: rule98
    },
    {
        start: 120071,
        length: 4,
        convRule: rule98
    },
    {
        start: 120077,
        length: 8,
        convRule: rule98
    },
    {
        start: 120086,
        length: 7,
        convRule: rule98
    },
    {
        start: 120094,
        length: 26,
        convRule: rule14
    },
    {
        start: 120120,
        length: 2,
        convRule: rule98
    },
    {
        start: 120123,
        length: 4,
        convRule: rule98
    },
    {
        start: 120128,
        length: 5,
        convRule: rule98
    },
    {
        start: 120134,
        length: 1,
        convRule: rule98
    },
    {
        start: 120138,
        length: 7,
        convRule: rule98
    },
    {
        start: 120146,
        length: 26,
        convRule: rule14
    },
    {
        start: 120172,
        length: 26,
        convRule: rule98
    },
    {
        start: 120198,
        length: 26,
        convRule: rule14
    },
    {
        start: 120224,
        length: 26,
        convRule: rule98
    },
    {
        start: 120250,
        length: 26,
        convRule: rule14
    },
    {
        start: 120276,
        length: 26,
        convRule: rule98
    },
    {
        start: 120302,
        length: 26,
        convRule: rule14
    },
    {
        start: 120328,
        length: 26,
        convRule: rule98
    },
    {
        start: 120354,
        length: 26,
        convRule: rule14
    },
    {
        start: 120380,
        length: 26,
        convRule: rule98
    },
    {
        start: 120406,
        length: 26,
        convRule: rule14
    },
    {
        start: 120432,
        length: 26,
        convRule: rule98
    },
    {
        start: 120458,
        length: 28,
        convRule: rule14
    },
    {
        start: 120488,
        length: 25,
        convRule: rule98
    },
    {
        start: 120513,
        length: 1,
        convRule: rule6
    },
    {
        start: 120514,
        length: 25,
        convRule: rule14
    },
    {
        start: 120539,
        length: 1,
        convRule: rule6
    },
    {
        start: 120540,
        length: 6,
        convRule: rule14
    },
    {
        start: 120546,
        length: 25,
        convRule: rule98
    },
    {
        start: 120571,
        length: 1,
        convRule: rule6
    },
    {
        start: 120572,
        length: 25,
        convRule: rule14
    },
    {
        start: 120597,
        length: 1,
        convRule: rule6
    },
    {
        start: 120598,
        length: 6,
        convRule: rule14
    },
    {
        start: 120604,
        length: 25,
        convRule: rule98
    },
    {
        start: 120629,
        length: 1,
        convRule: rule6
    },
    {
        start: 120630,
        length: 25,
        convRule: rule14
    },
    {
        start: 120655,
        length: 1,
        convRule: rule6
    },
    {
        start: 120656,
        length: 6,
        convRule: rule14
    },
    {
        start: 120662,
        length: 25,
        convRule: rule98
    },
    {
        start: 120687,
        length: 1,
        convRule: rule6
    },
    {
        start: 120688,
        length: 25,
        convRule: rule14
    },
    {
        start: 120713,
        length: 1,
        convRule: rule6
    },
    {
        start: 120714,
        length: 6,
        convRule: rule14
    },
    {
        start: 120720,
        length: 25,
        convRule: rule98
    },
    {
        start: 120745,
        length: 1,
        convRule: rule6
    },
    {
        start: 120746,
        length: 25,
        convRule: rule14
    },
    {
        start: 120771,
        length: 1,
        convRule: rule6
    },
    {
        start: 120772,
        length: 6,
        convRule: rule14
    },
    {
        start: 120778,
        length: 1,
        convRule: rule98
    },
    {
        start: 120779,
        length: 1,
        convRule: rule14
    },
    {
        start: 120782,
        length: 50,
        convRule: rule8
    },
    {
        start: 126976,
        length: 44,
        convRule: rule13
    },
    {
        start: 127024,
        length: 100,
        convRule: rule13
    },
    {
        start: 127136,
        length: 15,
        convRule: rule13
    },
    {
        start: 127153,
        length: 14,
        convRule: rule13
    },
    {
        start: 127169,
        length: 15,
        convRule: rule13
    },
    {
        start: 127185,
        length: 15,
        convRule: rule13
    },
    {
        start: 127232,
        length: 11,
        convRule: rule17
    },
    {
        start: 127248,
        length: 31,
        convRule: rule13
    },
    {
        start: 127280,
        length: 58,
        convRule: rule13
    },
    {
        start: 127344,
        length: 43,
        convRule: rule13
    },
    {
        start: 127462,
        length: 29,
        convRule: rule13
    },
    {
        start: 127504,
        length: 43,
        convRule: rule13
    },
    {
        start: 127552,
        length: 9,
        convRule: rule13
    },
    {
        start: 127568,
        length: 2,
        convRule: rule13
    },
    {
        start: 127744,
        length: 33,
        convRule: rule13
    },
    {
        start: 127792,
        length: 6,
        convRule: rule13
    },
    {
        start: 127799,
        length: 70,
        convRule: rule13
    },
    {
        start: 127872,
        length: 20,
        convRule: rule13
    },
    {
        start: 127904,
        length: 37,
        convRule: rule13
    },
    {
        start: 127942,
        length: 5,
        convRule: rule13
    },
    {
        start: 127968,
        length: 17,
        convRule: rule13
    },
    {
        start: 128000,
        length: 63,
        convRule: rule13
    },
    {
        start: 128064,
        length: 1,
        convRule: rule13
    },
    {
        start: 128066,
        length: 182,
        convRule: rule13
    },
    {
        start: 128249,
        length: 4,
        convRule: rule13
    },
    {
        start: 128256,
        length: 62,
        convRule: rule13
    },
    {
        start: 128336,
        length: 24,
        convRule: rule13
    },
    {
        start: 128507,
        length: 5,
        convRule: rule13
    },
    {
        start: 128513,
        length: 16,
        convRule: rule13
    },
    {
        start: 128530,
        length: 3,
        convRule: rule13
    },
    {
        start: 128534,
        length: 1,
        convRule: rule13
    },
    {
        start: 128536,
        length: 1,
        convRule: rule13
    },
    {
        start: 128538,
        length: 1,
        convRule: rule13
    },
    {
        start: 128540,
        length: 3,
        convRule: rule13
    },
    {
        start: 128544,
        length: 6,
        convRule: rule13
    },
    {
        start: 128552,
        length: 4,
        convRule: rule13
    },
    {
        start: 128557,
        length: 1,
        convRule: rule13
    },
    {
        start: 128560,
        length: 4,
        convRule: rule13
    },
    {
        start: 128565,
        length: 12,
        convRule: rule13
    },
    {
        start: 128581,
        length: 11,
        convRule: rule13
    },
    {
        start: 128640,
        length: 70,
        convRule: rule13
    },
    {
        start: 128768,
        length: 116,
        convRule: rule13
    },
    {
        start: 131072,
        length: 42711,
        convRule: rule45
    },
    {
        start: 173824,
        length: 4149,
        convRule: rule45
    },
    {
        start: 177984,
        length: 222,
        convRule: rule45
    },
    {
        start: 194560,
        length: 542,
        convRule: rule45
    },
    {
        start: 917505,
        length: 1,
        convRule: rule16
    },
    {
        start: 917536,
        length: 96,
        convRule: rule16
    },
    {
        start: 917760,
        length: 240,
        convRule: rule84
    },
    {
        start: 983040,
        length: 65534,
        convRule: rule164
    },
    {
        start: 1048576,
        length: 65534,
        convRule: rule164
    }
];
var checkAttr = function(categories) {
    return function($$char) {
        var numOfBlocks = function() {
            var $28 = $$char < 256;
            if ($28) return numLat1Blocks;
            return numBlocks;
        }();
        var maybeConversionRule = getRule(allchars)($$char)(numOfBlocks);
        if (maybeConversionRule instanceof Data_Maybe.Nothing) return false;
        if (maybeConversionRule instanceof Data_Maybe.Just) return Data_Maybe.isJust(Data_Array.elemIndex(Data_Eq.eqInt)(maybeConversionRule.value0.category)(categories));
        throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4800, column 8 - line 4802, column 92): " + [
            maybeConversionRule.constructor.name
        ]);
    };
};
var uIswalnum = checkAttr([
    gencatLT,
    gencatLU,
    gencatLL,
    gencatLM,
    gencatLO,
    gencatMC,
    gencatME,
    gencatMN,
    gencatNO,
    gencatND,
    gencatNL
]);
var uIswalpha = checkAttr([
    gencatLL,
    gencatLU,
    gencatLT,
    gencatLM,
    gencatLO
]);
var uIswcntrl = checkAttr([
    gencatCC
]);
var uIswdigit = checkAttr([
    gencatND
]);
var uIswlower = checkAttr([
    gencatLL
]);
var uIswprint = checkAttr([
    gencatMC,
    gencatNO,
    gencatSK,
    gencatME,
    gencatND,
    gencatPO,
    gencatLT,
    gencatPC,
    gencatSM,
    gencatZS,
    gencatLU,
    gencatPD,
    gencatSO,
    gencatPE,
    gencatPF,
    gencatPS,
    gencatSC,
    gencatLL,
    gencatLM,
    gencatPI,
    gencatNL,
    gencatMN,
    gencatLO
]);
var uIswupper = checkAttr([
    gencatLU,
    gencatLT
]);
var uGencat = function($$char) {
    var conversionRule = getRule(allchars)($$char)(numBlocks);
    return Data_Functor.map(Data_Maybe.functorMaybe)(function(v) {
        return v.unicodeCat;
    })(conversionRule);
};
module.exports = {
    NUMCAT_LU: NUMCAT_LU,
    NUMCAT_LL: NUMCAT_LL,
    NUMCAT_LT: NUMCAT_LT,
    NUMCAT_LM: NUMCAT_LM,
    NUMCAT_LO: NUMCAT_LO,
    NUMCAT_MN: NUMCAT_MN,
    NUMCAT_MC: NUMCAT_MC,
    NUMCAT_ME: NUMCAT_ME,
    NUMCAT_ND: NUMCAT_ND,
    NUMCAT_NL: NUMCAT_NL,
    NUMCAT_NO: NUMCAT_NO,
    NUMCAT_PC: NUMCAT_PC,
    NUMCAT_PD: NUMCAT_PD,
    NUMCAT_PS: NUMCAT_PS,
    NUMCAT_PE: NUMCAT_PE,
    NUMCAT_PI: NUMCAT_PI,
    NUMCAT_PF: NUMCAT_PF,
    NUMCAT_PO: NUMCAT_PO,
    NUMCAT_SM: NUMCAT_SM,
    NUMCAT_SC: NUMCAT_SC,
    NUMCAT_SK: NUMCAT_SK,
    NUMCAT_SO: NUMCAT_SO,
    NUMCAT_ZS: NUMCAT_ZS,
    NUMCAT_ZL: NUMCAT_ZL,
    NUMCAT_ZP: NUMCAT_ZP,
    NUMCAT_CC: NUMCAT_CC,
    NUMCAT_CF: NUMCAT_CF,
    NUMCAT_CS: NUMCAT_CS,
    NUMCAT_CO: NUMCAT_CO,
    NUMCAT_CN: NUMCAT_CN,
    ConversionRule: ConversionRule,
    CharBlock: CharBlock,
    gencatPF: gencatPF,
    gencatSM: gencatSM,
    gencatSO: gencatSO,
    gencatPI: gencatPI,
    gencatMC: gencatMC,
    gencatCO: gencatCO,
    gencatME: gencatME,
    gencatPO: gencatPO,
    gencatCS: gencatCS,
    gencatPS: gencatPS,
    gencatMN: gencatMN,
    gencatZL: gencatZL,
    gencatZP: gencatZP,
    gencatZS: gencatZS,
    gencatLL: gencatLL,
    gencatLM: gencatLM,
    gencatLO: gencatLO,
    gencatND: gencatND,
    gencatLT: gencatLT,
    gencatSC: gencatSC,
    gencatLU: gencatLU,
    gencatNL: gencatNL,
    gencatCC: gencatCC,
    gencatNO: gencatNO,
    gencatCF: gencatCF,
    gencatPC: gencatPC,
    gencatSK: gencatSK,
    gencatPD: gencatPD,
    gencatPE: gencatPE,
    maxUniChar: maxUniChar,
    numBlocks: numBlocks,
    numConvBlocks: numConvBlocks,
    numSpaceBlocks: numSpaceBlocks,
    numLat1Blocks: numLat1Blocks,
    numRules: numRules,
    rule165: rule165,
    rule63: rule63,
    rule126: rule126,
    rule162: rule162,
    rule71: rule71,
    rule21: rule21,
    rule128: rule128,
    rule44: rule44,
    rule161: rule161,
    rule105: rule105,
    rule101: rule101,
    rule43: rule43,
    rule77: rule77,
    rule143: rule143,
    rule39: rule39,
    rule41: rule41,
    rule72: rule72,
    rule28: rule28,
    rule31: rule31,
    rule36: rule36,
    rule102: rule102,
    rule80: rule80,
    rule5: rule5,
    rule113: rule113,
    rule142: rule142,
    rule145: rule145,
    rule104: rule104,
    rule61: rule61,
    rule93: rule93,
    rule62: rule62,
    rule103: rule103,
    rule60: rule60,
    rule96: rule96,
    rule51: rule51,
    rule87: rule87,
    rule86: rule86,
    rule123: rule123,
    rule164: rule164,
    rule166: rule166,
    rule27: rule27,
    rule158: rule158,
    rule157: rule157,
    rule9: rule9,
    rule159: rule159,
    rule138: rule138,
    rule4: rule4,
    rule133: rule133,
    rule155: rule155,
    rule132: rule132,
    rule153: rule153,
    rule24: rule24,
    rule26: rule26,
    rule16: rule16,
    rule74: rule74,
    rule122: rule122,
    rule25: rule25,
    rule127: rule127,
    rule40: rule40,
    rule30: rule30,
    rule29: rule29,
    rule69: rule69,
    rule3: rule3,
    rule135: rule135,
    rule23: rule23,
    rule32: rule32,
    rule33: rule33,
    rule50: rule50,
    rule154: rule154,
    rule58: rule58,
    rule67: rule67,
    rule76: rule76,
    rule119: rule119,
    rule57: rule57,
    rule97: rule97,
    rule108: rule108,
    rule100: rule100,
    rule70: rule70,
    rule141: rule141,
    rule139: rule139,
    rule45: rule45,
    rule91: rule91,
    rule121: rule121,
    rule117: rule117,
    rule12: rule12,
    rule85: rule85,
    rule163: rule163,
    rule17: rule17,
    rule134: rule134,
    rule147: rule147,
    rule64: rule64,
    rule2: rule2,
    rule84: rule84,
    rule38: rule38,
    rule42: rule42,
    rule53: rule53,
    rule83: rule83,
    rule98: rule98,
    rule136: rule136,
    rule120: rule120,
    rule20: rule20,
    rule115: rule115,
    rule109: rule109,
    rule13: rule13,
    rule19: rule19,
    rule125: rule125,
    rule49: rule49,
    rule79: rule79,
    rule14: rule14,
    rule148: rule148,
    rule66: rule66,
    rule99: rule99,
    rule140: rule140,
    rule116: rule116,
    rule8: rule8,
    rule94: rule94,
    rule114: rule114,
    rule6: rule6,
    rule7: rule7,
    rule55: rule55,
    rule54: rule54,
    rule124: rule124,
    rule65: rule65,
    rule78: rule78,
    rule56: rule56,
    rule137: rule137,
    rule131: rule131,
    rule130: rule130,
    rule110: rule110,
    rule48: rule48,
    rule52: rule52,
    rule156: rule156,
    rule75: rule75,
    rule11: rule11,
    rule129: rule129,
    rule37: rule37,
    rule18: rule18,
    rule152: rule152,
    rule35: rule35,
    rule46: rule46,
    rule82: rule82,
    rule10: rule10,
    rule34: rule34,
    rule150: rule150,
    rule107: rule107,
    rule47: rule47,
    rule160: rule160,
    rule73: rule73,
    rule59: rule59,
    rule106: rule106,
    rule151: rule151,
    rule15: rule15,
    rule112: rule112,
    rule90: rule90,
    rule146: rule146,
    rule89: rule89,
    rule81: rule81,
    rule88: rule88,
    rule149: rule149,
    rule111: rule111,
    rule144: rule144,
    rule92: rule92,
    rule118: rule118,
    rule22: rule22,
    rule68: rule68,
    rule95: rule95,
    rule0: rule0,
    rule1: rule1,
    allchars: allchars,
    convchars: convchars,
    spacechars: spacechars,
    nullrule: nullrule,
    blkCmp: blkCmp,
    getRule: getRule,
    bsearch: bsearch,
    checkAttr: checkAttr,
    checkAttrS: checkAttrS,
    uIswcntrl: uIswcntrl,
    uIswprint: uIswprint,
    uIswupper: uIswupper,
    uIswlower: uIswlower,
    uIswalpha: uIswalpha,
    uIswdigit: uIswdigit,
    uIswalnum: uIswalnum,
    uIswspace: uIswspace,
    caseConv: caseConv,
    uTowupper: uTowupper,
    uTowlower: uTowlower,
    uTowtitle: uTowtitle,
    uGencat: uGencat,
    showUnicodeCategory: showUnicodeCategory,
    showConversionRule: showConversionRule,
    showCharBlock: showCharBlock
};
var _c, _c1;
$RefreshReg$(_c, "ConversionRule");
$RefreshReg$(_c1, "CharBlock");

},{"../Data.Array/index.js":"7x0bj","../Data.Boolean/index.js":"lv1qw","../Data.Eq/index.js":"c3b8F","../Data.Functor/index.js":"iy1jO","../Data.Int/index.js":"7DHYL","../Data.Maybe/index.js":"ePH81","../Data.Ordering/index.js":"lEtyd","../Data.Show/index.js":"b6tNW"}],"kbX0D":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_String_Pattern = require("../Data.String.Pattern/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var Text_Parsing_Parser_Pos = require("../Text.Parsing.Parser.Pos/index.js");
var StringLike = function(drop, indexOf, $$null, uncons) {
    this.drop = drop;
    this.indexOf = indexOf;
    this["null"] = $$null;
    this.uncons = uncons;
};
_c = StringLike;
var uncons = function(dict) {
    return dict.uncons;
};
var stringLikeString = new StringLike(Data_String_CodePoints.drop, Data_String_CodePoints.indexOf, Data_String_Common["null"], Data_String_CodeUnits.uncons);
var $$null = function(dict) {
    return dict["null"];
};
var indexOf = function(dict) {
    return dict.indexOf;
};
var eof = function(dictStringLike) {
    return function(dictMonad) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function(v) {
            return v.value0;
        }))(function(input) {
            return Control_Applicative.unless(Text_Parsing_Parser.applicativeParserT(dictMonad))($$null(dictStringLike)(input))(Text_Parsing_Parser.fail(dictMonad)("Expected EOF"));
        });
    };
};
var drop = function(dict) {
    return dict.drop;
};
var string = function(dictStringLike) {
    return function(dictMonad) {
        return function(str) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function(v) {
                return v.value0;
            }))(function(input) {
                var v = indexOf(dictStringLike)(Data_Newtype.wrap(Data_String_Pattern.newtypePattern)(str))(input);
                if (v instanceof Data_Maybe.Just && v.value0 === 0) return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(function(v1) {
                    return new Text_Parsing_Parser.ParseState(drop(dictStringLike)(Data_String_CodePoints.length(str))(input), Text_Parsing_Parser_Pos.updatePosString(v1.value1)(str), true);
                }))(function() {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(str);
                });
                return Text_Parsing_Parser.fail(dictMonad)("Expected " + Data_Show.show(Data_Show.showString)(str));
            });
        };
    };
};
var anyChar = function(dictStringLike) {
    return function(dictMonad) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function(v) {
            return v.value0;
        }))(function(input) {
            var v = uncons(dictStringLike)(input);
            if (v instanceof Data_Maybe.Nothing) return Text_Parsing_Parser.fail(dictMonad)("Unexpected EOF");
            if (v instanceof Data_Maybe.Just) return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(function(v1) {
                return new Text_Parsing_Parser.ParseState(v.value0.tail, Text_Parsing_Parser_Pos.updatePosString(v1.value1)(Data_String_CodeUnits.singleton(v.value0.head)), true);
            }))(function() {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v.value0.head);
            });
            throw new Error("Failed pattern match at Text.Parsing.Parser.String (line 56, column 3 - line 63, column 16): " + [
                v.constructor.name
            ]);
        });
    };
};
var satisfy = function(dictStringLike) {
    return function(dictMonad) {
        return function(f) {
            return Text_Parsing_Parser_Combinators.tryRethrow(dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(anyChar(dictStringLike)(dictMonad))(function(c) {
                var $52 = f(c);
                if ($52) return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(c);
                return Text_Parsing_Parser.fail(dictMonad)("Character '" + (Data_String_CodeUnits.singleton(c) + "' did not satisfy predicate"));
            }));
        };
    };
};
var $$char = function(dictStringLike) {
    return function(dictMonad) {
        return function(c) {
            return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(function(v) {
                return v === c;
            }))(Data_Show.show(Data_Show.showChar)(c));
        };
    };
};
var noneOf = function(dictStringLike) {
    return function(dictMonad) {
        return function(ss) {
            return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.notElem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))("none of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
        };
    };
};
var oneOf = function(dictStringLike) {
    return function(dictMonad) {
        return function(ss) {
            return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))("one of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
        };
    };
};
var whiteSpace = function(dictStringLike) {
    return function(dictMonad) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(satisfy(dictStringLike)(dictMonad)(function(c) {
            return c === "\x0a" || c === "\x0d" || c === " " || c === "\x09";
        })))(function(cs) {
            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String_CodeUnits.fromCharArray(cs));
        });
    };
};
var skipSpaces = function(dictStringLike) {
    return function(dictMonad) {
        return Data_Functor["void"](Text_Parsing_Parser.functorParserT(dictMonad.Bind1().Apply0().Functor0()))(whiteSpace(dictStringLike)(dictMonad));
    };
};
module.exports = {
    drop: drop,
    indexOf: indexOf,
    "null": $$null,
    uncons: uncons,
    StringLike: StringLike,
    eof: eof,
    string: string,
    anyChar: anyChar,
    satisfy: satisfy,
    "char": $$char,
    whiteSpace: whiteSpace,
    skipSpaces: skipSpaces,
    oneOf: oneOf,
    noneOf: noneOf,
    stringLikeString: stringLikeString
};
var _c;
$RefreshReg$(_c, "StringLike");

},{"../Control.Applicative/index.js":"dG9TO","../Control.Bind/index.js":"7Sory","../Control.Monad.State.Class/index.js":"enW6F","../Data.Array/index.js":"7x0bj","../Data.Eq/index.js":"c3b8F","../Data.Foldable/index.js":"jWmFN","../Data.Function/index.js":"cuwEt","../Data.Functor/index.js":"iy1jO","../Data.Maybe/index.js":"ePH81","../Data.Newtype/index.js":"czJbt","../Data.Show/index.js":"b6tNW","../Data.String.CodePoints/index.js":"3r2hK","../Data.String.CodeUnits/index.js":"8wheW","../Data.String.Common/index.js":"kcO4K","../Data.String.Pattern/index.js":"kTxxX","../Text.Parsing.Parser/index.js":"iVT9M","../Text.Parsing.Parser.Combinators/index.js":"01zG2","../Text.Parsing.Parser.Pos/index.js":"5VfPX"}],"cBlxQ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var text = Unsafe_Coerce.unsafeCoerce;
var render$prime = $foreign.renderThen;
var render = function(jsx) {
    return function(node) {
        return render$prime(jsx)(node)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit));
    };
};
var hydrate$prime = $foreign.hydrateThen;
var hydrate = function(jsx) {
    return function(node) {
        return hydrate$prime(jsx)(node)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit));
    };
};
module.exports = {
    render: render,
    "render'": render$prime,
    hydrate: hydrate,
    "hydrate'": hydrate$prime,
    text: text,
    unmount: $foreign.unmount,
    createPortal: $foreign.createPortal
};

},{"./foreign.js":"avvG5","../Control.Applicative/index.js":"dG9TO","../Data.Unit/index.js":"d7oKp","../Effect/index.js":"bKbtZ","../Unsafe.Coerce/index.js":"6gO81"}],"avvG5":[function(require,module,exports) {
"use strict";
const ReactDOM = require("react-dom");
exports.renderThen = (jsx)=>(node)=>(callback)=>()=>ReactDOM.render(jsx, node, callback)
;
exports.hydrateThen = (jsx)=>(node)=>(callback)=>()=>ReactDOM.hydrate(jsx, node, callback)
;
exports.unmount = (node)=>()=>ReactDOM.unmountComponentAtNode(node)
;
exports.createPortal = (jsx)=>(node)=>ReactDOM.createPortal(jsx, node)
;

},{"react-dom":"gkWJK"}],"fCBgr":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Effect_Unsafe = require("../Effect.Unsafe/index.js");
var React_Basic = require("../React.Basic/index.js");
var React_Basic_DOM_Internal = require("../React.Basic.DOM.Internal/index.js");
var _wbr$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("wbr"));
var wbr$prime = function(dictUnion) {
    return _wbr$prime;
};
var wbr = function(dictUnion) {
    return React_Basic.element(wbr$prime());
};
var _video$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("video"));
var video$prime = function(dictUnion) {
    return _video$prime;
};
var video = function(dictUnion) {
    return React_Basic.element(video$prime());
};
var video_ = function(children) {
    return video()({
        children: children
    });
};
var _var$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("var"));
var var$prime = function(dictUnion) {
    return _var$prime;
};
var $$var = function(dictUnion) {
    return React_Basic.element(var$prime());
};
var var_ = function(children) {
    return $$var()({
        children: children
    });
};
var _ul$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("ul"));
var ul$prime = function(dictUnion) {
    return _ul$prime;
};
var ul = function(dictUnion) {
    return React_Basic.element(ul$prime());
};
var ul_ = function(children) {
    return ul()({
        children: children
    });
};
var _u$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("u"));
var u$prime = function(dictUnion) {
    return _u$prime;
};
var u = function(dictUnion) {
    return React_Basic.element(u$prime());
};
var u_ = function(children) {
    return u()({
        children: children
    });
};
var _track$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("track"));
var track$prime = function(dictUnion) {
    return _track$prime;
};
var track = function(dictUnion) {
    return React_Basic.element(track$prime());
};
var _tr$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("tr"));
var tr$prime = function(dictUnion) {
    return _tr$prime;
};
var tr = function(dictUnion) {
    return React_Basic.element(tr$prime());
};
var tr_ = function(children) {
    return tr()({
        children: children
    });
};
var _title$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("title"));
var title$prime = function(dictUnion) {
    return _title$prime;
};
var title = function(dictUnion) {
    return React_Basic.element(title$prime());
};
var title_ = function(children) {
    return title()({
        children: children
    });
};
var _time$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("time"));
var time$prime = function(dictUnion) {
    return _time$prime;
};
var time = function(dictUnion) {
    return React_Basic.element(time$prime());
};
var time_ = function(children) {
    return time()({
        children: children
    });
};
var _thead$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("thead"));
var thead$prime = function(dictUnion) {
    return _thead$prime;
};
var thead = function(dictUnion) {
    return React_Basic.element(thead$prime());
};
var thead_ = function(children) {
    return thead()({
        children: children
    });
};
var _th$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("th"));
var th$prime = function(dictUnion) {
    return _th$prime;
};
var th = function(dictUnion) {
    return React_Basic.element(th$prime());
};
var th_ = function(children) {
    return th()({
        children: children
    });
};
var _tfoot$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("tfoot"));
var tfoot$prime = function(dictUnion) {
    return _tfoot$prime;
};
var tfoot = function(dictUnion) {
    return React_Basic.element(tfoot$prime());
};
var tfoot_ = function(children) {
    return tfoot()({
        children: children
    });
};
var _textarea$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("textarea"));
var textarea$prime = function(dictUnion) {
    return _textarea$prime;
};
var textarea = function(dictUnion) {
    return React_Basic.element(textarea$prime());
};
var textarea_ = function(children) {
    return textarea()({
        children: children
    });
};
var _template$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("template"));
var template$prime = function(dictUnion) {
    return _template$prime;
};
var template = function(dictUnion) {
    return React_Basic.element(template$prime());
};
var template_ = function(children) {
    return template()({
        children: children
    });
};
var _td$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("td"));
var td$prime = function(dictUnion) {
    return _td$prime;
};
var td = function(dictUnion) {
    return React_Basic.element(td$prime());
};
var td_ = function(children) {
    return td()({
        children: children
    });
};
var _tbody$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("tbody"));
var tbody$prime = function(dictUnion) {
    return _tbody$prime;
};
var tbody = function(dictUnion) {
    return React_Basic.element(tbody$prime());
};
var tbody_ = function(children) {
    return tbody()({
        children: children
    });
};
var _table$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("table"));
var table$prime = function(dictUnion) {
    return _table$prime;
};
var table = function(dictUnion) {
    return React_Basic.element(table$prime());
};
var table_ = function(children) {
    return table()({
        children: children
    });
};
var _sup$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("sup"));
var sup$prime = function(dictUnion) {
    return _sup$prime;
};
var sup = function(dictUnion) {
    return React_Basic.element(sup$prime());
};
var sup_ = function(children) {
    return sup()({
        children: children
    });
};
var _summary$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("summary"));
var summary$prime = function(dictUnion) {
    return _summary$prime;
};
var summary = function(dictUnion) {
    return React_Basic.element(summary$prime());
};
var summary_ = function(children) {
    return summary()({
        children: children
    });
};
var _sub$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("sub"));
var sub$prime = function(dictUnion) {
    return _sub$prime;
};
var sub = function(dictUnion) {
    return React_Basic.element(sub$prime());
};
var sub_ = function(children) {
    return sub()({
        children: children
    });
};
var _style$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("style"));
var style$prime = function(dictUnion) {
    return _style$prime;
};
var style = function(dictUnion) {
    return React_Basic.element(style$prime());
};
var style_ = function(children) {
    return style()({
        children: children
    });
};
var _strong$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("strong"));
var strong$prime = function(dictUnion) {
    return _strong$prime;
};
var strong = function(dictUnion) {
    return React_Basic.element(strong$prime());
};
var strong_ = function(children) {
    return strong()({
        children: children
    });
};
var _span$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("span"));
var span$prime = function(dictUnion) {
    return _span$prime;
};
var span = function(dictUnion) {
    return React_Basic.element(span$prime());
};
var span_ = function(children) {
    return span()({
        children: children
    });
};
var _source$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("source"));
var source$prime = function(dictUnion) {
    return _source$prime;
};
var source = function(dictUnion) {
    return React_Basic.element(source$prime());
};
var _small$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("small"));
var small$prime = function(dictUnion) {
    return _small$prime;
};
var small = function(dictUnion) {
    return React_Basic.element(small$prime());
};
var small_ = function(children) {
    return small()({
        children: children
    });
};
var _slot$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("slot"));
var slot$prime = function(dictUnion) {
    return _slot$prime;
};
var slot = function(dictUnion) {
    return React_Basic.element(slot$prime());
};
var slot_ = function(children) {
    return slot()({
        children: children
    });
};
var _select$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("select"));
var select$prime = function(dictUnion) {
    return _select$prime;
};
var select = function(dictUnion) {
    return React_Basic.element(select$prime());
};
var select_ = function(children) {
    return select()({
        children: children
    });
};
var _section$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("section"));
var section$prime = function(dictUnion) {
    return _section$prime;
};
var section = function(dictUnion) {
    return React_Basic.element(section$prime());
};
var section_ = function(children) {
    return section()({
        children: children
    });
};
var _script$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("script"));
var script$prime = function(dictUnion) {
    return _script$prime;
};
var script = function(dictUnion) {
    return React_Basic.element(script$prime());
};
var script_ = function(children) {
    return script()({
        children: children
    });
};
var _samp$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("samp"));
var samp$prime = function(dictUnion) {
    return _samp$prime;
};
var samp = function(dictUnion) {
    return React_Basic.element(samp$prime());
};
var samp_ = function(children) {
    return samp()({
        children: children
    });
};
var _s$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("s"));
var s$prime = function(dictUnion) {
    return _s$prime;
};
var s = function(dictUnion) {
    return React_Basic.element(s$prime());
};
var s_ = function(children) {
    return s()({
        children: children
    });
};
var _ruby$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("ruby"));
var ruby$prime = function(dictUnion) {
    return _ruby$prime;
};
var ruby = function(dictUnion) {
    return React_Basic.element(ruby$prime());
};
var ruby_ = function(children) {
    return ruby()({
        children: children
    });
};
var _rtc$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("rtc"));
var rtc$prime = function(dictUnion) {
    return _rtc$prime;
};
var rtc = function(dictUnion) {
    return React_Basic.element(rtc$prime());
};
var rtc_ = function(children) {
    return rtc()({
        children: children
    });
};
var _rt$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("rt"));
var rt$prime = function(dictUnion) {
    return _rt$prime;
};
var rt = function(dictUnion) {
    return React_Basic.element(rt$prime());
};
var rt_ = function(children) {
    return rt()({
        children: children
    });
};
var _rp$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("rp"));
var rp$prime = function(dictUnion) {
    return _rp$prime;
};
var rp = function(dictUnion) {
    return React_Basic.element(rp$prime());
};
var rp_ = function(children) {
    return rp()({
        children: children
    });
};
var _rb$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("rb"));
var rb$prime = function(dictUnion) {
    return _rb$prime;
};
var rb = function(dictUnion) {
    return React_Basic.element(rb$prime());
};
var rb_ = function(children) {
    return rb()({
        children: children
    });
};
var _q$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("q"));
var q$prime = function(dictUnion) {
    return _q$prime;
};
var q = function(dictUnion) {
    return React_Basic.element(q$prime());
};
var q_ = function(children) {
    return q()({
        children: children
    });
};
var _progress$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("progress"));
var progress$prime = function(dictUnion) {
    return _progress$prime;
};
var progress = function(dictUnion) {
    return React_Basic.element(progress$prime());
};
var progress_ = function(children) {
    return progress()({
        children: children
    });
};
var _pre$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("pre"));
var pre$prime = function(dictUnion) {
    return _pre$prime;
};
var pre = function(dictUnion) {
    return React_Basic.element(pre$prime());
};
var pre_ = function(children) {
    return pre()({
        children: children
    });
};
var _picture$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("picture"));
var picture$prime = function(dictUnion) {
    return _picture$prime;
};
var picture = function(dictUnion) {
    return React_Basic.element(picture$prime());
};
var picture_ = function(children) {
    return picture()({
        children: children
    });
};
var _param$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("param"));
var param$prime = function(dictUnion) {
    return _param$prime;
};
var param = function(dictUnion) {
    return React_Basic.element(param$prime());
};
var _p$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("p"));
var p$prime = function(dictUnion) {
    return _p$prime;
};
var p = function(dictUnion) {
    return React_Basic.element(p$prime());
};
var p_ = function(children) {
    return p()({
        children: children
    });
};
var _output$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("output"));
var output$prime = function(dictUnion) {
    return _output$prime;
};
var output = function(dictUnion) {
    return React_Basic.element(output$prime());
};
var output_ = function(children) {
    return output()({
        children: children
    });
};
var _option$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("option"));
var option$prime = function(dictUnion) {
    return _option$prime;
};
var option = function(dictUnion) {
    return React_Basic.element(option$prime());
};
var option_ = function(children) {
    return option()({
        children: children
    });
};
var _optgroup$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("optgroup"));
var optgroup$prime = function(dictUnion) {
    return _optgroup$prime;
};
var optgroup = function(dictUnion) {
    return React_Basic.element(optgroup$prime());
};
var optgroup_ = function(children) {
    return optgroup()({
        children: children
    });
};
var _ol$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("ol"));
var ol$prime = function(dictUnion) {
    return _ol$prime;
};
var ol = function(dictUnion) {
    return React_Basic.element(ol$prime());
};
var ol_ = function(children) {
    return ol()({
        children: children
    });
};
var _object$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("object"));
var object$prime = function(dictUnion) {
    return _object$prime;
};
var object = function(dictUnion) {
    return React_Basic.element(object$prime());
};
var object_ = function(children) {
    return object()({
        children: children
    });
};
var _noscript$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("noscript"));
var noscript$prime = function(dictUnion) {
    return _noscript$prime;
};
var noscript = function(dictUnion) {
    return React_Basic.element(noscript$prime());
};
var noscript_ = function(children) {
    return noscript()({
        children: children
    });
};
var _nav$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("nav"));
var nav$prime = function(dictUnion) {
    return _nav$prime;
};
var nav = function(dictUnion) {
    return React_Basic.element(nav$prime());
};
var nav_ = function(children) {
    return nav()({
        children: children
    });
};
var _meter$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("meter"));
var meter$prime = function(dictUnion) {
    return _meter$prime;
};
var meter = function(dictUnion) {
    return React_Basic.element(meter$prime());
};
var meter_ = function(children) {
    return meter()({
        children: children
    });
};
var _meta$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("meta"));
var meta$prime = function(dictUnion) {
    return _meta$prime;
};
var meta = function(dictUnion) {
    return React_Basic.element(meta$prime());
};
var _menuitem$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("menuitem"));
var menuitem$prime = function(dictUnion) {
    return _menuitem$prime;
};
var menuitem = function(dictUnion) {
    return React_Basic.element(menuitem$prime());
};
var menuitem_ = function(children) {
    return menuitem()({
        children: children
    });
};
var _menu$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("menu"));
var menu$prime = function(dictUnion) {
    return _menu$prime;
};
var menu = function(dictUnion) {
    return React_Basic.element(menu$prime());
};
var menu_ = function(children) {
    return menu()({
        children: children
    });
};
var _math$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("math"));
var math$prime = function(dictUnion) {
    return _math$prime;
};
var math = function(dictUnion) {
    return React_Basic.element(math$prime());
};
var math_ = function(children) {
    return math()({
        children: children
    });
};
var _mark$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("mark"));
var mark$prime = function(dictUnion) {
    return _mark$prime;
};
var mark = function(dictUnion) {
    return React_Basic.element(mark$prime());
};
var mark_ = function(children) {
    return mark()({
        children: children
    });
};
var _map$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("map"));
var map$prime = function(dictUnion) {
    return _map$prime;
};
var map = function(dictUnion) {
    return React_Basic.element(map$prime());
};
var map_ = function(children) {
    return map()({
        children: children
    });
};
var _main$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("main"));
var main$prime = function(dictUnion) {
    return _main$prime;
};
var main = function(dictUnion) {
    return React_Basic.element(main$prime());
};
var main_ = function(children) {
    return main()({
        children: children
    });
};
var _link$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("link"));
var link$prime = function(dictUnion) {
    return _link$prime;
};
var link = function(dictUnion) {
    return React_Basic.element(link$prime());
};
var _li$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("li"));
var li$prime = function(dictUnion) {
    return _li$prime;
};
var li = function(dictUnion) {
    return React_Basic.element(li$prime());
};
var li_ = function(children) {
    return li()({
        children: children
    });
};
var _legend$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("legend"));
var legend$prime = function(dictUnion) {
    return _legend$prime;
};
var legend = function(dictUnion) {
    return React_Basic.element(legend$prime());
};
var legend_ = function(children) {
    return legend()({
        children: children
    });
};
var _label$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("label"));
var label$prime = function(dictUnion) {
    return _label$prime;
};
var label = function(dictUnion) {
    return React_Basic.element(label$prime());
};
var label_ = function(children) {
    return label()({
        children: children
    });
};
var _keygen$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("keygen"));
var keygen$prime = function(dictUnion) {
    return _keygen$prime;
};
var keygen = function(dictUnion) {
    return React_Basic.element(keygen$prime());
};
var keygen_ = function(children) {
    return keygen()({
        children: children
    });
};
var _kbd$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("kbd"));
var kbd$prime = function(dictUnion) {
    return _kbd$prime;
};
var kbd = function(dictUnion) {
    return React_Basic.element(kbd$prime());
};
var kbd_ = function(children) {
    return kbd()({
        children: children
    });
};
var _ins$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("ins"));
var ins$prime = function(dictUnion) {
    return _ins$prime;
};
var ins = function(dictUnion) {
    return React_Basic.element(ins$prime());
};
var ins_ = function(children) {
    return ins()({
        children: children
    });
};
var _input$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("input"));
var input$prime = function(dictUnion) {
    return _input$prime;
};
var input = function(dictUnion) {
    return React_Basic.element(input$prime());
};
var _img$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("img"));
var img$prime = function(dictUnion) {
    return _img$prime;
};
var img = function(dictUnion) {
    return React_Basic.element(img$prime());
};
var _iframe$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("iframe"));
var iframe$prime = function(dictUnion) {
    return _iframe$prime;
};
var iframe = function(dictUnion) {
    return React_Basic.element(iframe$prime());
};
var iframe_ = function(children) {
    return iframe()({
        children: children
    });
};
var _i$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("i"));
var i$prime = function(dictUnion) {
    return _i$prime;
};
var i = function(dictUnion) {
    return React_Basic.element(i$prime());
};
var i_ = function(children) {
    return i()({
        children: children
    });
};
var _html$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("html"));
var html$prime = function(dictUnion) {
    return _html$prime;
};
var html = function(dictUnion) {
    return React_Basic.element(html$prime());
};
var html_ = function(children) {
    return html()({
        children: children
    });
};
var _hr$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("hr"));
var hr$prime = function(dictUnion) {
    return _hr$prime;
};
var hr = function(dictUnion) {
    return React_Basic.element(hr$prime());
};
var _hgroup$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("hgroup"));
var hgroup$prime = function(dictUnion) {
    return _hgroup$prime;
};
var hgroup = function(dictUnion) {
    return React_Basic.element(hgroup$prime());
};
var hgroup_ = function(children) {
    return hgroup()({
        children: children
    });
};
var _header$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("header"));
var header$prime = function(dictUnion) {
    return _header$prime;
};
var header = function(dictUnion) {
    return React_Basic.element(header$prime());
};
var header_ = function(children) {
    return header()({
        children: children
    });
};
var _head$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("head"));
var head$prime = function(dictUnion) {
    return _head$prime;
};
var head = function(dictUnion) {
    return React_Basic.element(head$prime());
};
var head_ = function(children) {
    return head()({
        children: children
    });
};
var _h6$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("h6"));
var h6$prime = function(dictUnion) {
    return _h6$prime;
};
var h6 = function(dictUnion) {
    return React_Basic.element(h6$prime());
};
var h6_ = function(children) {
    return h6()({
        children: children
    });
};
var _h5$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("h5"));
var h5$prime = function(dictUnion) {
    return _h5$prime;
};
var h5 = function(dictUnion) {
    return React_Basic.element(h5$prime());
};
var h5_ = function(children) {
    return h5()({
        children: children
    });
};
var _h4$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("h4"));
var h4$prime = function(dictUnion) {
    return _h4$prime;
};
var h4 = function(dictUnion) {
    return React_Basic.element(h4$prime());
};
var h4_ = function(children) {
    return h4()({
        children: children
    });
};
var _h3$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("h3"));
var h3$prime = function(dictUnion) {
    return _h3$prime;
};
var h3 = function(dictUnion) {
    return React_Basic.element(h3$prime());
};
var h3_ = function(children) {
    return h3()({
        children: children
    });
};
var _h2$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("h2"));
var h2$prime = function(dictUnion) {
    return _h2$prime;
};
var h2 = function(dictUnion) {
    return React_Basic.element(h2$prime());
};
var h2_ = function(children) {
    return h2()({
        children: children
    });
};
var _h1$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("h1"));
var h1$prime = function(dictUnion) {
    return _h1$prime;
};
var h1 = function(dictUnion) {
    return React_Basic.element(h1$prime());
};
var h1_ = function(children) {
    return h1()({
        children: children
    });
};
var _form$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("form"));
var form$prime = function(dictUnion) {
    return _form$prime;
};
var form = function(dictUnion) {
    return React_Basic.element(form$prime());
};
var form_ = function(children) {
    return form()({
        children: children
    });
};
var _footer$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("footer"));
var footer$prime = function(dictUnion) {
    return _footer$prime;
};
var footer = function(dictUnion) {
    return React_Basic.element(footer$prime());
};
var footer_ = function(children) {
    return footer()({
        children: children
    });
};
var _figure$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("figure"));
var figure$prime = function(dictUnion) {
    return _figure$prime;
};
var figure = function(dictUnion) {
    return React_Basic.element(figure$prime());
};
var figure_ = function(children) {
    return figure()({
        children: children
    });
};
var _figcaption$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("figcaption"));
var figcaption$prime = function(dictUnion) {
    return _figcaption$prime;
};
var figcaption = function(dictUnion) {
    return React_Basic.element(figcaption$prime());
};
var figcaption_ = function(children) {
    return figcaption()({
        children: children
    });
};
var _fieldset$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("fieldset"));
var fieldset$prime = function(dictUnion) {
    return _fieldset$prime;
};
var fieldset = function(dictUnion) {
    return React_Basic.element(fieldset$prime());
};
var fieldset_ = function(children) {
    return fieldset()({
        children: children
    });
};
var _embed$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("embed"));
var embed$prime = function(dictUnion) {
    return _embed$prime;
};
var embed = function(dictUnion) {
    return React_Basic.element(embed$prime());
};
var _em$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("em"));
var em$prime = function(dictUnion) {
    return _em$prime;
};
var em = function(dictUnion) {
    return React_Basic.element(em$prime());
};
var em_ = function(children) {
    return em()({
        children: children
    });
};
var _dt$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("dt"));
var dt$prime = function(dictUnion) {
    return _dt$prime;
};
var dt = function(dictUnion) {
    return React_Basic.element(dt$prime());
};
var dt_ = function(children) {
    return dt()({
        children: children
    });
};
var _dl$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("dl"));
var dl$prime = function(dictUnion) {
    return _dl$prime;
};
var dl = function(dictUnion) {
    return React_Basic.element(dl$prime());
};
var dl_ = function(children) {
    return dl()({
        children: children
    });
};
var _div$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("div"));
var div$prime = function(dictUnion) {
    return _div$prime;
};
var div = function(dictUnion) {
    return React_Basic.element(div$prime());
};
var div_ = function(children) {
    return div()({
        children: children
    });
};
var _dialog$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("dialog"));
var dialog$prime = function(dictUnion) {
    return _dialog$prime;
};
var dialog = function(dictUnion) {
    return React_Basic.element(dialog$prime());
};
var dialog_ = function(children) {
    return dialog()({
        children: children
    });
};
var _dfn$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("dfn"));
var dfn$prime = function(dictUnion) {
    return _dfn$prime;
};
var dfn = function(dictUnion) {
    return React_Basic.element(dfn$prime());
};
var dfn_ = function(children) {
    return dfn()({
        children: children
    });
};
var _details$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("details"));
var details$prime = function(dictUnion) {
    return _details$prime;
};
var details = function(dictUnion) {
    return React_Basic.element(details$prime());
};
var details_ = function(children) {
    return details()({
        children: children
    });
};
var _del$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("del"));
var del$prime = function(dictUnion) {
    return _del$prime;
};
var del = function(dictUnion) {
    return React_Basic.element(del$prime());
};
var del_ = function(children) {
    return del()({
        children: children
    });
};
var _dd$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("dd"));
var dd$prime = function(dictUnion) {
    return _dd$prime;
};
var dd = function(dictUnion) {
    return React_Basic.element(dd$prime());
};
var dd_ = function(children) {
    return dd()({
        children: children
    });
};
var _datalist$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("datalist"));
var datalist$prime = function(dictUnion) {
    return _datalist$prime;
};
var datalist = function(dictUnion) {
    return React_Basic.element(datalist$prime());
};
var datalist_ = function(children) {
    return datalist()({
        children: children
    });
};
var _data$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("data"));
var data$prime$prime = function(dictUnion) {
    return _data$prime;
};
var data$prime = function(dictUnion) {
    return React_Basic.element(data$prime$prime());
};
var data_ = function(children) {
    return data$prime()({
        children: children
    });
};
var _colgroup$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("colgroup"));
var colgroup$prime = function(dictUnion) {
    return _colgroup$prime;
};
var colgroup = function(dictUnion) {
    return React_Basic.element(colgroup$prime());
};
var colgroup_ = function(children) {
    return colgroup()({
        children: children
    });
};
var _col$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("col"));
var col$prime = function(dictUnion) {
    return _col$prime;
};
var col = function(dictUnion) {
    return React_Basic.element(col$prime());
};
var _code$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("code"));
var code$prime = function(dictUnion) {
    return _code$prime;
};
var code = function(dictUnion) {
    return React_Basic.element(code$prime());
};
var code_ = function(children) {
    return code()({
        children: children
    });
};
var _cite$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("cite"));
var cite$prime = function(dictUnion) {
    return _cite$prime;
};
var cite = function(dictUnion) {
    return React_Basic.element(cite$prime());
};
var cite_ = function(children) {
    return cite()({
        children: children
    });
};
var _caption$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("caption"));
var caption$prime = function(dictUnion) {
    return _caption$prime;
};
var caption = function(dictUnion) {
    return React_Basic.element(caption$prime());
};
var caption_ = function(children) {
    return caption()({
        children: children
    });
};
var _canvas$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("canvas"));
var canvas$prime = function(dictUnion) {
    return _canvas$prime;
};
var canvas = function(dictUnion) {
    return React_Basic.element(canvas$prime());
};
var canvas_ = function(children) {
    return canvas()({
        children: children
    });
};
var _button$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("button"));
var button$prime = function(dictUnion) {
    return _button$prime;
};
var button = function(dictUnion) {
    return React_Basic.element(button$prime());
};
var button_ = function(children) {
    return button()({
        children: children
    });
};
var _br$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("br"));
var br$prime = function(dictUnion) {
    return _br$prime;
};
var br = function(dictUnion) {
    return React_Basic.element(br$prime());
};
var _body$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("body"));
var body$prime = function(dictUnion) {
    return _body$prime;
};
var body = function(dictUnion) {
    return React_Basic.element(body$prime());
};
var body_ = function(children) {
    return body()({
        children: children
    });
};
var _blockquote$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("blockquote"));
var blockquote$prime = function(dictUnion) {
    return _blockquote$prime;
};
var blockquote = function(dictUnion) {
    return React_Basic.element(blockquote$prime());
};
var blockquote_ = function(children) {
    return blockquote()({
        children: children
    });
};
var _bdo$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("bdo"));
var bdo$prime = function(dictUnion) {
    return _bdo$prime;
};
var bdo = function(dictUnion) {
    return React_Basic.element(bdo$prime());
};
var bdo_ = function(children) {
    return bdo()({
        children: children
    });
};
var _bdi$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("bdi"));
var bdi$prime = function(dictUnion) {
    return _bdi$prime;
};
var bdi = function(dictUnion) {
    return React_Basic.element(bdi$prime());
};
var bdi_ = function(children) {
    return bdi()({
        children: children
    });
};
var _base$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("base"));
var base$prime = function(dictUnion) {
    return _base$prime;
};
var base = function(dictUnion) {
    return React_Basic.element(base$prime());
};
var _b$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("b"));
var b$prime = function(dictUnion) {
    return _b$prime;
};
var b = function(dictUnion) {
    return React_Basic.element(b$prime());
};
var b_ = function(children) {
    return b()({
        children: children
    });
};
var _audio$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("audio"));
var audio$prime = function(dictUnion) {
    return _audio$prime;
};
var audio = function(dictUnion) {
    return React_Basic.element(audio$prime());
};
var audio_ = function(children) {
    return audio()({
        children: children
    });
};
var _aside$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("aside"));
var aside$prime = function(dictUnion) {
    return _aside$prime;
};
var aside = function(dictUnion) {
    return React_Basic.element(aside$prime());
};
var aside_ = function(children) {
    return aside()({
        children: children
    });
};
var _article$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("article"));
var article$prime = function(dictUnion) {
    return _article$prime;
};
var article = function(dictUnion) {
    return React_Basic.element(article$prime());
};
var article_ = function(children) {
    return article()({
        children: children
    });
};
var _area$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("area"));
var area$prime = function(dictUnion) {
    return _area$prime;
};
var area = function(dictUnion) {
    return React_Basic.element(area$prime());
};
var _address$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("address"));
var address$prime = function(dictUnion) {
    return _address$prime;
};
var address = function(dictUnion) {
    return React_Basic.element(address$prime());
};
var address_ = function(children) {
    return address()({
        children: children
    });
};
var _abbr$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("abbr"));
var abbr$prime = function(dictUnion) {
    return _abbr$prime;
};
var abbr = function(dictUnion) {
    return React_Basic.element(abbr$prime());
};
var abbr_ = function(children) {
    return abbr()({
        children: children
    });
};
var _a$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("a"));
var a$prime = function(dictUnion) {
    return _a$prime;
};
var a = function(dictUnion) {
    return React_Basic.element(a$prime());
};
var a_ = function(children) {
    return a()({
        children: children
    });
};
module.exports = {
    a: a,
    a_: a_,
    "a'": a$prime,
    "_a'": _a$prime,
    abbr: abbr,
    abbr_: abbr_,
    "abbr'": abbr$prime,
    "_abbr'": _abbr$prime,
    address: address,
    address_: address_,
    "address'": address$prime,
    "_address'": _address$prime,
    area: area,
    "area'": area$prime,
    "_area'": _area$prime,
    article: article,
    article_: article_,
    "article'": article$prime,
    "_article'": _article$prime,
    aside: aside,
    aside_: aside_,
    "aside'": aside$prime,
    "_aside'": _aside$prime,
    audio: audio,
    audio_: audio_,
    "audio'": audio$prime,
    "_audio'": _audio$prime,
    b: b,
    b_: b_,
    "b'": b$prime,
    "_b'": _b$prime,
    base: base,
    "base'": base$prime,
    "_base'": _base$prime,
    bdi: bdi,
    bdi_: bdi_,
    "bdi'": bdi$prime,
    "_bdi'": _bdi$prime,
    bdo: bdo,
    bdo_: bdo_,
    "bdo'": bdo$prime,
    "_bdo'": _bdo$prime,
    blockquote: blockquote,
    blockquote_: blockquote_,
    "blockquote'": blockquote$prime,
    "_blockquote'": _blockquote$prime,
    body: body,
    body_: body_,
    "body'": body$prime,
    "_body'": _body$prime,
    br: br,
    "br'": br$prime,
    "_br'": _br$prime,
    button: button,
    button_: button_,
    "button'": button$prime,
    "_button'": _button$prime,
    canvas: canvas,
    canvas_: canvas_,
    "canvas'": canvas$prime,
    "_canvas'": _canvas$prime,
    caption: caption,
    caption_: caption_,
    "caption'": caption$prime,
    "_caption'": _caption$prime,
    cite: cite,
    cite_: cite_,
    "cite'": cite$prime,
    "_cite'": _cite$prime,
    code: code,
    code_: code_,
    "code'": code$prime,
    "_code'": _code$prime,
    col: col,
    "col'": col$prime,
    "_col'": _col$prime,
    colgroup: colgroup,
    colgroup_: colgroup_,
    "colgroup'": colgroup$prime,
    "_colgroup'": _colgroup$prime,
    "data'": data$prime,
    data_: data_,
    "data''": data$prime$prime,
    "_data'": _data$prime,
    datalist: datalist,
    datalist_: datalist_,
    "datalist'": datalist$prime,
    "_datalist'": _datalist$prime,
    dd: dd,
    dd_: dd_,
    "dd'": dd$prime,
    "_dd'": _dd$prime,
    del: del,
    del_: del_,
    "del'": del$prime,
    "_del'": _del$prime,
    details: details,
    details_: details_,
    "details'": details$prime,
    "_details'": _details$prime,
    dfn: dfn,
    dfn_: dfn_,
    "dfn'": dfn$prime,
    "_dfn'": _dfn$prime,
    dialog: dialog,
    dialog_: dialog_,
    "dialog'": dialog$prime,
    "_dialog'": _dialog$prime,
    div: div,
    div_: div_,
    "div'": div$prime,
    "_div'": _div$prime,
    dl: dl,
    dl_: dl_,
    "dl'": dl$prime,
    "_dl'": _dl$prime,
    dt: dt,
    dt_: dt_,
    "dt'": dt$prime,
    "_dt'": _dt$prime,
    em: em,
    em_: em_,
    "em'": em$prime,
    "_em'": _em$prime,
    embed: embed,
    "embed'": embed$prime,
    "_embed'": _embed$prime,
    fieldset: fieldset,
    fieldset_: fieldset_,
    "fieldset'": fieldset$prime,
    "_fieldset'": _fieldset$prime,
    figcaption: figcaption,
    figcaption_: figcaption_,
    "figcaption'": figcaption$prime,
    "_figcaption'": _figcaption$prime,
    figure: figure,
    figure_: figure_,
    "figure'": figure$prime,
    "_figure'": _figure$prime,
    footer: footer,
    footer_: footer_,
    "footer'": footer$prime,
    "_footer'": _footer$prime,
    form: form,
    form_: form_,
    "form'": form$prime,
    "_form'": _form$prime,
    h1: h1,
    h1_: h1_,
    "h1'": h1$prime,
    "_h1'": _h1$prime,
    h2: h2,
    h2_: h2_,
    "h2'": h2$prime,
    "_h2'": _h2$prime,
    h3: h3,
    h3_: h3_,
    "h3'": h3$prime,
    "_h3'": _h3$prime,
    h4: h4,
    h4_: h4_,
    "h4'": h4$prime,
    "_h4'": _h4$prime,
    h5: h5,
    h5_: h5_,
    "h5'": h5$prime,
    "_h5'": _h5$prime,
    h6: h6,
    h6_: h6_,
    "h6'": h6$prime,
    "_h6'": _h6$prime,
    head: head,
    head_: head_,
    "head'": head$prime,
    "_head'": _head$prime,
    header: header,
    header_: header_,
    "header'": header$prime,
    "_header'": _header$prime,
    hgroup: hgroup,
    hgroup_: hgroup_,
    "hgroup'": hgroup$prime,
    "_hgroup'": _hgroup$prime,
    hr: hr,
    "hr'": hr$prime,
    "_hr'": _hr$prime,
    html: html,
    html_: html_,
    "html'": html$prime,
    "_html'": _html$prime,
    i: i,
    i_: i_,
    "i'": i$prime,
    "_i'": _i$prime,
    iframe: iframe,
    iframe_: iframe_,
    "iframe'": iframe$prime,
    "_iframe'": _iframe$prime,
    img: img,
    "img'": img$prime,
    "_img'": _img$prime,
    input: input,
    "input'": input$prime,
    "_input'": _input$prime,
    ins: ins,
    ins_: ins_,
    "ins'": ins$prime,
    "_ins'": _ins$prime,
    kbd: kbd,
    kbd_: kbd_,
    "kbd'": kbd$prime,
    "_kbd'": _kbd$prime,
    keygen: keygen,
    keygen_: keygen_,
    "keygen'": keygen$prime,
    "_keygen'": _keygen$prime,
    label: label,
    label_: label_,
    "label'": label$prime,
    "_label'": _label$prime,
    legend: legend,
    legend_: legend_,
    "legend'": legend$prime,
    "_legend'": _legend$prime,
    li: li,
    li_: li_,
    "li'": li$prime,
    "_li'": _li$prime,
    link: link,
    "link'": link$prime,
    "_link'": _link$prime,
    main: main,
    main_: main_,
    "main'": main$prime,
    "_main'": _main$prime,
    map: map,
    map_: map_,
    "map'": map$prime,
    "_map'": _map$prime,
    mark: mark,
    mark_: mark_,
    "mark'": mark$prime,
    "_mark'": _mark$prime,
    math: math,
    math_: math_,
    "math'": math$prime,
    "_math'": _math$prime,
    menu: menu,
    menu_: menu_,
    "menu'": menu$prime,
    "_menu'": _menu$prime,
    menuitem: menuitem,
    menuitem_: menuitem_,
    "menuitem'": menuitem$prime,
    "_menuitem'": _menuitem$prime,
    meta: meta,
    "meta'": meta$prime,
    "_meta'": _meta$prime,
    meter: meter,
    meter_: meter_,
    "meter'": meter$prime,
    "_meter'": _meter$prime,
    nav: nav,
    nav_: nav_,
    "nav'": nav$prime,
    "_nav'": _nav$prime,
    noscript: noscript,
    noscript_: noscript_,
    "noscript'": noscript$prime,
    "_noscript'": _noscript$prime,
    object: object,
    object_: object_,
    "object'": object$prime,
    "_object'": _object$prime,
    ol: ol,
    ol_: ol_,
    "ol'": ol$prime,
    "_ol'": _ol$prime,
    optgroup: optgroup,
    optgroup_: optgroup_,
    "optgroup'": optgroup$prime,
    "_optgroup'": _optgroup$prime,
    option: option,
    option_: option_,
    "option'": option$prime,
    "_option'": _option$prime,
    output: output,
    output_: output_,
    "output'": output$prime,
    "_output'": _output$prime,
    p: p,
    p_: p_,
    "p'": p$prime,
    "_p'": _p$prime,
    param: param,
    "param'": param$prime,
    "_param'": _param$prime,
    picture: picture,
    picture_: picture_,
    "picture'": picture$prime,
    "_picture'": _picture$prime,
    pre: pre,
    pre_: pre_,
    "pre'": pre$prime,
    "_pre'": _pre$prime,
    progress: progress,
    progress_: progress_,
    "progress'": progress$prime,
    "_progress'": _progress$prime,
    q: q,
    q_: q_,
    "q'": q$prime,
    "_q'": _q$prime,
    rb: rb,
    rb_: rb_,
    "rb'": rb$prime,
    "_rb'": _rb$prime,
    rp: rp,
    rp_: rp_,
    "rp'": rp$prime,
    "_rp'": _rp$prime,
    rt: rt,
    rt_: rt_,
    "rt'": rt$prime,
    "_rt'": _rt$prime,
    rtc: rtc,
    rtc_: rtc_,
    "rtc'": rtc$prime,
    "_rtc'": _rtc$prime,
    ruby: ruby,
    ruby_: ruby_,
    "ruby'": ruby$prime,
    "_ruby'": _ruby$prime,
    s: s,
    s_: s_,
    "s'": s$prime,
    "_s'": _s$prime,
    samp: samp,
    samp_: samp_,
    "samp'": samp$prime,
    "_samp'": _samp$prime,
    script: script,
    script_: script_,
    "script'": script$prime,
    "_script'": _script$prime,
    section: section,
    section_: section_,
    "section'": section$prime,
    "_section'": _section$prime,
    select: select,
    select_: select_,
    "select'": select$prime,
    "_select'": _select$prime,
    slot: slot,
    slot_: slot_,
    "slot'": slot$prime,
    "_slot'": _slot$prime,
    small: small,
    small_: small_,
    "small'": small$prime,
    "_small'": _small$prime,
    source: source,
    "source'": source$prime,
    "_source'": _source$prime,
    span: span,
    span_: span_,
    "span'": span$prime,
    "_span'": _span$prime,
    strong: strong,
    strong_: strong_,
    "strong'": strong$prime,
    "_strong'": _strong$prime,
    style: style,
    style_: style_,
    "style'": style$prime,
    "_style'": _style$prime,
    sub: sub,
    sub_: sub_,
    "sub'": sub$prime,
    "_sub'": _sub$prime,
    summary: summary,
    summary_: summary_,
    "summary'": summary$prime,
    "_summary'": _summary$prime,
    sup: sup,
    sup_: sup_,
    "sup'": sup$prime,
    "_sup'": _sup$prime,
    table: table,
    table_: table_,
    "table'": table$prime,
    "_table'": _table$prime,
    tbody: tbody,
    tbody_: tbody_,
    "tbody'": tbody$prime,
    "_tbody'": _tbody$prime,
    td: td,
    td_: td_,
    "td'": td$prime,
    "_td'": _td$prime,
    template: template,
    template_: template_,
    "template'": template$prime,
    "_template'": _template$prime,
    textarea: textarea,
    textarea_: textarea_,
    "textarea'": textarea$prime,
    "_textarea'": _textarea$prime,
    tfoot: tfoot,
    tfoot_: tfoot_,
    "tfoot'": tfoot$prime,
    "_tfoot'": _tfoot$prime,
    th: th,
    th_: th_,
    "th'": th$prime,
    "_th'": _th$prime,
    thead: thead,
    thead_: thead_,
    "thead'": thead$prime,
    "_thead'": _thead$prime,
    time: time,
    time_: time_,
    "time'": time$prime,
    "_time'": _time$prime,
    title: title,
    title_: title_,
    "title'": title$prime,
    "_title'": _title$prime,
    tr: tr,
    tr_: tr_,
    "tr'": tr$prime,
    "_tr'": _tr$prime,
    track: track,
    "track'": track$prime,
    "_track'": _track$prime,
    u: u,
    u_: u_,
    "u'": u$prime,
    "_u'": _u$prime,
    ul: ul,
    ul_: ul_,
    "ul'": ul$prime,
    "_ul'": _ul$prime,
    "var": $$var,
    var_: var_,
    "var'": var$prime,
    "_var'": _var$prime,
    video: video,
    video_: video_,
    "video'": video$prime,
    "_video'": _video$prime,
    wbr: wbr,
    "wbr'": wbr$prime,
    "_wbr'": _wbr$prime
};

},{"../Effect.Unsafe/index.js":"7GTyi","../React.Basic/index.js":"8GxaU","../React.Basic.DOM.Internal/index.js":"2jsDE"}],"7GTyi":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    unsafePerformEffect: $foreign.unsafePerformEffect
};

},{"./foreign.js":"7pgeM"}],"7pgeM":[function(require,module,exports) {
"use strict";
exports.unsafePerformEffect = function(f) {
    return f();
};

},{}],"8GxaU":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var semigroupJSX = new Data_Semigroup.Semigroup(function(a) {
    return function(b) {
        return $foreign.fragment([
            a,
            b
        ]);
    };
});
var provider = function(context) {
    return function(value) {
        return function(children) {
            return $foreign.element($foreign.contextProvider(context))({
                value: value,
                children: children
            });
        };
    };
};
var monoidJSX = new Data_Monoid.Monoid(function() {
    return semigroupJSX;
}, $foreign.empty);
var consumer = function(context) {
    return function(children) {
        return $foreign.element($foreign.contextConsumer(context))({
            children: children
        });
    };
};
module.exports = {
    provider: provider,
    consumer: consumer,
    semigroupJSX: semigroupJSX,
    monoidJSX: monoidJSX,
    empty: $foreign.empty,
    keyed: $foreign.keyed,
    fragment: $foreign.fragment,
    element: $foreign.element,
    elementKeyed: $foreign.elementKeyed,
    createContext: $foreign.createContext,
    contextProvider: $foreign.contextProvider,
    contextConsumer: $foreign.contextConsumer
};

},{"./foreign.js":"68m8k","../Data.Monoid/index.js":"94fxC","../Data.Semigroup/index.js":"4sNah"}],"68m8k":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$ae98 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$ae98.prelude(module);

try {
"use strict";
const React = require("react");
const createElement = React.createElement;
const Fragment = React.Fragment;
exports.empty = null;
exports.keyed = (key)=>(child)=>createElement(Fragment, {
            key: key
        }, child)
;
exports.element = (component)=>(props)=>Array.isArray(props.children) ? createElement.apply(null, [
            component,
            props
        ].concat(props.children)) : createElement(component, props)
;
exports.elementKeyed = (component)=>(props)=>createElement(component, props)
;
exports.fragment = (children)=>createElement.apply(null, [
        Fragment,
        null
    ].concat(children))
;
exports.createContext = (defaultValue)=>()=>React.createContext(defaultValue)
;
exports.contextProvider = (context)=>context.Provider
;
exports.contextConsumer = (context)=>context.Consumer
;

  $parcel$ReactRefreshHelpers$ae98.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"6TuXu","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J"}],"5V79J":[function(require,module,exports) {
"use strict";
var Refresh = require('react-refresh/runtime');
function debounce(func, delay) {
    var args;
    var timeout = undefined;
    return function(args1) {
        clearTimeout(timeout);
        timeout = setTimeout(function() {
            timeout = undefined;
            func.call(null, args1);
        }, delay);
    };
}
var enqueueUpdate = debounce(function() {
    Refresh.performReactRefresh();
}, 30); // Everthing below is either adapted or copied from
// https://github.com/facebook/metro/blob/61de16bd1edd7e738dd0311c89555a644023ab2d/packages/metro/src/lib/polyfills/require.js
// MIT License - Copyright (c) Facebook, Inc. and its affiliates.
module.exports.prelude = function(module) {
    window.$RefreshReg$ = function(type, id) {
        Refresh.register(type, module.id + ' ' + id);
    };
    window.$RefreshSig$ = Refresh.createSignatureFunctionForTransform;
};
module.exports.postlude = function(module) {
    if (isReactRefreshBoundary(module.exports)) {
        registerExportsForReactRefresh(module);
        if (module.hot) {
            module.hot.dispose(function(data) {
                if (Refresh.hasUnrecoverableErrors()) window.location.reload();
                data.prevExports = module.exports;
            });
            module.hot.accept(function(getParents) {
                var prevExports = module.hot.data.prevExports;
                var nextExports = module.exports; // Since we just executed the code for it, it's possible
                // that the new exports make it ineligible for being a boundary.
                var isNoLongerABoundary = !isReactRefreshBoundary(nextExports); // It can also become ineligible if its exports are incompatible
                // with the previous exports.
                // For example, if you add/remove/change exports, we'll want
                // to re-execute the importing modules, and force those components
                // to re-render. Similarly, if you convert a class component
                // to a function, we want to invalidate the boundary.
                var didInvalidate = shouldInvalidateReactRefreshBoundary(prevExports, nextExports);
                if (isNoLongerABoundary || didInvalidate) {
                    // We'll be conservative. The only case in which we won't do a full
                    // reload is if all parent modules are also refresh boundaries.
                    // In that case we'll add them to the current queue.
                    var parents = getParents();
                    if (parents.length === 0) {
                        // Looks like we bubbled to the root. Can't recover from that.
                        window.location.reload();
                        return;
                    }
                    return parents;
                }
                enqueueUpdate();
            });
        }
    }
};
function isReactRefreshBoundary(exports) {
    if (Refresh.isLikelyComponentType(exports)) return true;
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    return false;
    var hasExports = false;
    var areAllExportsComponents = true;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        hasExports = true;
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) // Don't invoke getters for CJS as they may have side effects.
        return false;
        var exportValue = exports[key];
        if (!Refresh.isLikelyComponentType(exportValue)) areAllExportsComponents = false;
    }
    return hasExports && areAllExportsComponents;
}
function shouldInvalidateReactRefreshBoundary(prevExports, nextExports) {
    var prevSignature = getRefreshBoundarySignature(prevExports);
    var nextSignature = getRefreshBoundarySignature(nextExports);
    if (prevSignature.length !== nextSignature.length) return true;
    for(var i = 0; i < nextSignature.length; i++){
        if (prevSignature[i] !== nextSignature[i]) return true;
    }
    return false;
} // When this signature changes, it's unsafe to stop at this refresh boundary.
function getRefreshBoundarySignature(exports) {
    var signature = [];
    signature.push(Refresh.getFamilyByType(exports));
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return signature;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        signature.push(key);
        signature.push(Refresh.getFamilyByType(exportValue));
    }
    return signature;
}
function registerExportsForReactRefresh(module) {
    var exports = module.exports, id = module.id;
    Refresh.register(exports, id + ' %exports%');
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        Refresh.register(exportValue, id + ' %exports% ' + key);
    }
}

},{"react-refresh/runtime":"fNmB3"}],"2jsDE":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var React_Basic = require("../React.Basic/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var unsafeCreateDOMComponent = $foreign.unsafeCreateDOMComponent_(React_Basic.element);
var semigroupCSS = new Data_Semigroup.Semigroup(function(a) {
    return function(b) {
        return $foreign.mergeStyles([
            b,
            a
        ]);
    };
});
var css = Unsafe_Coerce.unsafeCoerce;
var monoidCSS = new Data_Monoid.Monoid(function() {
    return semigroupCSS;
}, css({
}));
module.exports = {
    css: css,
    unsafeCreateDOMComponent: unsafeCreateDOMComponent,
    semigroupCSS: semigroupCSS,
    monoidCSS: monoidCSS,
    mergeStyles: $foreign.mergeStyles,
    unsafeCreateDOMComponent_: $foreign.unsafeCreateDOMComponent_
};

},{"./foreign.js":"hIEC8","../Data.Monoid/index.js":"94fxC","../Data.Semigroup/index.js":"4sNah","../React.Basic/index.js":"8GxaU","../Unsafe.Coerce/index.js":"6gO81"}],"hIEC8":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$6672 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$6672.prelude(module);

try {
"use strict";
const React = require("react");
exports.mergeStyles = (styles)=>Object.assign.apply(null, [
        {
        }
    ].concat(styles))
;
exports.unsafeCreateDOMComponent_ = (createElement)=>(el)=>{
        const flattenDataProp = (props, ref)=>{
            var data = null;
            if (props._data != null) {
                data = {
                    _data: undefined
                };
                Object.entries(props._data).forEach(function(entry) {
                    data["data-" + entry[0]] = entry[1];
                });
            }
            var aria = null;
            if (props._aria != null) {
                aria = {
                    _aria: undefined
                };
                Object.entries(props._aria).forEach(function(entry) {
                    aria["aria-" + entry[0]] = entry[1];
                });
            }
            return Object.assign({
                ref
            }, props, data, aria);
        };
        return ()=>{
            const c = React.forwardRef((props, ref)=>createElement(el)(flattenDataProp(props, ref))
            );
            c.displayName = el;
            return c;
        };
    }
;

  $parcel$ReactRefreshHelpers$6672.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"6TuXu","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J"}]},["2rAXy","9M0gR","fzhID"], "fzhID", "parcelRequire642a")

//# sourceMappingURL=index.56ae5a39.js.map
